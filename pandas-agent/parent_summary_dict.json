{"Input/output": "The pandas library in Python provides a wide range of functions for reading and writing data in various formats. These functions include loading pickled objects, reading delimited files, CSV files, fixed-width formatted lines, Excel files, JSON strings, HTML tables, XML documents, and more. There are also functions for working with HDFStore, feather-format objects, parquet objects, ORC objects, SAS files, SPSS files, SQL databases, Google BigQuery, and Stata files. Additionally, there are functions for creating table schemas, normalizing JSON data, rendering DataFrames to XML documents, and exporting DataFrames to Stata dta format. These functions allow for seamless data manipulation and analysis across different data sources and formats. ", "General functions": "The functions provided cover a wide range of data manipulation tasks in pandas. These include unpivoting a DataFrame from wide to long format, creating pivot tables, binning values, merging DataFrames, converting categorical variables, reshaping data, computing cross tabulations, discretizing data based on quantiles, concatenating pandas objects, detecting missing or non-missing values, converting data types, working with datetime data, inferring frequencies, evaluating expressions, guessing datetime formats, generating deterministic integers, hashing data, and building DataFrames from compatible sources. These functions provide a comprehensive toolkit for data analysis and manipulation in pandas. ", "Series": "The pandas library provides a wide range of functions for working with one-dimensional ndarrays with axis labels, such as time series. These functions allow for operations like returning the Series as an ndarray, checking for NaN values, getting the dtype object of the data, accessing specific elements, converting between different types, performing mathematical operations like addition, multiplication, division, and modulo, rounding values, comparing values, computing dot products, and more. Additionally, there are functions for memory usage, empty checks, copying data, and accessing specific rows and columns based on labels or positions. Overall, these functions offer comprehensive functionality for manipulating and analyzing one-dimensional data structures in pandas. The functions provided cover a wide range of operations on Series and DataFrames in Python. These functions include basic arithmetic operations such as division, subtraction, and exponentiation, as well as more complex operations like rolling window calculations, exponentially weighted calculations, and expanding window calculations. There are also functions for aggregation, mapping, and applying functions to Series. Additionally, there are functions for calculating statistics such as mean, median, mode, standard deviation, variance, and correlation. Other functions include checking for unique values, monotonicity, and boolean conditions. Overall, these functions provide a comprehensive toolkit for data manipulation and analysis in Python. The functions provided cover a wide range of operations that can be performed on Series and DataFrames in pandas. These functions include returning the number of unique elements, checking for monotonically increasing values, counting unique values, aligning objects, removing duplicate values, testing for equality between objects, selecting rows based on conditions, setting axis names, sampling items, truncating data, replacing values based on conditions, suffixing and prefixing labels, removing missing values, sorting, transforming, squeezing, unstacking, finding indices, repeating elements, comparing differences, modifying in place, and converting time series data to specified frequencies. These functions provide a comprehensive set of tools for data manipulation and analysis in pandas. The functions provided cover a wide range of operations on time-series data and string manipulation. These functions include shifting the index by a desired number of periods, selecting values at specific times of the day, resampling time-series data, localizing time zones, accessing datetime properties, and converting datetime objects to different formats. Additionally, there are functions for identifying specific date attributes such as month, day of the week, and leap year status. \n\nOn the string manipulation side, there are functions for capitalizing strings, concatenating strings with a separator, testing for patterns or regex, decoding strings, extracting elements based on position or key, padding strings, removing characters, splitting strings, replacing patterns, and more. These functions provide a comprehensive toolkit for working with time-series data and manipulating strings efficiently. The functions provided cover a wide range of operations that can be performed on Series and Index data in Python. These include converting strings to different cases, checking for specific character types within strings, working with categorical data, handling sparse values, manipulating datetime objects, dealing with time zones, and performing various string operations such as padding, counting occurrences, encoding, and regex matching. Additionally, there are functions for extracting specific elements from data structures, accessing global attributes, and working with different data types like PeriodArray and SparseSparse. Overall, these functions offer a comprehensive set of tools for data manipulation and analysis in Python. ", "DataFrame": "The pandas library provides a wide range of functions for working with tabular data. These functions include serialization to various file formats such as CSV, Excel, JSON, Feather, parquet, ORC, SQL databases, and Stata dta format. Additionally, there are functions for rendering data as HTML tables, LaTeX tables, and nested tables. The library also offers functions for manipulating data within DataFrames, such as accessing specific rows and columns, inferring data types, and performing mathematical operations like addition, subtraction, division, and exponentiation. Other functions include memory usage analysis, copying data, querying, and replacing values based on conditions. Overall, pandas provides a comprehensive set of tools for data manipulation and analysis. The functions available for DataFrame manipulation include getting the modulo, less than, less than or equal to, not equal to, addition, multiplication, floating division, matrix multiplication, subtraction, integer division, exponential power, greater than, greater than or equal to, equal to, updating null elements, applying functions along an axis, aggregating using operations, rolling window calculations, exponentially weighted calculations, absolute numeric values, checking if any element is True, computing pairwise correlation, counting non-NA cells, cumulative maximum, cumulative product, generating descriptive statistics, evaluating string operations, unbiased kurtosis, mean, minimum, fractional change, product of values, numerical data ranks, unbiased standard error of the mean, sum of values, unbiased variance, frequency of distinct rows, checking if all elements are True, trimming values, computing pairwise covariance, cumulative minimum, cumulative sum, discrete difference. The functions provided cover a wide range of operations that can be performed on a DataFrame in Python. These include returning the maximum, median, mode, product, and quantile values over a specified axis, as well as rounding values to a specific number of decimal places. Other functions involve calculating skew, standard deviation, and counting distinct elements. There are also functions for aligning, selecting, and removing duplicate rows, as well as testing for equality between objects. Time-based functions allow for selecting values at specific times of the day, while index-related functions involve setting, resetting, or renaming indices. Missing values can be handled by filling with the next valid observation, interpolation, or specified method. Additionally, there are functions for detecting, removing, and replacing missing values. Pivot tables, sorting, and reshaping operations are also available, along with functions for transposing, squeezing, and swapping levels in a MultiIndex. ", "pandas arrays, scalars, and data types": "The functions provided cover a wide range of functionalities related to handling dates, times, durations, and time zones in Pandas. These functions include creating arrays, working with different data types, checking for specific dates (such as first day of the month, quarter, or year), converting timestamps, and manipulating time zones. Additionally, there are functions for extracting specific components of dates and times, such as day of the week, day of the year, and hour of the day. The functions also allow for conversions between different time units, rounding timestamps, and working with timedelta objects. Overall, these functions provide comprehensive support for managing and manipulating date and time data within Pandas. The Pandas library provides a wide range of functions for handling different types of data. This includes functions for working with Period data, such as returning a formatted string representation of the Period.Pandas ExtensionArray, checking if an interval is open or closed on either side, and returning the midpoint of an interval. There are also functions for working with integer and floating point data, categorical data, sparse data, string data, and boolean data. Additionally, there are functions for working with dates and times, such as returning the day of the week, the day of the year, the number of days in a month, and checking if a date is the last day of the month, quarter, or year. Functions are also available for converting between different time zones, combining dates and times, and working with timedeltas. The functions provided in the list cover a wide range of functionalities related to handling different data types and structures in pandas. These functions include getting timestamps, checking leap years, extracting components of periods, working with intervals, categorical data, extension data types, and checking the data type of arrays or objects. Additionally, there are functions to check for specific data types such as real numbers, integers, booleans, floats, strings, and more. Overall, these functions provide a comprehensive set of tools for data manipulation and validation in pandas. ", "Index objects": "The functions provided in the list are related to manipulating and analyzing Index objects in Python. These functions include operations such as checking for duplicate values, data types, memory usage, truthiness, and specific value conditions. Other functions involve sorting, shifting, appending, intersecting, and computing indexes. Additionally, there are functions for handling missing values, mapping values, and creating new Index objects. Overall, these functions offer a wide range of capabilities for working with Index objects efficiently and effectively in Python. The functions provided cover a wide range of functionalities related to Index and Series manipulation in pandas. These include returning the minimum value of an Index, creating a new Index with selected values, finding unique values, counting unique values, removing NA/NaN values, detecting existing values, creating a Series with index keys as both index and values, finding indices for maintaining order, computing join_index and indexers, forming unions and symmetric differences of Index objects, returning locations of labels, calculating slice bounds, creating RangeIndex, working with Categorical Index, mapping values, renaming categories, adding/removing categories, checking equality of CategoricalIndex objects, working with IntervalIndex, checking for overlapping intervals, and creating MultiIndex objects. These functions provide a comprehensive set of tools for managing and manipulating index and categorical data structures in pandas. The functions provided in the list cover a wide range of operations related to MultiIndex manipulation, datetime handling, and timezone localization. \n\nFor MultiIndex operations, functions include converting a MultiIndex to an Index of Tuples, sorting at a specific level, swapping levels, creating a new MultiIndex with unused levels removed, slicing between labels or tuples, getting locations for labels or tuples, returning label values for a level, creating an object for multi-index slicing, converting lists of tuples to MultiIndex, creating a MultiIndex from a DataFrame, getting the levels and number of levels in a MultiIndex, returning dtypes as a Series, setting new codes, creating a DataFrame with MultiIndex levels as columns, removing levels, rearranging levels, deleting codes, appending Index options, and more.\n\nFor datetime operations, functions include getting the year, day, minutes, microseconds, date objects, time objects with timezones, ordinal day of the year, day of the week, quarter, first day of the month, quarter, year, leap year indicator, index locations of values at a specific time of day, converting times to midnight, localizing timezones, performing floor operations, returning month names, converting to a specific dtype resolution, returning datetime objects, creating a DataFrame with datetime Index, returning mean values, month, hours, seconds, nanoseconds, time objects, day of the week, timezone, frequency object, last day of the month, quarter, year, infer_freq string, index locations of values between specific times of day, and converting to Index using a specified date format. ", "Date offsets": "The functions described are related to date increments and frequencies. They include returning a string representing the frequency, base frequency, and extra parameters for the offset. There are functions to check if a timestamp occurs on the month, quarter, or year end or start. Additionally, there are functions to determine if a timestamp intersects with a specific frequency and if the frequency is a unit frequency. There are also DateOffset subclasses for business days, business hours, and custom business days, each with similar functions for frequency representation and timestamp occurrence checks. The functions provided in the list are related to determining various aspects of timestamps and frequencies. These functions include checking if a timestamp intersects with a specific frequency, if it occurs on the month, quarter, or year end or start, returning extra parameters for the offset, checking if the frequency is a unit frequency, and providing date offsets for different points in time. Additionally, there are functions to return strings representing the frequency and base frequency, as well as making copies of the frequency. Some functions are aliases for specific business days within a month. Overall, these functions offer a comprehensive set of tools for working with timestamps and frequencies in a program. The functions provided in the list are related to date offsets and frequencies. They include functions to determine if a timestamp occurs on the start, end, or specific points of a month, quarter, or year. There are also functions to return a dictionary of extra parameters for the offset, check if the frequency is a unit frequency, and provide a string representation of the frequency. Additionally, there are functions for custom business months and two DateOffset options per month repeating on the first and last days of the month. These functions cover a wide range of date-related operations and can be used to manipulate and analyze time series data effectively. The functions described include checking if a frequency is a unit frequency, determining if a timestamp occurs at the start or end of a month, quarter, or year, describing monthly dates, finding the last business day of each quarter, and checking if a timestamp intersects with a specific frequency. These functions also involve returning strings representing the frequency and base frequency, making copies of the frequency, and providing extra parameters for the offset. The functions provided are related to DateOffset increments between different time periods such as Quarter start dates, Quarter end dates, month start, month end, year start, and year end. These functions return boolean values to determine if a timestamp occurs on a specific date within these time periods. They also provide information about the frequency, base frequency, and extra parameters for the offset. Additionally, they check if the frequency is a unit frequency and if a timestamp intersects with the specified frequency. Overall, these functions help in analyzing and manipulating time-related data efficiently. The functions provided in the list describe various operations related to timestamps and frequencies. These functions include determining if a timestamp intersects with a specific frequency, checking if a timestamp occurs on the start or end of a month, quarter, or year, returning extra parameters for the offset, identifying unit frequencies, and providing information about different types of fiscal years such as the 52-53 week fiscal year and the 4-4-5 calendar. Additionally, the functions involve working with business quarter dates and incrementing between calendar year begin or end dates. The functions also include returning strings representing the frequency, base frequency, and making copies of the frequency. The functions provided include returning a boolean value indicating whether a timestamp occurs on the start of the year, month, or quarter, as well as on the end of the year, month, or quarter. There are functions to return a dictionary of extra parameters for an offset, a string representing the frequency, and a copy of the frequency. Additionally, there are functions to determine if a timestamp intersects with a specific frequency, the total number of nanoseconds, and attributes related to the offset. Some functions involve calculating the Easter holiday date using logic defined in dateutil. Overall, these functions cover a range of operations related to timestamps, frequencies, and offsets. The functions provided are related to timestamp manipulation and frequency checking. They include functions to determine if a timestamp occurs on the start, end, or specific points of a month, quarter, or year. Additionally, there are functions to offset timestamps by different units such as seconds, milliseconds, microseconds, and nanoseconds. Each function returns specific information such as boolean values, dictionaries of extra parameters, total nanoseconds, and representations of frequency. The functions cover a wide range of timestamp-related operations and provide flexibility in handling time-based data. ", "Window": "The functions provided cover a wide range of rolling, expanding, and exponential weighted moment calculations for various statistical measures. These include calculating rolling counts, means, variances, minimums, correlations, skewness, custom aggregations, quantiles, ranks, sums, medians, standard deviations, maximums, sample covariances, Fisher\u2019s definition of kurtosis without bias, and standard errors of the mean. Additionally, there are functions for weighted window calculations and expanding calculations for the same statistical measures. The ewm functions focus on exponential weighted moment calculations for means, standard deviations, sample correlations, sums, variances, and sample covariances. Lastly, there are functions for creating window boundaries based on non-fixed offsets and fixed-length windows that include the current row. ", "GroupBy": "The Groupby iterator is a powerful tool that allows the user to specify a groupby instruction for an object. It provides various functionalities such as constructing a DataFrame from a group with a provided name, helper for column-specific aggregation with control over output column names, applying a function group-wise and combining the results together, aggregating using one or more operations over the specified axis, calling a function producing a same-indexed Series or DataFrame on each group, filtering elements from groups that don\u2019t satisfy a criterion, computing pairwise correlation and covariance of columns, calculating cumulative max, product, min, and sum for each group, generating descriptive statistics, filling values forward or backward, computing the first and last entry of each column within each group, computing mean, median, standard error, standard deviation, and variance of groups, providing the rank of values within each group, returning a rolling grouper for rolling functionality per group, computing group sizes, returning elements in given positional indices in each group, checking if all or any values in the group are truthful, computing count of group values, numbering each item in each group, calculating the first discrete difference of an element, filling NA/NaN values using a specified method within groups, returning the first n rows of each group, returning the index of the first occurrence of minimum or maximum over a requested axis, and calculating the pct_change of each value to the previous entry in the group. ", "Resampling": "The functions provided allow for grouping data by different criteria, such as group names or labels, and then performing various operations within each group. These operations include aggregating data using different functions, applying functions to each group, filling missing values, resampling data, interpolating values, computing statistics like count, mean, median, max, min, standard deviation, variance, sum, and more within each group. Additionally, functions are available to compute unique elements, quantiles, and other summary statistics within each group. ", "Style": "The Styler function provides a wide range of capabilities for styling DataFrames or Series in Python. It allows for styling with HTML and CSS, LaTeX, and text formats. Users can apply CSS-styling functions column-wise, row-wise, or table-wise, as well as to index or column headers. The function also enables users to format text display values, relabel index or column header keys, and combine multiple Stylers into a single table. Additional features include setting table styles, generating tooltips, adding CSS permanently, and applying styles elementwise. Users can also highlight missing values, minimum and maximum values, defined ranges, and values based on quantiles. The function supports gradient coloring for text and background, drawing bar charts in cell backgrounds, and exporting styles. Additionally, users can reset styles, set class attributes, table attributes, captions, and CSS properties for specific subsets. ", "Plotting": "The functions provided cover a wide range of plotting and data visualization tasks using matplotlib and pandas. These include generating plots for visualizing clusters of multivariate data, autocorrelation plots for time series, bootstrap plots for mean, median, and mid-range statistics, box plots from DataFrame columns, lag plots for time series, parallel coordinates plotting, scatter plots matrix, and plotting multidimensional datasets in 2D. Additionally, there are functions for managing pandas plotting options, registering formatters and converters with matplotlib, and converting DataFrames and Series to matplotlib tables. ", "Options and settings": "The functions provided include one that prints the description for one or more registered options, another that retrieves the value of a specified option, a context manager for temporarily setting options in a with statement context, a function to reset one or more options to their default value, a function to set the value of a specified option, and a function to format float representation in a DataFrame with SI notation. These functions collectively offer a range of options for managing and manipulating settings and values within a program. ", "Extensions": "The functions include registering an ExtensionType with pandas as a class decorator, registering custom accessors on DataFrame, Series, and Index objects, creating a custom data type to be paired with an ExtensionArray, defining an abstract base class for custom 1-D array types, creating a pandas ExtensionArray for NumPy data, and checking if an indexer is a valid array indexer for an array. These functions allow for extending the functionality of pandas with custom data types and accessors. ", "Testing": "The functions in the list cover a wide range of error handling, warning messages, and exceptions that can occur when working with pandas. These include checking for equality between DataFrames, Indexes, Series, and ExtensionArrays, raising errors for bad syntax in SQL queries, encountering empty data or headers in CSV files, mismatched dimensions during indexing, invalid comparisons, unsupported operations on np.ndarrays, unsupported engine routines, unsupported clipboard functionality, and more. Additionally, warnings are raised for issues such as reading partial labeled Stata files, different dtypes in columns, timedelta values that cannot be represented, conflicts in index attributes, and more. Overall, these functions aim to provide informative messages to users when encountering various issues while working with pandas. ", "Missing values": "List of function descriptions: \n- alias of <NA>\n- alias of NaT\n\nSummary: The functions \"alias of <NA>\" and \"alias of NaT\" are used to create aliases for missing values in data, with \"<NA>\" representing missing values in R and \"NaT\" representing missing values in Python. These aliases can be used to handle missing data in a more intuitive and efficient way. "}