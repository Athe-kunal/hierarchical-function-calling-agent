{
    "sklearn.html": {
        "functions": [
            {
                "defaults": [
                    {
                        "func_name": "config_context",
                        "func_desc": "Context manager for global scikit-learn configuration.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.config_context.html#sklearn.config_context",
                        "function_definitions": {
                            "function_name": "config_context",
                            "full_function": "sklearn.config_context(*, assume_finite=None, working_memory=None, print_changed_only=None, display=None, pairwise_dist_chunk_size=None, enable_cython_pairwise_dist=None, array_api_dispatch=None, transform_output=None, enable_metadata_routing=None, skip_parameter_validation=None)",
                            "function_text": "Context manager for global scikit-learn configuration.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/array_api.html#array-api",
                            "parameter_names_desc": [
                                {
                                    "param_name": "assume_finite",
                                    "param_type": "bool, default=None",
                                    "param_desc": "If True, validation for finiteness will be skipped,\nsaving time, but leading to potential crashes. If\nFalse, validation for finiteness will be performed,\navoiding error. If None, the existing value won\u2019t change.\nThe default value is False.\n"
                                },
                                {
                                    "param_name": "working_memory",
                                    "param_type": "int, default=None",
                                    "param_desc": "If set, scikit-learn will attempt to limit the size of temporary arrays\nto this number of MiB (per job when parallelised), often saving both\ncomputation time and memory on expensive operations that can be\nperformed in chunks. If None, the existing value won\u2019t change.\nThe default value is 1024.\n"
                                },
                                {
                                    "param_name": "print_changed_only",
                                    "param_type": "bool, default=None",
                                    "param_desc": "If True, only the parameters that were set to non-default\nvalues will be printed when printing an estimator. For example,\nprint(SVC()) while True will only print \u2018SVC()\u2019, but would print\n\u2018SVC(C=1.0, cache_size=200, \u2026)\u2019 with all the non-changed parameters\nwhen False. If None, the existing value won\u2019t change.\nThe default value is True.\n\nChanged in version 0.23: Default changed from False to True.\n\n"
                                },
                                {
                                    "param_name": "display",
                                    "param_type": "{\u2018text\u2019, \u2018diagram\u2019}, default=None",
                                    "param_desc": "If \u2018diagram\u2019, estimators will be displayed as a diagram in a Jupyter\nlab or notebook context. If \u2018text\u2019, estimators will be displayed as\ntext. If None, the existing value won\u2019t change.\nThe default value is \u2018diagram\u2019.\n\nAdded in version 0.23.\n\n"
                                },
                                {
                                    "param_name": "pairwise_dist_chunk_size",
                                    "param_type": "int, default=None",
                                    "param_desc": "The number of row vectors per chunk for the accelerated pairwise-\ndistances reduction backend. Default is 256 (suitable for most of\nmodern laptops\u2019 caches and architectures).\nIntended for easier benchmarking and testing of scikit-learn internals.\nEnd users are not expected to benefit from customizing this configuration\nsetting.\n\nAdded in version 1.1.\n\n"
                                },
                                {
                                    "param_name": "enable_cython_pairwise_dist",
                                    "param_type": "bool, default=None",
                                    "param_desc": "Use the accelerated pairwise-distances reduction backend when\npossible. Global default: True.\nIntended for easier benchmarking and testing of scikit-learn internals.\nEnd users are not expected to benefit from customizing this configuration\nsetting.\n\nAdded in version 1.1.\n\n"
                                },
                                {
                                    "param_name": "array_api_dispatch",
                                    "param_type": "bool, default=None",
                                    "param_desc": "Use Array API dispatching when inputs follow the Array API standard.\nDefault is False.\nSee the User Guide for more details.\n\nAdded in version 1.2.\n\n"
                                },
                                {
                                    "param_name": "transform_output",
                                    "param_type": "str, default=None",
                                    "param_desc": "Configure output of transform and fit_transform.\nSee Introducing the set_output API\nfor an example on how to use the API.\n\n\"default\": Default output format of a transformer\n\"pandas\": DataFrame output\n\"polars\": Polars output\nNone: Transform configuration is unchanged\n\n\nAdded in version 1.2.\n\n\nAdded in version 1.4: \"polars\" option was added.\n\n"
                                },
                                {
                                    "param_name": "enable_metadata_routing",
                                    "param_type": "bool, default=None",
                                    "param_desc": "Enable metadata routing. By default this feature is disabled.\nRefer to metadata routing user guide for more\ndetails.\n\nTrue: Metadata routing is enabled\nFalse: Metadata routing is disabled, use the old syntax.\nNone: Configuration is unchanged\n\n\nAdded in version 1.3.\n\n"
                                },
                                {
                                    "param_name": "skip_parameter_validation",
                                    "param_type": "bool, default=None",
                                    "param_desc": "If True, disable the validation of the hyper-parameters\u2019 types and values in\nthe fit method of estimators and for arguments passed to public helper\nfunctions. It can save time in some situations but can lead to low level\ncrashes and exceptions with confusing error messages.\nNote that for data parameters, such as X and y, only type validation is\nskipped but validation with check_array will continue to run.\n\nAdded in version 1.3.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "config_context",
                            "descriptions": "Context manager for global scikit-learn configuration.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "assume_finite": {
                                        "type": "boolean",
                                        "description": "bool, default=None. If True, validation for finiteness will be skipped,\nsaving time, but leading to potential crashes. If\nFalse, validation for finiteness will be performed,\navoiding error. If None, the existing value won\u2019t change.\nThe default value is False.\n"
                                    },
                                    "working_memory": {
                                        "type": "integer",
                                        "description": "int, default=None. If set, scikit-learn will attempt to limit the size of temporary arrays\nto this number of MiB (per job when parallelised), often saving both\ncomputation time and memory on expensive operations that can be\nperformed in chunks. If None, the existing value won\u2019t change.\nThe default value is 1024.\n"
                                    },
                                    "print_changed_only": {
                                        "type": "boolean",
                                        "description": "bool, default=None. If True, only the parameters that were set to non-default\nvalues will be printed when printing an estimator. For example,\nprint(SVC()) while True will only print \u2018SVC()\u2019, but would print\n\u2018SVC(C=1.0, cache_size=200, \u2026)\u2019 with all the non-changed parameters\nwhen False. If None, the existing value won\u2019t change.\nThe default value is True.\n\nChanged in version 0.23: Default changed from False to True.\n\n"
                                    },
                                    "display": {
                                        "type": "string",
                                        "enum": [
                                            "text",
                                            " diagram"
                                        ],
                                        "description": "{\u2018text\u2019, \u2018diagram\u2019}, default=None. If \u2018diagram\u2019, estimators will be displayed as a diagram in a Jupyter\nlab or notebook context. If \u2018text\u2019, estimators will be displayed as\ntext. If None, the existing value won\u2019t change.\nThe default value is \u2018diagram\u2019.\n\nAdded in version 0.23.\n\n"
                                    },
                                    "pairwise_dist_chunk_size": {
                                        "type": "integer",
                                        "description": "int, default=None. The number of row vectors per chunk for the accelerated pairwise-\ndistances reduction backend. Default is 256 (suitable for most of\nmodern laptops\u2019 caches and architectures).\nIntended for easier benchmarking and testing of scikit-learn internals.\nEnd users are not expected to benefit from customizing this configuration\nsetting.\n\nAdded in version 1.1.\n\n"
                                    },
                                    "enable_cython_pairwise_dist": {
                                        "type": "boolean",
                                        "description": "bool, default=None. Use the accelerated pairwise-distances reduction backend when\npossible. Global default: True.\nIntended for easier benchmarking and testing of scikit-learn internals.\nEnd users are not expected to benefit from customizing this configuration\nsetting.\n\nAdded in version 1.1.\n\n"
                                    },
                                    "array_api_dispatch": {
                                        "type": "boolean",
                                        "description": "bool, default=None. Use Array API dispatching when inputs follow the Array API standard.\nDefault is False.\nSee the User Guide for more details.\n\nAdded in version 1.2.\n\n"
                                    },
                                    "transform_output": {
                                        "type": "string",
                                        "description": "str, default=None. Configure output of transform and fit_transform.\nSee Introducing the set_output API\nfor an example on how to use the API.\n\n\"default\": Default output format of a transformer\n\"pandas\": DataFrame output\n\"polars\": Polars output\nNone: Transform configuration is unchanged\n\n\nAdded in version 1.2.\n\n\nAdded in version 1.4: \"polars\" option was added.\n\n"
                                    },
                                    "enable_metadata_routing": {
                                        "type": "boolean",
                                        "description": "bool, default=None. Enable metadata routing. By default this feature is disabled.\nRefer to metadata routing user guide for more\ndetails.\n\nTrue: Metadata routing is enabled\nFalse: Metadata routing is disabled, use the old syntax.\nNone: Configuration is unchanged\n\n\nAdded in version 1.3.\n\n"
                                    },
                                    "skip_parameter_validation": {
                                        "type": "boolean",
                                        "description": "bool, default=None. If True, disable the validation of the hyper-parameters\u2019 types and values in\nthe fit method of estimators and for arguments passed to public helper\nfunctions. It can save time in some situations but can lead to low level\ncrashes and exceptions with confusing error messages.\nNote that for data parameters, such as X and y, only type validation is\nskipped but validation with check_array will continue to run.\n\nAdded in version 1.3.\n\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "set_config",
                        "func_desc": "Set global scikit-learn configuration.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.set_config.html#sklearn.set_config",
                        "function_definitions": {
                            "function_name": "set_config",
                            "full_function": "sklearn.set_config(assume_finite=None, working_memory=None, print_changed_only=None, display=None, pairwise_dist_chunk_size=None, enable_cython_pairwise_dist=None, array_api_dispatch=None, transform_output=None, enable_metadata_routing=None, skip_parameter_validation=None)",
                            "function_text": "Set global scikit-learn configuration. Added in version 0.19.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/array_api.html#array-api",
                            "parameter_names_desc": [
                                {
                                    "param_name": "assume_finite",
                                    "param_type": "bool, default=None",
                                    "param_desc": "If True, validation for finiteness will be skipped,\nsaving time, but leading to potential crashes. If\nFalse, validation for finiteness will be performed,\navoiding error.  Global default: False.\n\nAdded in version 0.19.\n\n"
                                },
                                {
                                    "param_name": "working_memory",
                                    "param_type": "int, default=None",
                                    "param_desc": "If set, scikit-learn will attempt to limit the size of temporary arrays\nto this number of MiB (per job when parallelised), often saving both\ncomputation time and memory on expensive operations that can be\nperformed in chunks. Global default: 1024.\n\nAdded in version 0.20.\n\n"
                                },
                                {
                                    "param_name": "print_changed_only",
                                    "param_type": "bool, default=None",
                                    "param_desc": "If True, only the parameters that were set to non-default\nvalues will be printed when printing an estimator. For example,\nprint(SVC()) while True will only print \u2018SVC()\u2019 while the default\nbehaviour would be to print \u2018SVC(C=1.0, cache_size=200, \u2026)\u2019 with\nall the non-changed parameters.\n\nAdded in version 0.21.\n\n"
                                },
                                {
                                    "param_name": "display",
                                    "param_type": "{\u2018text\u2019, \u2018diagram\u2019}, default=None",
                                    "param_desc": "If \u2018diagram\u2019, estimators will be displayed as a diagram in a Jupyter\nlab or notebook context. If \u2018text\u2019, estimators will be displayed as\ntext. Default is \u2018diagram\u2019.\n\nAdded in version 0.23.\n\n"
                                },
                                {
                                    "param_name": "pairwise_dist_chunk_size",
                                    "param_type": "int, default=None",
                                    "param_desc": "The number of row vectors per chunk for the accelerated pairwise-\ndistances reduction backend. Default is 256 (suitable for most of\nmodern laptops\u2019 caches and architectures).\nIntended for easier benchmarking and testing of scikit-learn internals.\nEnd users are not expected to benefit from customizing this configuration\nsetting.\n\nAdded in version 1.1.\n\n"
                                },
                                {
                                    "param_name": "enable_cython_pairwise_dist",
                                    "param_type": "bool, default=None",
                                    "param_desc": "Use the accelerated pairwise-distances reduction backend when\npossible. Global default: True.\nIntended for easier benchmarking and testing of scikit-learn internals.\nEnd users are not expected to benefit from customizing this configuration\nsetting.\n\nAdded in version 1.1.\n\n"
                                },
                                {
                                    "param_name": "array_api_dispatch",
                                    "param_type": "bool, default=None",
                                    "param_desc": "Use Array API dispatching when inputs follow the Array API standard.\nDefault is False.\nSee the User Guide for more details.\n\nAdded in version 1.2.\n\n"
                                },
                                {
                                    "param_name": "transform_output",
                                    "param_type": "str, default=None",
                                    "param_desc": "Configure output of transform and fit_transform.\nSee Introducing the set_output API\nfor an example on how to use the API.\n\n\"default\": Default output format of a transformer\n\"pandas\": DataFrame output\n\"polars\": Polars output\nNone: Transform configuration is unchanged\n\n\nAdded in version 1.2.\n\n\nAdded in version 1.4: \"polars\" option was added.\n\n"
                                },
                                {
                                    "param_name": "enable_metadata_routing",
                                    "param_type": "bool, default=None",
                                    "param_desc": "Enable metadata routing. By default this feature is disabled.\nRefer to metadata routing user guide for more\ndetails.\n\nTrue: Metadata routing is enabled\nFalse: Metadata routing is disabled, use the old syntax.\nNone: Configuration is unchanged\n\n\nAdded in version 1.3.\n\n"
                                },
                                {
                                    "param_name": "skip_parameter_validation",
                                    "param_type": "bool, default=None",
                                    "param_desc": "If True, disable the validation of the hyper-parameters\u2019 types and values in\nthe fit method of estimators and for arguments passed to public helper\nfunctions. It can save time in some situations but can lead to low level\ncrashes and exceptions with confusing error messages.\nNote that for data parameters, such as X and y, only type validation is\nskipped but validation with check_array will continue to run.\n\nAdded in version 1.3.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "set_config",
                            "descriptions": "Set global scikit-learn configuration. Added in version 0.19.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "assume_finite": {
                                        "type": "boolean",
                                        "description": "bool, default=None. If True, validation for finiteness will be skipped,\nsaving time, but leading to potential crashes. If\nFalse, validation for finiteness will be performed,\navoiding error.  Global default: False.\n\nAdded in version 0.19.\n\n"
                                    },
                                    "working_memory": {
                                        "type": "integer",
                                        "description": "int, default=None. If set, scikit-learn will attempt to limit the size of temporary arrays\nto this number of MiB (per job when parallelised), often saving both\ncomputation time and memory on expensive operations that can be\nperformed in chunks. Global default: 1024.\n\nAdded in version 0.20.\n\n"
                                    },
                                    "print_changed_only": {
                                        "type": "boolean",
                                        "description": "bool, default=None. If True, only the parameters that were set to non-default\nvalues will be printed when printing an estimator. For example,\nprint(SVC()) while True will only print \u2018SVC()\u2019 while the default\nbehaviour would be to print \u2018SVC(C=1.0, cache_size=200, \u2026)\u2019 with\nall the non-changed parameters.\n\nAdded in version 0.21.\n\n"
                                    },
                                    "display": {
                                        "type": "string",
                                        "enum": [
                                            "text",
                                            " diagram"
                                        ],
                                        "description": "{\u2018text\u2019, \u2018diagram\u2019}, default=None. If \u2018diagram\u2019, estimators will be displayed as a diagram in a Jupyter\nlab or notebook context. If \u2018text\u2019, estimators will be displayed as\ntext. Default is \u2018diagram\u2019.\n\nAdded in version 0.23.\n\n"
                                    },
                                    "pairwise_dist_chunk_size": {
                                        "type": "integer",
                                        "description": "int, default=None. The number of row vectors per chunk for the accelerated pairwise-\ndistances reduction backend. Default is 256 (suitable for most of\nmodern laptops\u2019 caches and architectures).\nIntended for easier benchmarking and testing of scikit-learn internals.\nEnd users are not expected to benefit from customizing this configuration\nsetting.\n\nAdded in version 1.1.\n\n"
                                    },
                                    "enable_cython_pairwise_dist": {
                                        "type": "boolean",
                                        "description": "bool, default=None. Use the accelerated pairwise-distances reduction backend when\npossible. Global default: True.\nIntended for easier benchmarking and testing of scikit-learn internals.\nEnd users are not expected to benefit from customizing this configuration\nsetting.\n\nAdded in version 1.1.\n\n"
                                    },
                                    "array_api_dispatch": {
                                        "type": "boolean",
                                        "description": "bool, default=None. Use Array API dispatching when inputs follow the Array API standard.\nDefault is False.\nSee the User Guide for more details.\n\nAdded in version 1.2.\n\n"
                                    },
                                    "transform_output": {
                                        "type": "string",
                                        "description": "str, default=None. Configure output of transform and fit_transform.\nSee Introducing the set_output API\nfor an example on how to use the API.\n\n\"default\": Default output format of a transformer\n\"pandas\": DataFrame output\n\"polars\": Polars output\nNone: Transform configuration is unchanged\n\n\nAdded in version 1.2.\n\n\nAdded in version 1.4: \"polars\" option was added.\n\n"
                                    },
                                    "enable_metadata_routing": {
                                        "type": "boolean",
                                        "description": "bool, default=None. Enable metadata routing. By default this feature is disabled.\nRefer to metadata routing user guide for more\ndetails.\n\nTrue: Metadata routing is enabled\nFalse: Metadata routing is disabled, use the old syntax.\nNone: Configuration is unchanged\n\n\nAdded in version 1.3.\n\n"
                                    },
                                    "skip_parameter_validation": {
                                        "type": "boolean",
                                        "description": "bool, default=None. If True, disable the validation of the hyper-parameters\u2019 types and values in\nthe fit method of estimators and for arguments passed to public helper\nfunctions. It can save time in some situations but can lead to low level\ncrashes and exceptions with confusing error messages.\nNote that for data parameters, such as X and y, only type validation is\nskipped but validation with check_array will continue to run.\n\nAdded in version 1.3.\n\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "get_config",
                        "func_desc": "Retrieve current values for configuration set by set_config.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.get_config.html#sklearn.get_config",
                        "function_definitions": {
                            "function_name": "get_config",
                            "full_function": "sklearn.get_config()",
                            "function_text": "Retrieve current values for configuration set by set_config.",
                            "func_text_user_guide": "sklearn.set_config.html#sklearn.set_config",
                            "parameter_names_desc": []
                        },
                        "function_calling": {}
                    },
                    {
                        "func_name": "show_versions",
                        "func_desc": "Print useful debugging information\"",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.show_versions.html#sklearn.show_versions",
                        "function_definitions": {
                            "function_name": "show_versions",
                            "full_function": "sklearn.show_versions()",
                            "function_text": "Print useful debugging information\u201d Added in version 0.20. Examples",
                            "func_text_user_guide": "",
                            "parameter_names_desc": []
                        },
                        "function_calling": {}
                    }
                ]
            }
        ],
        "name": "sklearn",
        "url": "https://scikit-learn.org/stable/api/sklearn.html"
    },
    "sklearn.base.html": {
        "functions": [
            {
                "defaults": [
                    {
                        "func_name": "BaseEstimator",
                        "func_desc": "Base class for all estimators in scikit-learn.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.base.BaseEstimator.html#sklearn.base.BaseEstimator",
                        "function_definitions": {
                            "function_name": "BaseEstimator",
                            "full_function": "class sklearn.base.BaseEstimator",
                            "function_text": "Base class for all estimators in scikit-learn. Inheriting from this class provides default implementations of: setting and getting parameters used by GridSearchCV and friends; textual and HTML representation displayed in terminals and IDEs; estimator serialization; parameters validation; data validation; feature names validation. Read more in the User Guide. Notes All estimators should specify all the parameters that can be set\nat the class level in their __init__ as explicit keyword\narguments (no *args or **kwargs). Examples Get metadata routing of this object. Please check User Guide on how the routing\nmechanism works.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/developers/develop.html#rolling-your-own-estimator",
                            "parameter_names_desc": []
                        },
                        "function_calling": {}
                    },
                    {
                        "func_name": "ClassNamePrefixFeaturesOutMixin",
                        "func_desc": "Mixin class for transformers that generate their own names by prefixing.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin.html#sklearn.base.ClassNamePrefixFeaturesOutMixin",
                        "function_definitions": {
                            "function_name": "ClassNamePrefixFeaturesOutMixin",
                            "full_function": "class sklearn.base.ClassNamePrefixFeaturesOutMixin",
                            "function_text": "Mixin class for transformers that generate their own names by prefixing. This mixin is useful when the transformer needs to generate its own feature\nnames out, such as PCA. For example, if\nPCA outputs 3 features, then the generated feature\nnames out are: [\"pca0\", \"pca1\", \"pca2\"]. This mixin assumes that a _n_features_out attribute is defined when the\ntransformer is fitted. _n_features_out is the number of output features\nthat the transformer will return in transform of fit_transform. Examples Get output feature names for transformation. The feature names out will prefixed by the lowercased class name. For\nexample, if the transformer outputs 3 features, then the feature names\nout are: [\"class_name0\", \"class_name1\", \"class_name2\"].",
                            "func_text_user_guide": "sklearn.decomposition.PCA.html#sklearn.decomposition.PCA",
                            "parameter_names_desc": [
                                {
                                    "param_name": "input_features",
                                    "param_type": "array-like of str or None, default=None",
                                    "param_desc": "Only used to validate feature names with the names seen in fit.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "ClassNamePrefixFeaturesOutMixin",
                            "descriptions": "Mixin class for transformers that generate their own names by prefixing. This mixin is useful when the transformer needs to generate its own feature\nnames out, such as PCA. For example, if\nPCA outputs 3 features, then the generated feature\nnames out are: [\"pca0\", \"pca1\", \"pca2\"]. This mixin assumes that a _n_features_out attribute is defined when the\ntransformer is fitted. _n_features_out is the number of output features\nthat the transformer will return in transform of fit_transform. Examples Get output feature names for transformation. The feature names out will prefixed by the lowercased class name. For\nexample, if the transformer outputs 3 features, then the feature names\nout are: [\"class_name0\", \"class_name1\", \"class_name2\"].",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "input_features": {
                                        "type": "string",
                                        "description": "array-like of str or None, default=None. Only used to validate feature names with the names seen in fit.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "ClusterMixin",
                        "func_desc": "Mixin class for all cluster estimators in scikit-learn.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.base.ClusterMixin.html#sklearn.base.ClusterMixin",
                        "function_definitions": {
                            "function_name": "ClusterMixin",
                            "full_function": "class sklearn.base.ClusterMixin",
                            "function_text": "Mixin class for all cluster estimators in scikit-learn. _estimator_type class attribute defaulting to \"clusterer\"; fit_predict method returning the cluster labels associated to each sample. Examples Perform clustering on X and returns cluster labels.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples, n_features)",
                                    "param_desc": "Input data.\n"
                                },
                                {
                                    "param_name": "y",
                                    "param_type": "Ignored",
                                    "param_desc": "Not used, present for API consistency by convention.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "ClusterMixin",
                            "descriptions": "Mixin class for all cluster estimators in scikit-learn. _estimator_type class attribute defaulting to \"clusterer\"; fit_predict method returning the cluster labels associated to each sample. Examples Perform clustering on X and returns cluster labels.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_features). Input data.\n"
                                    },
                                    "y": {
                                        "type": "Ignored",
                                        "description": "Ignored. Not used, present for API consistency by convention.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "MetaEstimatorMixin",
                        "func_desc": "Mixin class for all meta estimators in scikit-learn.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.base.MetaEstimatorMixin.html#sklearn.base.MetaEstimatorMixin",
                        "function_definitions": {
                            "function_name": "MetaEstimatorMixin",
                            "full_function": "class sklearn.base.MetaEstimatorMixin",
                            "function_text": "Mixin class for all meta estimators in scikit-learn. This mixin defines the following functionality: define _required_parameters that specify the mandatory estimator parameter. Examples",
                            "func_text_user_guide": "",
                            "parameter_names_desc": []
                        },
                        "function_calling": {}
                    },
                    {
                        "func_name": "OutlierMixin",
                        "func_desc": "Mixin class for all outlier detection estimators in scikit-learn.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.base.OutlierMixin.html#sklearn.base.OutlierMixin",
                        "function_definitions": {
                            "function_name": "OutlierMixin",
                            "full_function": "class sklearn.base.OutlierMixin",
                            "function_text": "Mixin class for all outlier detection estimators in scikit-learn. This mixin defines the following functionality: _estimator_type class attribute defaulting to outlier_detector; fit_predict method that default to fit and predict. Examples Perform fit on X and returns labels for X. Returns -1 for outliers and 1 for inliers.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "The input samples.\n"
                                },
                                {
                                    "param_name": "y",
                                    "param_type": "Ignored",
                                    "param_desc": "Not used, present for API consistency by convention.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "OutlierMixin",
                            "descriptions": "Mixin class for all outlier detection estimators in scikit-learn. This mixin defines the following functionality: _estimator_type class attribute defaulting to outlier_detector; fit_predict method that default to fit and predict. Examples Perform fit on X and returns labels for X. Returns -1 for outliers and 1 for inliers.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). The input samples.\n"
                                    },
                                    "y": {
                                        "type": "Ignored",
                                        "description": "Ignored. Not used, present for API consistency by convention.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "TransformerMixin",
                        "func_desc": "Mixin class for all transformers in scikit-learn.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.base.TransformerMixin.html#sklearn.base.TransformerMixin",
                        "function_definitions": {
                            "function_name": "TransformerMixin",
                            "full_function": "class sklearn.base.TransformerMixin",
                            "function_text": "Mixin class for all transformers in scikit-learn. This mixin defines the following functionality: a fit_transform method that delegates to fit and transform; a set_output method to output X as a specific container type. If get_feature_names_out is defined, then BaseEstimator will\nautomatically wrap transform and fit_transform to follow the set_output\nAPI. See the Developer API for set_output for details. OneToOneFeatureMixin and\nClassNamePrefixFeaturesOutMixin are helpful mixins for\ndefining get_feature_names_out. Examples Fit to data, then transform it. Fits transformer to X and y with optional parameters fit_params\nand returns a transformed version of X.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/glossary.html#term-get_feature_names_out",
                            "parameter_names_desc": [
                                {
                                    "param_name": "transform",
                                    "param_type": "{\u201cdefault\u201d, \u201cpandas\u201d, \u201cpolars\u201d}, default=None",
                                    "param_desc": "Configure output of transform and fit_transform.\n\n\"default\": Default output format of a transformer\n\"pandas\": DataFrame output\n\"polars\": Polars output\nNone: Transform configuration is unchanged\n\n\nAdded in version 1.4: \"polars\" option was added.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "TransformerMixin",
                            "descriptions": "Mixin class for all transformers in scikit-learn. This mixin defines the following functionality: a fit_transform method that delegates to fit and transform; a set_output method to output X as a specific container type. If get_feature_names_out is defined, then BaseEstimator will\nautomatically wrap transform and fit_transform to follow the set_output\nAPI. See the Developer API for set_output for details. OneToOneFeatureMixin and\nClassNamePrefixFeaturesOutMixin are helpful mixins for\ndefining get_feature_names_out. Examples Fit to data, then transform it. Fits transformer to X and y with optional parameters fit_params\nand returns a transformed version of X.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "transform": {
                                        "type": "{\u201cdefault\u201d, \u201cpandas\u201d, \u201cpolars\u201d}, default=None",
                                        "description": "{\u201cdefault\u201d, \u201cpandas\u201d, \u201cpolars\u201d}, default=None. Configure output of transform and fit_transform.\n\n\"default\": Default output format of a transformer\n\"pandas\": DataFrame output\n\"polars\": Polars output\nNone: Transform configuration is unchanged\n\n\nAdded in version 1.4: \"polars\" option was added.\n\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "is_classifier",
                        "func_desc": "Return True if the given estimator is (probably) a classifier.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.base.is_classifier.html#sklearn.base.is_classifier",
                        "function_definitions": {
                            "function_name": "is_classifier",
                            "full_function": "sklearn.base.is_classifier(estimator)",
                            "function_text": "Return True if the given estimator is (probably) a classifier.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "estimator",
                                    "param_type": "object",
                                    "param_desc": "Estimator object to test.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "is_classifier",
                            "descriptions": "Return True if the given estimator is (probably) a classifier.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "estimator": {
                                        "type": "object",
                                        "description": "object. Estimator object to test.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "BiclusterMixin",
                        "func_desc": "Mixin class for all bicluster estimators in scikit-learn.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.base.BiclusterMixin.html#sklearn.base.BiclusterMixin",
                        "function_definitions": {
                            "function_name": "BiclusterMixin",
                            "full_function": "class sklearn.base.BiclusterMixin",
                            "function_text": "Mixin class for all bicluster estimators in scikit-learn. This mixin defines the following functionality: biclusters_ property that returns the row and column indicators; get_indices method that returns the row and column indices of a bicluster; get_shape method that returns the shape of a bicluster; get_submatrix method that returns the submatrix corresponding to a bicluster. Examples Convenient way to get row and column indicators together. Returns the rows_ and columns_ members. Row and column indices of the i\u2019th bicluster. Only works if rows_ and columns_ attributes exist.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "i",
                                    "param_type": "int",
                                    "param_desc": "The index of the cluster.\n"
                                },
                                {
                                    "param_name": "data",
                                    "param_type": "array-like of shape (n_samples, n_features)",
                                    "param_desc": "The data.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "BiclusterMixin",
                            "descriptions": "Mixin class for all bicluster estimators in scikit-learn. This mixin defines the following functionality: biclusters_ property that returns the row and column indicators; get_indices method that returns the row and column indices of a bicluster; get_shape method that returns the shape of a bicluster; get_submatrix method that returns the submatrix corresponding to a bicluster. Examples Convenient way to get row and column indicators together. Returns the rows_ and columns_ members. Row and column indices of the i\u2019th bicluster. Only works if rows_ and columns_ attributes exist.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "i": {
                                        "type": "integer",
                                        "description": "int. The index of the cluster.\n"
                                    },
                                    "data": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_features). The data.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "ClassifierMixin",
                        "func_desc": "Mixin class for all classifiers in scikit-learn.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.base.ClassifierMixin.html#sklearn.base.ClassifierMixin",
                        "function_definitions": {
                            "function_name": "ClassifierMixin",
                            "full_function": "class sklearn.base.ClassifierMixin",
                            "function_text": "Mixin class for all classifiers in scikit-learn. This mixin defines the following functionality: _estimator_type class attribute defaulting to \"classifier\"; score method that default to accuracy_score. enforce that fit requires y to be passed through the requires_y tag. Read more in the User Guide. Examples Return the mean accuracy on the given test data and labels. In multi-label classification, this is the subset accuracy\nwhich is a harsh metric since you require for each sample that\neach label set be correctly predicted.",
                            "func_text_user_guide": "sklearn.metrics.accuracy_score.html#sklearn.metrics.accuracy_score",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples, n_features)",
                                    "param_desc": "Test samples.\n"
                                },
                                {
                                    "param_name": "y",
                                    "param_type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                                    "param_desc": "True labels for X.\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Sample weights.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "ClassifierMixin",
                            "descriptions": "Mixin class for all classifiers in scikit-learn. This mixin defines the following functionality: _estimator_type class attribute defaulting to \"classifier\"; score method that default to accuracy_score. enforce that fit requires y to be passed through the requires_y tag. Read more in the User Guide. Examples Return the mean accuracy on the given test data and labels. In multi-label classification, this is the subset accuracy\nwhich is a harsh metric since you require for each sample that\neach label set be correctly predicted.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_features). Test samples.\n"
                                    },
                                    "y": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,) or (n_samples, n_outputs). True labels for X.\n"
                                    },
                                    "sample_weight": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Sample weights.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "DensityMixin",
                        "func_desc": "Mixin class for all density estimators in scikit-learn.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.base.DensityMixin.html#sklearn.base.DensityMixin",
                        "function_definitions": {
                            "function_name": "DensityMixin",
                            "full_function": "class sklearn.base.DensityMixin",
                            "function_text": "Mixin class for all density estimators in scikit-learn. This mixin defines the following functionality: _estimator_type class attribute defaulting to \"DensityEstimator\"; score method that default that do no-op. Examples Return the score of the model on the data X.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples, n_features)",
                                    "param_desc": "Test samples.\n"
                                },
                                {
                                    "param_name": "y",
                                    "param_type": "Ignored",
                                    "param_desc": "Not used, present for API consistency by convention.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "DensityMixin",
                            "descriptions": "Mixin class for all density estimators in scikit-learn. This mixin defines the following functionality: _estimator_type class attribute defaulting to \"DensityEstimator\"; score method that default that do no-op. Examples Return the score of the model on the data X.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_features). Test samples.\n"
                                    },
                                    "y": {
                                        "type": "Ignored",
                                        "description": "Ignored. Not used, present for API consistency by convention.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "OneToOneFeatureMixin",
                        "func_desc": "Provides get_feature_names_out for simple transformers.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.base.OneToOneFeatureMixin.html#sklearn.base.OneToOneFeatureMixin",
                        "function_definitions": {
                            "function_name": "OneToOneFeatureMixin",
                            "full_function": "class sklearn.base.OneToOneFeatureMixin",
                            "function_text": "Provides get_feature_names_out for simple transformers. This mixin assumes there\u2019s a 1-to-1 correspondence between input features\nand output features, such as StandardScaler. Examples Get output feature names for transformation.",
                            "func_text_user_guide": "sklearn.preprocessing.StandardScaler.html#sklearn.preprocessing.StandardScaler",
                            "parameter_names_desc": [
                                {
                                    "param_name": "input_features",
                                    "param_type": "array-like of str or None, default=None",
                                    "param_desc": "Input features.\n\nIf input_features is None, then feature_names_in_ is\nused as feature names in. If feature_names_in_ is not defined,\nthen the following input feature names are generated:\n[\"x0\", \"x1\", ..., \"x(n_features_in_ - 1)\"].\nIf input_features is an array-like, then input_features must\nmatch feature_names_in_ if feature_names_in_ is defined.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "OneToOneFeatureMixin",
                            "descriptions": "Provides get_feature_names_out for simple transformers. This mixin assumes there\u2019s a 1-to-1 correspondence between input features\nand output features, such as StandardScaler. Examples Get output feature names for transformation.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "input_features": {
                                        "type": "string",
                                        "description": "array-like of str or None, default=None. Input features.\n\nIf input_features is None, then feature_names_in_ is\nused as feature names in. If feature_names_in_ is not defined,\nthen the following input feature names are generated:\n[\"x0\", \"x1\", ..., \"x(n_features_in_ - 1)\"].\nIf input_features is an array-like, then input_features must\nmatch feature_names_in_ if feature_names_in_ is defined.\n\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "RegressorMixin",
                        "func_desc": "Mixin class for all regression estimators in scikit-learn.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.base.RegressorMixin.html#sklearn.base.RegressorMixin",
                        "function_definitions": {
                            "function_name": "RegressorMixin",
                            "full_function": "class sklearn.base.RegressorMixin",
                            "function_text": "Mixin class for all regression estimators in scikit-learn. This mixin defines the following functionality: _estimator_type class attribute defaulting to \"regressor\"; score method that default to r2_score. enforce that fit requires y to be passed through the requires_y tag. Read more in the User Guide. Examples Return the coefficient of determination of the prediction. The coefficient of determination \\(R^2\\) is defined as\n\\((1 - \\frac{u}{v})\\), where \\(u\\) is the residual\nsum of squares ((y_true - y_pred)** 2).sum() and \\(v\\)\nis the total sum of squares ((y_true - y_true.mean()) ** 2).sum().\nThe best possible score is 1.0 and it can be negative (because the\nmodel can be arbitrarily worse). A constant model that always predicts\nthe expected value of y, disregarding the input features, would get\na \\(R^2\\) score of 0.0.",
                            "func_text_user_guide": "sklearn.metrics.r2_score.html#sklearn.metrics.r2_score",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples, n_features)",
                                    "param_desc": "Test samples. For some estimators this may be a precomputed\nkernel matrix or a list of generic objects instead with shape\n(n_samples, n_samples_fitted), where n_samples_fitted\nis the number of samples used in the fitting for the estimator.\n"
                                },
                                {
                                    "param_name": "y",
                                    "param_type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                                    "param_desc": "True values for X.\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Sample weights.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "RegressorMixin",
                            "descriptions": "Mixin class for all regression estimators in scikit-learn. This mixin defines the following functionality: _estimator_type class attribute defaulting to \"regressor\"; score method that default to r2_score. enforce that fit requires y to be passed through the requires_y tag. Read more in the User Guide. Examples Return the coefficient of determination of the prediction. The coefficient of determination \\(R^2\\) is defined as\n\\((1 - \\frac{u}{v})\\), where \\(u\\) is the residual\nsum of squares ((y_true - y_pred)** 2).sum() and \\(v\\)\nis the total sum of squares ((y_true - y_true.mean()) ** 2).sum().\nThe best possible score is 1.0 and it can be negative (because the\nmodel can be arbitrarily worse). A constant model that always predicts\nthe expected value of y, disregarding the input features, would get\na \\(R^2\\) score of 0.0.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_features). Test samples. For some estimators this may be a precomputed\nkernel matrix or a list of generic objects instead with shape\n(n_samples, n_samples_fitted), where n_samples_fitted\nis the number of samples used in the fitting for the estimator.\n"
                                    },
                                    "y": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,) or (n_samples, n_outputs). True values for X.\n"
                                    },
                                    "sample_weight": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Sample weights.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "clone",
                        "func_desc": "Construct a new unfitted estimator with the same parameters.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.base.clone.html#sklearn.base.clone",
                        "function_definitions": {
                            "function_name": "clone",
                            "full_function": "sklearn.base.clone(estimator, *, safe=True)",
                            "function_text": "Construct a new unfitted estimator with the same parameters. Clone does a deep copy of the model in an estimator\nwithout actually copying attached data. It returns a new estimator\nwith the same parameters that has not been fitted on any data. Changed in version 1.3: Delegates to estimator.__sklearn_clone__ if the method exists.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/common_pitfalls.html#randomness",
                            "parameter_names_desc": [
                                {
                                    "param_name": "estimator",
                                    "param_type": "{list, tuple, set} of estimator instance or a single             estimator instance",
                                    "param_desc": "The estimator or group of estimators to be cloned.\n"
                                },
                                {
                                    "param_name": "safe",
                                    "param_type": "bool, default=True",
                                    "param_desc": "If safe is False, clone will fall back to a deep copy on objects\nthat are not estimators. Ignored if estimator.__sklearn_clone__\nexists.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "clone",
                            "descriptions": "Construct a new unfitted estimator with the same parameters. Clone does a deep copy of the model in an estimator\nwithout actually copying attached data. It returns a new estimator\nwith the same parameters that has not been fitted on any data. Changed in version 1.3: Delegates to estimator.__sklearn_clone__ if the method exists.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "estimator": {
                                        "type": "array",
                                        "description": "{list, tuple, set} of estimator instance or a single             estimator instance. The estimator or group of estimators to be cloned.\n"
                                    },
                                    "safe": {
                                        "type": "boolean",
                                        "description": "bool, default=True. If safe is False, clone will fall back to a deep copy on objects\nthat are not estimators. Ignored if estimator.__sklearn_clone__\nexists.\n"
                                    }
                                },
                                "required": [
                                    "estimator"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "is_regressor",
                        "func_desc": "Return True if the given estimator is (probably) a regressor.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.base.is_regressor.html#sklearn.base.is_regressor",
                        "function_definitions": {
                            "function_name": "is_regressor",
                            "full_function": "sklearn.base.is_regressor(estimator)",
                            "function_text": "Return True if the given estimator is (probably) a regressor.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "estimator",
                                    "param_type": "estimator instance",
                                    "param_desc": "Estimator object to test.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "is_regressor",
                            "descriptions": "Return True if the given estimator is (probably) a regressor.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "estimator": {
                                        "type": "estimator instance",
                                        "description": "estimator instance. Estimator object to test.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    }
                ]
            }
        ],
        "name": "sklearn.base",
        "url": "https://scikit-learn.org/stable/api/sklearn.base.html"
    },
    "sklearn.calibration.html": {
        "functions": [
            {
                "defaults": [
                    {
                        "func_name": "CalibratedClassifierCV",
                        "func_desc": "Probability calibration with isotonic regression or logistic regression.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.calibration.CalibratedClassifierCV.html#sklearn.calibration.CalibratedClassifierCV",
                        "function_definitions": {
                            "function_name": "CalibratedClassifierCV",
                            "full_function": "class sklearn.calibration.CalibratedClassifierCV(estimator=None, *, method='sigmoid', cv=None, n_jobs=None, ensemble=True)",
                            "function_text": "Probability calibration with isotonic regression or logistic regression. This class uses cross-validation to both estimate the parameters of a\nclassifier and subsequently calibrate a classifier. With default\nensemble=True, for each cv split it\nfits a copy of the base estimator to the training subset, and calibrates it\nusing the testing subset. For prediction, predicted probabilities are\naveraged across these individual calibrated classifiers. When\nensemble=False, cross-validation is used to obtain unbiased predictions,\nvia cross_val_predict, which are then\nused for calibration. For prediction, the base estimator, trained using all\nthe data, is used. This is the prediction method implemented when\nprobabilities=True for SVC and NuSVC\nestimators (see User Guide for details). Already fitted classifiers can be calibrated via the parameter\ncv=\"prefit\". In this case, no cross-validation is used and all provided\ndata is used for calibration. The user has to take care manually that data\nfor model fitting and calibration are disjoint. The calibration is based on the decision_function method of the\nestimator if it exists, else on predict_proba. Read more in the User Guide.",
                            "func_text_user_guide": "sklearn.model_selection.cross_val_predict.html#sklearn.model_selection.cross_val_predict",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "CalibratedClassifierCV",
                            "descriptions": "Probability calibration with isotonic regression or logistic regression. This class uses cross-validation to both estimate the parameters of a\nclassifier and subsequently calibrate a classifier. With default\nensemble=True, for each cv split it\nfits a copy of the base estimator to the training subset, and calibrates it\nusing the testing subset. For prediction, predicted probabilities are\naveraged across these individual calibrated classifiers. When\nensemble=False, cross-validation is used to obtain unbiased predictions,\nvia cross_val_predict, which are then\nused for calibration. For prediction, the base estimator, trained using all\nthe data, is used. This is the prediction method implemented when\nprobabilities=True for SVC and NuSVC\nestimators (see User Guide for details). Already fitted classifiers can be calibrated via the parameter\ncv=\"prefit\". In this case, no cross-validation is used and all provided\ndata is used for calibration. The user has to take care manually that data\nfor model fitting and calibration are disjoint. The calibration is based on the decision_function method of the\nestimator if it exists, else on predict_proba. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": [
                                    "estimator=None"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "calibration_curve",
                        "func_desc": "Compute true and predicted probabilities for a calibration curve.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.calibration.calibration_curve.html#sklearn.calibration.calibration_curve",
                        "function_definitions": {
                            "function_name": "calibration_curve",
                            "full_function": "sklearn.calibration.calibration_curve(y_true, y_prob, *, pos_label=None, n_bins=5, strategy='uniform')",
                            "function_text": "Compute true and predicted probabilities for a calibration curve. The method assumes the inputs come from a binary classifier, and\ndiscretize the [0, 1] interval into bins. Calibration curves may also be referred to as reliability diagrams. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/calibration.html#calibration",
                            "parameter_names_desc": [
                                {
                                    "param_name": "y_true",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "True targets.\n"
                                },
                                {
                                    "param_name": "y_prob",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "Probabilities of the positive class.\n"
                                },
                                {
                                    "param_name": "pos_label",
                                    "param_type": "int, float, bool or str, default=None",
                                    "param_desc": "The label of the positive class.\n\nAdded in version 1.1.\n\n"
                                },
                                {
                                    "param_name": "n_bins",
                                    "param_type": "int, default=5",
                                    "param_desc": "Number of bins to discretize the [0, 1] interval. A bigger number\nrequires more data. Bins with no samples (i.e. without\ncorresponding values in y_prob) will not be returned, thus the\nreturned arrays may have less than n_bins values.\n"
                                },
                                {
                                    "param_name": "strategy",
                                    "param_type": "{\u2018uniform\u2019, \u2018quantile\u2019}, default=\u2019uniform\u2019",
                                    "param_desc": "Strategy used to define the widths of the bins.\n\nuniformThe bins have identical widths.\n\nquantileThe bins have the same number of samples and depend on y_prob.\n\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "calibration_curve",
                            "descriptions": "Compute true and predicted probabilities for a calibration curve. The method assumes the inputs come from a binary classifier, and\ndiscretize the [0, 1] interval into bins. Calibration curves may also be referred to as reliability diagrams. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "y_true": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). True targets.\n"
                                    },
                                    "y_prob": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). Probabilities of the positive class.\n"
                                    },
                                    "pos_label": {
                                        "type": "integer",
                                        "description": "int, float, bool or str, default=None. The label of the positive class.\n\nAdded in version 1.1.\n\n"
                                    },
                                    "n_bins": {
                                        "type": "integer",
                                        "description": "int, default=5. Number of bins to discretize the [0, 1] interval. A bigger number\nrequires more data. Bins with no samples (i.e. without\ncorresponding values in y_prob) will not be returned, thus the\nreturned arrays may have less than n_bins values.\n"
                                    },
                                    "strategy": {
                                        "type": "string",
                                        "enum": [
                                            "uniform",
                                            " quantile"
                                        ],
                                        "description": "{\u2018uniform\u2019, \u2018quantile\u2019}, default=\u2019uniform\u2019. Strategy used to define the widths of the bins.\n\nuniformThe bins have identical widths.\n\nquantileThe bins have the same number of samples and depend on y_prob.\n\n\n"
                                    }
                                },
                                "required": [
                                    "y_true",
                                    "y_prob"
                                ]
                            }
                        }
                    }
                ]
            },
            {
                "Visualization": [
                    {
                        "func_name": "CalibrationDisplay",
                        "func_desc": "Calibration curve (also known as reliability diagram) visualization.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.calibration.CalibrationDisplay.html#sklearn.calibration.CalibrationDisplay",
                        "function_definitions": {
                            "function_name": "CalibrationDisplay",
                            "full_function": "class sklearn.calibration.CalibrationDisplay(prob_true, prob_pred, y_prob, *, estimator_name=None, pos_label=None)",
                            "function_text": "Calibration curve (also known as reliability diagram) visualization. It is recommended to use\nfrom_estimator or\nfrom_predictions\nto create a CalibrationDisplay. All parameters are stored as attributes. Read more about calibration in the User Guide and\nmore about the scikit-learn visualization API in Visualizations. Added in version 1.0.",
                            "func_text_user_guide": "#sklearn.calibration.CalibrationDisplay.from_estimator",
                            "parameter_names_desc": [
                                {
                                    "param_name": "ax",
                                    "param_type": "Matplotlib Axes, default=None",
                                    "param_desc": "Axes object to plot on. If None, a new figure and axes is\ncreated.\n"
                                },
                                {
                                    "param_name": "name",
                                    "param_type": "str, default=None",
                                    "param_desc": "Name for labeling curve. If None, use estimator_name if\nnot None, otherwise no labeling is shown.\n"
                                },
                                {
                                    "param_name": "ref_line",
                                    "param_type": "bool, default=True",
                                    "param_desc": "If True, plots a reference line representing a perfectly\ncalibrated classifier.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "CalibrationDisplay",
                            "descriptions": "Calibration curve (also known as reliability diagram) visualization. It is recommended to use\nfrom_estimator or\nfrom_predictions\nto create a CalibrationDisplay. All parameters are stored as attributes. Read more about calibration in the User Guide and\nmore about the scikit-learn visualization API in Visualizations. Added in version 1.0.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "ax": {
                                        "type": "Matplotlib Axes, default=None",
                                        "description": "Matplotlib Axes, default=None. Axes object to plot on. If None, a new figure and axes is\ncreated.\n"
                                    },
                                    "name": {
                                        "type": "string",
                                        "description": "str, default=None. Name for labeling curve. If None, use estimator_name if\nnot None, otherwise no labeling is shown.\n"
                                    },
                                    "ref_line": {
                                        "type": "boolean",
                                        "description": "bool, default=True. If True, plots a reference line representing a perfectly\ncalibrated classifier.\n"
                                    }
                                },
                                "required": [
                                    "prob_true",
                                    "prob_pred",
                                    "y_prob"
                                ]
                            }
                        }
                    }
                ]
            }
        ],
        "name": "sklearn.calibration",
        "url": "https://scikit-learn.org/stable/api/sklearn.calibration.html"
    },
    "sklearn.cluster.html": {
        "functions": [
            {
                "defaults": [
                    {
                        "func_name": "AffinityPropagation",
                        "func_desc": "Perform Affinity Propagation Clustering of data.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.cluster.AffinityPropagation.html#sklearn.cluster.AffinityPropagation",
                        "function_definitions": {
                            "function_name": "AffinityPropagation",
                            "full_function": "class sklearn.cluster.AffinityPropagation(*, damping=0.5, max_iter=200, convergence_iter=15, copy=True, preference=None, affinity='euclidean', verbose=False, random_state=None)",
                            "function_text": "Perform Affinity Propagation Clustering of data. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/clustering.html#affinity-propagation",
                            "parameter_names_desc": [
                                {
                                    "param_name": "**params",
                                    "param_type": "dict",
                                    "param_desc": "Estimator parameters.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "AffinityPropagation",
                            "descriptions": "Perform Affinity Propagation Clustering of data. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "**params": {
                                        "type": "dict",
                                        "description": "dict. Estimator parameters.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "Birch",
                        "func_desc": "Implements the BIRCH clustering algorithm.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.cluster.Birch.html#sklearn.cluster.Birch",
                        "function_definitions": {
                            "function_name": "Birch",
                            "full_function": "class sklearn.cluster.Birch(*, threshold=0.5, branching_factor=50, n_clusters=3, compute_labels=True, copy=True)",
                            "function_text": "Implements the BIRCH clustering algorithm. It is a memory-efficient, online-learning algorithm provided as an\nalternative to MiniBatchKMeans. It constructs a tree\ndata structure with the cluster centroids being read off the leaf.\nThese can be either the final cluster centroids or can be provided as input\nto another clustering algorithm such as AgglomerativeClustering. Read more in the User Guide. Added in version 0.16.",
                            "func_text_user_guide": "sklearn.cluster.MiniBatchKMeans.html#sklearn.cluster.MiniBatchKMeans",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "Input data.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "Birch",
                            "descriptions": "Implements the BIRCH clustering algorithm. It is a memory-efficient, online-learning algorithm provided as an\nalternative to MiniBatchKMeans. It constructs a tree\ndata structure with the cluster centroids being read off the leaf.\nThese can be either the final cluster centroids or can be provided as input\nto another clustering algorithm such as AgglomerativeClustering. Read more in the User Guide. Added in version 0.16.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). Input data.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "DBSCAN",
                        "func_desc": "Perform DBSCAN clustering from vector array or distance matrix.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.cluster.DBSCAN.html#sklearn.cluster.DBSCAN",
                        "function_definitions": {
                            "function_name": "DBSCAN",
                            "full_function": "class sklearn.cluster.DBSCAN(eps=0.5, *, min_samples=5, metric='euclidean', metric_params=None, algorithm='auto', leaf_size=30, p=None, n_jobs=None)",
                            "function_text": "Perform DBSCAN clustering from vector array or distance matrix. DBSCAN - Density-Based Spatial Clustering of Applications with Noise.\nFinds core samples of high density and expands clusters from them.\nGood for data which contains clusters of similar density. This implementation has a worst case memory complexity of \\(O({n}^2)\\),\nwhich can occur when the eps param is large and min_samples is low,\nwhile the original DBSCAN only uses linear memory.\nFor further details, see the Notes below. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/clustering.html#dbscan",
                            "parameter_names_desc": [
                                {
                                    "param_name": "**params",
                                    "param_type": "dict",
                                    "param_desc": "Estimator parameters.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "DBSCAN",
                            "descriptions": "Perform DBSCAN clustering from vector array or distance matrix. DBSCAN - Density-Based Spatial Clustering of Applications with Noise.\nFinds core samples of high density and expands clusters from them.\nGood for data which contains clusters of similar density. This implementation has a worst case memory complexity of \\(O({n}^2)\\),\nwhich can occur when the eps param is large and min_samples is low,\nwhile the original DBSCAN only uses linear memory.\nFor further details, see the Notes below. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "**params": {
                                        "type": "dict",
                                        "description": "dict. Estimator parameters.\n"
                                    }
                                },
                                "required": [
                                    "eps=0.5"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "HDBSCAN",
                        "func_desc": "Cluster data using hierarchical density-based clustering.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.cluster.HDBSCAN.html#sklearn.cluster.HDBSCAN",
                        "function_definitions": {
                            "function_name": "HDBSCAN",
                            "full_function": "class sklearn.cluster.HDBSCAN(min_cluster_size=5, min_samples=None, cluster_selection_epsilon=0.0, max_cluster_size=None, metric='euclidean', metric_params=None, alpha=1.0, algorithm='auto', leaf_size=40, n_jobs=None, cluster_selection_method='eom', allow_single_cluster=False, store_centers=None, copy=False)",
                            "function_text": "Cluster data using hierarchical density-based clustering. HDBSCAN - Hierarchical Density-Based Spatial Clustering of Applications\nwith Noise. Performs DBSCAN over varying epsilon\nvalues and integrates the result to find a clustering that gives the best\nstability over epsilon.\nThis allows HDBSCAN to find clusters of varying densities (unlike\nDBSCAN), and be more robust to parameter selection.\nRead more in the User Guide. For an example of how to use HDBSCAN, as well as a comparison to\nDBSCAN, please see the plotting demo. Added in version 1.3.",
                            "func_text_user_guide": "sklearn.cluster.DBSCAN.html#sklearn.cluster.DBSCAN",
                            "parameter_names_desc": [
                                {
                                    "param_name": "**params",
                                    "param_type": "dict",
                                    "param_desc": "Estimator parameters.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "HDBSCAN",
                            "descriptions": "Cluster data using hierarchical density-based clustering. HDBSCAN - Hierarchical Density-Based Spatial Clustering of Applications\nwith Noise. Performs DBSCAN over varying epsilon\nvalues and integrates the result to find a clustering that gives the best\nstability over epsilon.\nThis allows HDBSCAN to find clusters of varying densities (unlike\nDBSCAN), and be more robust to parameter selection.\nRead more in the User Guide. For an example of how to use HDBSCAN, as well as a comparison to\nDBSCAN, please see the plotting demo. Added in version 1.3.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "**params": {
                                        "type": "dict",
                                        "description": "dict. Estimator parameters.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "MeanShift",
                        "func_desc": "Mean shift clustering using a flat kernel.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.cluster.MeanShift.html#sklearn.cluster.MeanShift",
                        "function_definitions": {
                            "function_name": "MeanShift",
                            "full_function": "class sklearn.cluster.MeanShift(*, bandwidth=None, seeds=None, bin_seeding=False, min_bin_freq=1, cluster_all=True, n_jobs=None, max_iter=300)",
                            "function_text": "Mean shift clustering using a flat kernel. Mean shift clustering aims to discover \u201cblobs\u201d in a smooth density of\nsamples. It is a centroid-based algorithm, which works by updating\ncandidates for centroids to be the mean of the points within a given\nregion. These candidates are then filtered in a post-processing stage to\neliminate near-duplicates to form the final set of centroids. Seeding is performed using a binning technique for scalability. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/clustering.html#mean-shift",
                            "parameter_names_desc": [
                                {
                                    "param_name": "**params",
                                    "param_type": "dict",
                                    "param_desc": "Estimator parameters.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "MeanShift",
                            "descriptions": "Mean shift clustering using a flat kernel. Mean shift clustering aims to discover \u201cblobs\u201d in a smooth density of\nsamples. It is a centroid-based algorithm, which works by updating\ncandidates for centroids to be the mean of the points within a given\nregion. These candidates are then filtered in a post-processing stage to\neliminate near-duplicates to form the final set of centroids. Seeding is performed using a binning technique for scalability. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "**params": {
                                        "type": "dict",
                                        "description": "dict. Estimator parameters.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "OPTICS",
                        "func_desc": "Estimate clustering structure from vector array.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.cluster.OPTICS.html#sklearn.cluster.OPTICS",
                        "function_definitions": {
                            "function_name": "OPTICS",
                            "full_function": "class sklearn.cluster.OPTICS(*, min_samples=5, max_eps=inf, metric='minkowski', p=2, metric_params=None, cluster_method='xi', eps=None, xi=0.05, predecessor_correction=True, min_cluster_size=None, algorithm='auto', leaf_size=30, memory=None, n_jobs=None)",
                            "function_text": "Estimate clustering structure from vector array. OPTICS (Ordering Points To Identify the Clustering Structure), closely\nrelated to DBSCAN, finds core sample of high density and expands clusters\nfrom them [1]. Unlike DBSCAN, keeps cluster hierarchy for a variable\nneighborhood radius. Better suited for usage on large datasets than the\ncurrent sklearn implementation of DBSCAN. Clusters are then extracted using a DBSCAN-like method\n(cluster_method = \u2018dbscan\u2019) or an automatic\ntechnique proposed in [1] (cluster_method = \u2018xi\u2019). This implementation deviates from the original OPTICS by first performing\nk-nearest-neighborhood searches on all points to identify core sizes, then\ncomputing only the distances to unprocessed points when constructing the\ncluster order. Note that we do not employ a heap to manage the expansion\ncandidates, so the time complexity will be O(n^2). Read more in the User Guide.",
                            "func_text_user_guide": "#r2c55e37003fe-1",
                            "parameter_names_desc": [
                                {
                                    "param_name": "**params",
                                    "param_type": "dict",
                                    "param_desc": "Estimator parameters.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "OPTICS",
                            "descriptions": "Estimate clustering structure from vector array. OPTICS (Ordering Points To Identify the Clustering Structure), closely\nrelated to DBSCAN, finds core sample of high density and expands clusters\nfrom them [1]. Unlike DBSCAN, keeps cluster hierarchy for a variable\nneighborhood radius. Better suited for usage on large datasets than the\ncurrent sklearn implementation of DBSCAN. Clusters are then extracted using a DBSCAN-like method\n(cluster_method = \u2018dbscan\u2019) or an automatic\ntechnique proposed in [1] (cluster_method = \u2018xi\u2019). This implementation deviates from the original OPTICS by first performing\nk-nearest-neighborhood searches on all points to identify core sizes, then\ncomputing only the distances to unprocessed points when constructing the\ncluster order. Note that we do not employ a heap to manage the expansion\ncandidates, so the time complexity will be O(n^2). Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "**params": {
                                        "type": "dict",
                                        "description": "dict. Estimator parameters.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "SpectralClustering",
                        "func_desc": "Apply clustering to a projection of the normalized Laplacian.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.cluster.SpectralClustering.html#sklearn.cluster.SpectralClustering",
                        "function_definitions": {
                            "function_name": "SpectralClustering",
                            "full_function": "class sklearn.cluster.SpectralClustering(n_clusters=8, *, eigen_solver=None, n_components=None, random_state=None, n_init=10, gamma=1.0, affinity='rbf', n_neighbors=10, eigen_tol='auto', assign_labels='kmeans', degree=3, coef0=1, kernel_params=None, n_jobs=None, verbose=False)",
                            "function_text": "Apply clustering to a projection of the normalized Laplacian. In practice Spectral Clustering is very useful when the structure of\nthe individual clusters is highly non-convex, or more generally when\na measure of the center and spread of the cluster is not a suitable\ndescription of the complete cluster, such as when clusters are\nnested circles on the 2D plane. If the affinity matrix is the adjacency matrix of a graph, this method\ncan be used to find normalized graph cuts [1], [2]. When calling fit, an affinity matrix is constructed using either\na kernel function such the Gaussian (aka RBF) kernel with Euclidean\ndistance d(X, X): or a k-nearest neighbors connectivity matrix. Alternatively, a user-provided affinity matrix can be specified by\nsetting affinity='precomputed'. Read more in the User Guide.",
                            "func_text_user_guide": "#r5f6cbeb1558e-1",
                            "parameter_names_desc": [
                                {
                                    "param_name": "**params",
                                    "param_type": "dict",
                                    "param_desc": "Estimator parameters.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "SpectralClustering",
                            "descriptions": "Apply clustering to a projection of the normalized Laplacian. In practice Spectral Clustering is very useful when the structure of\nthe individual clusters is highly non-convex, or more generally when\na measure of the center and spread of the cluster is not a suitable\ndescription of the complete cluster, such as when clusters are\nnested circles on the 2D plane. If the affinity matrix is the adjacency matrix of a graph, this method\ncan be used to find normalized graph cuts [1], [2]. When calling fit, an affinity matrix is constructed using either\na kernel function such the Gaussian (aka RBF) kernel with Euclidean\ndistance d(X, X): or a k-nearest neighbors connectivity matrix. Alternatively, a user-provided affinity matrix can be specified by\nsetting affinity='precomputed'. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "**params": {
                                        "type": "dict",
                                        "description": "dict. Estimator parameters.\n"
                                    }
                                },
                                "required": [
                                    "n_clusters=8"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "affinity_propagation",
                        "func_desc": "Perform Affinity Propagation Clustering of data.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.cluster.affinity_propagation.html#sklearn.cluster.affinity_propagation",
                        "function_definitions": {
                            "function_name": "affinity_propagation",
                            "full_function": "sklearn.cluster.affinity_propagation(S, *, preference=None, convergence_iter=15, max_iter=200, damping=0.5, copy=True, verbose=False, return_n_iter=False, random_state=None)",
                            "function_text": "Perform Affinity Propagation Clustering of data. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/clustering.html#affinity-propagation",
                            "parameter_names_desc": [
                                {
                                    "param_name": "S",
                                    "param_type": "array-like of shape (n_samples, n_samples)",
                                    "param_desc": "Matrix of similarities between points.\n"
                                },
                                {
                                    "param_name": "preference",
                                    "param_type": "array-like of shape (n_samples,) or float, default=None",
                                    "param_desc": "Preferences for each point - points with larger values of\npreferences are more likely to be chosen as exemplars. The number of\nexemplars, i.e. of clusters, is influenced by the input preferences\nvalue. If the preferences are not passed as arguments, they will be\nset to the median of the input similarities (resulting in a moderate\nnumber of clusters). For a smaller amount of clusters, this can be set\nto the minimum value of the similarities.\n"
                                },
                                {
                                    "param_name": "convergence_iter",
                                    "param_type": "int, default=15",
                                    "param_desc": "Number of iterations with no change in the number\nof estimated clusters that stops the convergence.\n"
                                },
                                {
                                    "param_name": "max_iter",
                                    "param_type": "int, default=200",
                                    "param_desc": "Maximum number of iterations.\n"
                                },
                                {
                                    "param_name": "damping",
                                    "param_type": "float, default=0.5",
                                    "param_desc": "Damping factor between 0.5 and 1.\n"
                                },
                                {
                                    "param_name": "copy",
                                    "param_type": "bool, default=True",
                                    "param_desc": "If copy is False, the affinity matrix is modified inplace by the\nalgorithm, for memory efficiency.\n"
                                },
                                {
                                    "param_name": "verbose",
                                    "param_type": "bool, default=False",
                                    "param_desc": "The verbosity level.\n"
                                },
                                {
                                    "param_name": "return_n_iter",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Whether or not to return the number of iterations.\n"
                                },
                                {
                                    "param_name": "random_state",
                                    "param_type": "int, RandomState instance or None, default=None",
                                    "param_desc": "Pseudo-random number generator to control the starting state.\nUse an int for reproducible results across function calls.\nSee the Glossary.\n\nAdded in version 0.23: this parameter was previously hardcoded as 0.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "affinity_propagation",
                            "descriptions": "Perform Affinity Propagation Clustering of data. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "S": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_samples). Matrix of similarities between points.\n"
                                    },
                                    "preference": {
                                        "type": "float",
                                        "description": "array-like of shape (n_samples,) or float, default=None. Preferences for each point - points with larger values of\npreferences are more likely to be chosen as exemplars. The number of\nexemplars, i.e. of clusters, is influenced by the input preferences\nvalue. If the preferences are not passed as arguments, they will be\nset to the median of the input similarities (resulting in a moderate\nnumber of clusters). For a smaller amount of clusters, this can be set\nto the minimum value of the similarities.\n"
                                    },
                                    "convergence_iter": {
                                        "type": "integer",
                                        "description": "int, default=15. Number of iterations with no change in the number\nof estimated clusters that stops the convergence.\n"
                                    },
                                    "max_iter": {
                                        "type": "integer",
                                        "description": "int, default=200. Maximum number of iterations.\n"
                                    },
                                    "damping": {
                                        "type": "float",
                                        "description": "float, default=0.5. Damping factor between 0.5 and 1.\n"
                                    },
                                    "copy": {
                                        "type": "boolean",
                                        "description": "bool, default=True. If copy is False, the affinity matrix is modified inplace by the\nalgorithm, for memory efficiency.\n"
                                    },
                                    "verbose": {
                                        "type": "boolean",
                                        "description": "bool, default=False. The verbosity level.\n"
                                    },
                                    "return_n_iter": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Whether or not to return the number of iterations.\n"
                                    },
                                    "random_state": {
                                        "type": "integer",
                                        "description": "int, RandomState instance or None, default=None. Pseudo-random number generator to control the starting state.\nUse an int for reproducible results across function calls.\nSee the Glossary.\n\nAdded in version 0.23: this parameter was previously hardcoded as 0.\n\n"
                                    }
                                },
                                "required": [
                                    "S"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "cluster_optics_xi",
                        "func_desc": "Automatically extract clusters according to the Xi-steep method.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.cluster.cluster_optics_xi.html#sklearn.cluster.cluster_optics_xi",
                        "function_definitions": {
                            "function_name": "cluster_optics_xi",
                            "full_function": "sklearn.cluster.cluster_optics_xi(*, reachability, predecessor, ordering, min_samples, min_cluster_size=None, xi=0.05, predecessor_correction=True)",
                            "function_text": "Automatically extract clusters according to the Xi-steep method.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "reachability",
                                    "param_type": "ndarray of shape (n_samples,)",
                                    "param_desc": "Reachability distances calculated by OPTICS (reachability_).\n"
                                },
                                {
                                    "param_name": "predecessor",
                                    "param_type": "ndarray of shape (n_samples,)",
                                    "param_desc": "Predecessors calculated by OPTICS.\n"
                                },
                                {
                                    "param_name": "ordering",
                                    "param_type": "ndarray of shape (n_samples,)",
                                    "param_desc": "OPTICS ordered point indices (ordering_).\n"
                                },
                                {
                                    "param_name": "min_samples",
                                    "param_type": "int > 1 or float between 0 and 1",
                                    "param_desc": "The same as the min_samples given to OPTICS. Up and down steep regions\ncan\u2019t have more then min_samples consecutive non-steep points.\nExpressed as an absolute number or a fraction of the number of samples\n(rounded to be at least 2).\n"
                                },
                                {
                                    "param_name": "min_cluster_size",
                                    "param_type": "int > 1 or float between 0 and 1, default=None",
                                    "param_desc": "Minimum number of samples in an OPTICS cluster, expressed as an\nabsolute number or a fraction of the number of samples (rounded to be\nat least 2). If None, the value of min_samples is used instead.\n"
                                },
                                {
                                    "param_name": "xi",
                                    "param_type": "float between 0 and 1, default=0.05",
                                    "param_desc": "Determines the minimum steepness on the reachability plot that\nconstitutes a cluster boundary. For example, an upwards point in the\nreachability plot is defined by the ratio from one point to its\nsuccessor being at most 1-xi.\n"
                                },
                                {
                                    "param_name": "predecessor_correction",
                                    "param_type": "bool, default=True",
                                    "param_desc": "Correct clusters based on the calculated predecessors.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "cluster_optics_xi",
                            "descriptions": "Automatically extract clusters according to the Xi-steep method.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "reachability": {
                                        "type": "array",
                                        "description": "ndarray of shape (n_samples,). Reachability distances calculated by OPTICS (reachability_).\n"
                                    },
                                    "predecessor": {
                                        "type": "array",
                                        "description": "ndarray of shape (n_samples,). Predecessors calculated by OPTICS.\n"
                                    },
                                    "ordering": {
                                        "type": "array",
                                        "description": "ndarray of shape (n_samples,). OPTICS ordered point indices (ordering_).\n"
                                    },
                                    "min_samples": {
                                        "type": "integer",
                                        "description": "int > 1 or float between 0 and 1. The same as the min_samples given to OPTICS. Up and down steep regions\ncan\u2019t have more then min_samples consecutive non-steep points.\nExpressed as an absolute number or a fraction of the number of samples\n(rounded to be at least 2).\n"
                                    },
                                    "min_cluster_size": {
                                        "type": "integer",
                                        "description": "int > 1 or float between 0 and 1, default=None. Minimum number of samples in an OPTICS cluster, expressed as an\nabsolute number or a fraction of the number of samples (rounded to be\nat least 2). If None, the value of min_samples is used instead.\n"
                                    },
                                    "xi": {
                                        "type": "float",
                                        "description": "float between 0 and 1, default=0.05. Determines the minimum steepness on the reachability plot that\nconstitutes a cluster boundary. For example, an upwards point in the\nreachability plot is defined by the ratio from one point to its\nsuccessor being at most 1-xi.\n"
                                    },
                                    "predecessor_correction": {
                                        "type": "boolean",
                                        "description": "bool, default=True. Correct clusters based on the calculated predecessors.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "dbscan",
                        "func_desc": "Perform DBSCAN clustering from vector array or distance matrix.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/dbscan-function.html#sklearn.cluster.dbscan",
                        "function_definitions": {
                            "function_name": "dbscan",
                            "full_function": "sklearn.cluster.dbscan(X, eps=0.5, *, min_samples=5, metric='minkowski', metric_params=None, algorithm='auto', leaf_size=30, p=2, sample_weight=None, n_jobs=None)",
                            "function_text": "Perform DBSCAN clustering from vector array or distance matrix. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/clustering.html#dbscan",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse (CSR) matrix} of shape (n_samples, n_features) or             (n_samples, n_samples)",
                                    "param_desc": "A feature array, or array of distances between samples if\nmetric='precomputed'.\n"
                                },
                                {
                                    "param_name": "eps",
                                    "param_type": "float, default=0.5",
                                    "param_desc": "The maximum distance between two samples for one to be considered\nas in the neighborhood of the other. This is not a maximum bound\non the distances of points within a cluster. This is the most\nimportant DBSCAN parameter to choose appropriately for your data set\nand distance function.\n"
                                },
                                {
                                    "param_name": "min_samples",
                                    "param_type": "int, default=5",
                                    "param_desc": "The number of samples (or total weight) in a neighborhood for a point\nto be considered as a core point. This includes the point itself.\n"
                                },
                                {
                                    "param_name": "metric",
                                    "param_type": "str or callable, default=\u2019minkowski\u2019",
                                    "param_desc": "The metric to use when calculating distance between instances in a\nfeature array. If metric is a string or callable, it must be one of\nthe options allowed by sklearn.metrics.pairwise_distances for\nits metric parameter.\nIf metric is \u201cprecomputed\u201d, X is assumed to be a distance matrix and\nmust be square during fit.\nX may be a sparse graph,\nin which case only \u201cnonzero\u201d elements may be considered neighbors.\n"
                                },
                                {
                                    "param_name": "metric_params",
                                    "param_type": "dict, default=None",
                                    "param_desc": "Additional keyword arguments for the metric function.\n\nAdded in version 0.19.\n\n"
                                },
                                {
                                    "param_name": "algorithm",
                                    "param_type": "{\u2018auto\u2019, \u2018ball_tree\u2019, \u2018kd_tree\u2019, \u2018brute\u2019}, default=\u2019auto\u2019",
                                    "param_desc": "The algorithm to be used by the NearestNeighbors module\nto compute pointwise distances and find nearest neighbors.\nSee NearestNeighbors module documentation for details.\n"
                                },
                                {
                                    "param_name": "leaf_size",
                                    "param_type": "int, default=30",
                                    "param_desc": "Leaf size passed to BallTree or cKDTree. This can affect the speed\nof the construction and query, as well as the memory required\nto store the tree. The optimal value depends\non the nature of the problem.\n"
                                },
                                {
                                    "param_name": "p",
                                    "param_type": "float, default=2",
                                    "param_desc": "The power of the Minkowski metric to be used to calculate distance\nbetween points.\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Weight of each sample, such that a sample with a weight of at least\nmin_samples is by itself a core sample; a sample with negative\nweight may inhibit its eps-neighbor from being core.\nNote that weights are absolute, and default to 1.\n"
                                },
                                {
                                    "param_name": "n_jobs",
                                    "param_type": "int, default=None",
                                    "param_desc": "The number of parallel jobs to run for neighbors search. None means\n1 unless in a joblib.parallel_backend context. -1 means\nusing all processors. See Glossary for more details.\nIf precomputed distance are used, parallel execution is not available\nand thus n_jobs will have no effect.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "dbscan",
                            "descriptions": "Perform DBSCAN clustering from vector array or distance matrix. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse (CSR) matrix} of shape (n_samples, n_features) or             (n_samples, n_samples). A feature array, or array of distances between samples if\nmetric='precomputed'.\n"
                                    },
                                    "eps": {
                                        "type": "float",
                                        "description": "float, default=0.5. The maximum distance between two samples for one to be considered\nas in the neighborhood of the other. This is not a maximum bound\non the distances of points within a cluster. This is the most\nimportant DBSCAN parameter to choose appropriately for your data set\nand distance function.\n"
                                    },
                                    "min_samples": {
                                        "type": "integer",
                                        "description": "int, default=5. The number of samples (or total weight) in a neighborhood for a point\nto be considered as a core point. This includes the point itself.\n"
                                    },
                                    "metric": {
                                        "type": "string",
                                        "description": "str or callable, default=\u2019minkowski\u2019. The metric to use when calculating distance between instances in a\nfeature array. If metric is a string or callable, it must be one of\nthe options allowed by sklearn.metrics.pairwise_distances for\nits metric parameter.\nIf metric is \u201cprecomputed\u201d, X is assumed to be a distance matrix and\nmust be square during fit.\nX may be a sparse graph,\nin which case only \u201cnonzero\u201d elements may be considered neighbors.\n"
                                    },
                                    "metric_params": {
                                        "type": "dict, default=None",
                                        "description": "dict, default=None. Additional keyword arguments for the metric function.\n\nAdded in version 0.19.\n\n"
                                    },
                                    "algorithm": {
                                        "type": "string",
                                        "enum": [
                                            "auto",
                                            " ball_tree",
                                            " kd_tree",
                                            " brute"
                                        ],
                                        "description": "{\u2018auto\u2019, \u2018ball_tree\u2019, \u2018kd_tree\u2019, \u2018brute\u2019}, default=\u2019auto\u2019. The algorithm to be used by the NearestNeighbors module\nto compute pointwise distances and find nearest neighbors.\nSee NearestNeighbors module documentation for details.\n"
                                    },
                                    "leaf_size": {
                                        "type": "integer",
                                        "description": "int, default=30. Leaf size passed to BallTree or cKDTree. This can affect the speed\nof the construction and query, as well as the memory required\nto store the tree. The optimal value depends\non the nature of the problem.\n"
                                    },
                                    "p": {
                                        "type": "float",
                                        "description": "float, default=2. The power of the Minkowski metric to be used to calculate distance\nbetween points.\n"
                                    },
                                    "sample_weight": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Weight of each sample, such that a sample with a weight of at least\nmin_samples is by itself a core sample; a sample with negative\nweight may inhibit its eps-neighbor from being core.\nNote that weights are absolute, and default to 1.\n"
                                    },
                                    "n_jobs": {
                                        "type": "integer",
                                        "description": "int, default=None. The number of parallel jobs to run for neighbors search. None means\n1 unless in a joblib.parallel_backend context. -1 means\nusing all processors. See Glossary for more details.\nIf precomputed distance are used, parallel execution is not available\nand thus n_jobs will have no effect.\n"
                                    }
                                },
                                "required": [
                                    "X",
                                    "eps=0.5"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "k_means",
                        "func_desc": "Perform K-means clustering algorithm.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.cluster.k_means.html#sklearn.cluster.k_means",
                        "function_definitions": {
                            "function_name": "k_means",
                            "full_function": "sklearn.cluster.k_means(X, n_clusters, *, sample_weight=None, init='k-means++', n_init='auto', max_iter=300, verbose=False, tol=0.0001, random_state=None, copy_x=True, algorithm='lloyd', return_n_iter=False)",
                            "function_text": "Perform K-means clustering algorithm. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/clustering.html#k-means",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "The observations to cluster. It must be noted that the data\nwill be converted to C ordering, which will cause a memory copy\nif the given data is not C-contiguous.\n"
                                },
                                {
                                    "param_name": "n_clusters",
                                    "param_type": "int",
                                    "param_desc": "The number of clusters to form as well as the number of\ncentroids to generate.\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "The weights for each observation in X. If None, all observations\nare assigned equal weight. sample_weight is not used during\ninitialization if init is a callable or a user provided array.\n"
                                },
                                {
                                    "param_name": "init",
                                    "param_type": "{\u2018k-means++\u2019, \u2018random\u2019}, callable or array-like of shape             (n_clusters, n_features), default=\u2019k-means++\u2019",
                                    "param_desc": "Method for initialization:\n\n'k-means++' : selects initial cluster centers for k-mean\nclustering in a smart way to speed up convergence. See section\nNotes in k_init for more details.\n'random': choose n_clusters observations (rows) at random from data\nfor the initial centroids.\nIf an array is passed, it should be of shape (n_clusters, n_features)\nand gives the initial centers.\nIf a callable is passed, it should take arguments X, n_clusters and a\nrandom state and return an initialization.\n\n"
                                },
                                {
                                    "param_name": "n_init",
                                    "param_type": "\u2018auto\u2019 or int, default=\u201dauto\u201d",
                                    "param_desc": "Number of time the k-means algorithm will be run with different\ncentroid seeds. The final results will be the best output of\nn_init consecutive runs in terms of inertia.\nWhen n_init='auto', the number of runs depends on the value of init:\n10 if using init='random' or init is a callable;\n1 if using init='k-means++' or init is an array-like.\n\nAdded in version 1.2: Added \u2018auto\u2019 option for n_init.\n\n\nChanged in version 1.4: Default value for n_init changed to 'auto'.\n\n"
                                },
                                {
                                    "param_name": "max_iter",
                                    "param_type": "int, default=300",
                                    "param_desc": "Maximum number of iterations of the k-means algorithm to run.\n"
                                },
                                {
                                    "param_name": "verbose",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Verbosity mode.\n"
                                },
                                {
                                    "param_name": "tol",
                                    "param_type": "float, default=1e-4",
                                    "param_desc": "Relative tolerance with regards to Frobenius norm of the difference\nin the cluster centers of two consecutive iterations to declare\nconvergence.\n"
                                },
                                {
                                    "param_name": "random_state",
                                    "param_type": "int, RandomState instance or None, default=None",
                                    "param_desc": "Determines random number generation for centroid initialization. Use\nan int to make the randomness deterministic.\nSee Glossary.\n"
                                },
                                {
                                    "param_name": "copy_x",
                                    "param_type": "bool, default=True",
                                    "param_desc": "When pre-computing distances it is more numerically accurate to center\nthe data first. If copy_x is True (default), then the original data is\nnot modified. If False, the original data is modified, and put back\nbefore the function returns, but small numerical differences may be\nintroduced by subtracting and then adding the data mean. Note that if\nthe original data is not C-contiguous, a copy will be made even if\ncopy_x is False. If the original data is sparse, but not in CSR format,\na copy will be made even if copy_x is False.\n"
                                },
                                {
                                    "param_name": "algorithm",
                                    "param_type": "{\u201clloyd\u201d, \u201celkan\u201d}, default=\u201dlloyd\u201d",
                                    "param_desc": "K-means algorithm to use. The classical EM-style algorithm is \"lloyd\".\nThe \"elkan\" variation can be more efficient on some datasets with\nwell-defined clusters, by using the triangle inequality. However it\u2019s\nmore memory intensive due to the allocation of an extra array of shape\n(n_samples, n_clusters).\n\nChanged in version 0.18: Added Elkan algorithm\n\n\nChanged in version 1.1: Renamed \u201cfull\u201d to \u201clloyd\u201d, and deprecated \u201cauto\u201d and \u201cfull\u201d.\nChanged \u201cauto\u201d to use \u201clloyd\u201d instead of \u201celkan\u201d.\n\n"
                                },
                                {
                                    "param_name": "return_n_iter",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Whether or not to return the number of iterations.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "k_means",
                            "descriptions": "Perform K-means clustering algorithm. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). The observations to cluster. It must be noted that the data\nwill be converted to C ordering, which will cause a memory copy\nif the given data is not C-contiguous.\n"
                                    },
                                    "n_clusters": {
                                        "type": "integer",
                                        "description": "int. The number of clusters to form as well as the number of\ncentroids to generate.\n"
                                    },
                                    "sample_weight": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. The weights for each observation in X. If None, all observations\nare assigned equal weight. sample_weight is not used during\ninitialization if init is a callable or a user provided array.\n"
                                    },
                                    "init": {
                                        "type": "object",
                                        "description": "{\u2018k-means++\u2019, \u2018random\u2019}, callable or array-like of shape             (n_clusters, n_features), default=\u2019k-means++\u2019. Method for initialization:\n\n'k-means++' : selects initial cluster centers for k-mean\nclustering in a smart way to speed up convergence. See section\nNotes in k_init for more details.\n'random': choose n_clusters observations (rows) at random from data\nfor the initial centroids.\nIf an array is passed, it should be of shape (n_clusters, n_features)\nand gives the initial centers.\nIf a callable is passed, it should take arguments X, n_clusters and a\nrandom state and return an initialization.\n\n"
                                    },
                                    "n_init": {
                                        "type": "integer",
                                        "description": "\u2018auto\u2019 or int, default=\u201dauto\u201d. Number of time the k-means algorithm will be run with different\ncentroid seeds. The final results will be the best output of\nn_init consecutive runs in terms of inertia.\nWhen n_init='auto', the number of runs depends on the value of init:\n10 if using init='random' or init is a callable;\n1 if using init='k-means++' or init is an array-like.\n\nAdded in version 1.2: Added \u2018auto\u2019 option for n_init.\n\n\nChanged in version 1.4: Default value for n_init changed to 'auto'.\n\n"
                                    },
                                    "max_iter": {
                                        "type": "integer",
                                        "description": "int, default=300. Maximum number of iterations of the k-means algorithm to run.\n"
                                    },
                                    "verbose": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Verbosity mode.\n"
                                    },
                                    "tol": {
                                        "type": "float",
                                        "description": "float, default=1e-4. Relative tolerance with regards to Frobenius norm of the difference\nin the cluster centers of two consecutive iterations to declare\nconvergence.\n"
                                    },
                                    "random_state": {
                                        "type": "integer",
                                        "description": "int, RandomState instance or None, default=None. Determines random number generation for centroid initialization. Use\nan int to make the randomness deterministic.\nSee Glossary.\n"
                                    },
                                    "copy_x": {
                                        "type": "boolean",
                                        "description": "bool, default=True. When pre-computing distances it is more numerically accurate to center\nthe data first. If copy_x is True (default), then the original data is\nnot modified. If False, the original data is modified, and put back\nbefore the function returns, but small numerical differences may be\nintroduced by subtracting and then adding the data mean. Note that if\nthe original data is not C-contiguous, a copy will be made even if\ncopy_x is False. If the original data is sparse, but not in CSR format,\na copy will be made even if copy_x is False.\n"
                                    },
                                    "algorithm": {
                                        "type": "{\u201clloyd\u201d, \u201celkan\u201d}, default=\u201dlloyd\u201d",
                                        "description": "{\u201clloyd\u201d, \u201celkan\u201d}, default=\u201dlloyd\u201d. K-means algorithm to use. The classical EM-style algorithm is \"lloyd\".\nThe \"elkan\" variation can be more efficient on some datasets with\nwell-defined clusters, by using the triangle inequality. However it\u2019s\nmore memory intensive due to the allocation of an extra array of shape\n(n_samples, n_clusters).\n\nChanged in version 0.18: Added Elkan algorithm\n\n\nChanged in version 1.1: Renamed \u201cfull\u201d to \u201clloyd\u201d, and deprecated \u201cauto\u201d and \u201cfull\u201d.\nChanged \u201cauto\u201d to use \u201clloyd\u201d instead of \u201celkan\u201d.\n\n"
                                    },
                                    "return_n_iter": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Whether or not to return the number of iterations.\n"
                                    }
                                },
                                "required": [
                                    "X",
                                    "n_clusters"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "mean_shift",
                        "func_desc": "Perform mean shift clustering of data using a flat kernel.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.cluster.mean_shift.html#sklearn.cluster.mean_shift",
                        "function_definitions": {
                            "function_name": "mean_shift",
                            "full_function": "sklearn.cluster.mean_shift(X, *, bandwidth=None, seeds=None, bin_seeding=False, min_bin_freq=1, cluster_all=True, max_iter=300, n_jobs=None)",
                            "function_text": "Perform mean shift clustering of data using a flat kernel. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/clustering.html#mean-shift",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples, n_features)",
                                    "param_desc": "Input data.\n"
                                },
                                {
                                    "param_name": "bandwidth",
                                    "param_type": "float, default=None",
                                    "param_desc": "Kernel bandwidth. If not None, must be in the range [0, +inf).\nIf None, the bandwidth is determined using a heuristic based on\nthe median of all pairwise distances. This will take quadratic time in\nthe number of samples. The sklearn.cluster.estimate_bandwidth function\ncan be used to do this more efficiently.\n"
                                },
                                {
                                    "param_name": "seeds",
                                    "param_type": "array-like of shape (n_seeds, n_features) or None",
                                    "param_desc": "Point used as initial kernel locations. If None and bin_seeding=False,\neach data point is used as a seed. If None and bin_seeding=True,\nsee bin_seeding.\n"
                                },
                                {
                                    "param_name": "bin_seeding",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If true, initial kernel locations are not locations of all\npoints, but rather the location of the discretized version of\npoints, where points are binned onto a grid whose coarseness\ncorresponds to the bandwidth. Setting this option to True will speed\nup the algorithm because fewer seeds will be initialized.\nIgnored if seeds argument is not None.\n"
                                },
                                {
                                    "param_name": "min_bin_freq",
                                    "param_type": "int, default=1",
                                    "param_desc": "To speed up the algorithm, accept only those bins with at least\nmin_bin_freq points as seeds.\n"
                                },
                                {
                                    "param_name": "cluster_all",
                                    "param_type": "bool, default=True",
                                    "param_desc": "If true, then all points are clustered, even those orphans that are\nnot within any kernel. Orphans are assigned to the nearest kernel.\nIf false, then orphans are given cluster label -1.\n"
                                },
                                {
                                    "param_name": "max_iter",
                                    "param_type": "int, default=300",
                                    "param_desc": "Maximum number of iterations, per seed point before the clustering\noperation terminates (for that seed point), if has not converged yet.\n"
                                },
                                {
                                    "param_name": "n_jobs",
                                    "param_type": "int, default=None",
                                    "param_desc": "The number of jobs to use for the computation. The following tasks benefit\nfrom the parallelization:\n\nThe search of nearest neighbors for bandwidth estimation and label\nassignments. See the details in the docstring of the\nNearestNeighbors class.\nHill-climbing optimization for all seeds.\n\nSee Glossary for more details.\nNone means 1 unless in a joblib.parallel_backend context.\n-1 means using all processors. See Glossary\nfor more details.\n\nAdded in version 0.17: Parallel Execution using n_jobs.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "mean_shift",
                            "descriptions": "Perform mean shift clustering of data using a flat kernel. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_features). Input data.\n"
                                    },
                                    "bandwidth": {
                                        "type": "float",
                                        "description": "float, default=None. Kernel bandwidth. If not None, must be in the range [0, +inf).\nIf None, the bandwidth is determined using a heuristic based on\nthe median of all pairwise distances. This will take quadratic time in\nthe number of samples. The sklearn.cluster.estimate_bandwidth function\ncan be used to do this more efficiently.\n"
                                    },
                                    "seeds": {
                                        "type": "array",
                                        "description": "array-like of shape (n_seeds, n_features) or None. Point used as initial kernel locations. If None and bin_seeding=False,\neach data point is used as a seed. If None and bin_seeding=True,\nsee bin_seeding.\n"
                                    },
                                    "bin_seeding": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If true, initial kernel locations are not locations of all\npoints, but rather the location of the discretized version of\npoints, where points are binned onto a grid whose coarseness\ncorresponds to the bandwidth. Setting this option to True will speed\nup the algorithm because fewer seeds will be initialized.\nIgnored if seeds argument is not None.\n"
                                    },
                                    "min_bin_freq": {
                                        "type": "integer",
                                        "description": "int, default=1. To speed up the algorithm, accept only those bins with at least\nmin_bin_freq points as seeds.\n"
                                    },
                                    "cluster_all": {
                                        "type": "boolean",
                                        "description": "bool, default=True. If true, then all points are clustered, even those orphans that are\nnot within any kernel. Orphans are assigned to the nearest kernel.\nIf false, then orphans are given cluster label -1.\n"
                                    },
                                    "max_iter": {
                                        "type": "integer",
                                        "description": "int, default=300. Maximum number of iterations, per seed point before the clustering\noperation terminates (for that seed point), if has not converged yet.\n"
                                    },
                                    "n_jobs": {
                                        "type": "integer",
                                        "description": "int, default=None. The number of jobs to use for the computation. The following tasks benefit\nfrom the parallelization:\n\nThe search of nearest neighbors for bandwidth estimation and label\nassignments. See the details in the docstring of the\nNearestNeighbors class.\nHill-climbing optimization for all seeds.\n\nSee Glossary for more details.\nNone means 1 unless in a joblib.parallel_backend context.\n-1 means using all processors. See Glossary\nfor more details.\n\nAdded in version 0.17: Parallel Execution using n_jobs.\n\n"
                                    }
                                },
                                "required": [
                                    "X"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "ward_tree",
                        "func_desc": "Ward clustering based on a Feature matrix.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.cluster.ward_tree.html#sklearn.cluster.ward_tree",
                        "function_definitions": {
                            "function_name": "ward_tree",
                            "full_function": "sklearn.cluster.ward_tree(X, *, connectivity=None, n_clusters=None, return_distance=False)",
                            "function_text": "Ward clustering based on a Feature matrix. Recursively merges the pair of clusters that minimally increases\nwithin-cluster variance. The inertia matrix uses a Heapq-based representation. This is the structured version, that takes into account some topological\nstructure between samples. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/clustering.html#hierarchical-clustering",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples, n_features)",
                                    "param_desc": "Feature matrix representing n_samples samples to be clustered.\n"
                                },
                                {
                                    "param_name": "connectivity",
                                    "param_type": "{array-like, sparse matrix}, default=None",
                                    "param_desc": "Connectivity matrix. Defines for each sample the neighboring samples\nfollowing a given structure of the data. The matrix is assumed to\nbe symmetric and only the upper triangular half is used.\nDefault is None, i.e, the Ward algorithm is unstructured.\n"
                                },
                                {
                                    "param_name": "n_clusters",
                                    "param_type": "int, default=None",
                                    "param_desc": "n_clusters should be less than n_samples.  Stop early the\nconstruction of the tree at n_clusters. This is useful to decrease\ncomputation time if the number of clusters is not small compared to the\nnumber of samples. In this case, the complete tree is not computed, thus\nthe \u2018children\u2019 output is of limited use, and the \u2018parents\u2019 output should\nrather be used. This option is valid only when specifying a connectivity\nmatrix.\n"
                                },
                                {
                                    "param_name": "return_distance",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If True, return the distance between the clusters.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "ward_tree",
                            "descriptions": "Ward clustering based on a Feature matrix. Recursively merges the pair of clusters that minimally increases\nwithin-cluster variance. The inertia matrix uses a Heapq-based representation. This is the structured version, that takes into account some topological\nstructure between samples. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_features). Feature matrix representing n_samples samples to be clustered.\n"
                                    },
                                    "connectivity": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix}, default=None. Connectivity matrix. Defines for each sample the neighboring samples\nfollowing a given structure of the data. The matrix is assumed to\nbe symmetric and only the upper triangular half is used.\nDefault is None, i.e, the Ward algorithm is unstructured.\n"
                                    },
                                    "n_clusters": {
                                        "type": "integer",
                                        "description": "int, default=None. n_clusters should be less than n_samples.  Stop early the\nconstruction of the tree at n_clusters. This is useful to decrease\ncomputation time if the number of clusters is not small compared to the\nnumber of samples. In this case, the complete tree is not computed, thus\nthe \u2018children\u2019 output is of limited use, and the \u2018parents\u2019 output should\nrather be used. This option is valid only when specifying a connectivity\nmatrix.\n"
                                    },
                                    "return_distance": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If True, return the distance between the clusters.\n"
                                    }
                                },
                                "required": [
                                    "X"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "AgglomerativeClustering",
                        "func_desc": "Agglomerative Clustering.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.cluster.AgglomerativeClustering.html#sklearn.cluster.AgglomerativeClustering",
                        "function_definitions": {
                            "function_name": "AgglomerativeClustering",
                            "full_function": "class sklearn.cluster.AgglomerativeClustering(n_clusters=2, *, metric='euclidean', memory=None, connectivity=None, compute_full_tree='auto', linkage='ward', distance_threshold=None, compute_distances=False)",
                            "function_text": "Agglomerative Clustering. Recursively merges pair of clusters of sample data; uses linkage distance. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/clustering.html#hierarchical-clustering",
                            "parameter_names_desc": [
                                {
                                    "param_name": "**params",
                                    "param_type": "dict",
                                    "param_desc": "Estimator parameters.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "AgglomerativeClustering",
                            "descriptions": "Agglomerative Clustering. Recursively merges pair of clusters of sample data; uses linkage distance. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "**params": {
                                        "type": "dict",
                                        "description": "dict. Estimator parameters.\n"
                                    }
                                },
                                "required": [
                                    "n_clusters=2"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "BisectingKMeans",
                        "func_desc": "Bisecting K-Means clustering.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.cluster.BisectingKMeans.html#sklearn.cluster.BisectingKMeans",
                        "function_definitions": {
                            "function_name": "BisectingKMeans",
                            "full_function": "class sklearn.cluster.BisectingKMeans(n_clusters=8, *, init='random', n_init=1, random_state=None, max_iter=300, verbose=0, tol=0.0001, copy_x=True, algorithm='lloyd', bisecting_strategy='biggest_inertia')",
                            "function_text": "Bisecting K-Means clustering. Read more in the User Guide. Added in version 1.1.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/clustering.html#bisect-k-means",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "New data to transform.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "BisectingKMeans",
                            "descriptions": "Bisecting K-Means clustering. Read more in the User Guide. Added in version 1.1.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). New data to transform.\n"
                                    }
                                },
                                "required": [
                                    "n_clusters=8"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "FeatureAgglomeration",
                        "func_desc": "Agglomerate features.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.cluster.FeatureAgglomeration.html#sklearn.cluster.FeatureAgglomeration",
                        "function_definitions": {
                            "function_name": "FeatureAgglomeration",
                            "full_function": "class sklearn.cluster.FeatureAgglomeration(n_clusters=2, *, metric='euclidean', memory=None, connectivity=None, compute_full_tree='auto', linkage='ward', pooling_func=<function mean>, distance_threshold=None, compute_distances=False)",
                            "function_text": "Agglomerate features. Recursively merges pair of clusters of features. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/clustering.html#hierarchical-clustering",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples, n_features) or                 (n_samples, n_samples)",
                                    "param_desc": "A M by N array of M observations in N dimensions or a length\nM array of M one-dimensional observations.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "FeatureAgglomeration",
                            "descriptions": "Agglomerate features. Recursively merges pair of clusters of features. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_features) or                 (n_samples, n_samples). A M by N array of M observations in N dimensions or a length\nM array of M one-dimensional observations.\n"
                                    }
                                },
                                "required": [
                                    "n_clusters=2"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "KMeans",
                        "func_desc": "K-Means clustering.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.cluster.KMeans.html#sklearn.cluster.KMeans",
                        "function_definitions": {
                            "function_name": "KMeans",
                            "full_function": "class sklearn.cluster.KMeans(n_clusters=8, *, init='k-means++', n_init='auto', max_iter=300, tol=0.0001, verbose=0, random_state=None, copy_x=True, algorithm='lloyd')",
                            "function_text": "K-Means clustering. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/clustering.html#k-means",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "New data to transform.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "KMeans",
                            "descriptions": "K-Means clustering. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). New data to transform.\n"
                                    }
                                },
                                "required": [
                                    "n_clusters=8"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "MiniBatchKMeans",
                        "func_desc": "Mini-Batch K-Means clustering.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.cluster.MiniBatchKMeans.html#sklearn.cluster.MiniBatchKMeans",
                        "function_definitions": {
                            "function_name": "MiniBatchKMeans",
                            "full_function": "class sklearn.cluster.MiniBatchKMeans(n_clusters=8, *, init='k-means++', max_iter=100, batch_size=1024, verbose=0, compute_labels=True, random_state=None, tol=0.0, max_no_improvement=10, init_size=None, n_init='auto', reassignment_ratio=0.01)",
                            "function_text": "Mini-Batch K-Means clustering. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/clustering.html#mini-batch-kmeans",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "New data to transform.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "MiniBatchKMeans",
                            "descriptions": "Mini-Batch K-Means clustering. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). New data to transform.\n"
                                    }
                                },
                                "required": [
                                    "n_clusters=8"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "SpectralBiclustering",
                        "func_desc": "Spectral biclustering (Kluger, 2003).",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.cluster.SpectralBiclustering.html#sklearn.cluster.SpectralBiclustering",
                        "function_definitions": {
                            "function_name": "SpectralBiclustering",
                            "full_function": "class sklearn.cluster.SpectralBiclustering(n_clusters=3, *, method='bistochastic', n_components=6, n_best=3, svd_method='randomized', n_svd_vecs=None, mini_batch=False, init='k-means++', n_init=10, random_state=None)",
                            "function_text": "Spectral biclustering (Kluger, 2003). Partitions rows and columns under the assumption that the data has\nan underlying checkerboard structure. For instance, if there are\ntwo row partitions and three column partitions, each row will\nbelong to three biclusters, and each column will belong to two\nbiclusters. The outer product of the corresponding row and column\nlabel vectors gives this checkerboard structure. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/biclustering.html#spectral-biclustering",
                            "parameter_names_desc": [
                                {
                                    "param_name": "**params",
                                    "param_type": "dict",
                                    "param_desc": "Estimator parameters.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "SpectralBiclustering",
                            "descriptions": "Spectral biclustering (Kluger, 2003). Partitions rows and columns under the assumption that the data has\nan underlying checkerboard structure. For instance, if there are\ntwo row partitions and three column partitions, each row will\nbelong to three biclusters, and each column will belong to two\nbiclusters. The outer product of the corresponding row and column\nlabel vectors gives this checkerboard structure. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "**params": {
                                        "type": "dict",
                                        "description": "dict. Estimator parameters.\n"
                                    }
                                },
                                "required": [
                                    "n_clusters=3"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "SpectralCoclustering",
                        "func_desc": "Spectral Co-Clustering algorithm (Dhillon, 2001).",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.cluster.SpectralCoclustering.html#sklearn.cluster.SpectralCoclustering",
                        "function_definitions": {
                            "function_name": "SpectralCoclustering",
                            "full_function": "class sklearn.cluster.SpectralCoclustering(n_clusters=3, *, svd_method='randomized', n_svd_vecs=None, mini_batch=False, init='k-means++', n_init=10, random_state=None)",
                            "function_text": "Spectral Co-Clustering algorithm (Dhillon, 2001). Clusters rows and columns of an array X to solve the relaxed\nnormalized cut of the bipartite graph created from X as follows:\nthe edge between row vertex i and column vertex j has weight\nX[i, j]. The resulting bicluster structure is block-diagonal, since each\nrow and each column belongs to exactly one bicluster. Supports sparse matrices, as long as they are nonnegative. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/biclustering.html#spectral-coclustering",
                            "parameter_names_desc": [
                                {
                                    "param_name": "**params",
                                    "param_type": "dict",
                                    "param_desc": "Estimator parameters.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "SpectralCoclustering",
                            "descriptions": "Spectral Co-Clustering algorithm (Dhillon, 2001). Clusters rows and columns of an array X to solve the relaxed\nnormalized cut of the bipartite graph created from X as follows:\nthe edge between row vertex i and column vertex j has weight\nX[i, j]. The resulting bicluster structure is block-diagonal, since each\nrow and each column belongs to exactly one bicluster. Supports sparse matrices, as long as they are nonnegative. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "**params": {
                                        "type": "dict",
                                        "description": "dict. Estimator parameters.\n"
                                    }
                                },
                                "required": [
                                    "n_clusters=3"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "cluster_optics_dbscan",
                        "func_desc": "Perform DBSCAN extraction for an arbitrary epsilon.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.cluster.cluster_optics_dbscan.html#sklearn.cluster.cluster_optics_dbscan",
                        "function_definitions": {
                            "function_name": "cluster_optics_dbscan",
                            "full_function": "sklearn.cluster.cluster_optics_dbscan(*, reachability, core_distances, ordering, eps)",
                            "function_text": "Perform DBSCAN extraction for an arbitrary epsilon. Extracting the clusters runs in linear time. Note that this results in\nlabels_ which are close to a DBSCAN with\nsimilar settings and eps, only if eps is close to max_eps.",
                            "func_text_user_guide": "sklearn.cluster.DBSCAN.html#sklearn.cluster.DBSCAN",
                            "parameter_names_desc": [
                                {
                                    "param_name": "reachability",
                                    "param_type": "ndarray of shape (n_samples,)",
                                    "param_desc": "Reachability distances calculated by OPTICS (reachability_).\n"
                                },
                                {
                                    "param_name": "core_distances",
                                    "param_type": "ndarray of shape (n_samples,)",
                                    "param_desc": "Distances at which points become core (core_distances_).\n"
                                },
                                {
                                    "param_name": "ordering",
                                    "param_type": "ndarray of shape (n_samples,)",
                                    "param_desc": "OPTICS ordered point indices (ordering_).\n"
                                },
                                {
                                    "param_name": "eps",
                                    "param_type": "float",
                                    "param_desc": "DBSCAN eps parameter. Must be set to < max_eps. Results\nwill be close to DBSCAN algorithm if eps and max_eps are close\nto one another.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "cluster_optics_dbscan",
                            "descriptions": "Perform DBSCAN extraction for an arbitrary epsilon. Extracting the clusters runs in linear time. Note that this results in\nlabels_ which are close to a DBSCAN with\nsimilar settings and eps, only if eps is close to max_eps.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "reachability": {
                                        "type": "array",
                                        "description": "ndarray of shape (n_samples,). Reachability distances calculated by OPTICS (reachability_).\n"
                                    },
                                    "core_distances": {
                                        "type": "array",
                                        "description": "ndarray of shape (n_samples,). Distances at which points become core (core_distances_).\n"
                                    },
                                    "ordering": {
                                        "type": "array",
                                        "description": "ndarray of shape (n_samples,). OPTICS ordered point indices (ordering_).\n"
                                    },
                                    "eps": {
                                        "type": "float",
                                        "description": "float. DBSCAN eps parameter. Must be set to < max_eps. Results\nwill be close to DBSCAN algorithm if eps and max_eps are close\nto one another.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "compute_optics_graph",
                        "func_desc": "Compute the OPTICS reachability graph.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.cluster.compute_optics_graph.html#sklearn.cluster.compute_optics_graph",
                        "function_definitions": {
                            "function_name": "compute_optics_graph",
                            "full_function": "sklearn.cluster.compute_optics_graph(X, *, min_samples, max_eps, metric, p, metric_params, algorithm, leaf_size, n_jobs)",
                            "function_text": "Compute the OPTICS reachability graph. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/clustering.html#optics",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{ndarray, sparse matrix} of shape (n_samples, n_features), or             (n_samples, n_samples) if metric=\u2019precomputed\u2019",
                                    "param_desc": "A feature array, or array of distances between samples if\nmetric=\u2019precomputed\u2019.\n"
                                },
                                {
                                    "param_name": "min_samples",
                                    "param_type": "int > 1 or float between 0 and 1",
                                    "param_desc": "The number of samples in a neighborhood for a point to be considered\nas a core point. Expressed as an absolute number or a fraction of the\nnumber of samples (rounded to be at least 2).\n"
                                },
                                {
                                    "param_name": "max_eps",
                                    "param_type": "float, default=np.inf",
                                    "param_desc": "The maximum distance between two samples for one to be considered as\nin the neighborhood of the other. Default value of np.inf will\nidentify clusters across all scales; reducing max_eps will result\nin shorter run times.\n"
                                },
                                {
                                    "param_name": "metric",
                                    "param_type": "str or callable, default=\u2019minkowski\u2019",
                                    "param_desc": "Metric to use for distance computation. Any metric from scikit-learn\nor scipy.spatial.distance can be used.\nIf metric is a callable function, it is called on each\npair of instances (rows) and the resulting value recorded. The callable\nshould take two arrays as input and return one value indicating the\ndistance between them. This works for Scipy\u2019s metrics, but is less\nefficient than passing the metric name as a string. If metric is\n\u201cprecomputed\u201d, X is assumed to be a distance matrix and must be square.\nValid values for metric are:\n\nfrom scikit-learn: [\u2018cityblock\u2019, \u2018cosine\u2019, \u2018euclidean\u2019, \u2018l1\u2019, \u2018l2\u2019,\n\u2018manhattan\u2019]\nfrom scipy.spatial.distance: [\u2018braycurtis\u2019, \u2018canberra\u2019, \u2018chebyshev\u2019,\n\u2018correlation\u2019, \u2018dice\u2019, \u2018hamming\u2019, \u2018jaccard\u2019, \u2018kulsinski\u2019,\n\u2018mahalanobis\u2019, \u2018minkowski\u2019, \u2018rogerstanimoto\u2019, \u2018russellrao\u2019,\n\u2018seuclidean\u2019, \u2018sokalmichener\u2019, \u2018sokalsneath\u2019, \u2018sqeuclidean\u2019,\n\u2018yule\u2019]\n\nSee the documentation for scipy.spatial.distance for details on these\nmetrics.\n\nNote\n'kulsinski' is deprecated from SciPy 1.9 and will be removed in SciPy 1.11.\n\n"
                                },
                                {
                                    "param_name": "p",
                                    "param_type": "float, default=2",
                                    "param_desc": "Parameter for the Minkowski metric from\npairwise_distances. When p = 1, this is\nequivalent to using manhattan_distance (l1), and euclidean_distance\n(l2) for p = 2. For arbitrary p, minkowski_distance (l_p) is used.\n"
                                },
                                {
                                    "param_name": "metric_params",
                                    "param_type": "dict, default=None",
                                    "param_desc": "Additional keyword arguments for the metric function.\n"
                                },
                                {
                                    "param_name": "algorithm",
                                    "param_type": "{\u2018auto\u2019, \u2018ball_tree\u2019, \u2018kd_tree\u2019, \u2018brute\u2019}, default=\u2019auto\u2019",
                                    "param_desc": "Algorithm used to compute the nearest neighbors:\n\n\u2018ball_tree\u2019 will use BallTree.\n\u2018kd_tree\u2019 will use KDTree.\n\u2018brute\u2019 will use a brute-force search.\n\u2018auto\u2019 will attempt to decide the most appropriate algorithm\nbased on the values passed to fit method. (default)\n\nNote: fitting on sparse input will override the setting of\nthis parameter, using brute force.\n"
                                },
                                {
                                    "param_name": "leaf_size",
                                    "param_type": "int, default=30",
                                    "param_desc": "Leaf size passed to BallTree or\nKDTree. This can affect the speed of the\nconstruction and query, as well as the memory required to store the\ntree. The optimal value depends on the nature of the problem.\n"
                                },
                                {
                                    "param_name": "n_jobs",
                                    "param_type": "int, default=None",
                                    "param_desc": "The number of parallel jobs to run for neighbors search.\nNone means 1 unless in a joblib.parallel_backend context.\n-1 means using all processors. See Glossary\nfor more details.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "compute_optics_graph",
                            "descriptions": "Compute the OPTICS reachability graph. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{ndarray, sparse matrix} of shape (n_samples, n_features), or             (n_samples, n_samples) if metric=\u2019precomputed\u2019. A feature array, or array of distances between samples if\nmetric=\u2019precomputed\u2019.\n"
                                    },
                                    "min_samples": {
                                        "type": "integer",
                                        "description": "int > 1 or float between 0 and 1. The number of samples in a neighborhood for a point to be considered\nas a core point. Expressed as an absolute number or a fraction of the\nnumber of samples (rounded to be at least 2).\n"
                                    },
                                    "max_eps": {
                                        "type": "float",
                                        "description": "float, default=np.inf. The maximum distance between two samples for one to be considered as\nin the neighborhood of the other. Default value of np.inf will\nidentify clusters across all scales; reducing max_eps will result\nin shorter run times.\n"
                                    },
                                    "metric": {
                                        "type": "string",
                                        "description": "str or callable, default=\u2019minkowski\u2019. Metric to use for distance computation. Any metric from scikit-learn\nor scipy.spatial.distance can be used.\nIf metric is a callable function, it is called on each\npair of instances (rows) and the resulting value recorded. The callable\nshould take two arrays as input and return one value indicating the\ndistance between them. This works for Scipy\u2019s metrics, but is less\nefficient than passing the metric name as a string. If metric is\n\u201cprecomputed\u201d, X is assumed to be a distance matrix and must be square.\nValid values for metric are:\n\nfrom scikit-learn: [\u2018cityblock\u2019, \u2018cosine\u2019, \u2018euclidean\u2019, \u2018l1\u2019, \u2018l2\u2019,\n\u2018manhattan\u2019]\nfrom scipy.spatial.distance: [\u2018braycurtis\u2019, \u2018canberra\u2019, \u2018chebyshev\u2019,\n\u2018correlation\u2019, \u2018dice\u2019, \u2018hamming\u2019, \u2018jaccard\u2019, \u2018kulsinski\u2019,\n\u2018mahalanobis\u2019, \u2018minkowski\u2019, \u2018rogerstanimoto\u2019, \u2018russellrao\u2019,\n\u2018seuclidean\u2019, \u2018sokalmichener\u2019, \u2018sokalsneath\u2019, \u2018sqeuclidean\u2019,\n\u2018yule\u2019]\n\nSee the documentation for scipy.spatial.distance for details on these\nmetrics.\n\nNote\n'kulsinski' is deprecated from SciPy 1.9 and will be removed in SciPy 1.11.\n\n"
                                    },
                                    "p": {
                                        "type": "float",
                                        "description": "float, default=2. Parameter for the Minkowski metric from\npairwise_distances. When p = 1, this is\nequivalent to using manhattan_distance (l1), and euclidean_distance\n(l2) for p = 2. For arbitrary p, minkowski_distance (l_p) is used.\n"
                                    },
                                    "metric_params": {
                                        "type": "dict, default=None",
                                        "description": "dict, default=None. Additional keyword arguments for the metric function.\n"
                                    },
                                    "algorithm": {
                                        "type": "string",
                                        "enum": [
                                            "auto",
                                            " ball_tree",
                                            " kd_tree",
                                            " brute"
                                        ],
                                        "description": "{\u2018auto\u2019, \u2018ball_tree\u2019, \u2018kd_tree\u2019, \u2018brute\u2019}, default=\u2019auto\u2019. Algorithm used to compute the nearest neighbors:\n\n\u2018ball_tree\u2019 will use BallTree.\n\u2018kd_tree\u2019 will use KDTree.\n\u2018brute\u2019 will use a brute-force search.\n\u2018auto\u2019 will attempt to decide the most appropriate algorithm\nbased on the values passed to fit method. (default)\n\nNote: fitting on sparse input will override the setting of\nthis parameter, using brute force.\n"
                                    },
                                    "leaf_size": {
                                        "type": "integer",
                                        "description": "int, default=30. Leaf size passed to BallTree or\nKDTree. This can affect the speed of the\nconstruction and query, as well as the memory required to store the\ntree. The optimal value depends on the nature of the problem.\n"
                                    },
                                    "n_jobs": {
                                        "type": "integer",
                                        "description": "int, default=None. The number of parallel jobs to run for neighbors search.\nNone means 1 unless in a joblib.parallel_backend context.\n-1 means using all processors. See Glossary\nfor more details.\n"
                                    }
                                },
                                "required": [
                                    "X"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "estimate_bandwidth",
                        "func_desc": "Estimate the bandwidth to use with the mean-shift algorithm.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.cluster.estimate_bandwidth.html#sklearn.cluster.estimate_bandwidth",
                        "function_definitions": {
                            "function_name": "estimate_bandwidth",
                            "full_function": "sklearn.cluster.estimate_bandwidth(X, *, quantile=0.3, n_samples=None, random_state=0, n_jobs=None)",
                            "function_text": "Estimate the bandwidth to use with the mean-shift algorithm. This function takes time at least quadratic in n_samples. For large\ndatasets, it is wise to subsample by setting n_samples. Alternatively,\nthe parameter bandwidth can be set to a small value without estimating\nit.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/glossary.html#term-random_state",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples, n_features)",
                                    "param_desc": "Input points.\n"
                                },
                                {
                                    "param_name": "quantile",
                                    "param_type": "float, default=0.3",
                                    "param_desc": "Should be between [0, 1]\n0.5 means that the median of all pairwise distances is used.\n"
                                },
                                {
                                    "param_name": "n_samples",
                                    "param_type": "int, default=None",
                                    "param_desc": "The number of samples to use. If not given, all samples are used.\n"
                                },
                                {
                                    "param_name": "random_state",
                                    "param_type": "int, RandomState instance, default=None",
                                    "param_desc": "The generator used to randomly select the samples from input points\nfor bandwidth estimation. Use an int to make the randomness\ndeterministic.\nSee Glossary.\n"
                                },
                                {
                                    "param_name": "n_jobs",
                                    "param_type": "int, default=None",
                                    "param_desc": "The number of parallel jobs to run for neighbors search.\nNone means 1 unless in a joblib.parallel_backend context.\n-1 means using all processors. See Glossary\nfor more details.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "estimate_bandwidth",
                            "descriptions": "Estimate the bandwidth to use with the mean-shift algorithm. This function takes time at least quadratic in n_samples. For large\ndatasets, it is wise to subsample by setting n_samples. Alternatively,\nthe parameter bandwidth can be set to a small value without estimating\nit.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_features). Input points.\n"
                                    },
                                    "quantile": {
                                        "type": "float",
                                        "description": "float, default=0.3. Should be between [0, 1]\n0.5 means that the median of all pairwise distances is used.\n"
                                    },
                                    "n_samples": {
                                        "type": "integer",
                                        "description": "int, default=None. The number of samples to use. If not given, all samples are used.\n"
                                    },
                                    "random_state": {
                                        "type": "integer",
                                        "description": "int, RandomState instance, default=None. The generator used to randomly select the samples from input points\nfor bandwidth estimation. Use an int to make the randomness\ndeterministic.\nSee Glossary.\n"
                                    },
                                    "n_jobs": {
                                        "type": "integer",
                                        "description": "int, default=None. The number of parallel jobs to run for neighbors search.\nNone means 1 unless in a joblib.parallel_backend context.\n-1 means using all processors. See Glossary\nfor more details.\n"
                                    }
                                },
                                "required": [
                                    "X"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "kmeans_plusplus",
                        "func_desc": "Init n_clusters seeds according to k-means++.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.cluster.kmeans_plusplus.html#sklearn.cluster.kmeans_plusplus",
                        "function_definitions": {
                            "function_name": "kmeans_plusplus",
                            "full_function": "sklearn.cluster.kmeans_plusplus(X, n_clusters, *, sample_weight=None, x_squared_norms=None, random_state=None, n_local_trials=None)",
                            "function_text": "Init n_clusters seeds according to k-means++. Added in version 0.24.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/glossary.html#term-random_state",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "The data to pick seeds from.\n"
                                },
                                {
                                    "param_name": "n_clusters",
                                    "param_type": "int",
                                    "param_desc": "The number of centroids to initialize.\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "The weights for each observation in X. If None, all observations\nare assigned equal weight. sample_weight is ignored if init\nis a callable or a user provided array.\n\nAdded in version 1.3.\n\n"
                                },
                                {
                                    "param_name": "x_squared_norms",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Squared Euclidean norm of each data point.\n"
                                },
                                {
                                    "param_name": "random_state",
                                    "param_type": "int or RandomState instance, default=None",
                                    "param_desc": "Determines random number generation for centroid initialization. Pass\nan int for reproducible output across multiple function calls.\nSee Glossary.\n"
                                },
                                {
                                    "param_name": "n_local_trials",
                                    "param_type": "int, default=None",
                                    "param_desc": "The number of seeding trials for each center (except the first),\nof which the one reducing inertia the most is greedily chosen.\nSet to None to make the number of trials depend logarithmically\non the number of seeds (2+log(k)) which is the recommended setting.\nSetting to 1 disables the greedy cluster selection and recovers the\nvanilla k-means++ algorithm which was empirically shown to work less\nwell than its greedy variant.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "kmeans_plusplus",
                            "descriptions": "Init n_clusters seeds according to k-means++. Added in version 0.24.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). The data to pick seeds from.\n"
                                    },
                                    "n_clusters": {
                                        "type": "integer",
                                        "description": "int. The number of centroids to initialize.\n"
                                    },
                                    "sample_weight": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. The weights for each observation in X. If None, all observations\nare assigned equal weight. sample_weight is ignored if init\nis a callable or a user provided array.\n\nAdded in version 1.3.\n\n"
                                    },
                                    "x_squared_norms": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Squared Euclidean norm of each data point.\n"
                                    },
                                    "random_state": {
                                        "type": "integer",
                                        "description": "int or RandomState instance, default=None. Determines random number generation for centroid initialization. Pass\nan int for reproducible output across multiple function calls.\nSee Glossary.\n"
                                    },
                                    "n_local_trials": {
                                        "type": "integer",
                                        "description": "int, default=None. The number of seeding trials for each center (except the first),\nof which the one reducing inertia the most is greedily chosen.\nSet to None to make the number of trials depend logarithmically\non the number of seeds (2+log(k)) which is the recommended setting.\nSetting to 1 disables the greedy cluster selection and recovers the\nvanilla k-means++ algorithm which was empirically shown to work less\nwell than its greedy variant.\n"
                                    }
                                },
                                "required": [
                                    "X",
                                    "n_clusters"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "spectral_clustering",
                        "func_desc": "Apply clustering to a projection of the normalized Laplacian.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.cluster.spectral_clustering.html#sklearn.cluster.spectral_clustering",
                        "function_definitions": {
                            "function_name": "spectral_clustering",
                            "full_function": "sklearn.cluster.spectral_clustering(affinity, *, n_clusters=8, n_components=None, eigen_solver=None, random_state=None, n_init=10, eigen_tol='auto', assign_labels='kmeans', verbose=False)",
                            "function_text": "Apply clustering to a projection of the normalized Laplacian. In practice Spectral Clustering is very useful when the structure of\nthe individual clusters is highly non-convex or more generally when\na measure of the center and spread of the cluster is not a suitable\ndescription of the complete cluster. For instance, when clusters are\nnested circles on the 2D plane. If affinity is the adjacency matrix of a graph, this method can be\nused to find normalized graph cuts [1], [2]. Read more in the User Guide.",
                            "func_text_user_guide": "#r89dec4780971-1",
                            "parameter_names_desc": [
                                {
                                    "param_name": "affinity",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_samples)",
                                    "param_desc": "The affinity matrix describing the relationship of the samples to\nembed. Must be symmetric.\n\nPossible examples:\nadjacency matrix of a graph,\nheat kernel of the pairwise distance matrix of the samples,\nsymmetric k-nearest neighbours connectivity matrix of the samples.\n\n\n\n"
                                },
                                {
                                    "param_name": "n_clusters",
                                    "param_type": "int, default=None",
                                    "param_desc": "Number of clusters to extract.\n"
                                },
                                {
                                    "param_name": "n_components",
                                    "param_type": "int, default=n_clusters",
                                    "param_desc": "Number of eigenvectors to use for the spectral embedding.\n"
                                },
                                {
                                    "param_name": "eigen_solver",
                                    "param_type": "{None, \u2018arpack\u2019, \u2018lobpcg\u2019, or \u2018amg\u2019}",
                                    "param_desc": "The eigenvalue decomposition method. If None then 'arpack' is used.\nSee [4] for more details regarding 'lobpcg'.\nEigensolver 'amg' runs 'lobpcg' with optional\nAlgebraic MultiGrid preconditioning and requires pyamg to be installed.\nIt can be faster on very large sparse problems [6] and [7].\n"
                                },
                                {
                                    "param_name": "random_state",
                                    "param_type": "int, RandomState instance, default=None",
                                    "param_desc": "A pseudo random number generator used for the initialization\nof the lobpcg eigenvectors decomposition when eigen_solver ==\n'amg', and for the K-Means initialization. Use an int to make\nthe results deterministic across calls (See\nGlossary).\n\nNote\nWhen using eigen_solver == 'amg',\nit is necessary to also fix the global numpy seed with\nnp.random.seed(int) to get deterministic results. See\npyamg/pyamg#139 for further\ninformation.\n\n"
                                },
                                {
                                    "param_name": "n_init",
                                    "param_type": "int, default=10",
                                    "param_desc": "Number of time the k-means algorithm will be run with different\ncentroid seeds. The final results will be the best output of n_init\nconsecutive runs in terms of inertia. Only used if\nassign_labels='kmeans'.\n"
                                },
                                {
                                    "param_name": "eigen_tol",
                                    "param_type": "float, default=\u201dauto\u201d",
                                    "param_desc": "Stopping criterion for eigendecomposition of the Laplacian matrix.\nIf eigen_tol=\"auto\" then the passed tolerance will depend on the\neigen_solver:\n\nIf eigen_solver=\"arpack\", then eigen_tol=0.0;\nIf eigen_solver=\"lobpcg\" or eigen_solver=\"amg\", then\neigen_tol=None which configures the underlying lobpcg solver to\nautomatically resolve the value according to their heuristics. See,\nscipy.sparse.linalg.lobpcg for details.\n\nNote that when using eigen_solver=\"lobpcg\" or eigen_solver=\"amg\"\nvalues of tol<1e-5 may lead to convergence issues and should be\navoided.\n\nAdded in version 1.2: Added \u2018auto\u2019 option.\n\n"
                                },
                                {
                                    "param_name": "assign_labels",
                                    "param_type": "{\u2018kmeans\u2019, \u2018discretize\u2019, \u2018cluster_qr\u2019}, default=\u2019kmeans\u2019",
                                    "param_desc": "The strategy to use to assign labels in the embedding\nspace.  There are three ways to assign labels after the Laplacian\nembedding.  k-means can be applied and is a popular choice. But it can\nalso be sensitive to initialization. Discretization is another\napproach which is less sensitive to random initialization [3].\nThe cluster_qr method [5] directly extracts clusters from eigenvectors\nin spectral clustering. In contrast to k-means and discretization, cluster_qr\nhas no tuning parameters and is not an iterative method, yet may outperform\nk-means and discretization in terms of both quality and speed.\n\nChanged in version 1.1: Added new labeling method \u2018cluster_qr\u2019.\n\n"
                                },
                                {
                                    "param_name": "verbose",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Verbosity mode.\n\nAdded in version 0.24.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "spectral_clustering",
                            "descriptions": "Apply clustering to a projection of the normalized Laplacian. In practice Spectral Clustering is very useful when the structure of\nthe individual clusters is highly non-convex or more generally when\na measure of the center and spread of the cluster is not a suitable\ndescription of the complete cluster. For instance, when clusters are\nnested circles on the 2D plane. If affinity is the adjacency matrix of a graph, this method can be\nused to find normalized graph cuts [1], [2]. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "affinity": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_samples). The affinity matrix describing the relationship of the samples to\nembed. Must be symmetric.\n\nPossible examples:\nadjacency matrix of a graph,\nheat kernel of the pairwise distance matrix of the samples,\nsymmetric k-nearest neighbours connectivity matrix of the samples.\n\n\n\n"
                                    },
                                    "n_clusters": {
                                        "type": "integer",
                                        "description": "int, default=None. Number of clusters to extract.\n"
                                    },
                                    "n_components": {
                                        "type": "integer",
                                        "description": "int, default=n_clusters. Number of eigenvectors to use for the spectral embedding.\n"
                                    },
                                    "eigen_solver": {
                                        "type": "string",
                                        "enum": [
                                            "None",
                                            " arpack",
                                            " lobpcg",
                                            " or amg"
                                        ],
                                        "description": "{None, \u2018arpack\u2019, \u2018lobpcg\u2019, or \u2018amg\u2019}. The eigenvalue decomposition method. If None then 'arpack' is used.\nSee [4] for more details regarding 'lobpcg'.\nEigensolver 'amg' runs 'lobpcg' with optional\nAlgebraic MultiGrid preconditioning and requires pyamg to be installed.\nIt can be faster on very large sparse problems [6] and [7].\n"
                                    },
                                    "random_state": {
                                        "type": "integer",
                                        "description": "int, RandomState instance, default=None. A pseudo random number generator used for the initialization\nof the lobpcg eigenvectors decomposition when eigen_solver ==\n'amg', and for the K-Means initialization. Use an int to make\nthe results deterministic across calls (See\nGlossary).\n\nNote\nWhen using eigen_solver == 'amg',\nit is necessary to also fix the global numpy seed with\nnp.random.seed(int) to get deterministic results. See\npyamg/pyamg#139 for further\ninformation.\n\n"
                                    },
                                    "n_init": {
                                        "type": "integer",
                                        "description": "int, default=10. Number of time the k-means algorithm will be run with different\ncentroid seeds. The final results will be the best output of n_init\nconsecutive runs in terms of inertia. Only used if\nassign_labels='kmeans'.\n"
                                    },
                                    "eigen_tol": {
                                        "type": "float",
                                        "description": "float, default=\u201dauto\u201d. Stopping criterion for eigendecomposition of the Laplacian matrix.\nIf eigen_tol=\"auto\" then the passed tolerance will depend on the\neigen_solver:\n\nIf eigen_solver=\"arpack\", then eigen_tol=0.0;\nIf eigen_solver=\"lobpcg\" or eigen_solver=\"amg\", then\neigen_tol=None which configures the underlying lobpcg solver to\nautomatically resolve the value according to their heuristics. See,\nscipy.sparse.linalg.lobpcg for details.\n\nNote that when using eigen_solver=\"lobpcg\" or eigen_solver=\"amg\"\nvalues of tol<1e-5 may lead to convergence issues and should be\navoided.\n\nAdded in version 1.2: Added \u2018auto\u2019 option.\n\n"
                                    },
                                    "assign_labels": {
                                        "type": "string",
                                        "enum": [
                                            "kmeans",
                                            " discretize",
                                            " cluster_qr"
                                        ],
                                        "description": "{\u2018kmeans\u2019, \u2018discretize\u2019, \u2018cluster_qr\u2019}, default=\u2019kmeans\u2019. The strategy to use to assign labels in the embedding\nspace.  There are three ways to assign labels after the Laplacian\nembedding.  k-means can be applied and is a popular choice. But it can\nalso be sensitive to initialization. Discretization is another\napproach which is less sensitive to random initialization [3].\nThe cluster_qr method [5] directly extracts clusters from eigenvectors\nin spectral clustering. In contrast to k-means and discretization, cluster_qr\nhas no tuning parameters and is not an iterative method, yet may outperform\nk-means and discretization in terms of both quality and speed.\n\nChanged in version 1.1: Added new labeling method \u2018cluster_qr\u2019.\n\n"
                                    },
                                    "verbose": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Verbosity mode.\n\nAdded in version 0.24.\n\n"
                                    }
                                },
                                "required": [
                                    "affinity"
                                ]
                            }
                        }
                    }
                ]
            }
        ],
        "name": "sklearn.cluster",
        "url": "https://scikit-learn.org/stable/api/sklearn.cluster.html"
    },
    "sklearn.compose.html": {
        "functions": [
            {
                "defaults": [
                    {
                        "func_name": "ColumnTransformer",
                        "func_desc": "Applies transformers to columns of an array or pandas DataFrame.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.compose.ColumnTransformer.html#sklearn.compose.ColumnTransformer",
                        "function_definitions": {
                            "function_name": "ColumnTransformer",
                            "full_function": "class sklearn.compose.ColumnTransformer(transformers, *, remainder='drop', sparse_threshold=0.3, n_jobs=None, transformer_weights=None, verbose=False, verbose_feature_names_out=True, force_int_remainder_cols=True)",
                            "function_text": "Applies transformers to columns of an array or pandas DataFrame. This estimator allows different columns or column subsets of the input\nto be transformed separately and the features generated by each transformer\nwill be concatenated to form a single feature space.\nThis is useful for heterogeneous or columnar data, to combine several\nfeature extraction mechanisms or transformations into a single transformer. Read more in the User Guide. Added in version 0.20.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/compose.html#column-transformer",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, dataframe} of shape (n_samples, n_features)",
                                    "param_desc": "The data to be transformed by subset.\n"
                                },
                                {
                                    "param_name": "**params",
                                    "param_type": "dict, default=None",
                                    "param_desc": "Parameters to be passed to the underlying transformers\u2019 transform\nmethod.\nYou can only pass this if metadata routing is enabled, which you\ncan enable using sklearn.set_config(enable_metadata_routing=True).\n\nAdded in version 1.4.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "ColumnTransformer",
                            "descriptions": "Applies transformers to columns of an array or pandas DataFrame. This estimator allows different columns or column subsets of the input\nto be transformed separately and the features generated by each transformer\nwill be concatenated to form a single feature space.\nThis is useful for heterogeneous or columnar data, to combine several\nfeature extraction mechanisms or transformations into a single transformer. Read more in the User Guide. Added in version 0.20.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, dataframe} of shape (n_samples, n_features). The data to be transformed by subset.\n"
                                    },
                                    "**params": {
                                        "type": "dict, default=None",
                                        "description": "dict, default=None. Parameters to be passed to the underlying transformers\u2019 transform\nmethod.\nYou can only pass this if metadata routing is enabled, which you\ncan enable using sklearn.set_config(enable_metadata_routing=True).\n\nAdded in version 1.4.\n\n"
                                    }
                                },
                                "required": [
                                    "transformers"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "make_column_selector",
                        "func_desc": "Create a callable to select columns to be used with ColumnTransformer.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.compose.make_column_selector.html#sklearn.compose.make_column_selector",
                        "function_definitions": {
                            "function_name": "make_column_selector",
                            "full_function": "class sklearn.compose.make_column_selector(pattern=None, *, dtype_include=None, dtype_exclude=None)",
                            "function_text": "Create a callable to select columns to be used with\nColumnTransformer. make_column_selector can select columns based on datatype or the\ncolumns name with a regex. When using multiple selection criteria, all\ncriteria must match for a column to be selected. For an example of how to use make_column_selector within a\nColumnTransformer to select columns based on data type (i.e.\ndtype), refer to\nColumn Transformer with Mixed Types.",
                            "func_text_user_guide": "sklearn.compose.ColumnTransformer.html#sklearn.compose.ColumnTransformer",
                            "parameter_names_desc": [
                                {
                                    "param_name": "df",
                                    "param_type": "dataframe of shape (n_features, n_samples)",
                                    "param_desc": "DataFrame to select columns from.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "make_column_selector",
                            "descriptions": "Create a callable to select columns to be used with\nColumnTransformer. make_column_selector can select columns based on datatype or the\ncolumns name with a regex. When using multiple selection criteria, all\ncriteria must match for a column to be selected. For an example of how to use make_column_selector within a\nColumnTransformer to select columns based on data type (i.e.\ndtype), refer to\nColumn Transformer with Mixed Types.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "df": {
                                        "type": "dataframe of shape (n_features, n_samples)",
                                        "description": "dataframe of shape (n_features, n_samples). DataFrame to select columns from.\n"
                                    }
                                },
                                "required": [
                                    "pattern=None"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "TransformedTargetRegressor",
                        "func_desc": "Meta-estimator to regress on a transformed target.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.compose.TransformedTargetRegressor.html#sklearn.compose.TransformedTargetRegressor",
                        "function_definitions": {
                            "function_name": "TransformedTargetRegressor",
                            "full_function": "class sklearn.compose.TransformedTargetRegressor(regressor=None, *, transformer=None, func=None, inverse_func=None, check_inverse=True)",
                            "function_text": "Meta-estimator to regress on a transformed target. Useful for applying a non-linear transformation to the target y in\nregression problems. This transformation can be given as a Transformer\nsuch as the QuantileTransformer or as a\nfunction and its inverse such as np.log and np.exp. The computation during fit is: or: The computation during predict is: or: Read more in the User Guide. Added in version 0.20.",
                            "func_text_user_guide": "sklearn.preprocessing.QuantileTransformer.html#sklearn.preprocessing.QuantileTransformer",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "TransformedTargetRegressor",
                            "descriptions": "Meta-estimator to regress on a transformed target. Useful for applying a non-linear transformation to the target y in\nregression problems. This transformation can be given as a Transformer\nsuch as the QuantileTransformer or as a\nfunction and its inverse such as np.log and np.exp. The computation during fit is: or: The computation during predict is: or: Read more in the User Guide. Added in version 0.20.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": [
                                    "regressor=None"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "make_column_transformer",
                        "func_desc": "Construct a ColumnTransformer from the given transformers.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.compose.make_column_transformer.html#sklearn.compose.make_column_transformer",
                        "function_definitions": {
                            "function_name": "make_column_transformer",
                            "full_function": "sklearn.compose.make_column_transformer(*transformers, remainder='drop', sparse_threshold=0.3, n_jobs=None, verbose=False, verbose_feature_names_out=True, force_int_remainder_cols=True)",
                            "function_text": "Construct a ColumnTransformer from the given transformers. This is a shorthand for the ColumnTransformer constructor; it does not\nrequire, and does not permit, naming the transformers. Instead, they will\nbe given names automatically based on their types. It also does not allow\nweighting with transformer_weights. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/compose.html#make-column-transformer",
                            "parameter_names_desc": [
                                {
                                    "param_name": "*transformers",
                                    "param_type": "tuples",
                                    "param_desc": "Tuples of the form (transformer, columns) specifying the\ntransformer objects to be applied to subsets of the data.\n\ntransformer{\u2018drop\u2019, \u2018passthrough\u2019} or estimatorEstimator must support fit and transform.\nSpecial-cased strings \u2018drop\u2019 and \u2018passthrough\u2019 are accepted as\nwell, to indicate to drop the columns or to pass them through\nuntransformed, respectively.\n\ncolumnsstr,  array-like of str, int, array-like of int, slice,                 array-like of bool or callableIndexes the data on its second axis. Integers are interpreted as\npositional columns, while strings can reference DataFrame columns\nby name. A scalar string or int should be used where\ntransformer expects X to be a 1d array-like (vector),\notherwise a 2d array will be passed to the transformer.\nA callable is passed the input data X and can return any of the\nabove. To select multiple columns by name or dtype, you can use\nmake_column_selector.\n\n\n"
                                },
                                {
                                    "param_name": "remainder",
                                    "param_type": "{\u2018drop\u2019, \u2018passthrough\u2019} or estimator, default=\u2019drop\u2019",
                                    "param_desc": "By default, only the specified columns in transformers are\ntransformed and combined in the output, and the non-specified\ncolumns are dropped. (default of 'drop').\nBy specifying remainder='passthrough', all remaining columns that\nwere not specified in transformers will be automatically passed\nthrough. This subset of columns is concatenated with the output of\nthe transformers.\nBy setting remainder to be an estimator, the remaining\nnon-specified columns will use the remainder estimator. The\nestimator must support fit and transform.\n"
                                },
                                {
                                    "param_name": "sparse_threshold",
                                    "param_type": "float, default=0.3",
                                    "param_desc": "If the transformed output consists of a mix of sparse and dense data,\nit will be stacked as a sparse matrix if the density is lower than this\nvalue. Use sparse_threshold=0 to always return dense.\nWhen the transformed output consists of all sparse or all dense data,\nthe stacked result will be sparse or dense, respectively, and this\nkeyword will be ignored.\n"
                                },
                                {
                                    "param_name": "n_jobs",
                                    "param_type": "int, default=None",
                                    "param_desc": "Number of jobs to run in parallel.\nNone means 1 unless in a joblib.parallel_backend context.\n-1 means using all processors. See Glossary\nfor more details.\n"
                                },
                                {
                                    "param_name": "verbose",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If True, the time elapsed while fitting each transformer will be\nprinted as it is completed.\n"
                                },
                                {
                                    "param_name": "verbose_feature_names_out",
                                    "param_type": "bool, default=True",
                                    "param_desc": "If True, ColumnTransformer.get_feature_names_out will prefix\nall feature names with the name of the transformer that generated that\nfeature.\nIf False, ColumnTransformer.get_feature_names_out will not\nprefix any feature names and will error if feature names are not\nunique.\n\nAdded in version 1.0.\n\n"
                                },
                                {
                                    "param_name": "force_int_remainder_cols",
                                    "param_type": "bool, default=True",
                                    "param_desc": "Force the columns of the last entry of transformers_, which\ncorresponds to the \u201cremainder\u201d transformer, to always be stored as\nindices (int) rather than column names (str). See description of the\nColumnTransformer.transformers_ attribute for details.\n\nNote\nIf you do not access the list of columns for the remainder columns\nin the ColumnTransformer.transformers_ fitted attribute,\nyou do not need to set this parameter.\n\n\nAdded in version 1.5.\n\n\nChanged in version 1.7: The default value for force_int_remainder_cols will change from\nTrue to False in version 1.7.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "make_column_transformer",
                            "descriptions": "Construct a ColumnTransformer from the given transformers. This is a shorthand for the ColumnTransformer constructor; it does not\nrequire, and does not permit, naming the transformers. Instead, they will\nbe given names automatically based on their types. It also does not allow\nweighting with transformer_weights. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "*transformers": {
                                        "type": "tuples",
                                        "description": "tuples. Tuples of the form (transformer, columns) specifying the\ntransformer objects to be applied to subsets of the data.\n\ntransformer{\u2018drop\u2019, \u2018passthrough\u2019} or estimatorEstimator must support fit and transform.\nSpecial-cased strings \u2018drop\u2019 and \u2018passthrough\u2019 are accepted as\nwell, to indicate to drop the columns or to pass them through\nuntransformed, respectively.\n\ncolumnsstr,  array-like of str, int, array-like of int, slice,                 array-like of bool or callableIndexes the data on its second axis. Integers are interpreted as\npositional columns, while strings can reference DataFrame columns\nby name. A scalar string or int should be used where\ntransformer expects X to be a 1d array-like (vector),\notherwise a 2d array will be passed to the transformer.\nA callable is passed the input data X and can return any of the\nabove. To select multiple columns by name or dtype, you can use\nmake_column_selector.\n\n\n"
                                    },
                                    "remainder": {
                                        "type": "string",
                                        "enum": [
                                            "drop",
                                            " passthrough"
                                        ],
                                        "description": "{\u2018drop\u2019, \u2018passthrough\u2019} or estimator, default=\u2019drop\u2019. By default, only the specified columns in transformers are\ntransformed and combined in the output, and the non-specified\ncolumns are dropped. (default of 'drop').\nBy specifying remainder='passthrough', all remaining columns that\nwere not specified in transformers will be automatically passed\nthrough. This subset of columns is concatenated with the output of\nthe transformers.\nBy setting remainder to be an estimator, the remaining\nnon-specified columns will use the remainder estimator. The\nestimator must support fit and transform.\n"
                                    },
                                    "sparse_threshold": {
                                        "type": "float",
                                        "description": "float, default=0.3. If the transformed output consists of a mix of sparse and dense data,\nit will be stacked as a sparse matrix if the density is lower than this\nvalue. Use sparse_threshold=0 to always return dense.\nWhen the transformed output consists of all sparse or all dense data,\nthe stacked result will be sparse or dense, respectively, and this\nkeyword will be ignored.\n"
                                    },
                                    "n_jobs": {
                                        "type": "integer",
                                        "description": "int, default=None. Number of jobs to run in parallel.\nNone means 1 unless in a joblib.parallel_backend context.\n-1 means using all processors. See Glossary\nfor more details.\n"
                                    },
                                    "verbose": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If True, the time elapsed while fitting each transformer will be\nprinted as it is completed.\n"
                                    },
                                    "verbose_feature_names_out": {
                                        "type": "boolean",
                                        "description": "bool, default=True. If True, ColumnTransformer.get_feature_names_out will prefix\nall feature names with the name of the transformer that generated that\nfeature.\nIf False, ColumnTransformer.get_feature_names_out will not\nprefix any feature names and will error if feature names are not\nunique.\n\nAdded in version 1.0.\n\n"
                                    },
                                    "force_int_remainder_cols": {
                                        "type": "boolean",
                                        "description": "bool, default=True. Force the columns of the last entry of transformers_, which\ncorresponds to the \u201cremainder\u201d transformer, to always be stored as\nindices (int) rather than column names (str). See description of the\nColumnTransformer.transformers_ attribute for details.\n\nNote\nIf you do not access the list of columns for the remainder columns\nin the ColumnTransformer.transformers_ fitted attribute,\nyou do not need to set this parameter.\n\n\nAdded in version 1.5.\n\n\nChanged in version 1.7: The default value for force_int_remainder_cols will change from\nTrue to False in version 1.7.\n\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    }
                ]
            }
        ],
        "name": "sklearn.compose",
        "url": "https://scikit-learn.org/stable/api/sklearn.compose.html"
    },
    "sklearn.covariance.html": {
        "functions": [
            {
                "defaults": [
                    {
                        "func_name": "EllipticEnvelope",
                        "func_desc": "An object for detecting outliers in a Gaussian distributed dataset.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.covariance.EllipticEnvelope.html#sklearn.covariance.EllipticEnvelope",
                        "function_definitions": {
                            "function_name": "EllipticEnvelope",
                            "full_function": "class sklearn.covariance.EllipticEnvelope(*, store_precision=True, assume_centered=False, support_fraction=None, contamination=0.1, random_state=None)",
                            "function_text": "An object for detecting outliers in a Gaussian distributed dataset. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/outlier_detection.html#outlier-detection",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "EllipticEnvelope",
                            "descriptions": "An object for detecting outliers in a Gaussian distributed dataset. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "GraphicalLasso",
                        "func_desc": "Sparse inverse covariance estimation with an l1-penalized estimator.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.covariance.GraphicalLasso.html#sklearn.covariance.GraphicalLasso",
                        "function_definitions": {
                            "function_name": "GraphicalLasso",
                            "full_function": "class sklearn.covariance.GraphicalLasso(alpha=0.01, *, mode='cd', covariance=None, tol=0.0001, enet_tol=0.0001, max_iter=100, verbose=False, eps=2.220446049250313e-16, assume_centered=False)",
                            "function_text": "Sparse inverse covariance estimation with an l1-penalized estimator. Read more in the User Guide. Changed in version v0.20: GraphLasso has been renamed to GraphicalLasso",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/covariance.html#sparse-inverse-covariance",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X_test",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for X_test parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "GraphicalLasso",
                            "descriptions": "Sparse inverse covariance estimation with an l1-penalized estimator. Read more in the User Guide. Changed in version v0.20: GraphLasso has been renamed to GraphicalLasso",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X_test": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for X_test parameter in score.\n"
                                    }
                                },
                                "required": [
                                    "alpha=0.01"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "LedoitWolf",
                        "func_desc": "LedoitWolf Estimator.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.covariance.LedoitWolf.html#sklearn.covariance.LedoitWolf",
                        "function_definitions": {
                            "function_name": "LedoitWolf",
                            "full_function": "class sklearn.covariance.LedoitWolf(*, store_precision=True, assume_centered=False, block_size=1000)",
                            "function_text": "LedoitWolf Estimator. Ledoit-Wolf is a particular form of shrinkage, where the shrinkage\ncoefficient is computed using O. Ledoit and M. Wolf\u2019s formula as\ndescribed in \u201cA Well-Conditioned Estimator for Large-Dimensional\nCovariance Matrices\u201d, Ledoit and Wolf, Journal of Multivariate\nAnalysis, Volume 88, Issue 2, February 2004, pages 365-411. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/covariance.html#shrunk-covariance",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X_test",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for X_test parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "LedoitWolf",
                            "descriptions": "LedoitWolf Estimator. Ledoit-Wolf is a particular form of shrinkage, where the shrinkage\ncoefficient is computed using O. Ledoit and M. Wolf\u2019s formula as\ndescribed in \u201cA Well-Conditioned Estimator for Large-Dimensional\nCovariance Matrices\u201d, Ledoit and Wolf, Journal of Multivariate\nAnalysis, Volume 88, Issue 2, February 2004, pages 365-411. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X_test": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for X_test parameter in score.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "OAS",
                        "func_desc": "Oracle Approximating Shrinkage Estimator.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.covariance.OAS.html#sklearn.covariance.OAS",
                        "function_definitions": {
                            "function_name": "OAS",
                            "full_function": "class sklearn.covariance.OAS(*, store_precision=True, assume_centered=False)",
                            "function_text": "Oracle Approximating Shrinkage Estimator. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/covariance.html#shrunk-covariance",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X_test",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for X_test parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "OAS",
                            "descriptions": "Oracle Approximating Shrinkage Estimator. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X_test": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for X_test parameter in score.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "empirical_covariance",
                        "func_desc": "Compute the Maximum likelihood covariance estimator.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.covariance.empirical_covariance.html#sklearn.covariance.empirical_covariance",
                        "function_definitions": {
                            "function_name": "empirical_covariance",
                            "full_function": "sklearn.covariance.empirical_covariance(X, *, assume_centered=False)",
                            "function_text": "Compute the Maximum likelihood covariance estimator.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "ndarray of shape (n_samples, n_features)",
                                    "param_desc": "Data from which to compute the covariance estimate.\n"
                                },
                                {
                                    "param_name": "assume_centered",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If True, data will not be centered before computation.\nUseful when working with data whose mean is almost, but not exactly\nzero.\nIf False, data will be centered before computation.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "empirical_covariance",
                            "descriptions": "Compute the Maximum likelihood covariance estimator.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "ndarray of shape (n_samples, n_features). Data from which to compute the covariance estimate.\n"
                                    },
                                    "assume_centered": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If True, data will not be centered before computation.\nUseful when working with data whose mean is almost, but not exactly\nzero.\nIf False, data will be centered before computation.\n"
                                    }
                                },
                                "required": [
                                    "X"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "ledoit_wolf",
                        "func_desc": "Estimate the shrunk Ledoit-Wolf covariance matrix.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.covariance.ledoit_wolf.html#sklearn.covariance.ledoit_wolf",
                        "function_definitions": {
                            "function_name": "ledoit_wolf",
                            "full_function": "sklearn.covariance.ledoit_wolf(X, *, assume_centered=False, block_size=1000)",
                            "function_text": "Estimate the shrunk Ledoit-Wolf covariance matrix. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/covariance.html#shrunk-covariance",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples, n_features)",
                                    "param_desc": "Data from which to compute the covariance estimate.\n"
                                },
                                {
                                    "param_name": "assume_centered",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If True, data will not be centered before computation.\nUseful to work with data whose mean is significantly equal to\nzero but is not exactly zero.\nIf False, data will be centered before computation.\n"
                                },
                                {
                                    "param_name": "block_size",
                                    "param_type": "int, default=1000",
                                    "param_desc": "Size of blocks into which the covariance matrix will be split.\nThis is purely a memory optimization and does not affect results.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "ledoit_wolf",
                            "descriptions": "Estimate the shrunk Ledoit-Wolf covariance matrix. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_features). Data from which to compute the covariance estimate.\n"
                                    },
                                    "assume_centered": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If True, data will not be centered before computation.\nUseful to work with data whose mean is significantly equal to\nzero but is not exactly zero.\nIf False, data will be centered before computation.\n"
                                    },
                                    "block_size": {
                                        "type": "integer",
                                        "description": "int, default=1000. Size of blocks into which the covariance matrix will be split.\nThis is purely a memory optimization and does not affect results.\n"
                                    }
                                },
                                "required": [
                                    "X"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "oas",
                        "func_desc": "Estimate covariance with the Oracle Approximating Shrinkage.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/oas-function.html#sklearn.covariance.oas",
                        "function_definitions": {
                            "function_name": "oas",
                            "full_function": "sklearn.covariance.oas(X, *, assume_centered=False)",
                            "function_text": "Estimate covariance with the Oracle Approximating Shrinkage. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/covariance.html#shrunk-covariance",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples, n_features)",
                                    "param_desc": "Data from which to compute the covariance estimate.\n"
                                },
                                {
                                    "param_name": "assume_centered",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If True, data will not be centered before computation.\nUseful to work with data whose mean is significantly equal to\nzero but is not exactly zero.\nIf False, data will be centered before computation.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "oas",
                            "descriptions": "Estimate covariance with the Oracle Approximating Shrinkage. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_features). Data from which to compute the covariance estimate.\n"
                                    },
                                    "assume_centered": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If True, data will not be centered before computation.\nUseful to work with data whose mean is significantly equal to\nzero but is not exactly zero.\nIf False, data will be centered before computation.\n"
                                    }
                                },
                                "required": [
                                    "X"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "EmpiricalCovariance",
                        "func_desc": "Maximum likelihood covariance estimator.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.covariance.EmpiricalCovariance.html#sklearn.covariance.EmpiricalCovariance",
                        "function_definitions": {
                            "function_name": "EmpiricalCovariance",
                            "full_function": "class sklearn.covariance.EmpiricalCovariance(*, store_precision=True, assume_centered=False)",
                            "function_text": "Maximum likelihood covariance estimator. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/covariance.html#covariance",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X_test",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for X_test parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "EmpiricalCovariance",
                            "descriptions": "Maximum likelihood covariance estimator. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X_test": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for X_test parameter in score.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "GraphicalLassoCV",
                        "func_desc": "Sparse inverse covariance w/ cross-validated choice of the l1 penalty.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.covariance.GraphicalLassoCV.html#sklearn.covariance.GraphicalLassoCV",
                        "function_definitions": {
                            "function_name": "GraphicalLassoCV",
                            "full_function": "class sklearn.covariance.GraphicalLassoCV(*, alphas=4, n_refinements=4, cv=None, tol=0.0001, enet_tol=0.0001, max_iter=100, mode='cd', n_jobs=None, verbose=False, eps=2.220446049250313e-16, assume_centered=False)",
                            "function_text": "Sparse inverse covariance w/ cross-validated choice of the l1 penalty. See glossary entry for cross-validation estimator. Read more in the User Guide. Changed in version v0.20: GraphLassoCV has been renamed to GraphicalLassoCV",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/glossary.html#term-cross-validation-estimator",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X_test",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for X_test parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "GraphicalLassoCV",
                            "descriptions": "Sparse inverse covariance w/ cross-validated choice of the l1 penalty. See glossary entry for cross-validation estimator. Read more in the User Guide. Changed in version v0.20: GraphLassoCV has been renamed to GraphicalLassoCV",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X_test": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for X_test parameter in score.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "MinCovDet",
                        "func_desc": "Minimum Covariance Determinant (MCD): robust estimator of covariance.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.covariance.MinCovDet.html#sklearn.covariance.MinCovDet",
                        "function_definitions": {
                            "function_name": "MinCovDet",
                            "full_function": "class sklearn.covariance.MinCovDet(*, store_precision=True, assume_centered=False, support_fraction=None, random_state=None)",
                            "function_text": "Minimum Covariance Determinant (MCD): robust estimator of covariance. The Minimum Covariance Determinant covariance estimator is to be applied\non Gaussian-distributed data, but could still be relevant on data\ndrawn from a unimodal, symmetric distribution. It is not meant to be used\nwith multi-modal data (the algorithm used to fit a MinCovDet object is\nlikely to fail in such a case).\nOne should consider projection pursuit methods to deal with multi-modal\ndatasets. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/covariance.html#robust-covariance",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X_test",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for X_test parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "MinCovDet",
                            "descriptions": "Minimum Covariance Determinant (MCD): robust estimator of covariance. The Minimum Covariance Determinant covariance estimator is to be applied\non Gaussian-distributed data, but could still be relevant on data\ndrawn from a unimodal, symmetric distribution. It is not meant to be used\nwith multi-modal data (the algorithm used to fit a MinCovDet object is\nlikely to fail in such a case).\nOne should consider projection pursuit methods to deal with multi-modal\ndatasets. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X_test": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for X_test parameter in score.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "ShrunkCovariance",
                        "func_desc": "Covariance estimator with shrinkage.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.covariance.ShrunkCovariance.html#sklearn.covariance.ShrunkCovariance",
                        "function_definitions": {
                            "function_name": "ShrunkCovariance",
                            "full_function": "class sklearn.covariance.ShrunkCovariance(*, store_precision=True, assume_centered=False, shrinkage=0.1)",
                            "function_text": "Covariance estimator with shrinkage. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/covariance.html#shrunk-covariance",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X_test",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for X_test parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "ShrunkCovariance",
                            "descriptions": "Covariance estimator with shrinkage. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X_test": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for X_test parameter in score.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "graphical_lasso",
                        "func_desc": "L1-penalized covariance estimator.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.covariance.graphical_lasso.html#sklearn.covariance.graphical_lasso",
                        "function_definitions": {
                            "function_name": "graphical_lasso",
                            "full_function": "sklearn.covariance.graphical_lasso(emp_cov, alpha, *, mode='cd', tol=0.0001, enet_tol=0.0001, max_iter=100, verbose=False, return_costs=False, eps=2.220446049250313e-16, return_n_iter=False)",
                            "function_text": "L1-penalized covariance estimator. Read more in the User Guide. Changed in version v0.20: graph_lasso has been renamed to graphical_lasso",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/covariance.html#sparse-inverse-covariance",
                            "parameter_names_desc": [
                                {
                                    "param_name": "emp_cov",
                                    "param_type": "array-like of shape (n_features, n_features)",
                                    "param_desc": "Empirical covariance from which to compute the covariance estimate.\n"
                                },
                                {
                                    "param_name": "alpha",
                                    "param_type": "float",
                                    "param_desc": "The regularization parameter: the higher alpha, the more\nregularization, the sparser the inverse covariance.\nRange is (0, inf].\n"
                                },
                                {
                                    "param_name": "mode",
                                    "param_type": "{\u2018cd\u2019, \u2018lars\u2019}, default=\u2019cd\u2019",
                                    "param_desc": "The Lasso solver to use: coordinate descent or LARS. Use LARS for\nvery sparse underlying graphs, where p > n. Elsewhere prefer cd\nwhich is more numerically stable.\n"
                                },
                                {
                                    "param_name": "tol",
                                    "param_type": "float, default=1e-4",
                                    "param_desc": "The tolerance to declare convergence: if the dual gap goes below\nthis value, iterations are stopped. Range is (0, inf].\n"
                                },
                                {
                                    "param_name": "enet_tol",
                                    "param_type": "float, default=1e-4",
                                    "param_desc": "The tolerance for the elastic net solver used to calculate the descent\ndirection. This parameter controls the accuracy of the search direction\nfor a given column update, not of the overall parameter estimate. Only\nused for mode=\u2019cd\u2019. Range is (0, inf].\n"
                                },
                                {
                                    "param_name": "max_iter",
                                    "param_type": "int, default=100",
                                    "param_desc": "The maximum number of iterations.\n"
                                },
                                {
                                    "param_name": "verbose",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If verbose is True, the objective function and dual gap are\nprinted at each iteration.\n"
                                },
                                {
                                    "param_name": "return_costs",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If return_costs is True, the objective function and dual gap\nat each iteration are returned.\n"
                                },
                                {
                                    "param_name": "eps",
                                    "param_type": "float, default=eps",
                                    "param_desc": "The machine-precision regularization in the computation of the\nCholesky diagonal factors. Increase this for very ill-conditioned\nsystems. Default is np.finfo(np.float64).eps.\n"
                                },
                                {
                                    "param_name": "return_n_iter",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Whether or not to return the number of iterations.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "graphical_lasso",
                            "descriptions": "L1-penalized covariance estimator. Read more in the User Guide. Changed in version v0.20: graph_lasso has been renamed to graphical_lasso",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "emp_cov": {
                                        "type": "array",
                                        "description": "array-like of shape (n_features, n_features). Empirical covariance from which to compute the covariance estimate.\n"
                                    },
                                    "alpha": {
                                        "type": "float",
                                        "description": "float. The regularization parameter: the higher alpha, the more\nregularization, the sparser the inverse covariance.\nRange is (0, inf].\n"
                                    },
                                    "mode": {
                                        "type": "string",
                                        "enum": [
                                            "cd",
                                            " lars"
                                        ],
                                        "description": "{\u2018cd\u2019, \u2018lars\u2019}, default=\u2019cd\u2019. The Lasso solver to use: coordinate descent or LARS. Use LARS for\nvery sparse underlying graphs, where p > n. Elsewhere prefer cd\nwhich is more numerically stable.\n"
                                    },
                                    "tol": {
                                        "type": "float",
                                        "description": "float, default=1e-4. The tolerance to declare convergence: if the dual gap goes below\nthis value, iterations are stopped. Range is (0, inf].\n"
                                    },
                                    "enet_tol": {
                                        "type": "float",
                                        "description": "float, default=1e-4. The tolerance for the elastic net solver used to calculate the descent\ndirection. This parameter controls the accuracy of the search direction\nfor a given column update, not of the overall parameter estimate. Only\nused for mode=\u2019cd\u2019. Range is (0, inf].\n"
                                    },
                                    "max_iter": {
                                        "type": "integer",
                                        "description": "int, default=100. The maximum number of iterations.\n"
                                    },
                                    "verbose": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If verbose is True, the objective function and dual gap are\nprinted at each iteration.\n"
                                    },
                                    "return_costs": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If return_costs is True, the objective function and dual gap\nat each iteration are returned.\n"
                                    },
                                    "eps": {
                                        "type": "float",
                                        "description": "float, default=eps. The machine-precision regularization in the computation of the\nCholesky diagonal factors. Increase this for very ill-conditioned\nsystems. Default is np.finfo(np.float64).eps.\n"
                                    },
                                    "return_n_iter": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Whether or not to return the number of iterations.\n"
                                    }
                                },
                                "required": [
                                    "emp_cov",
                                    "alpha"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "ledoit_wolf_shrinkage",
                        "func_desc": "Estimate the shrunk Ledoit-Wolf covariance matrix.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.covariance.ledoit_wolf_shrinkage.html#sklearn.covariance.ledoit_wolf_shrinkage",
                        "function_definitions": {
                            "function_name": "ledoit_wolf_shrinkage",
                            "full_function": "sklearn.covariance.ledoit_wolf_shrinkage(X, assume_centered=False, block_size=1000)",
                            "function_text": "Estimate the shrunk Ledoit-Wolf covariance matrix. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/covariance.html#shrunk-covariance",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples, n_features)",
                                    "param_desc": "Data from which to compute the Ledoit-Wolf shrunk covariance shrinkage.\n"
                                },
                                {
                                    "param_name": "assume_centered",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If True, data will not be centered before computation.\nUseful to work with data whose mean is significantly equal to\nzero but is not exactly zero.\nIf False, data will be centered before computation.\n"
                                },
                                {
                                    "param_name": "block_size",
                                    "param_type": "int, default=1000",
                                    "param_desc": "Size of blocks into which the covariance matrix will be split.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "ledoit_wolf_shrinkage",
                            "descriptions": "Estimate the shrunk Ledoit-Wolf covariance matrix. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_features). Data from which to compute the Ledoit-Wolf shrunk covariance shrinkage.\n"
                                    },
                                    "assume_centered": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If True, data will not be centered before computation.\nUseful to work with data whose mean is significantly equal to\nzero but is not exactly zero.\nIf False, data will be centered before computation.\n"
                                    },
                                    "block_size": {
                                        "type": "integer",
                                        "description": "int, default=1000. Size of blocks into which the covariance matrix will be split.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "shrunk_covariance",
                        "func_desc": "Calculate covariance matrices shrunk on the diagonal.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.covariance.shrunk_covariance.html#sklearn.covariance.shrunk_covariance",
                        "function_definitions": {
                            "function_name": "shrunk_covariance",
                            "full_function": "sklearn.covariance.shrunk_covariance(emp_cov, shrinkage=0.1)",
                            "function_text": "Calculate covariance matrices shrunk on the diagonal. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/covariance.html#shrunk-covariance",
                            "parameter_names_desc": [
                                {
                                    "param_name": "emp_cov",
                                    "param_type": "array-like of shape (\u2026, n_features, n_features)",
                                    "param_desc": "Covariance matrices to be shrunk, at least 2D ndarray.\n"
                                },
                                {
                                    "param_name": "shrinkage",
                                    "param_type": "float, default=0.1",
                                    "param_desc": "Coefficient in the convex combination used for the computation\nof the shrunk estimate. Range is [0, 1].\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "shrunk_covariance",
                            "descriptions": "Calculate covariance matrices shrunk on the diagonal. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "emp_cov": {
                                        "type": "array",
                                        "description": "array-like of shape (\u2026, n_features, n_features). Covariance matrices to be shrunk, at least 2D ndarray.\n"
                                    },
                                    "shrinkage": {
                                        "type": "float",
                                        "description": "float, default=0.1. Coefficient in the convex combination used for the computation\nof the shrunk estimate. Range is [0, 1].\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    }
                ]
            }
        ],
        "name": "sklearn.covariance",
        "url": "https://scikit-learn.org/stable/api/sklearn.covariance.html"
    },
    "sklearn.cross_decomposition.html": {
        "functions": [
            {
                "defaults": [
                    {
                        "func_name": "CCA",
                        "func_desc": "Canonical Correlation Analysis, also known as \"Mode B\" PLS.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.cross_decomposition.CCA.html#sklearn.cross_decomposition.CCA",
                        "function_definitions": {
                            "function_name": "CCA",
                            "full_function": "class sklearn.cross_decomposition.CCA(n_components=2, *, scale=True, max_iter=500, tol=1e-06, copy=True)",
                            "function_text": "Canonical Correlation Analysis, also known as \u201cMode B\u201d PLS. For a comparison between other cross decomposition algorithms, see\nCompare cross decomposition methods. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/auto_examples/cross_decomposition/plot_compare_cross_decomposition.html#sphx-glr-auto-examples-cross-decomposition-plot-compare-cross-decomposition-py",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples, n_features)",
                                    "param_desc": "Samples to transform.\n"
                                },
                                {
                                    "param_name": "y",
                                    "param_type": "array-like of shape (n_samples, n_targets), default=None",
                                    "param_desc": "Target vectors.\n"
                                },
                                {
                                    "param_name": "Y",
                                    "param_type": "array-like of shape (n_samples, n_targets), default=None",
                                    "param_desc": "Target vectors.\n\nDeprecated since version 1.5: Y is deprecated in 1.5 and will be removed in 1.7. Use y instead.\n\n"
                                },
                                {
                                    "param_name": "copy",
                                    "param_type": "bool, default=True",
                                    "param_desc": "Whether to copy X and Y, or perform in-place normalization.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "CCA",
                            "descriptions": "Canonical Correlation Analysis, also known as \u201cMode B\u201d PLS. For a comparison between other cross decomposition algorithms, see\nCompare cross decomposition methods. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_features). Samples to transform.\n"
                                    },
                                    "y": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_targets), default=None. Target vectors.\n"
                                    },
                                    "Y": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_targets), default=None. Target vectors.\n\nDeprecated since version 1.5: Y is deprecated in 1.5 and will be removed in 1.7. Use y instead.\n\n"
                                    },
                                    "copy": {
                                        "type": "boolean",
                                        "description": "bool, default=True. Whether to copy X and Y, or perform in-place normalization.\n"
                                    }
                                },
                                "required": [
                                    "n_components=2"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "PLSRegression",
                        "func_desc": "PLS regression.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.cross_decomposition.PLSRegression.html#sklearn.cross_decomposition.PLSRegression",
                        "function_definitions": {
                            "function_name": "PLSRegression",
                            "full_function": "class sklearn.cross_decomposition.PLSRegression(n_components=2, *, scale=True, max_iter=500, tol=1e-06, copy=True)",
                            "function_text": "PLS regression. PLSRegression is also known as PLS2 or PLS1, depending on the number of\ntargets. For a comparison between other cross decomposition algorithms, see\nCompare cross decomposition methods. Read more in the User Guide. Added in version 0.8.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/auto_examples/cross_decomposition/plot_compare_cross_decomposition.html#sphx-glr-auto-examples-cross-decomposition-plot-compare-cross-decomposition-py",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples, n_features)",
                                    "param_desc": "Samples to transform.\n"
                                },
                                {
                                    "param_name": "y",
                                    "param_type": "array-like of shape (n_samples, n_targets), default=None",
                                    "param_desc": "Target vectors.\n"
                                },
                                {
                                    "param_name": "Y",
                                    "param_type": "array-like of shape (n_samples, n_targets), default=None",
                                    "param_desc": "Target vectors.\n\nDeprecated since version 1.5: Y is deprecated in 1.5 and will be removed in 1.7. Use y instead.\n\n"
                                },
                                {
                                    "param_name": "copy",
                                    "param_type": "bool, default=True",
                                    "param_desc": "Whether to copy X and Y, or perform in-place normalization.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "PLSRegression",
                            "descriptions": "PLS regression. PLSRegression is also known as PLS2 or PLS1, depending on the number of\ntargets. For a comparison between other cross decomposition algorithms, see\nCompare cross decomposition methods. Read more in the User Guide. Added in version 0.8.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_features). Samples to transform.\n"
                                    },
                                    "y": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_targets), default=None. Target vectors.\n"
                                    },
                                    "Y": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_targets), default=None. Target vectors.\n\nDeprecated since version 1.5: Y is deprecated in 1.5 and will be removed in 1.7. Use y instead.\n\n"
                                    },
                                    "copy": {
                                        "type": "boolean",
                                        "description": "bool, default=True. Whether to copy X and Y, or perform in-place normalization.\n"
                                    }
                                },
                                "required": [
                                    "n_components=2"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "PLSCanonical",
                        "func_desc": "Partial Least Squares transformer and regressor.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.cross_decomposition.PLSCanonical.html#sklearn.cross_decomposition.PLSCanonical",
                        "function_definitions": {
                            "function_name": "PLSCanonical",
                            "full_function": "class sklearn.cross_decomposition.PLSCanonical(n_components=2, *, scale=True, algorithm='nipals', max_iter=500, tol=1e-06, copy=True)",
                            "function_text": "Partial Least Squares transformer and regressor. For a comparison between other cross decomposition algorithms, see\nCompare cross decomposition methods. Read more in the User Guide. Added in version 0.8.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/auto_examples/cross_decomposition/plot_compare_cross_decomposition.html#sphx-glr-auto-examples-cross-decomposition-plot-compare-cross-decomposition-py",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples, n_features)",
                                    "param_desc": "Samples to transform.\n"
                                },
                                {
                                    "param_name": "y",
                                    "param_type": "array-like of shape (n_samples, n_targets), default=None",
                                    "param_desc": "Target vectors.\n"
                                },
                                {
                                    "param_name": "Y",
                                    "param_type": "array-like of shape (n_samples, n_targets), default=None",
                                    "param_desc": "Target vectors.\n\nDeprecated since version 1.5: Y is deprecated in 1.5 and will be removed in 1.7. Use y instead.\n\n"
                                },
                                {
                                    "param_name": "copy",
                                    "param_type": "bool, default=True",
                                    "param_desc": "Whether to copy X and Y, or perform in-place normalization.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "PLSCanonical",
                            "descriptions": "Partial Least Squares transformer and regressor. For a comparison between other cross decomposition algorithms, see\nCompare cross decomposition methods. Read more in the User Guide. Added in version 0.8.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_features). Samples to transform.\n"
                                    },
                                    "y": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_targets), default=None. Target vectors.\n"
                                    },
                                    "Y": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_targets), default=None. Target vectors.\n\nDeprecated since version 1.5: Y is deprecated in 1.5 and will be removed in 1.7. Use y instead.\n\n"
                                    },
                                    "copy": {
                                        "type": "boolean",
                                        "description": "bool, default=True. Whether to copy X and Y, or perform in-place normalization.\n"
                                    }
                                },
                                "required": [
                                    "n_components=2"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "PLSSVD",
                        "func_desc": "Partial Least Square SVD.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.cross_decomposition.PLSSVD.html#sklearn.cross_decomposition.PLSSVD",
                        "function_definitions": {
                            "function_name": "PLSSVD",
                            "full_function": "class sklearn.cross_decomposition.PLSSVD(n_components=2, *, scale=True, copy=True)",
                            "function_text": "Partial Least Square SVD. This transformer simply performs a SVD on the cross-covariance matrix\nX'Y. It is able to project both the training data X and the targets\nY. The training data X is projected on the left singular vectors, while\nthe targets are projected on the right singular vectors. Read more in the User Guide. Added in version 0.8.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/cross_decomposition.html#cross-decomposition",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples, n_features)",
                                    "param_desc": "Samples to be transformed.\n"
                                },
                                {
                                    "param_name": "y",
                                    "param_type": "array-like of shape (n_samples,) or (n_samples, n_targets),                 default=None",
                                    "param_desc": "Targets.\n"
                                },
                                {
                                    "param_name": "Y",
                                    "param_type": "array-like of shape (n_samples,) or (n_samples, n_targets),                 default=None",
                                    "param_desc": "Targets.\n\nDeprecated since version 1.5: Y is deprecated in 1.5 and will be removed in 1.7. Use y instead.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "PLSSVD",
                            "descriptions": "Partial Least Square SVD. This transformer simply performs a SVD on the cross-covariance matrix\nX'Y. It is able to project both the training data X and the targets\nY. The training data X is projected on the left singular vectors, while\nthe targets are projected on the right singular vectors. Read more in the User Guide. Added in version 0.8.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_features). Samples to be transformed.\n"
                                    },
                                    "y": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,) or (n_samples, n_targets),                 default=None. Targets.\n"
                                    },
                                    "Y": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,) or (n_samples, n_targets),                 default=None. Targets.\n\nDeprecated since version 1.5: Y is deprecated in 1.5 and will be removed in 1.7. Use y instead.\n\n"
                                    }
                                },
                                "required": [
                                    "n_components=2"
                                ]
                            }
                        }
                    }
                ]
            }
        ],
        "name": "sklearn.cross_decomposition",
        "url": "https://scikit-learn.org/stable/api/sklearn.cross_decomposition.html"
    },
    "sklearn.datasets.html": {
        "functions": [
            {
                "Loaders": [
                    {
                        "func_name": "clear_data_home",
                        "func_desc": "Delete all the content of the data home cache.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.datasets.clear_data_home.html#sklearn.datasets.clear_data_home",
                        "function_definitions": {
                            "function_name": "clear_data_home",
                            "full_function": "sklearn.datasets.clear_data_home(data_home=None)",
                            "function_text": "Delete all the content of the data home cache.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "data_home",
                                    "param_type": "str or path-like, default=None",
                                    "param_desc": "The path to scikit-learn data directory. If None, the default path\nis ~/scikit_learn_data.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "clear_data_home",
                            "descriptions": "Delete all the content of the data home cache.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "data_home": {
                                        "type": "string",
                                        "description": "str or path-like, default=None. The path to scikit-learn data directory. If None, the default path\nis ~/scikit_learn_data.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "fetch_20newsgroups",
                        "func_desc": "Load the filenames and data from the 20 newsgroups dataset (classification).",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.datasets.fetch_20newsgroups.html#sklearn.datasets.fetch_20newsgroups",
                        "function_definitions": {
                            "function_name": "fetch_20newsgroups",
                            "full_function": "sklearn.datasets.fetch_20newsgroups(*, data_home=None, subset='train', categories=None, shuffle=True, random_state=42, remove=(), download_if_missing=True, return_X_y=False, n_retries=3, delay=1.0)",
                            "function_text": "Load the filenames and data from the 20 newsgroups dataset (classification). Download it if necessary. Classes 20 Samples total 18846 Dimensionality 1 Features text Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/datasets/real_world.html#newsgroups-dataset",
                            "parameter_names_desc": [
                                {
                                    "param_name": "data_home",
                                    "param_type": "str or path-like, default=None",
                                    "param_desc": "Specify a download and cache folder for the datasets. If None,\nall scikit-learn data is stored in \u2018~/scikit_learn_data\u2019 subfolders.\n"
                                },
                                {
                                    "param_name": "subset",
                                    "param_type": "{\u2018train\u2019, \u2018test\u2019, \u2018all\u2019}, default=\u2019train\u2019",
                                    "param_desc": "Select the dataset to load: \u2018train\u2019 for the training set, \u2018test\u2019\nfor the test set, \u2018all\u2019 for both, with shuffled ordering.\n"
                                },
                                {
                                    "param_name": "categories",
                                    "param_type": "array-like, dtype=str, default=None",
                                    "param_desc": "If None (default), load all the categories.\nIf not None, list of category names to load (other categories\nignored).\n"
                                },
                                {
                                    "param_name": "shuffle",
                                    "param_type": "bool, default=True",
                                    "param_desc": "Whether or not to shuffle the data: might be important for models that\nmake the assumption that the samples are independent and identically\ndistributed (i.i.d.), such as stochastic gradient descent.\n"
                                },
                                {
                                    "param_name": "random_state",
                                    "param_type": "int, RandomState instance or None, default=42",
                                    "param_desc": "Determines random number generation for dataset shuffling. Pass an int\nfor reproducible output across multiple function calls.\nSee Glossary.\n"
                                },
                                {
                                    "param_name": "remove",
                                    "param_type": "tuple, default=()",
                                    "param_desc": "May contain any subset of (\u2018headers\u2019, \u2018footers\u2019, \u2018quotes\u2019). Each of\nthese are kinds of text that will be detected and removed from the\nnewsgroup posts, preventing classifiers from overfitting on\nmetadata.\n\u2018headers\u2019 removes newsgroup headers, \u2018footers\u2019 removes blocks at the\nends of posts that look like signatures, and \u2018quotes\u2019 removes lines\nthat appear to be quoting another post.\n\u2018headers\u2019 follows an exact standard; the other filters are not always\ncorrect.\n"
                                },
                                {
                                    "param_name": "download_if_missing",
                                    "param_type": "bool, default=True",
                                    "param_desc": "If False, raise an OSError if the data is not locally available\ninstead of trying to download the data from the source site.\n"
                                },
                                {
                                    "param_name": "return_X_y",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If True, returns (data.data, data.target) instead of a Bunch\nobject.\n\nAdded in version 0.22.\n\n"
                                },
                                {
                                    "param_name": "n_retries",
                                    "param_type": "int, default=3",
                                    "param_desc": "Number of retries when HTTP errors are encountered.\n\nAdded in version 1.5.\n\n"
                                },
                                {
                                    "param_name": "delay",
                                    "param_type": "float, default=1.0",
                                    "param_desc": "Number of seconds between retries.\n\nAdded in version 1.5.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "fetch_20newsgroups",
                            "descriptions": "Load the filenames and data from the 20 newsgroups dataset (classification). Download it if necessary. Classes 20 Samples total 18846 Dimensionality 1 Features text Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "data_home": {
                                        "type": "string",
                                        "description": "str or path-like, default=None. Specify a download and cache folder for the datasets. If None,\nall scikit-learn data is stored in \u2018~/scikit_learn_data\u2019 subfolders.\n"
                                    },
                                    "subset": {
                                        "type": "string",
                                        "enum": [
                                            "train",
                                            " test",
                                            " all"
                                        ],
                                        "description": "{\u2018train\u2019, \u2018test\u2019, \u2018all\u2019}, default=\u2019train\u2019. Select the dataset to load: \u2018train\u2019 for the training set, \u2018test\u2019\nfor the test set, \u2018all\u2019 for both, with shuffled ordering.\n"
                                    },
                                    "categories": {
                                        "type": "string",
                                        "description": "array-like, dtype=str, default=None. If None (default), load all the categories.\nIf not None, list of category names to load (other categories\nignored).\n"
                                    },
                                    "shuffle": {
                                        "type": "boolean",
                                        "description": "bool, default=True. Whether or not to shuffle the data: might be important for models that\nmake the assumption that the samples are independent and identically\ndistributed (i.i.d.), such as stochastic gradient descent.\n"
                                    },
                                    "random_state": {
                                        "type": "integer",
                                        "description": "int, RandomState instance or None, default=42. Determines random number generation for dataset shuffling. Pass an int\nfor reproducible output across multiple function calls.\nSee Glossary.\n"
                                    },
                                    "remove": {
                                        "type": "tuple, default=()",
                                        "description": "tuple, default=(). May contain any subset of (\u2018headers\u2019, \u2018footers\u2019, \u2018quotes\u2019). Each of\nthese are kinds of text that will be detected and removed from the\nnewsgroup posts, preventing classifiers from overfitting on\nmetadata.\n\u2018headers\u2019 removes newsgroup headers, \u2018footers\u2019 removes blocks at the\nends of posts that look like signatures, and \u2018quotes\u2019 removes lines\nthat appear to be quoting another post.\n\u2018headers\u2019 follows an exact standard; the other filters are not always\ncorrect.\n"
                                    },
                                    "download_if_missing": {
                                        "type": "boolean",
                                        "description": "bool, default=True. If False, raise an OSError if the data is not locally available\ninstead of trying to download the data from the source site.\n"
                                    },
                                    "return_X_y": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If True, returns (data.data, data.target) instead of a Bunch\nobject.\n\nAdded in version 0.22.\n\n"
                                    },
                                    "n_retries": {
                                        "type": "integer",
                                        "description": "int, default=3. Number of retries when HTTP errors are encountered.\n\nAdded in version 1.5.\n\n"
                                    },
                                    "delay": {
                                        "type": "float",
                                        "description": "float, default=1.0. Number of seconds between retries.\n\nAdded in version 1.5.\n\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "fetch_california_housing",
                        "func_desc": "Load the California housing dataset (regression).",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.datasets.fetch_california_housing.html#sklearn.datasets.fetch_california_housing",
                        "function_definitions": {
                            "function_name": "fetch_california_housing",
                            "full_function": "sklearn.datasets.fetch_california_housing(*, data_home=None, download_if_missing=True, return_X_y=False, as_frame=False, n_retries=3, delay=1.0)",
                            "function_text": "Load the California housing dataset (regression). Samples total 20640 Dimensionality 8 Features real Target real 0.15 - 5. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/datasets/real_world.html#california-housing-dataset",
                            "parameter_names_desc": [
                                {
                                    "param_name": "data_home",
                                    "param_type": "str or path-like, default=None",
                                    "param_desc": "Specify another download and cache folder for the datasets. By default\nall scikit-learn data is stored in \u2018~/scikit_learn_data\u2019 subfolders.\n"
                                },
                                {
                                    "param_name": "download_if_missing",
                                    "param_type": "bool, default=True",
                                    "param_desc": "If False, raise an OSError if the data is not locally available\ninstead of trying to download the data from the source site.\n"
                                },
                                {
                                    "param_name": "return_X_y",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If True, returns (data.data, data.target) instead of a Bunch\nobject.\n\nAdded in version 0.20.\n\n"
                                },
                                {
                                    "param_name": "as_frame",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If True, the data is a pandas DataFrame including columns with\nappropriate dtypes (numeric, string or categorical). The target is\na pandas DataFrame or Series depending on the number of target_columns.\n\nAdded in version 0.23.\n\n"
                                },
                                {
                                    "param_name": "n_retries",
                                    "param_type": "int, default=3",
                                    "param_desc": "Number of retries when HTTP errors are encountered.\n\nAdded in version 1.5.\n\n"
                                },
                                {
                                    "param_name": "delay",
                                    "param_type": "float, default=1.0",
                                    "param_desc": "Number of seconds between retries.\n\nAdded in version 1.5.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "fetch_california_housing",
                            "descriptions": "Load the California housing dataset (regression). Samples total 20640 Dimensionality 8 Features real Target real 0.15 - 5. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "data_home": {
                                        "type": "string",
                                        "description": "str or path-like, default=None. Specify another download and cache folder for the datasets. By default\nall scikit-learn data is stored in \u2018~/scikit_learn_data\u2019 subfolders.\n"
                                    },
                                    "download_if_missing": {
                                        "type": "boolean",
                                        "description": "bool, default=True. If False, raise an OSError if the data is not locally available\ninstead of trying to download the data from the source site.\n"
                                    },
                                    "return_X_y": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If True, returns (data.data, data.target) instead of a Bunch\nobject.\n\nAdded in version 0.20.\n\n"
                                    },
                                    "as_frame": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If True, the data is a pandas DataFrame including columns with\nappropriate dtypes (numeric, string or categorical). The target is\na pandas DataFrame or Series depending on the number of target_columns.\n\nAdded in version 0.23.\n\n"
                                    },
                                    "n_retries": {
                                        "type": "integer",
                                        "description": "int, default=3. Number of retries when HTTP errors are encountered.\n\nAdded in version 1.5.\n\n"
                                    },
                                    "delay": {
                                        "type": "float",
                                        "description": "float, default=1.0. Number of seconds between retries.\n\nAdded in version 1.5.\n\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "fetch_kddcup99",
                        "func_desc": "Load the kddcup99 dataset (classification).",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.datasets.fetch_kddcup99.html#sklearn.datasets.fetch_kddcup99",
                        "function_definitions": {
                            "function_name": "fetch_kddcup99",
                            "full_function": "sklearn.datasets.fetch_kddcup99(*, subset=None, data_home=None, shuffle=False, random_state=None, percent10=True, download_if_missing=True, return_X_y=False, as_frame=False, n_retries=3, delay=1.0)",
                            "function_text": "Load the kddcup99 dataset (classification). Download it if necessary. Classes 23 Samples total 4898431 Dimensionality 41 Features discrete (int) or continuous (float) Read more in the User Guide. Added in version 0.18.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/datasets/real_world.html#kddcup99-dataset",
                            "parameter_names_desc": [
                                {
                                    "param_name": "subset",
                                    "param_type": "{\u2018SA\u2019, \u2018SF\u2019, \u2018http\u2019, \u2018smtp\u2019}, default=None",
                                    "param_desc": "To return the corresponding classical subsets of kddcup 99.\nIf None, return the entire kddcup 99 dataset.\n"
                                },
                                {
                                    "param_name": "data_home",
                                    "param_type": "str or path-like, default=None",
                                    "param_desc": "Specify another download and cache folder for the datasets. By default\nall scikit-learn data is stored in \u2018~/scikit_learn_data\u2019 subfolders.\n\nAdded in version 0.19.\n\n"
                                },
                                {
                                    "param_name": "shuffle",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Whether to shuffle dataset.\n"
                                },
                                {
                                    "param_name": "random_state",
                                    "param_type": "int, RandomState instance or None, default=None",
                                    "param_desc": "Determines random number generation for dataset shuffling and for\nselection of abnormal samples if subset='SA'. Pass an int for\nreproducible output across multiple function calls.\nSee Glossary.\n"
                                },
                                {
                                    "param_name": "percent10",
                                    "param_type": "bool, default=True",
                                    "param_desc": "Whether to load only 10 percent of the data.\n"
                                },
                                {
                                    "param_name": "download_if_missing",
                                    "param_type": "bool, default=True",
                                    "param_desc": "If False, raise an OSError if the data is not locally available\ninstead of trying to download the data from the source site.\n"
                                },
                                {
                                    "param_name": "return_X_y",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If True, returns (data, target) instead of a Bunch object. See\nbelow for more information about the data and target object.\n\nAdded in version 0.20.\n\n"
                                },
                                {
                                    "param_name": "as_frame",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If True, returns a pandas Dataframe for the data and target\nobjects in the Bunch returned object; Bunch return object will also\nhave a frame member.\n\nAdded in version 0.24.\n\n"
                                },
                                {
                                    "param_name": "n_retries",
                                    "param_type": "int, default=3",
                                    "param_desc": "Number of retries when HTTP errors are encountered.\n\nAdded in version 1.5.\n\n"
                                },
                                {
                                    "param_name": "delay",
                                    "param_type": "float, default=1.0",
                                    "param_desc": "Number of seconds between retries.\n\nAdded in version 1.5.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "fetch_kddcup99",
                            "descriptions": "Load the kddcup99 dataset (classification). Download it if necessary. Classes 23 Samples total 4898431 Dimensionality 41 Features discrete (int) or continuous (float) Read more in the User Guide. Added in version 0.18.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "subset": {
                                        "type": "string",
                                        "enum": [
                                            "SA",
                                            " SF",
                                            " http",
                                            " smtp"
                                        ],
                                        "description": "{\u2018SA\u2019, \u2018SF\u2019, \u2018http\u2019, \u2018smtp\u2019}, default=None. To return the corresponding classical subsets of kddcup 99.\nIf None, return the entire kddcup 99 dataset.\n"
                                    },
                                    "data_home": {
                                        "type": "string",
                                        "description": "str or path-like, default=None. Specify another download and cache folder for the datasets. By default\nall scikit-learn data is stored in \u2018~/scikit_learn_data\u2019 subfolders.\n\nAdded in version 0.19.\n\n"
                                    },
                                    "shuffle": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Whether to shuffle dataset.\n"
                                    },
                                    "random_state": {
                                        "type": "integer",
                                        "description": "int, RandomState instance or None, default=None. Determines random number generation for dataset shuffling and for\nselection of abnormal samples if subset='SA'. Pass an int for\nreproducible output across multiple function calls.\nSee Glossary.\n"
                                    },
                                    "percent10": {
                                        "type": "boolean",
                                        "description": "bool, default=True. Whether to load only 10 percent of the data.\n"
                                    },
                                    "download_if_missing": {
                                        "type": "boolean",
                                        "description": "bool, default=True. If False, raise an OSError if the data is not locally available\ninstead of trying to download the data from the source site.\n"
                                    },
                                    "return_X_y": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If True, returns (data, target) instead of a Bunch object. See\nbelow for more information about the data and target object.\n\nAdded in version 0.20.\n\n"
                                    },
                                    "as_frame": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If True, returns a pandas Dataframe for the data and target\nobjects in the Bunch returned object; Bunch return object will also\nhave a frame member.\n\nAdded in version 0.24.\n\n"
                                    },
                                    "n_retries": {
                                        "type": "integer",
                                        "description": "int, default=3. Number of retries when HTTP errors are encountered.\n\nAdded in version 1.5.\n\n"
                                    },
                                    "delay": {
                                        "type": "float",
                                        "description": "float, default=1.0. Number of seconds between retries.\n\nAdded in version 1.5.\n\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "fetch_lfw_people",
                        "func_desc": "Load the Labeled Faces in the Wild (LFW) people dataset (classification).",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.datasets.fetch_lfw_people.html#sklearn.datasets.fetch_lfw_people",
                        "function_definitions": {
                            "function_name": "fetch_lfw_people",
                            "full_function": "sklearn.datasets.fetch_lfw_people(*, data_home=None, funneled=True, resize=0.5, min_faces_per_person=0, color=False, slice_=(slice(70, 195, None), slice(78, 172, None)), download_if_missing=True, return_X_y=False, n_retries=3, delay=1.0)",
                            "function_text": "Load the Labeled Faces in the Wild (LFW) people dataset (classification). Download it if necessary. Classes 5749 Samples total 13233 Dimensionality 5828 Features real, between 0 and 255 Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/datasets/real_world.html#labeled-faces-in-the-wild-dataset",
                            "parameter_names_desc": [
                                {
                                    "param_name": "data_home",
                                    "param_type": "str or path-like, default=None",
                                    "param_desc": "Specify another download and cache folder for the datasets. By default\nall scikit-learn data is stored in \u2018~/scikit_learn_data\u2019 subfolders.\n"
                                },
                                {
                                    "param_name": "funneled",
                                    "param_type": "bool, default=True",
                                    "param_desc": "Download and use the funneled variant of the dataset.\n"
                                },
                                {
                                    "param_name": "resize",
                                    "param_type": "float or None, default=0.5",
                                    "param_desc": "Ratio used to resize the each face picture. If None, no resizing is\nperformed.\n"
                                },
                                {
                                    "param_name": "min_faces_per_person",
                                    "param_type": "int, default=None",
                                    "param_desc": "The extracted dataset will only retain pictures of people that have at\nleast min_faces_per_person different pictures.\n"
                                },
                                {
                                    "param_name": "color",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Keep the 3 RGB channels instead of averaging them to a single\ngray level channel. If color is True the shape of the data has\none more dimension than the shape with color = False.\n"
                                },
                                {
                                    "param_name": "slice_",
                                    "param_type": "tuple of slice, default=(slice(70, 195), slice(78, 172))",
                                    "param_desc": "Provide a custom 2D slice (height, width) to extract the\n\u2018interesting\u2019 part of the jpeg files and avoid use statistical\ncorrelation from the background.\n"
                                },
                                {
                                    "param_name": "download_if_missing",
                                    "param_type": "bool, default=True",
                                    "param_desc": "If False, raise an OSError if the data is not locally available\ninstead of trying to download the data from the source site.\n"
                                },
                                {
                                    "param_name": "return_X_y",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If True, returns (dataset.data, dataset.target) instead of a Bunch\nobject. See below for more information about the dataset.data and\ndataset.target object.\n\nAdded in version 0.20.\n\n"
                                },
                                {
                                    "param_name": "n_retries",
                                    "param_type": "int, default=3",
                                    "param_desc": "Number of retries when HTTP errors are encountered.\n\nAdded in version 1.5.\n\n"
                                },
                                {
                                    "param_name": "delay",
                                    "param_type": "float, default=1.0",
                                    "param_desc": "Number of seconds between retries.\n\nAdded in version 1.5.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "fetch_lfw_people",
                            "descriptions": "Load the Labeled Faces in the Wild (LFW) people dataset (classification). Download it if necessary. Classes 5749 Samples total 13233 Dimensionality 5828 Features real, between 0 and 255 Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "data_home": {
                                        "type": "string",
                                        "description": "str or path-like, default=None. Specify another download and cache folder for the datasets. By default\nall scikit-learn data is stored in \u2018~/scikit_learn_data\u2019 subfolders.\n"
                                    },
                                    "funneled": {
                                        "type": "boolean",
                                        "description": "bool, default=True. Download and use the funneled variant of the dataset.\n"
                                    },
                                    "resize": {
                                        "type": "float",
                                        "description": "float or None, default=0.5. Ratio used to resize the each face picture. If None, no resizing is\nperformed.\n"
                                    },
                                    "min_faces_per_person": {
                                        "type": "integer",
                                        "description": "int, default=None. The extracted dataset will only retain pictures of people that have at\nleast min_faces_per_person different pictures.\n"
                                    },
                                    "color": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Keep the 3 RGB channels instead of averaging them to a single\ngray level channel. If color is True the shape of the data has\none more dimension than the shape with color = False.\n"
                                    },
                                    "slice_": {
                                        "type": "tuple of slice, default=(slice(70, 195), slice(78, 172))",
                                        "description": "tuple of slice, default=(slice(70, 195), slice(78, 172)). Provide a custom 2D slice (height, width) to extract the\n\u2018interesting\u2019 part of the jpeg files and avoid use statistical\ncorrelation from the background.\n"
                                    },
                                    "download_if_missing": {
                                        "type": "boolean",
                                        "description": "bool, default=True. If False, raise an OSError if the data is not locally available\ninstead of trying to download the data from the source site.\n"
                                    },
                                    "return_X_y": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If True, returns (dataset.data, dataset.target) instead of a Bunch\nobject. See below for more information about the dataset.data and\ndataset.target object.\n\nAdded in version 0.20.\n\n"
                                    },
                                    "n_retries": {
                                        "type": "integer",
                                        "description": "int, default=3. Number of retries when HTTP errors are encountered.\n\nAdded in version 1.5.\n\n"
                                    },
                                    "delay": {
                                        "type": "float",
                                        "description": "float, default=1.0. Number of seconds between retries.\n\nAdded in version 1.5.\n\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "fetch_openml",
                        "func_desc": "Fetch dataset from openml by name or dataset id.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.datasets.fetch_openml.html#sklearn.datasets.fetch_openml",
                        "function_definitions": {
                            "function_name": "fetch_openml",
                            "full_function": "sklearn.datasets.fetch_openml(name: str | None = None, *, version: str | int = 'active', data_id: int | None = None, data_home: str | PathLike | None = None, target_column: str | List | None = 'default-target', cache: bool = True, return_X_y: bool = False, as_frame: str | bool = 'auto', n_retries: int = 3, delay: float = 1.0, parser: str = 'auto', read_csv_kwargs: Dict | None = None)",
                            "function_text": "Fetch dataset from openml by name or dataset id. Datasets are uniquely identified by either an integer ID or by a\ncombination of name and version (i.e. there might be multiple\nversions of the \u2018iris\u2019 dataset). Please give either name or data_id\n(not both). In case a name is given, a version can also be\nprovided. Read more in the User Guide. Added in version 0.20. Note EXPERIMENTAL The API is experimental (particularly the return value structure),\nand might have small backward-incompatible changes without notice\nor warning in future releases.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/datasets/loading_other_datasets.html#openml",
                            "parameter_names_desc": [
                                {
                                    "param_name": "name",
                                    "param_type": "str, default=None",
                                    "param_desc": "String identifier of the dataset. Note that OpenML can have multiple\ndatasets with the same name.\n"
                                },
                                {
                                    "param_name": "version",
                                    "param_type": "int or \u2018active\u2019, default=\u2019active\u2019",
                                    "param_desc": "Version of the dataset. Can only be provided if also name is given.\nIf \u2018active\u2019 the oldest version that\u2019s still active is used. Since\nthere may be more than one active version of a dataset, and those\nversions may fundamentally be different from one another, setting an\nexact version is highly recommended.\n"
                                },
                                {
                                    "param_name": "data_id",
                                    "param_type": "int, default=None",
                                    "param_desc": "OpenML ID of the dataset. The most specific way of retrieving a\ndataset. If data_id is not given, name (and potential version) are\nused to obtain a dataset.\n"
                                },
                                {
                                    "param_name": "data_home",
                                    "param_type": "str or path-like, default=None",
                                    "param_desc": "Specify another download and cache folder for the data sets. By default\nall scikit-learn data is stored in \u2018~/scikit_learn_data\u2019 subfolders.\n"
                                },
                                {
                                    "param_name": "target_column",
                                    "param_type": "str, list or None, default=\u2019default-target\u2019",
                                    "param_desc": "Specify the column name in the data to use as target. If\n\u2018default-target\u2019, the standard target column a stored on the server\nis used. If None, all columns are returned as data and the\ntarget is None. If list (of strings), all columns with these names\nare returned as multi-target (Note: not all scikit-learn classifiers\ncan handle all types of multi-output combinations).\n"
                                },
                                {
                                    "param_name": "cache",
                                    "param_type": "bool, default=True",
                                    "param_desc": "Whether to cache the downloaded datasets into data_home.\n"
                                },
                                {
                                    "param_name": "return_X_y",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If True, returns (data, target) instead of a Bunch object. See\nbelow for more information about the data and target objects.\n"
                                },
                                {
                                    "param_name": "as_frame",
                                    "param_type": "bool or \u2018auto\u2019, default=\u2019auto\u2019",
                                    "param_desc": "If True, the data is a pandas DataFrame including columns with\nappropriate dtypes (numeric, string or categorical). The target is\na pandas DataFrame or Series depending on the number of target_columns.\nThe Bunch will contain a frame attribute with the target and the\ndata. If return_X_y is True, then (data, target) will be pandas\nDataFrames or Series as describe above.\nIf as_frame is \u2018auto\u2019, the data and target will be converted to\nDataFrame or Series as if as_frame is set to True, unless the dataset\nis stored in sparse format.\nIf as_frame is False, the data and target will be NumPy arrays and\nthe data will only contain numerical values when parser=\"liac-arff\"\nwhere the categories are provided in the attribute categories of the\nBunch instance. When parser=\"pandas\", no ordinal encoding is made.\n\nChanged in version 0.24: The default value of as_frame changed from False to 'auto'\nin 0.24.\n\n"
                                },
                                {
                                    "param_name": "n_retries",
                                    "param_type": "int, default=3",
                                    "param_desc": "Number of retries when HTTP errors or network timeouts are encountered.\nError with status code 412 won\u2019t be retried as they represent OpenML\ngeneric errors.\n"
                                },
                                {
                                    "param_name": "delay",
                                    "param_type": "float, default=1.0",
                                    "param_desc": "Number of seconds between retries.\n"
                                },
                                {
                                    "param_name": "parser",
                                    "param_type": "{\u201cauto\u201d, \u201cpandas\u201d, \u201cliac-arff\u201d}, default=\u201dauto\u201d",
                                    "param_desc": "Parser used to load the ARFF file. Two parsers are implemented:\n\n\"pandas\": this is the most efficient parser. However, it requires\npandas to be installed and can only open dense datasets.\n\"liac-arff\": this is a pure Python ARFF parser that is much less\nmemory- and CPU-efficient. It deals with sparse ARFF datasets.\n\nIf \"auto\", the parser is chosen automatically such that \"liac-arff\"\nis selected for sparse ARFF datasets, otherwise \"pandas\" is selected.\n\nAdded in version 1.2.\n\n\nChanged in version 1.4: The default value of parser changes from \"liac-arff\" to\n\"auto\".\n\n"
                                },
                                {
                                    "param_name": "read_csv_kwargs",
                                    "param_type": "dict, default=None",
                                    "param_desc": "Keyword arguments passed to pandas.read_csv when loading the data\nfrom a ARFF file and using the pandas parser. It can allow to\noverwrite some default parameters.\n\nAdded in version 1.3.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "fetch_openml",
                            "descriptions": "Fetch dataset from openml by name or dataset id. Datasets are uniquely identified by either an integer ID or by a\ncombination of name and version (i.e. there might be multiple\nversions of the \u2018iris\u2019 dataset). Please give either name or data_id\n(not both). In case a name is given, a version can also be\nprovided. Read more in the User Guide. Added in version 0.20. Note EXPERIMENTAL The API is experimental (particularly the return value structure),\nand might have small backward-incompatible changes without notice\nor warning in future releases.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "str, default=None. String identifier of the dataset. Note that OpenML can have multiple\ndatasets with the same name.\n"
                                    },
                                    "version": {
                                        "type": "integer",
                                        "description": "int or \u2018active\u2019, default=\u2019active\u2019. Version of the dataset. Can only be provided if also name is given.\nIf \u2018active\u2019 the oldest version that\u2019s still active is used. Since\nthere may be more than one active version of a dataset, and those\nversions may fundamentally be different from one another, setting an\nexact version is highly recommended.\n"
                                    },
                                    "data_id": {
                                        "type": "integer",
                                        "description": "int, default=None. OpenML ID of the dataset. The most specific way of retrieving a\ndataset. If data_id is not given, name (and potential version) are\nused to obtain a dataset.\n"
                                    },
                                    "data_home": {
                                        "type": "string",
                                        "description": "str or path-like, default=None. Specify another download and cache folder for the data sets. By default\nall scikit-learn data is stored in \u2018~/scikit_learn_data\u2019 subfolders.\n"
                                    },
                                    "target_column": {
                                        "type": "string",
                                        "description": "str, list or None, default=\u2019default-target\u2019. Specify the column name in the data to use as target. If\n\u2018default-target\u2019, the standard target column a stored on the server\nis used. If None, all columns are returned as data and the\ntarget is None. If list (of strings), all columns with these names\nare returned as multi-target (Note: not all scikit-learn classifiers\ncan handle all types of multi-output combinations).\n"
                                    },
                                    "cache": {
                                        "type": "boolean",
                                        "description": "bool, default=True. Whether to cache the downloaded datasets into data_home.\n"
                                    },
                                    "return_X_y": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If True, returns (data, target) instead of a Bunch object. See\nbelow for more information about the data and target objects.\n"
                                    },
                                    "as_frame": {
                                        "type": "boolean",
                                        "description": "bool or \u2018auto\u2019, default=\u2019auto\u2019. If True, the data is a pandas DataFrame including columns with\nappropriate dtypes (numeric, string or categorical). The target is\na pandas DataFrame or Series depending on the number of target_columns.\nThe Bunch will contain a frame attribute with the target and the\ndata. If return_X_y is True, then (data, target) will be pandas\nDataFrames or Series as describe above.\nIf as_frame is \u2018auto\u2019, the data and target will be converted to\nDataFrame or Series as if as_frame is set to True, unless the dataset\nis stored in sparse format.\nIf as_frame is False, the data and target will be NumPy arrays and\nthe data will only contain numerical values when parser=\"liac-arff\"\nwhere the categories are provided in the attribute categories of the\nBunch instance. When parser=\"pandas\", no ordinal encoding is made.\n\nChanged in version 0.24: The default value of as_frame changed from False to 'auto'\nin 0.24.\n\n"
                                    },
                                    "n_retries": {
                                        "type": "integer",
                                        "description": "int, default=3. Number of retries when HTTP errors or network timeouts are encountered.\nError with status code 412 won\u2019t be retried as they represent OpenML\ngeneric errors.\n"
                                    },
                                    "delay": {
                                        "type": "float",
                                        "description": "float, default=1.0. Number of seconds between retries.\n"
                                    },
                                    "parser": {
                                        "type": "{\u201cauto\u201d, \u201cpandas\u201d, \u201cliac-arff\u201d}, default=\u201dauto\u201d",
                                        "description": "{\u201cauto\u201d, \u201cpandas\u201d, \u201cliac-arff\u201d}, default=\u201dauto\u201d. Parser used to load the ARFF file. Two parsers are implemented:\n\n\"pandas\": this is the most efficient parser. However, it requires\npandas to be installed and can only open dense datasets.\n\"liac-arff\": this is a pure Python ARFF parser that is much less\nmemory- and CPU-efficient. It deals with sparse ARFF datasets.\n\nIf \"auto\", the parser is chosen automatically such that \"liac-arff\"\nis selected for sparse ARFF datasets, otherwise \"pandas\" is selected.\n\nAdded in version 1.2.\n\n\nChanged in version 1.4: The default value of parser changes from \"liac-arff\" to\n\"auto\".\n\n"
                                    },
                                    "read_csv_kwargs": {
                                        "type": "dict, default=None",
                                        "description": "dict, default=None. Keyword arguments passed to pandas.read_csv when loading the data\nfrom a ARFF file and using the pandas parser. It can allow to\noverwrite some default parameters.\n\nAdded in version 1.3.\n\n"
                                    }
                                },
                                "required": [
                                    "name: str | None = None"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "fetch_species_distributions",
                        "func_desc": "Loader for species distribution dataset from Phillips et.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.datasets.fetch_species_distributions.html#sklearn.datasets.fetch_species_distributions",
                        "function_definitions": {
                            "function_name": "fetch_species_distributions",
                            "full_function": "sklearn.datasets.fetch_species_distributions(*, data_home=None, download_if_missing=True, n_retries=3, delay=1.0)",
                            "function_text": "Loader for species distribution dataset from Phillips et. al. (2006). Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/datasets/real_world.html#species-distribution-dataset",
                            "parameter_names_desc": [
                                {
                                    "param_name": "data_home",
                                    "param_type": "str or path-like, default=None",
                                    "param_desc": "Specify another download and cache folder for the datasets. By default\nall scikit-learn data is stored in \u2018~/scikit_learn_data\u2019 subfolders.\n"
                                },
                                {
                                    "param_name": "download_if_missing",
                                    "param_type": "bool, default=True",
                                    "param_desc": "If False, raise an OSError if the data is not locally available\ninstead of trying to download the data from the source site.\n"
                                },
                                {
                                    "param_name": "n_retries",
                                    "param_type": "int, default=3",
                                    "param_desc": "Number of retries when HTTP errors are encountered.\n\nAdded in version 1.5.\n\n"
                                },
                                {
                                    "param_name": "delay",
                                    "param_type": "float, default=1.0",
                                    "param_desc": "Number of seconds between retries.\n\nAdded in version 1.5.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "fetch_species_distributions",
                            "descriptions": "Loader for species distribution dataset from Phillips et. al. (2006). Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "data_home": {
                                        "type": "string",
                                        "description": "str or path-like, default=None. Specify another download and cache folder for the datasets. By default\nall scikit-learn data is stored in \u2018~/scikit_learn_data\u2019 subfolders.\n"
                                    },
                                    "download_if_missing": {
                                        "type": "boolean",
                                        "description": "bool, default=True. If False, raise an OSError if the data is not locally available\ninstead of trying to download the data from the source site.\n"
                                    },
                                    "n_retries": {
                                        "type": "integer",
                                        "description": "int, default=3. Number of retries when HTTP errors are encountered.\n\nAdded in version 1.5.\n\n"
                                    },
                                    "delay": {
                                        "type": "float",
                                        "description": "float, default=1.0. Number of seconds between retries.\n\nAdded in version 1.5.\n\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "load_breast_cancer",
                        "func_desc": "Load and return the breast cancer wisconsin dataset (classification).",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.datasets.load_breast_cancer.html#sklearn.datasets.load_breast_cancer",
                        "function_definitions": {
                            "function_name": "load_breast_cancer",
                            "full_function": "sklearn.datasets.load_breast_cancer(*, return_X_y=False, as_frame=False)",
                            "function_text": "Load and return the breast cancer wisconsin dataset (classification). The breast cancer dataset is a classic and very easy binary classification\ndataset. Classes 2 Samples per class 212(M),357(B) Samples total 569 Dimensionality 30 Features real, positive The copy of UCI ML Breast Cancer Wisconsin (Diagnostic) dataset is\ndownloaded from:\nhttps://archive.ics.uci.edu/dataset/17/breast+cancer+wisconsin+diagnostic Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/datasets/toy_dataset.html#breast-cancer-dataset",
                            "parameter_names_desc": [
                                {
                                    "param_name": "return_X_y",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If True, returns (data, target) instead of a Bunch object.\nSee below for more information about the data and target object.\n\nAdded in version 0.18.\n\n"
                                },
                                {
                                    "param_name": "as_frame",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If True, the data is a pandas DataFrame including columns with\nappropriate dtypes (numeric). The target is\na pandas DataFrame or Series depending on the number of target columns.\nIf return_X_y is True, then (data, target) will be pandas\nDataFrames or Series as described below.\n\nAdded in version 0.23.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "load_breast_cancer",
                            "descriptions": "Load and return the breast cancer wisconsin dataset (classification). The breast cancer dataset is a classic and very easy binary classification\ndataset. Classes 2 Samples per class 212(M),357(B) Samples total 569 Dimensionality 30 Features real, positive The copy of UCI ML Breast Cancer Wisconsin (Diagnostic) dataset is\ndownloaded from:\nhttps://archive.ics.uci.edu/dataset/17/breast+cancer+wisconsin+diagnostic Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "return_X_y": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If True, returns (data, target) instead of a Bunch object.\nSee below for more information about the data and target object.\n\nAdded in version 0.18.\n\n"
                                    },
                                    "as_frame": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If True, the data is a pandas DataFrame including columns with\nappropriate dtypes (numeric). The target is\na pandas DataFrame or Series depending on the number of target columns.\nIf return_X_y is True, then (data, target) will be pandas\nDataFrames or Series as described below.\n\nAdded in version 0.23.\n\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "load_digits",
                        "func_desc": "Load and return the digits dataset (classification).",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.datasets.load_digits.html#sklearn.datasets.load_digits",
                        "function_definitions": {
                            "function_name": "load_digits",
                            "full_function": "sklearn.datasets.load_digits(*, n_class=10, return_X_y=False, as_frame=False)",
                            "function_text": "Load and return the digits dataset (classification). Each datapoint is a 8x8 image of a digit. Classes 10 Samples per class ~180 Samples total 1797 Dimensionality 64 Features integers 0-16 This is a copy of the test set of the UCI ML hand-written digits datasets\nhttps://archive.ics.uci.edu/ml/datasets/Optical+Recognition+of+Handwritten+Digits Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/datasets/toy_dataset.html#digits-dataset",
                            "parameter_names_desc": [
                                {
                                    "param_name": "n_class",
                                    "param_type": "int, default=10",
                                    "param_desc": "The number of classes to return. Between 0 and 10.\n"
                                },
                                {
                                    "param_name": "return_X_y",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If True, returns (data, target) instead of a Bunch object.\nSee below for more information about the data and target object.\n\nAdded in version 0.18.\n\n"
                                },
                                {
                                    "param_name": "as_frame",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If True, the data is a pandas DataFrame including columns with\nappropriate dtypes (numeric). The target is\na pandas DataFrame or Series depending on the number of target columns.\nIf return_X_y is True, then (data, target) will be pandas\nDataFrames or Series as described below.\n\nAdded in version 0.23.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "load_digits",
                            "descriptions": "Load and return the digits dataset (classification). Each datapoint is a 8x8 image of a digit. Classes 10 Samples per class ~180 Samples total 1797 Dimensionality 64 Features integers 0-16 This is a copy of the test set of the UCI ML hand-written digits datasets\nhttps://archive.ics.uci.edu/ml/datasets/Optical+Recognition+of+Handwritten+Digits Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "n_class": {
                                        "type": "integer",
                                        "description": "int, default=10. The number of classes to return. Between 0 and 10.\n"
                                    },
                                    "return_X_y": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If True, returns (data, target) instead of a Bunch object.\nSee below for more information about the data and target object.\n\nAdded in version 0.18.\n\n"
                                    },
                                    "as_frame": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If True, the data is a pandas DataFrame including columns with\nappropriate dtypes (numeric). The target is\na pandas DataFrame or Series depending on the number of target columns.\nIf return_X_y is True, then (data, target) will be pandas\nDataFrames or Series as described below.\n\nAdded in version 0.23.\n\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "load_iris",
                        "func_desc": "Load and return the iris dataset (classification).",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.datasets.load_iris.html#sklearn.datasets.load_iris",
                        "function_definitions": {
                            "function_name": "load_iris",
                            "full_function": "sklearn.datasets.load_iris(*, return_X_y=False, as_frame=False)",
                            "function_text": "Load and return the iris dataset (classification). The iris dataset is a classic and very easy multi-class classification\ndataset. Classes 3 Samples per class 50 Samples total 150 Dimensionality 4 Features real, positive Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/datasets/toy_dataset.html#iris-dataset",
                            "parameter_names_desc": [
                                {
                                    "param_name": "return_X_y",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If True, returns (data, target) instead of a Bunch object. See\nbelow for more information about the data and target object.\n\nAdded in version 0.18.\n\n"
                                },
                                {
                                    "param_name": "as_frame",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If True, the data is a pandas DataFrame including columns with\nappropriate dtypes (numeric). The target is\na pandas DataFrame or Series depending on the number of target columns.\nIf return_X_y is True, then (data, target) will be pandas\nDataFrames or Series as described below.\n\nAdded in version 0.23.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "load_iris",
                            "descriptions": "Load and return the iris dataset (classification). The iris dataset is a classic and very easy multi-class classification\ndataset. Classes 3 Samples per class 50 Samples total 150 Dimensionality 4 Features real, positive Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "return_X_y": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If True, returns (data, target) instead of a Bunch object. See\nbelow for more information about the data and target object.\n\nAdded in version 0.18.\n\n"
                                    },
                                    "as_frame": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If True, the data is a pandas DataFrame including columns with\nappropriate dtypes (numeric). The target is\na pandas DataFrame or Series depending on the number of target columns.\nIf return_X_y is True, then (data, target) will be pandas\nDataFrames or Series as described below.\n\nAdded in version 0.23.\n\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "load_sample_image",
                        "func_desc": "Load the numpy array of a single sample image.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.datasets.load_sample_image.html#sklearn.datasets.load_sample_image",
                        "function_definitions": {
                            "function_name": "load_sample_image",
                            "full_function": "sklearn.datasets.load_sample_image(image_name)",
                            "function_text": "Load the numpy array of a single sample image. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/datasets/loading_other_datasets.html#sample-images",
                            "parameter_names_desc": [
                                {
                                    "param_name": "image_name",
                                    "param_type": "{china.jpg, flower.jpg}",
                                    "param_desc": "The name of the sample image loaded.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "load_sample_image",
                            "descriptions": "Load the numpy array of a single sample image. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "image_name": {
                                        "type": "{china.jpg, flower.jpg}",
                                        "description": "{china.jpg, flower.jpg}. The name of the sample image loaded.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "load_svmlight_file",
                        "func_desc": "Load datasets in the svmlight / libsvm format into sparse CSR matrix.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.datasets.load_svmlight_file.html#sklearn.datasets.load_svmlight_file",
                        "function_definitions": {
                            "function_name": "load_svmlight_file",
                            "full_function": "sklearn.datasets.load_svmlight_file(f, *, n_features=None, dtype=<class 'numpy.float64'>, multilabel=False, zero_based='auto', query_id=False, offset=0, length=-1)",
                            "function_text": "Load datasets in the svmlight / libsvm format into sparse CSR matrix. This format is a text-based format, with one sample per line. It does\nnot store zero valued features hence is suitable for sparse dataset. The first element of each line can be used to store a target variable\nto predict. This format is used as the default format for both svmlight and the\nlibsvm command line programs. Parsing a text based source can be expensive. When repeatedly\nworking on the same dataset, it is recommended to wrap this\nloader with joblib.Memory.cache to store a memmapped backup of the\nCSR results of the first call and benefit from the near instantaneous\nloading of memmapped structures for the subsequent calls. In case the file contains a pairwise preference constraint (known\nas \u201cqid\u201d in the svmlight format) these are ignored unless the\nquery_id parameter is set to True. These pairwise preference\nconstraints can be used to constraint the combination of samples\nwhen using pairwise loss functions (as is the case in some\nlearning to rank problems) so that only pairs with the same\nquery_id value are considered. This implementation is written in Cython and is reasonably fast.\nHowever, a faster API-compatible loader is also available at: mblondel/svmlight-loader",
                            "func_text_user_guide": "sklearn.datasets.load_svmlight_files.html#sklearn.datasets.load_svmlight_files",
                            "parameter_names_desc": [
                                {
                                    "param_name": "f",
                                    "param_type": "str, path-like, file-like or int",
                                    "param_desc": "(Path to) a file to load. If a path ends in \u201c.gz\u201d or \u201c.bz2\u201d, it will\nbe uncompressed on the fly. If an integer is passed, it is assumed to\nbe a file descriptor. A file-like or file descriptor will not be closed\nby this function. A file-like object must be opened in binary mode.\n\nChanged in version 1.2: Path-like objects are now accepted.\n\n"
                                },
                                {
                                    "param_name": "n_features",
                                    "param_type": "int, default=None",
                                    "param_desc": "The number of features to use. If None, it will be inferred. This\nargument is useful to load several files that are subsets of a\nbigger sliced dataset: each subset might not have examples of\nevery feature, hence the inferred shape might vary from one\nslice to another.\nn_features is only required if offset or length are passed a\nnon-default value.\n"
                                },
                                {
                                    "param_name": "dtype",
                                    "param_type": "numpy data type, default=np.float64",
                                    "param_desc": "Data type of dataset to be loaded. This will be the data type of the\noutput numpy arrays X and y.\n"
                                },
                                {
                                    "param_name": "multilabel",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Samples may have several labels each (see\nhttps://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/multilabel.html).\n"
                                },
                                {
                                    "param_name": "zero_based",
                                    "param_type": "bool or \u201cauto\u201d, default=\u201dauto\u201d",
                                    "param_desc": "Whether column indices in f are zero-based (True) or one-based\n(False). If column indices are one-based, they are transformed to\nzero-based to match Python/NumPy conventions.\nIf set to \u201cauto\u201d, a heuristic check is applied to determine this from\nthe file contents. Both kinds of files occur \u201cin the wild\u201d, but they\nare unfortunately not self-identifying. Using \u201cauto\u201d or True should\nalways be safe when no offset or length is passed.\nIf offset or length are passed, the \u201cauto\u201d mode falls back\nto zero_based=True to avoid having the heuristic check yield\ninconsistent results on different segments of the file.\n"
                                },
                                {
                                    "param_name": "query_id",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If True, will return the query_id array for each file.\n"
                                },
                                {
                                    "param_name": "offset",
                                    "param_type": "int, default=0",
                                    "param_desc": "Ignore the offset first bytes by seeking forward, then\ndiscarding the following bytes up until the next new line\ncharacter.\n"
                                },
                                {
                                    "param_name": "length",
                                    "param_type": "int, default=-1",
                                    "param_desc": "If strictly positive, stop reading any new line of data once the\nposition in the file has reached the (offset + length) bytes threshold.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "load_svmlight_file",
                            "descriptions": "Load datasets in the svmlight / libsvm format into sparse CSR matrix. This format is a text-based format, with one sample per line. It does\nnot store zero valued features hence is suitable for sparse dataset. The first element of each line can be used to store a target variable\nto predict. This format is used as the default format for both svmlight and the\nlibsvm command line programs. Parsing a text based source can be expensive. When repeatedly\nworking on the same dataset, it is recommended to wrap this\nloader with joblib.Memory.cache to store a memmapped backup of the\nCSR results of the first call and benefit from the near instantaneous\nloading of memmapped structures for the subsequent calls. In case the file contains a pairwise preference constraint (known\nas \u201cqid\u201d in the svmlight format) these are ignored unless the\nquery_id parameter is set to True. These pairwise preference\nconstraints can be used to constraint the combination of samples\nwhen using pairwise loss functions (as is the case in some\nlearning to rank problems) so that only pairs with the same\nquery_id value are considered. This implementation is written in Cython and is reasonably fast.\nHowever, a faster API-compatible loader is also available at: mblondel/svmlight-loader",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "f": {
                                        "type": "integer",
                                        "description": "str, path-like, file-like or int. (Path to) a file to load. If a path ends in \u201c.gz\u201d or \u201c.bz2\u201d, it will\nbe uncompressed on the fly. If an integer is passed, it is assumed to\nbe a file descriptor. A file-like or file descriptor will not be closed\nby this function. A file-like object must be opened in binary mode.\n\nChanged in version 1.2: Path-like objects are now accepted.\n\n"
                                    },
                                    "n_features": {
                                        "type": "integer",
                                        "description": "int, default=None. The number of features to use. If None, it will be inferred. This\nargument is useful to load several files that are subsets of a\nbigger sliced dataset: each subset might not have examples of\nevery feature, hence the inferred shape might vary from one\nslice to another.\nn_features is only required if offset or length are passed a\nnon-default value.\n"
                                    },
                                    "dtype": {
                                        "type": "float",
                                        "description": "numpy data type, default=np.float64. Data type of dataset to be loaded. This will be the data type of the\noutput numpy arrays X and y.\n"
                                    },
                                    "multilabel": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Samples may have several labels each (see\nhttps://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/multilabel.html).\n"
                                    },
                                    "zero_based": {
                                        "type": "boolean",
                                        "description": "bool or \u201cauto\u201d, default=\u201dauto\u201d. Whether column indices in f are zero-based (True) or one-based\n(False). If column indices are one-based, they are transformed to\nzero-based to match Python/NumPy conventions.\nIf set to \u201cauto\u201d, a heuristic check is applied to determine this from\nthe file contents. Both kinds of files occur \u201cin the wild\u201d, but they\nare unfortunately not self-identifying. Using \u201cauto\u201d or True should\nalways be safe when no offset or length is passed.\nIf offset or length are passed, the \u201cauto\u201d mode falls back\nto zero_based=True to avoid having the heuristic check yield\ninconsistent results on different segments of the file.\n"
                                    },
                                    "query_id": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If True, will return the query_id array for each file.\n"
                                    },
                                    "offset": {
                                        "type": "integer",
                                        "description": "int, default=0. Ignore the offset first bytes by seeking forward, then\ndiscarding the following bytes up until the next new line\ncharacter.\n"
                                    },
                                    "length": {
                                        "type": "integer",
                                        "description": "int, default=-1. If strictly positive, stop reading any new line of data once the\nposition in the file has reached the (offset + length) bytes threshold.\n"
                                    }
                                },
                                "required": [
                                    "f"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "load_wine",
                        "func_desc": "Load and return the wine dataset (classification).",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.datasets.load_wine.html#sklearn.datasets.load_wine",
                        "function_definitions": {
                            "function_name": "load_wine",
                            "full_function": "sklearn.datasets.load_wine(*, return_X_y=False, as_frame=False)",
                            "function_text": "Load and return the wine dataset (classification). Added in version 0.18. The wine dataset is a classic and very easy multi-class classification\ndataset. Classes 3 Samples per class [59,71,48] Samples total 178 Dimensionality 13 Features real, positive The copy of UCI ML Wine Data Set dataset is downloaded and modified to fit\nstandard format from:\nhttps://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/datasets/toy_dataset.html#wine-dataset",
                            "parameter_names_desc": [
                                {
                                    "param_name": "return_X_y",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If True, returns (data, target) instead of a Bunch object.\nSee below for more information about the data and target object.\n"
                                },
                                {
                                    "param_name": "as_frame",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If True, the data is a pandas DataFrame including columns with\nappropriate dtypes (numeric). The target is\na pandas DataFrame or Series depending on the number of target columns.\nIf return_X_y is True, then (data, target) will be pandas\nDataFrames or Series as described below.\n\nAdded in version 0.23.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "load_wine",
                            "descriptions": "Load and return the wine dataset (classification). Added in version 0.18. The wine dataset is a classic and very easy multi-class classification\ndataset. Classes 3 Samples per class [59,71,48] Samples total 178 Dimensionality 13 Features real, positive The copy of UCI ML Wine Data Set dataset is downloaded and modified to fit\nstandard format from:\nhttps://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "return_X_y": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If True, returns (data, target) instead of a Bunch object.\nSee below for more information about the data and target object.\n"
                                    },
                                    "as_frame": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If True, the data is a pandas DataFrame including columns with\nappropriate dtypes (numeric). The target is\na pandas DataFrame or Series depending on the number of target columns.\nIf return_X_y is True, then (data, target) will be pandas\nDataFrames or Series as described below.\n\nAdded in version 0.23.\n\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "dump_svmlight_file",
                        "func_desc": "Dump the dataset in svmlight / libsvm file format.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.datasets.dump_svmlight_file.html#sklearn.datasets.dump_svmlight_file",
                        "function_definitions": {
                            "function_name": "dump_svmlight_file",
                            "full_function": "sklearn.datasets.dump_svmlight_file(X, y, f, *, zero_based=True, comment=None, query_id=None, multilabel=False)",
                            "function_text": "Dump the dataset in svmlight / libsvm file format. This format is a text-based format, with one sample per line. It does\nnot store zero valued features hence is suitable for sparse dataset. The first element of each line can be used to store a target variable\nto predict.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "Training vectors, where n_samples is the number of samples and\nn_features is the number of features.\n"
                                },
                                {
                                    "param_name": "y",
                                    "param_type": "{array-like, sparse matrix}, shape = (n_samples,) or (n_samples, n_labels)",
                                    "param_desc": "Target values. Class labels must be an\ninteger or float, or array-like objects of integer or float for\nmultilabel classifications.\n"
                                },
                                {
                                    "param_name": "f",
                                    "param_type": "str or file-like in binary mode",
                                    "param_desc": "If string, specifies the path that will contain the data.\nIf file-like, data will be written to f. f should be opened in binary\nmode.\n"
                                },
                                {
                                    "param_name": "zero_based",
                                    "param_type": "bool, default=True",
                                    "param_desc": "Whether column indices should be written zero-based (True) or one-based\n(False).\n"
                                },
                                {
                                    "param_name": "comment",
                                    "param_type": "str or bytes, default=None",
                                    "param_desc": "Comment to insert at the top of the file. This should be either a\nUnicode string, which will be encoded as UTF-8, or an ASCII byte\nstring.\nIf a comment is given, then it will be preceded by one that identifies\nthe file as having been dumped by scikit-learn. Note that not all\ntools grok comments in SVMlight files.\n"
                                },
                                {
                                    "param_name": "query_id",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Array containing pairwise preference constraints (qid in svmlight\nformat).\n"
                                },
                                {
                                    "param_name": "multilabel",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Samples may have several labels each (see\nhttps://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/multilabel.html).\n\nAdded in version 0.17: parameter multilabel to support multilabel datasets.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "dump_svmlight_file",
                            "descriptions": "Dump the dataset in svmlight / libsvm file format. This format is a text-based format, with one sample per line. It does\nnot store zero valued features hence is suitable for sparse dataset. The first element of each line can be used to store a target variable\nto predict.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). Training vectors, where n_samples is the number of samples and\nn_features is the number of features.\n"
                                    },
                                    "y": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix}, shape = (n_samples,) or (n_samples, n_labels). Target values. Class labels must be an\ninteger or float, or array-like objects of integer or float for\nmultilabel classifications.\n"
                                    },
                                    "f": {
                                        "type": "string",
                                        "description": "str or file-like in binary mode. If string, specifies the path that will contain the data.\nIf file-like, data will be written to f. f should be opened in binary\nmode.\n"
                                    },
                                    "zero_based": {
                                        "type": "boolean",
                                        "description": "bool, default=True. Whether column indices should be written zero-based (True) or one-based\n(False).\n"
                                    },
                                    "comment": {
                                        "type": "string",
                                        "description": "str or bytes, default=None. Comment to insert at the top of the file. This should be either a\nUnicode string, which will be encoded as UTF-8, or an ASCII byte\nstring.\nIf a comment is given, then it will be preceded by one that identifies\nthe file as having been dumped by scikit-learn. Note that not all\ntools grok comments in SVMlight files.\n"
                                    },
                                    "query_id": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Array containing pairwise preference constraints (qid in svmlight\nformat).\n"
                                    },
                                    "multilabel": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Samples may have several labels each (see\nhttps://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/multilabel.html).\n\nAdded in version 0.17: parameter multilabel to support multilabel datasets.\n\n"
                                    }
                                },
                                "required": [
                                    "X",
                                    "y",
                                    "f"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "fetch_20newsgroups_vectorized",
                        "func_desc": "Load and vectorize the 20 newsgroups dataset (classification).",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized.html#sklearn.datasets.fetch_20newsgroups_vectorized",
                        "function_definitions": {
                            "function_name": "fetch_20newsgroups_vectorized",
                            "full_function": "sklearn.datasets.fetch_20newsgroups_vectorized(*, subset='train', remove=(), data_home=None, download_if_missing=True, return_X_y=False, normalize=True, as_frame=False, n_retries=3, delay=1.0)",
                            "function_text": "Load and vectorize the 20 newsgroups dataset (classification). Download it if necessary. This is a convenience function; the transformation is done using the\ndefault settings for\nCountVectorizer. For more\nadvanced usage (stopword filtering, n-gram extraction, etc.), combine\nfetch_20newsgroups with a custom\nCountVectorizer,\nHashingVectorizer,\nTfidfTransformer or\nTfidfVectorizer. The resulting counts are normalized using\nsklearn.preprocessing.normalize unless normalize is set to False. Classes 20 Samples total 18846 Dimensionality 130107 Features real Read more in the User Guide.",
                            "func_text_user_guide": "sklearn.feature_extraction.text.CountVectorizer.html#sklearn.feature_extraction.text.CountVectorizer",
                            "parameter_names_desc": [
                                {
                                    "param_name": "subset",
                                    "param_type": "{\u2018train\u2019, \u2018test\u2019, \u2018all\u2019}, default=\u2019train\u2019",
                                    "param_desc": "Select the dataset to load: \u2018train\u2019 for the training set, \u2018test\u2019\nfor the test set, \u2018all\u2019 for both, with shuffled ordering.\n"
                                },
                                {
                                    "param_name": "remove",
                                    "param_type": "tuple, default=()",
                                    "param_desc": "May contain any subset of (\u2018headers\u2019, \u2018footers\u2019, \u2018quotes\u2019). Each of\nthese are kinds of text that will be detected and removed from the\nnewsgroup posts, preventing classifiers from overfitting on\nmetadata.\n\u2018headers\u2019 removes newsgroup headers, \u2018footers\u2019 removes blocks at the\nends of posts that look like signatures, and \u2018quotes\u2019 removes lines\nthat appear to be quoting another post.\n"
                                },
                                {
                                    "param_name": "data_home",
                                    "param_type": "str or path-like, default=None",
                                    "param_desc": "Specify an download and cache folder for the datasets. If None,\nall scikit-learn data is stored in \u2018~/scikit_learn_data\u2019 subfolders.\n"
                                },
                                {
                                    "param_name": "download_if_missing",
                                    "param_type": "bool, default=True",
                                    "param_desc": "If False, raise an OSError if the data is not locally available\ninstead of trying to download the data from the source site.\n"
                                },
                                {
                                    "param_name": "return_X_y",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If True, returns (data.data, data.target) instead of a Bunch\nobject.\n\nAdded in version 0.20.\n\n"
                                },
                                {
                                    "param_name": "normalize",
                                    "param_type": "bool, default=True",
                                    "param_desc": "If True, normalizes each document\u2019s feature vector to unit norm using\nsklearn.preprocessing.normalize.\n\nAdded in version 0.22.\n\n"
                                },
                                {
                                    "param_name": "as_frame",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If True, the data is a pandas DataFrame including columns with\nappropriate dtypes (numeric, string, or categorical). The target is\na pandas DataFrame or Series depending on the number of\ntarget_columns.\n\nAdded in version 0.24.\n\n"
                                },
                                {
                                    "param_name": "n_retries",
                                    "param_type": "int, default=3",
                                    "param_desc": "Number of retries when HTTP errors are encountered.\n\nAdded in version 1.5.\n\n"
                                },
                                {
                                    "param_name": "delay",
                                    "param_type": "float, default=1.0",
                                    "param_desc": "Number of seconds between retries.\n\nAdded in version 1.5.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "fetch_20newsgroups_vectorized",
                            "descriptions": "Load and vectorize the 20 newsgroups dataset (classification). Download it if necessary. This is a convenience function; the transformation is done using the\ndefault settings for\nCountVectorizer. For more\nadvanced usage (stopword filtering, n-gram extraction, etc.), combine\nfetch_20newsgroups with a custom\nCountVectorizer,\nHashingVectorizer,\nTfidfTransformer or\nTfidfVectorizer. The resulting counts are normalized using\nsklearn.preprocessing.normalize unless normalize is set to False. Classes 20 Samples total 18846 Dimensionality 130107 Features real Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "subset": {
                                        "type": "string",
                                        "enum": [
                                            "train",
                                            " test",
                                            " all"
                                        ],
                                        "description": "{\u2018train\u2019, \u2018test\u2019, \u2018all\u2019}, default=\u2019train\u2019. Select the dataset to load: \u2018train\u2019 for the training set, \u2018test\u2019\nfor the test set, \u2018all\u2019 for both, with shuffled ordering.\n"
                                    },
                                    "remove": {
                                        "type": "tuple, default=()",
                                        "description": "tuple, default=(). May contain any subset of (\u2018headers\u2019, \u2018footers\u2019, \u2018quotes\u2019). Each of\nthese are kinds of text that will be detected and removed from the\nnewsgroup posts, preventing classifiers from overfitting on\nmetadata.\n\u2018headers\u2019 removes newsgroup headers, \u2018footers\u2019 removes blocks at the\nends of posts that look like signatures, and \u2018quotes\u2019 removes lines\nthat appear to be quoting another post.\n"
                                    },
                                    "data_home": {
                                        "type": "string",
                                        "description": "str or path-like, default=None. Specify an download and cache folder for the datasets. If None,\nall scikit-learn data is stored in \u2018~/scikit_learn_data\u2019 subfolders.\n"
                                    },
                                    "download_if_missing": {
                                        "type": "boolean",
                                        "description": "bool, default=True. If False, raise an OSError if the data is not locally available\ninstead of trying to download the data from the source site.\n"
                                    },
                                    "return_X_y": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If True, returns (data.data, data.target) instead of a Bunch\nobject.\n\nAdded in version 0.20.\n\n"
                                    },
                                    "normalize": {
                                        "type": "boolean",
                                        "description": "bool, default=True. If True, normalizes each document\u2019s feature vector to unit norm using\nsklearn.preprocessing.normalize.\n\nAdded in version 0.22.\n\n"
                                    },
                                    "as_frame": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If True, the data is a pandas DataFrame including columns with\nappropriate dtypes (numeric, string, or categorical). The target is\na pandas DataFrame or Series depending on the number of\ntarget_columns.\n\nAdded in version 0.24.\n\n"
                                    },
                                    "n_retries": {
                                        "type": "integer",
                                        "description": "int, default=3. Number of retries when HTTP errors are encountered.\n\nAdded in version 1.5.\n\n"
                                    },
                                    "delay": {
                                        "type": "float",
                                        "description": "float, default=1.0. Number of seconds between retries.\n\nAdded in version 1.5.\n\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "fetch_covtype",
                        "func_desc": "Load the covertype dataset (classification).",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.datasets.fetch_covtype.html#sklearn.datasets.fetch_covtype",
                        "function_definitions": {
                            "function_name": "fetch_covtype",
                            "full_function": "sklearn.datasets.fetch_covtype(*, data_home=None, download_if_missing=True, random_state=None, shuffle=False, return_X_y=False, as_frame=False, n_retries=3, delay=1.0)",
                            "function_text": "Load the covertype dataset (classification). Download it if necessary. Classes 7 Samples total 581012 Dimensionality 54 Features int Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/datasets/real_world.html#covtype-dataset",
                            "parameter_names_desc": [
                                {
                                    "param_name": "data_home",
                                    "param_type": "str or path-like, default=None",
                                    "param_desc": "Specify another download and cache folder for the datasets. By default\nall scikit-learn data is stored in \u2018~/scikit_learn_data\u2019 subfolders.\n"
                                },
                                {
                                    "param_name": "download_if_missing",
                                    "param_type": "bool, default=True",
                                    "param_desc": "If False, raise an OSError if the data is not locally available\ninstead of trying to download the data from the source site.\n"
                                },
                                {
                                    "param_name": "random_state",
                                    "param_type": "int, RandomState instance or None, default=None",
                                    "param_desc": "Determines random number generation for dataset shuffling. Pass an int\nfor reproducible output across multiple function calls.\nSee Glossary.\n"
                                },
                                {
                                    "param_name": "shuffle",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Whether to shuffle dataset.\n"
                                },
                                {
                                    "param_name": "return_X_y",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If True, returns (data.data, data.target) instead of a Bunch\nobject.\n\nAdded in version 0.20.\n\n"
                                },
                                {
                                    "param_name": "as_frame",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If True, the data is a pandas DataFrame including columns with\nappropriate dtypes (numeric). The target is a pandas DataFrame or\nSeries depending on the number of target columns. If return_X_y is\nTrue, then (data, target) will be pandas DataFrames or Series as\ndescribed below.\n\nAdded in version 0.24.\n\n"
                                },
                                {
                                    "param_name": "n_retries",
                                    "param_type": "int, default=3",
                                    "param_desc": "Number of retries when HTTP errors are encountered.\n\nAdded in version 1.5.\n\n"
                                },
                                {
                                    "param_name": "delay",
                                    "param_type": "float, default=1.0",
                                    "param_desc": "Number of seconds between retries.\n\nAdded in version 1.5.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "fetch_covtype",
                            "descriptions": "Load the covertype dataset (classification). Download it if necessary. Classes 7 Samples total 581012 Dimensionality 54 Features int Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "data_home": {
                                        "type": "string",
                                        "description": "str or path-like, default=None. Specify another download and cache folder for the datasets. By default\nall scikit-learn data is stored in \u2018~/scikit_learn_data\u2019 subfolders.\n"
                                    },
                                    "download_if_missing": {
                                        "type": "boolean",
                                        "description": "bool, default=True. If False, raise an OSError if the data is not locally available\ninstead of trying to download the data from the source site.\n"
                                    },
                                    "random_state": {
                                        "type": "integer",
                                        "description": "int, RandomState instance or None, default=None. Determines random number generation for dataset shuffling. Pass an int\nfor reproducible output across multiple function calls.\nSee Glossary.\n"
                                    },
                                    "shuffle": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Whether to shuffle dataset.\n"
                                    },
                                    "return_X_y": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If True, returns (data.data, data.target) instead of a Bunch\nobject.\n\nAdded in version 0.20.\n\n"
                                    },
                                    "as_frame": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If True, the data is a pandas DataFrame including columns with\nappropriate dtypes (numeric). The target is a pandas DataFrame or\nSeries depending on the number of target columns. If return_X_y is\nTrue, then (data, target) will be pandas DataFrames or Series as\ndescribed below.\n\nAdded in version 0.24.\n\n"
                                    },
                                    "n_retries": {
                                        "type": "integer",
                                        "description": "int, default=3. Number of retries when HTTP errors are encountered.\n\nAdded in version 1.5.\n\n"
                                    },
                                    "delay": {
                                        "type": "float",
                                        "description": "float, default=1.0. Number of seconds between retries.\n\nAdded in version 1.5.\n\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "fetch_lfw_pairs",
                        "func_desc": "Load the Labeled Faces in the Wild (LFW) pairs dataset (classification).",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.datasets.fetch_lfw_pairs.html#sklearn.datasets.fetch_lfw_pairs",
                        "function_definitions": {
                            "function_name": "fetch_lfw_pairs",
                            "full_function": "sklearn.datasets.fetch_lfw_pairs(*, subset='train', data_home=None, funneled=True, resize=0.5, color=False, slice_=(slice(70, 195, None), slice(78, 172, None)), download_if_missing=True, n_retries=3, delay=1.0)",
                            "function_text": "Load the Labeled Faces in the Wild (LFW) pairs dataset (classification). Download it if necessary. Classes 2 Samples total 13233 Dimensionality 5828 Features real, between 0 and 255 In the official README.txt this task is described as the\n\u201cRestricted\u201d task.  As I am not sure as to implement the\n\u201cUnrestricted\u201d variant correctly, I left it as unsupported for now. The original images are 250 x 250 pixels, but the default slice and resize\narguments reduce them to 62 x 47. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/datasets/real_world.html#labeled-faces-in-the-wild-dataset",
                            "parameter_names_desc": [
                                {
                                    "param_name": "subset",
                                    "param_type": "{\u2018train\u2019, \u2018test\u2019, \u201810_folds\u2019}, default=\u2019train\u2019",
                                    "param_desc": "Select the dataset to load: \u2018train\u2019 for the development training\nset, \u2018test\u2019 for the development test set, and \u201810_folds\u2019 for the\nofficial evaluation set that is meant to be used with a 10-folds\ncross validation.\n"
                                },
                                {
                                    "param_name": "data_home",
                                    "param_type": "str or path-like, default=None",
                                    "param_desc": "Specify another download and cache folder for the datasets. By\ndefault all scikit-learn data is stored in \u2018~/scikit_learn_data\u2019\nsubfolders.\n"
                                },
                                {
                                    "param_name": "funneled",
                                    "param_type": "bool, default=True",
                                    "param_desc": "Download and use the funneled variant of the dataset.\n"
                                },
                                {
                                    "param_name": "resize",
                                    "param_type": "float, default=0.5",
                                    "param_desc": "Ratio used to resize the each face picture.\n"
                                },
                                {
                                    "param_name": "color",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Keep the 3 RGB channels instead of averaging them to a single\ngray level channel. If color is True the shape of the data has\none more dimension than the shape with color = False.\n"
                                },
                                {
                                    "param_name": "slice_",
                                    "param_type": "tuple of slice, default=(slice(70, 195), slice(78, 172))",
                                    "param_desc": "Provide a custom 2D slice (height, width) to extract the\n\u2018interesting\u2019 part of the jpeg files and avoid use statistical\ncorrelation from the background.\n"
                                },
                                {
                                    "param_name": "download_if_missing",
                                    "param_type": "bool, default=True",
                                    "param_desc": "If False, raise an OSError if the data is not locally available\ninstead of trying to download the data from the source site.\n"
                                },
                                {
                                    "param_name": "n_retries",
                                    "param_type": "int, default=3",
                                    "param_desc": "Number of retries when HTTP errors are encountered.\n\nAdded in version 1.5.\n\n"
                                },
                                {
                                    "param_name": "delay",
                                    "param_type": "float, default=1.0",
                                    "param_desc": "Number of seconds between retries.\n\nAdded in version 1.5.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "fetch_lfw_pairs",
                            "descriptions": "Load the Labeled Faces in the Wild (LFW) pairs dataset (classification). Download it if necessary. Classes 2 Samples total 13233 Dimensionality 5828 Features real, between 0 and 255 In the official README.txt this task is described as the\n\u201cRestricted\u201d task.  As I am not sure as to implement the\n\u201cUnrestricted\u201d variant correctly, I left it as unsupported for now. The original images are 250 x 250 pixels, but the default slice and resize\narguments reduce them to 62 x 47. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "subset": {
                                        "type": "string",
                                        "enum": [
                                            "train",
                                            " test",
                                            " 10_folds"
                                        ],
                                        "description": "{\u2018train\u2019, \u2018test\u2019, \u201810_folds\u2019}, default=\u2019train\u2019. Select the dataset to load: \u2018train\u2019 for the development training\nset, \u2018test\u2019 for the development test set, and \u201810_folds\u2019 for the\nofficial evaluation set that is meant to be used with a 10-folds\ncross validation.\n"
                                    },
                                    "data_home": {
                                        "type": "string",
                                        "description": "str or path-like, default=None. Specify another download and cache folder for the datasets. By\ndefault all scikit-learn data is stored in \u2018~/scikit_learn_data\u2019\nsubfolders.\n"
                                    },
                                    "funneled": {
                                        "type": "boolean",
                                        "description": "bool, default=True. Download and use the funneled variant of the dataset.\n"
                                    },
                                    "resize": {
                                        "type": "float",
                                        "description": "float, default=0.5. Ratio used to resize the each face picture.\n"
                                    },
                                    "color": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Keep the 3 RGB channels instead of averaging them to a single\ngray level channel. If color is True the shape of the data has\none more dimension than the shape with color = False.\n"
                                    },
                                    "slice_": {
                                        "type": "tuple of slice, default=(slice(70, 195), slice(78, 172))",
                                        "description": "tuple of slice, default=(slice(70, 195), slice(78, 172)). Provide a custom 2D slice (height, width) to extract the\n\u2018interesting\u2019 part of the jpeg files and avoid use statistical\ncorrelation from the background.\n"
                                    },
                                    "download_if_missing": {
                                        "type": "boolean",
                                        "description": "bool, default=True. If False, raise an OSError if the data is not locally available\ninstead of trying to download the data from the source site.\n"
                                    },
                                    "n_retries": {
                                        "type": "integer",
                                        "description": "int, default=3. Number of retries when HTTP errors are encountered.\n\nAdded in version 1.5.\n\n"
                                    },
                                    "delay": {
                                        "type": "float",
                                        "description": "float, default=1.0. Number of seconds between retries.\n\nAdded in version 1.5.\n\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "fetch_olivetti_faces",
                        "func_desc": "Load the Olivetti faces data-set from AT&T (classification).",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.datasets.fetch_olivetti_faces.html#sklearn.datasets.fetch_olivetti_faces",
                        "function_definitions": {
                            "function_name": "fetch_olivetti_faces",
                            "full_function": "sklearn.datasets.fetch_olivetti_faces(*, data_home=None, shuffle=False, random_state=0, download_if_missing=True, return_X_y=False, n_retries=3, delay=1.0)",
                            "function_text": "Load the Olivetti faces data-set from AT&T (classification). Download it if necessary. Classes 40 Samples total 400 Dimensionality 4096 Features real, between 0 and 1 Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/datasets/real_world.html#olivetti-faces-dataset",
                            "parameter_names_desc": [
                                {
                                    "param_name": "data_home",
                                    "param_type": "str or path-like, default=None",
                                    "param_desc": "Specify another download and cache folder for the datasets. By default\nall scikit-learn data is stored in \u2018~/scikit_learn_data\u2019 subfolders.\n"
                                },
                                {
                                    "param_name": "shuffle",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If True the order of the dataset is shuffled to avoid having\nimages of the same person grouped.\n"
                                },
                                {
                                    "param_name": "random_state",
                                    "param_type": "int, RandomState instance or None, default=0",
                                    "param_desc": "Determines random number generation for dataset shuffling. Pass an int\nfor reproducible output across multiple function calls.\nSee Glossary.\n"
                                },
                                {
                                    "param_name": "download_if_missing",
                                    "param_type": "bool, default=True",
                                    "param_desc": "If False, raise an OSError if the data is not locally available\ninstead of trying to download the data from the source site.\n"
                                },
                                {
                                    "param_name": "return_X_y",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If True, returns (data, target) instead of a Bunch object. See\nbelow for more information about the data and target object.\n\nAdded in version 0.22.\n\n"
                                },
                                {
                                    "param_name": "n_retries",
                                    "param_type": "int, default=3",
                                    "param_desc": "Number of retries when HTTP errors are encountered.\n\nAdded in version 1.5.\n\n"
                                },
                                {
                                    "param_name": "delay",
                                    "param_type": "float, default=1.0",
                                    "param_desc": "Number of seconds between retries.\n\nAdded in version 1.5.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "fetch_olivetti_faces",
                            "descriptions": "Load the Olivetti faces data-set from AT&T (classification). Download it if necessary. Classes 40 Samples total 400 Dimensionality 4096 Features real, between 0 and 1 Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "data_home": {
                                        "type": "string",
                                        "description": "str or path-like, default=None. Specify another download and cache folder for the datasets. By default\nall scikit-learn data is stored in \u2018~/scikit_learn_data\u2019 subfolders.\n"
                                    },
                                    "shuffle": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If True the order of the dataset is shuffled to avoid having\nimages of the same person grouped.\n"
                                    },
                                    "random_state": {
                                        "type": "integer",
                                        "description": "int, RandomState instance or None, default=0. Determines random number generation for dataset shuffling. Pass an int\nfor reproducible output across multiple function calls.\nSee Glossary.\n"
                                    },
                                    "download_if_missing": {
                                        "type": "boolean",
                                        "description": "bool, default=True. If False, raise an OSError if the data is not locally available\ninstead of trying to download the data from the source site.\n"
                                    },
                                    "return_X_y": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If True, returns (data, target) instead of a Bunch object. See\nbelow for more information about the data and target object.\n\nAdded in version 0.22.\n\n"
                                    },
                                    "n_retries": {
                                        "type": "integer",
                                        "description": "int, default=3. Number of retries when HTTP errors are encountered.\n\nAdded in version 1.5.\n\n"
                                    },
                                    "delay": {
                                        "type": "float",
                                        "description": "float, default=1.0. Number of seconds between retries.\n\nAdded in version 1.5.\n\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "fetch_rcv1",
                        "func_desc": "Load the RCV1 multilabel dataset (classification).",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.datasets.fetch_rcv1.html#sklearn.datasets.fetch_rcv1",
                        "function_definitions": {
                            "function_name": "fetch_rcv1",
                            "full_function": "sklearn.datasets.fetch_rcv1(*, data_home=None, subset='all', download_if_missing=True, random_state=None, shuffle=False, return_X_y=False, n_retries=3, delay=1.0)",
                            "function_text": "Load the RCV1 multilabel dataset (classification). Download it if necessary. Version: RCV1-v2, vectors, full sets, topics multilabels. Classes 103 Samples total 804414 Dimensionality 47236 Features real, between 0 and 1 Read more in the User Guide. Added in version 0.17.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/datasets/real_world.html#rcv1-dataset",
                            "parameter_names_desc": [
                                {
                                    "param_name": "data_home",
                                    "param_type": "str or path-like, default=None",
                                    "param_desc": "Specify another download and cache folder for the datasets. By default\nall scikit-learn data is stored in \u2018~/scikit_learn_data\u2019 subfolders.\n"
                                },
                                {
                                    "param_name": "subset",
                                    "param_type": "{\u2018train\u2019, \u2018test\u2019, \u2018all\u2019}, default=\u2019all\u2019",
                                    "param_desc": "Select the dataset to load: \u2018train\u2019 for the training set\n(23149 samples), \u2018test\u2019 for the test set (781265 samples),\n\u2018all\u2019 for both, with the training samples first if shuffle is False.\nThis follows the official LYRL2004 chronological split.\n"
                                },
                                {
                                    "param_name": "download_if_missing",
                                    "param_type": "bool, default=True",
                                    "param_desc": "If False, raise an OSError if the data is not locally available\ninstead of trying to download the data from the source site.\n"
                                },
                                {
                                    "param_name": "random_state",
                                    "param_type": "int, RandomState instance or None, default=None",
                                    "param_desc": "Determines random number generation for dataset shuffling. Pass an int\nfor reproducible output across multiple function calls.\nSee Glossary.\n"
                                },
                                {
                                    "param_name": "shuffle",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Whether to shuffle dataset.\n"
                                },
                                {
                                    "param_name": "return_X_y",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If True, returns (dataset.data, dataset.target) instead of a Bunch\nobject. See below for more information about the dataset.data and\ndataset.target object.\n\nAdded in version 0.20.\n\n"
                                },
                                {
                                    "param_name": "n_retries",
                                    "param_type": "int, default=3",
                                    "param_desc": "Number of retries when HTTP errors are encountered.\n\nAdded in version 1.5.\n\n"
                                },
                                {
                                    "param_name": "delay",
                                    "param_type": "float, default=1.0",
                                    "param_desc": "Number of seconds between retries.\n\nAdded in version 1.5.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "fetch_rcv1",
                            "descriptions": "Load the RCV1 multilabel dataset (classification). Download it if necessary. Version: RCV1-v2, vectors, full sets, topics multilabels. Classes 103 Samples total 804414 Dimensionality 47236 Features real, between 0 and 1 Read more in the User Guide. Added in version 0.17.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "data_home": {
                                        "type": "string",
                                        "description": "str or path-like, default=None. Specify another download and cache folder for the datasets. By default\nall scikit-learn data is stored in \u2018~/scikit_learn_data\u2019 subfolders.\n"
                                    },
                                    "subset": {
                                        "type": "string",
                                        "enum": [
                                            "train",
                                            " test",
                                            " all"
                                        ],
                                        "description": "{\u2018train\u2019, \u2018test\u2019, \u2018all\u2019}, default=\u2019all\u2019. Select the dataset to load: \u2018train\u2019 for the training set\n(23149 samples), \u2018test\u2019 for the test set (781265 samples),\n\u2018all\u2019 for both, with the training samples first if shuffle is False.\nThis follows the official LYRL2004 chronological split.\n"
                                    },
                                    "download_if_missing": {
                                        "type": "boolean",
                                        "description": "bool, default=True. If False, raise an OSError if the data is not locally available\ninstead of trying to download the data from the source site.\n"
                                    },
                                    "random_state": {
                                        "type": "integer",
                                        "description": "int, RandomState instance or None, default=None. Determines random number generation for dataset shuffling. Pass an int\nfor reproducible output across multiple function calls.\nSee Glossary.\n"
                                    },
                                    "shuffle": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Whether to shuffle dataset.\n"
                                    },
                                    "return_X_y": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If True, returns (dataset.data, dataset.target) instead of a Bunch\nobject. See below for more information about the dataset.data and\ndataset.target object.\n\nAdded in version 0.20.\n\n"
                                    },
                                    "n_retries": {
                                        "type": "integer",
                                        "description": "int, default=3. Number of retries when HTTP errors are encountered.\n\nAdded in version 1.5.\n\n"
                                    },
                                    "delay": {
                                        "type": "float",
                                        "description": "float, default=1.0. Number of seconds between retries.\n\nAdded in version 1.5.\n\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "get_data_home",
                        "func_desc": "Return the path of the scikit-learn data directory.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.datasets.get_data_home.html#sklearn.datasets.get_data_home",
                        "function_definitions": {
                            "function_name": "get_data_home",
                            "full_function": "sklearn.datasets.get_data_home(data_home=None) \u2192 str",
                            "function_text": "Return the path of the scikit-learn data directory. This folder is used by some large dataset loaders to avoid downloading the\ndata several times. By default the data directory is set to a folder named \u2018scikit_learn_data\u2019 in the\nuser home folder. Alternatively, it can be set by the \u2018SCIKIT_LEARN_DATA\u2019 environment\nvariable or programmatically by giving an explicit folder path. The \u2018~\u2019\nsymbol is expanded to the user home folder. If the folder does not already exist, it is automatically created.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "data_home",
                                    "param_type": "str or path-like, default=None",
                                    "param_desc": "The path to scikit-learn data directory. If None, the default path\nis ~/scikit_learn_data.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "get_data_home",
                            "descriptions": "Return the path of the scikit-learn data directory. This folder is used by some large dataset loaders to avoid downloading the\ndata several times. By default the data directory is set to a folder named \u2018scikit_learn_data\u2019 in the\nuser home folder. Alternatively, it can be set by the \u2018SCIKIT_LEARN_DATA\u2019 environment\nvariable or programmatically by giving an explicit folder path. The \u2018~\u2019\nsymbol is expanded to the user home folder. If the folder does not already exist, it is automatically created.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "data_home": {
                                        "type": "string",
                                        "description": "str or path-like, default=None. The path to scikit-learn data directory. If None, the default path\nis ~/scikit_learn_data.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "load_diabetes",
                        "func_desc": "Load and return the diabetes dataset (regression).",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.datasets.load_diabetes.html#sklearn.datasets.load_diabetes",
                        "function_definitions": {
                            "function_name": "load_diabetes",
                            "full_function": "sklearn.datasets.load_diabetes(*, return_X_y=False, as_frame=False, scaled=True)",
                            "function_text": "Load and return the diabetes dataset (regression). Samples total 442 Dimensionality 10 Features real, -.2 < x < .2 Targets integer 25 - 346 Note The meaning of each feature (i.e. feature_names) might be unclear\n(especially for ltg) as the documentation of the original dataset is\nnot explicit. We provide information that seems correct in regard with\nthe scientific literature in this field of research. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/datasets/toy_dataset.html#diabetes-dataset",
                            "parameter_names_desc": [
                                {
                                    "param_name": "return_X_y",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If True, returns (data, target) instead of a Bunch object.\nSee below for more information about the data and target object.\n\nAdded in version 0.18.\n\n"
                                },
                                {
                                    "param_name": "as_frame",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If True, the data is a pandas DataFrame including columns with\nappropriate dtypes (numeric). The target is\na pandas DataFrame or Series depending on the number of target columns.\nIf return_X_y is True, then (data, target) will be pandas\nDataFrames or Series as described below.\n\nAdded in version 0.23.\n\n"
                                },
                                {
                                    "param_name": "scaled",
                                    "param_type": "bool, default=True",
                                    "param_desc": "If True, the feature variables are mean centered and scaled by the\nstandard deviation times the square root of n_samples.\nIf False, raw data is returned for the feature variables.\n\nAdded in version 1.1.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "load_diabetes",
                            "descriptions": "Load and return the diabetes dataset (regression). Samples total 442 Dimensionality 10 Features real, -.2 < x < .2 Targets integer 25 - 346 Note The meaning of each feature (i.e. feature_names) might be unclear\n(especially for ltg) as the documentation of the original dataset is\nnot explicit. We provide information that seems correct in regard with\nthe scientific literature in this field of research. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "return_X_y": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If True, returns (data, target) instead of a Bunch object.\nSee below for more information about the data and target object.\n\nAdded in version 0.18.\n\n"
                                    },
                                    "as_frame": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If True, the data is a pandas DataFrame including columns with\nappropriate dtypes (numeric). The target is\na pandas DataFrame or Series depending on the number of target columns.\nIf return_X_y is True, then (data, target) will be pandas\nDataFrames or Series as described below.\n\nAdded in version 0.23.\n\n"
                                    },
                                    "scaled": {
                                        "type": "boolean",
                                        "description": "bool, default=True. If True, the feature variables are mean centered and scaled by the\nstandard deviation times the square root of n_samples.\nIf False, raw data is returned for the feature variables.\n\nAdded in version 1.1.\n\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "load_files",
                        "func_desc": "Load text files with categories as subfolder names.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.datasets.load_files.html#sklearn.datasets.load_files",
                        "function_definitions": {
                            "function_name": "load_files",
                            "full_function": "sklearn.datasets.load_files(container_path, *, description=None, categories=None, load_content=True, shuffle=True, encoding=None, decode_error='strict', random_state=0, allowed_extensions=None)",
                            "function_text": "Load text files with categories as subfolder names. Individual samples are assumed to be files stored a two levels folder\nstructure such as the following: file_1.txt\nfile_2.txt\n\u2026\nfile_42.txt file_43.txt\nfile_44.txt\n\u2026 The folder names are used as supervised signal label names. The individual\nfile names are not important. This function does not try to extract features into a numpy array or scipy\nsparse matrix. In addition, if load_content is false it does not try to\nload the files in memory. To use text files in a scikit-learn classification or clustering algorithm,\nyou will need to use the text module to\nbuild a feature extraction transformer that suits your problem. If you set load_content=True, you should also specify the encoding of the\ntext using the \u2018encoding\u2019 parameter. For many modern text files, \u2018utf-8\u2019\nwill be the correct encoding. If you leave encoding equal to None, then the\ncontent will be made of bytes instead of Unicode, and you will not be able\nto use most functions in text. Similar feature extractors should be built for other kind of unstructured\ndata input such as images, audio, video, \u2026 If you want files with a specific file extension (e.g. .txt) then you\ncan pass a list of those file extensions to allowed_extensions. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/api/sklearn.feature_extraction.html#module-sklearn.feature_extraction.text",
                            "parameter_names_desc": [
                                {
                                    "param_name": "container_path",
                                    "param_type": "str",
                                    "param_desc": "Path to the main folder holding one subfolder per category.\n"
                                },
                                {
                                    "param_name": "description",
                                    "param_type": "str, default=None",
                                    "param_desc": "A paragraph describing the characteristic of the dataset: its source,\nreference, etc.\n"
                                },
                                {
                                    "param_name": "categories",
                                    "param_type": "list of str, default=None",
                                    "param_desc": "If None (default), load all the categories. If not None, list of\ncategory names to load (other categories ignored).\n"
                                },
                                {
                                    "param_name": "load_content",
                                    "param_type": "bool, default=True",
                                    "param_desc": "Whether to load or not the content of the different files. If true a\n\u2018data\u2019 attribute containing the text information is present in the data\nstructure returned. If not, a filenames attribute gives the path to the\nfiles.\n"
                                },
                                {
                                    "param_name": "shuffle",
                                    "param_type": "bool, default=True",
                                    "param_desc": "Whether or not to shuffle the data: might be important for models that\nmake the assumption that the samples are independent and identically\ndistributed (i.i.d.), such as stochastic gradient descent.\n"
                                },
                                {
                                    "param_name": "encoding",
                                    "param_type": "str, default=None",
                                    "param_desc": "If None, do not try to decode the content of the files (e.g. for images\nor other non-text content). If not None, encoding to use to decode text\nfiles to Unicode if load_content is True.\n"
                                },
                                {
                                    "param_name": "decode_error",
                                    "param_type": "{\u2018strict\u2019, \u2018ignore\u2019, \u2018replace\u2019}, default=\u2019strict\u2019",
                                    "param_desc": "Instruction on what to do if a byte sequence is given to analyze that\ncontains characters not of the given encoding. Passed as keyword\nargument \u2018errors\u2019 to bytes.decode.\n"
                                },
                                {
                                    "param_name": "random_state",
                                    "param_type": "int, RandomState instance or None, default=0",
                                    "param_desc": "Determines random number generation for dataset shuffling. Pass an int\nfor reproducible output across multiple function calls.\nSee Glossary.\n"
                                },
                                {
                                    "param_name": "allowed_extensions",
                                    "param_type": "list of str, default=None",
                                    "param_desc": "List of desired file extensions to filter the files to be loaded.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "load_files",
                            "descriptions": "Load text files with categories as subfolder names. Individual samples are assumed to be files stored a two levels folder\nstructure such as the following: file_1.txt\nfile_2.txt\n\u2026\nfile_42.txt file_43.txt\nfile_44.txt\n\u2026 The folder names are used as supervised signal label names. The individual\nfile names are not important. This function does not try to extract features into a numpy array or scipy\nsparse matrix. In addition, if load_content is false it does not try to\nload the files in memory. To use text files in a scikit-learn classification or clustering algorithm,\nyou will need to use the text module to\nbuild a feature extraction transformer that suits your problem. If you set load_content=True, you should also specify the encoding of the\ntext using the \u2018encoding\u2019 parameter. For many modern text files, \u2018utf-8\u2019\nwill be the correct encoding. If you leave encoding equal to None, then the\ncontent will be made of bytes instead of Unicode, and you will not be able\nto use most functions in text. Similar feature extractors should be built for other kind of unstructured\ndata input such as images, audio, video, \u2026 If you want files with a specific file extension (e.g. .txt) then you\ncan pass a list of those file extensions to allowed_extensions. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "container_path": {
                                        "type": "string",
                                        "description": "str. Path to the main folder holding one subfolder per category.\n"
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "str, default=None. A paragraph describing the characteristic of the dataset: its source,\nreference, etc.\n"
                                    },
                                    "categories": {
                                        "type": "string",
                                        "description": "list of str, default=None. If None (default), load all the categories. If not None, list of\ncategory names to load (other categories ignored).\n"
                                    },
                                    "load_content": {
                                        "type": "boolean",
                                        "description": "bool, default=True. Whether to load or not the content of the different files. If true a\n\u2018data\u2019 attribute containing the text information is present in the data\nstructure returned. If not, a filenames attribute gives the path to the\nfiles.\n"
                                    },
                                    "shuffle": {
                                        "type": "boolean",
                                        "description": "bool, default=True. Whether or not to shuffle the data: might be important for models that\nmake the assumption that the samples are independent and identically\ndistributed (i.i.d.), such as stochastic gradient descent.\n"
                                    },
                                    "encoding": {
                                        "type": "string",
                                        "description": "str, default=None. If None, do not try to decode the content of the files (e.g. for images\nor other non-text content). If not None, encoding to use to decode text\nfiles to Unicode if load_content is True.\n"
                                    },
                                    "decode_error": {
                                        "type": "string",
                                        "description": "{\u2018strict\u2019, \u2018ignore\u2019, \u2018replace\u2019}, default=\u2019strict\u2019. Instruction on what to do if a byte sequence is given to analyze that\ncontains characters not of the given encoding. Passed as keyword\nargument \u2018errors\u2019 to bytes.decode.\n"
                                    },
                                    "random_state": {
                                        "type": "integer",
                                        "description": "int, RandomState instance or None, default=0. Determines random number generation for dataset shuffling. Pass an int\nfor reproducible output across multiple function calls.\nSee Glossary.\n"
                                    },
                                    "allowed_extensions": {
                                        "type": "string",
                                        "description": "list of str, default=None. List of desired file extensions to filter the files to be loaded.\n"
                                    }
                                },
                                "required": [
                                    "container_path"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "load_linnerud",
                        "func_desc": "Load and return the physical exercise Linnerud dataset.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.datasets.load_linnerud.html#sklearn.datasets.load_linnerud",
                        "function_definitions": {
                            "function_name": "load_linnerud",
                            "full_function": "sklearn.datasets.load_linnerud(*, return_X_y=False, as_frame=False)",
                            "function_text": "Load and return the physical exercise Linnerud dataset. This dataset is suitable for multi-output regression tasks. Samples total 20 Dimensionality 3 (for both data and target) Features integer Targets integer Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/datasets/toy_dataset.html#linnerrud-dataset",
                            "parameter_names_desc": [
                                {
                                    "param_name": "return_X_y",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If True, returns (data, target) instead of a Bunch object.\nSee below for more information about the data and target object.\n\nAdded in version 0.18.\n\n"
                                },
                                {
                                    "param_name": "as_frame",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If True, the data is a pandas DataFrame including columns with\nappropriate dtypes (numeric, string or categorical). The target is\na pandas DataFrame or Series depending on the number of target columns.\nIf return_X_y is True, then (data, target) will be pandas\nDataFrames or Series as described below.\n\nAdded in version 0.23.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "load_linnerud",
                            "descriptions": "Load and return the physical exercise Linnerud dataset. This dataset is suitable for multi-output regression tasks. Samples total 20 Dimensionality 3 (for both data and target) Features integer Targets integer Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "return_X_y": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If True, returns (data, target) instead of a Bunch object.\nSee below for more information about the data and target object.\n\nAdded in version 0.18.\n\n"
                                    },
                                    "as_frame": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If True, the data is a pandas DataFrame including columns with\nappropriate dtypes (numeric, string or categorical). The target is\na pandas DataFrame or Series depending on the number of target columns.\nIf return_X_y is True, then (data, target) will be pandas\nDataFrames or Series as described below.\n\nAdded in version 0.23.\n\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "load_sample_images",
                        "func_desc": "Load sample images for image manipulation.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.datasets.load_sample_images.html#sklearn.datasets.load_sample_images",
                        "function_definitions": {
                            "function_name": "load_sample_images",
                            "full_function": "sklearn.datasets.load_sample_images()",
                            "function_text": "Load sample images for image manipulation. Loads both, china and flower. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/datasets/loading_other_datasets.html#sample-images",
                            "parameter_names_desc": []
                        },
                        "function_calling": {}
                    },
                    {
                        "func_name": "load_svmlight_files",
                        "func_desc": "Load dataset from multiple files in SVMlight format.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.datasets.load_svmlight_files.html#sklearn.datasets.load_svmlight_files",
                        "function_definitions": {
                            "function_name": "load_svmlight_files",
                            "full_function": "sklearn.datasets.load_svmlight_files(files, *, n_features=None, dtype=<class 'numpy.float64'>, multilabel=False, zero_based='auto', query_id=False, offset=0, length=-1)",
                            "function_text": "Load dataset from multiple files in SVMlight format. This function is equivalent to mapping load_svmlight_file over a list of\nfiles, except that the results are concatenated into a single, flat list\nand the samples vectors are constrained to all have the same number of\nfeatures. In case the file contains a pairwise preference constraint (known\nas \u201cqid\u201d in the svmlight format) these are ignored unless the\nquery_id parameter is set to True. These pairwise preference\nconstraints can be used to constraint the combination of samples\nwhen using pairwise loss functions (as is the case in some\nlearning to rank problems) so that only pairs with the same\nquery_id value are considered.",
                            "func_text_user_guide": "sklearn.datasets.load_svmlight_file.html#sklearn.datasets.load_svmlight_file",
                            "parameter_names_desc": [
                                {
                                    "param_name": "files",
                                    "param_type": "array-like, dtype=str, path-like, file-like or int",
                                    "param_desc": "(Paths of) files to load. If a path ends in \u201c.gz\u201d or \u201c.bz2\u201d, it will\nbe uncompressed on the fly. If an integer is passed, it is assumed to\nbe a file descriptor. File-likes and file descriptors will not be\nclosed by this function. File-like objects must be opened in binary\nmode.\n\nChanged in version 1.2: Path-like objects are now accepted.\n\n"
                                },
                                {
                                    "param_name": "n_features",
                                    "param_type": "int, default=None",
                                    "param_desc": "The number of features to use. If None, it will be inferred from the\nmaximum column index occurring in any of the files.\nThis can be set to a higher value than the actual number of features\nin any of the input files, but setting it to a lower value will cause\nan exception to be raised.\n"
                                },
                                {
                                    "param_name": "dtype",
                                    "param_type": "numpy data type, default=np.float64",
                                    "param_desc": "Data type of dataset to be loaded. This will be the data type of the\noutput numpy arrays X and y.\n"
                                },
                                {
                                    "param_name": "multilabel",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Samples may have several labels each (see\nhttps://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/multilabel.html).\n"
                                },
                                {
                                    "param_name": "zero_based",
                                    "param_type": "bool or \u201cauto\u201d, default=\u201dauto\u201d",
                                    "param_desc": "Whether column indices in f are zero-based (True) or one-based\n(False). If column indices are one-based, they are transformed to\nzero-based to match Python/NumPy conventions.\nIf set to \u201cauto\u201d, a heuristic check is applied to determine this from\nthe file contents. Both kinds of files occur \u201cin the wild\u201d, but they\nare unfortunately not self-identifying. Using \u201cauto\u201d or True should\nalways be safe when no offset or length is passed.\nIf offset or length are passed, the \u201cauto\u201d mode falls back\nto zero_based=True to avoid having the heuristic check yield\ninconsistent results on different segments of the file.\n"
                                },
                                {
                                    "param_name": "query_id",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If True, will return the query_id array for each file.\n"
                                },
                                {
                                    "param_name": "offset",
                                    "param_type": "int, default=0",
                                    "param_desc": "Ignore the offset first bytes by seeking forward, then\ndiscarding the following bytes up until the next new line\ncharacter.\n"
                                },
                                {
                                    "param_name": "length",
                                    "param_type": "int, default=-1",
                                    "param_desc": "If strictly positive, stop reading any new line of data once the\nposition in the file has reached the (offset + length) bytes threshold.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "load_svmlight_files",
                            "descriptions": "Load dataset from multiple files in SVMlight format. This function is equivalent to mapping load_svmlight_file over a list of\nfiles, except that the results are concatenated into a single, flat list\nand the samples vectors are constrained to all have the same number of\nfeatures. In case the file contains a pairwise preference constraint (known\nas \u201cqid\u201d in the svmlight format) these are ignored unless the\nquery_id parameter is set to True. These pairwise preference\nconstraints can be used to constraint the combination of samples\nwhen using pairwise loss functions (as is the case in some\nlearning to rank problems) so that only pairs with the same\nquery_id value are considered.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "files": {
                                        "type": "integer",
                                        "description": "array-like, dtype=str, path-like, file-like or int. (Paths of) files to load. If a path ends in \u201c.gz\u201d or \u201c.bz2\u201d, it will\nbe uncompressed on the fly. If an integer is passed, it is assumed to\nbe a file descriptor. File-likes and file descriptors will not be\nclosed by this function. File-like objects must be opened in binary\nmode.\n\nChanged in version 1.2: Path-like objects are now accepted.\n\n"
                                    },
                                    "n_features": {
                                        "type": "integer",
                                        "description": "int, default=None. The number of features to use. If None, it will be inferred from the\nmaximum column index occurring in any of the files.\nThis can be set to a higher value than the actual number of features\nin any of the input files, but setting it to a lower value will cause\nan exception to be raised.\n"
                                    },
                                    "dtype": {
                                        "type": "float",
                                        "description": "numpy data type, default=np.float64. Data type of dataset to be loaded. This will be the data type of the\noutput numpy arrays X and y.\n"
                                    },
                                    "multilabel": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Samples may have several labels each (see\nhttps://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/multilabel.html).\n"
                                    },
                                    "zero_based": {
                                        "type": "boolean",
                                        "description": "bool or \u201cauto\u201d, default=\u201dauto\u201d. Whether column indices in f are zero-based (True) or one-based\n(False). If column indices are one-based, they are transformed to\nzero-based to match Python/NumPy conventions.\nIf set to \u201cauto\u201d, a heuristic check is applied to determine this from\nthe file contents. Both kinds of files occur \u201cin the wild\u201d, but they\nare unfortunately not self-identifying. Using \u201cauto\u201d or True should\nalways be safe when no offset or length is passed.\nIf offset or length are passed, the \u201cauto\u201d mode falls back\nto zero_based=True to avoid having the heuristic check yield\ninconsistent results on different segments of the file.\n"
                                    },
                                    "query_id": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If True, will return the query_id array for each file.\n"
                                    },
                                    "offset": {
                                        "type": "integer",
                                        "description": "int, default=0. Ignore the offset first bytes by seeking forward, then\ndiscarding the following bytes up until the next new line\ncharacter.\n"
                                    },
                                    "length": {
                                        "type": "integer",
                                        "description": "int, default=-1. If strictly positive, stop reading any new line of data once the\nposition in the file has reached the (offset + length) bytes threshold.\n"
                                    }
                                },
                                "required": [
                                    "files"
                                ]
                            }
                        }
                    }
                ]
            },
            {
                "Sample generators": [
                    {
                        "func_name": "make_biclusters",
                        "func_desc": "Generate a constant block diagonal structure array for biclustering.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.datasets.make_biclusters.html#sklearn.datasets.make_biclusters",
                        "function_definitions": {
                            "function_name": "make_biclusters",
                            "full_function": "sklearn.datasets.make_biclusters(shape, n_clusters, *, noise=0.0, minval=10, maxval=100, shuffle=True, random_state=None)",
                            "function_text": "Generate a constant block diagonal structure array for biclustering. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/datasets/sample_generators.html#sample-generators",
                            "parameter_names_desc": [
                                {
                                    "param_name": "shape",
                                    "param_type": "tuple of shape (n_rows, n_cols)",
                                    "param_desc": "The shape of the result.\n"
                                },
                                {
                                    "param_name": "n_clusters",
                                    "param_type": "int",
                                    "param_desc": "The number of biclusters.\n"
                                },
                                {
                                    "param_name": "noise",
                                    "param_type": "float, default=0.0",
                                    "param_desc": "The standard deviation of the gaussian noise.\n"
                                },
                                {
                                    "param_name": "minval",
                                    "param_type": "float, default=10",
                                    "param_desc": "Minimum value of a bicluster.\n"
                                },
                                {
                                    "param_name": "maxval",
                                    "param_type": "float, default=100",
                                    "param_desc": "Maximum value of a bicluster.\n"
                                },
                                {
                                    "param_name": "shuffle",
                                    "param_type": "bool, default=True",
                                    "param_desc": "Shuffle the samples.\n"
                                },
                                {
                                    "param_name": "random_state",
                                    "param_type": "int, RandomState instance or None, default=None",
                                    "param_desc": "Determines random number generation for dataset creation. Pass an int\nfor reproducible output across multiple function calls.\nSee Glossary.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "make_biclusters",
                            "descriptions": "Generate a constant block diagonal structure array for biclustering. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "shape": {
                                        "type": "tuple of shape (n_rows, n_cols)",
                                        "description": "tuple of shape (n_rows, n_cols). The shape of the result.\n"
                                    },
                                    "n_clusters": {
                                        "type": "integer",
                                        "description": "int. The number of biclusters.\n"
                                    },
                                    "noise": {
                                        "type": "float",
                                        "description": "float, default=0.0. The standard deviation of the gaussian noise.\n"
                                    },
                                    "minval": {
                                        "type": "float",
                                        "description": "float, default=10. Minimum value of a bicluster.\n"
                                    },
                                    "maxval": {
                                        "type": "float",
                                        "description": "float, default=100. Maximum value of a bicluster.\n"
                                    },
                                    "shuffle": {
                                        "type": "boolean",
                                        "description": "bool, default=True. Shuffle the samples.\n"
                                    },
                                    "random_state": {
                                        "type": "integer",
                                        "description": "int, RandomState instance or None, default=None. Determines random number generation for dataset creation. Pass an int\nfor reproducible output across multiple function calls.\nSee Glossary.\n"
                                    }
                                },
                                "required": [
                                    "shape",
                                    "n_clusters"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "make_checkerboard",
                        "func_desc": "Generate an array with block checkerboard structure for biclustering.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.datasets.make_checkerboard.html#sklearn.datasets.make_checkerboard",
                        "function_definitions": {
                            "function_name": "make_checkerboard",
                            "full_function": "sklearn.datasets.make_checkerboard(shape, n_clusters, *, noise=0.0, minval=10, maxval=100, shuffle=True, random_state=None)",
                            "function_text": "Generate an array with block checkerboard structure for biclustering. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/datasets/sample_generators.html#sample-generators",
                            "parameter_names_desc": [
                                {
                                    "param_name": "shape",
                                    "param_type": "tuple of shape (n_rows, n_cols)",
                                    "param_desc": "The shape of the result.\n"
                                },
                                {
                                    "param_name": "n_clusters",
                                    "param_type": "int or array-like or shape (n_row_clusters, n_column_clusters)",
                                    "param_desc": "The number of row and column clusters.\n"
                                },
                                {
                                    "param_name": "noise",
                                    "param_type": "float, default=0.0",
                                    "param_desc": "The standard deviation of the gaussian noise.\n"
                                },
                                {
                                    "param_name": "minval",
                                    "param_type": "float, default=10",
                                    "param_desc": "Minimum value of a bicluster.\n"
                                },
                                {
                                    "param_name": "maxval",
                                    "param_type": "float, default=100",
                                    "param_desc": "Maximum value of a bicluster.\n"
                                },
                                {
                                    "param_name": "shuffle",
                                    "param_type": "bool, default=True",
                                    "param_desc": "Shuffle the samples.\n"
                                },
                                {
                                    "param_name": "random_state",
                                    "param_type": "int, RandomState instance or None, default=None",
                                    "param_desc": "Determines random number generation for dataset creation. Pass an int\nfor reproducible output across multiple function calls.\nSee Glossary.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "make_checkerboard",
                            "descriptions": "Generate an array with block checkerboard structure for biclustering. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "shape": {
                                        "type": "tuple of shape (n_rows, n_cols)",
                                        "description": "tuple of shape (n_rows, n_cols). The shape of the result.\n"
                                    },
                                    "n_clusters": {
                                        "type": "integer",
                                        "description": "int or array-like or shape (n_row_clusters, n_column_clusters). The number of row and column clusters.\n"
                                    },
                                    "noise": {
                                        "type": "float",
                                        "description": "float, default=0.0. The standard deviation of the gaussian noise.\n"
                                    },
                                    "minval": {
                                        "type": "float",
                                        "description": "float, default=10. Minimum value of a bicluster.\n"
                                    },
                                    "maxval": {
                                        "type": "float",
                                        "description": "float, default=100. Maximum value of a bicluster.\n"
                                    },
                                    "shuffle": {
                                        "type": "boolean",
                                        "description": "bool, default=True. Shuffle the samples.\n"
                                    },
                                    "random_state": {
                                        "type": "integer",
                                        "description": "int, RandomState instance or None, default=None. Determines random number generation for dataset creation. Pass an int\nfor reproducible output across multiple function calls.\nSee Glossary.\n"
                                    }
                                },
                                "required": [
                                    "shape",
                                    "n_clusters"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "make_classification",
                        "func_desc": "Generate a random n-class classification problem.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.datasets.make_classification.html#sklearn.datasets.make_classification",
                        "function_definitions": {
                            "function_name": "make_classification",
                            "full_function": "sklearn.datasets.make_classification(n_samples=100, n_features=20, *, n_informative=2, n_redundant=2, n_repeated=0, n_classes=2, n_clusters_per_class=2, weights=None, flip_y=0.01, class_sep=1.0, hypercube=True, shift=0.0, scale=1.0, shuffle=True, random_state=None)",
                            "function_text": "Generate a random n-class classification problem. This initially creates clusters of points normally distributed (std=1)\nabout vertices of an n_informative-dimensional hypercube with sides of\nlength 2*class_sep and assigns an equal number of clusters to each\nclass. It introduces interdependence between these features and adds\nvarious types of further noise to the data. Without shuffling, X horizontally stacks features in the following\norder: the primary n_informative features, followed by n_redundant\nlinear combinations of the informative features, followed by n_repeated\nduplicates, drawn randomly with replacement from the informative and\nredundant features. The remaining features are filled with random noise.\nThus, without shuffling, all useful features are contained in the columns\nX[:, :n_informative + n_redundant + n_repeated]. For an example of usage, see\nPlot randomly generated classification dataset. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/auto_examples/datasets/plot_random_dataset.html#sphx-glr-auto-examples-datasets-plot-random-dataset-py",
                            "parameter_names_desc": [
                                {
                                    "param_name": "n_samples",
                                    "param_type": "int, default=100",
                                    "param_desc": "The number of samples.\n"
                                },
                                {
                                    "param_name": "n_features",
                                    "param_type": "int, default=20",
                                    "param_desc": "The total number of features. These comprise n_informative\ninformative features, n_redundant redundant features,\nn_repeated duplicated features and\nn_features-n_informative-n_redundant-n_repeated useless features\ndrawn at random.\n"
                                },
                                {
                                    "param_name": "n_informative",
                                    "param_type": "int, default=2",
                                    "param_desc": "The number of informative features. Each class is composed of a number\nof gaussian clusters each located around the vertices of a hypercube\nin a subspace of dimension n_informative. For each cluster,\ninformative features are drawn independently from  N(0, 1) and then\nrandomly linearly combined within each cluster in order to add\ncovariance. The clusters are then placed on the vertices of the\nhypercube.\n"
                                },
                                {
                                    "param_name": "n_redundant",
                                    "param_type": "int, default=2",
                                    "param_desc": "The number of redundant features. These features are generated as\nrandom linear combinations of the informative features.\n"
                                },
                                {
                                    "param_name": "n_repeated",
                                    "param_type": "int, default=0",
                                    "param_desc": "The number of duplicated features, drawn randomly from the informative\nand the redundant features.\n"
                                },
                                {
                                    "param_name": "n_classes",
                                    "param_type": "int, default=2",
                                    "param_desc": "The number of classes (or labels) of the classification problem.\n"
                                },
                                {
                                    "param_name": "n_clusters_per_class",
                                    "param_type": "int, default=2",
                                    "param_desc": "The number of clusters per class.\n"
                                },
                                {
                                    "param_name": "weights",
                                    "param_type": "array-like of shape (n_classes,) or (n_classes - 1,),              default=None",
                                    "param_desc": "The proportions of samples assigned to each class. If None, then\nclasses are balanced. Note that if len(weights) == n_classes - 1,\nthen the last class weight is automatically inferred.\nMore than n_samples samples may be returned if the sum of\nweights exceeds 1. Note that the actual class proportions will\nnot exactly match weights when flip_y isn\u2019t 0.\n"
                                },
                                {
                                    "param_name": "flip_y",
                                    "param_type": "float, default=0.01",
                                    "param_desc": "The fraction of samples whose class is assigned randomly. Larger\nvalues introduce noise in the labels and make the classification\ntask harder. Note that the default setting flip_y > 0 might lead\nto less than n_classes in y in some cases.\n"
                                },
                                {
                                    "param_name": "class_sep",
                                    "param_type": "float, default=1.0",
                                    "param_desc": "The factor multiplying the hypercube size.  Larger values spread\nout the clusters/classes and make the classification task easier.\n"
                                },
                                {
                                    "param_name": "hypercube",
                                    "param_type": "bool, default=True",
                                    "param_desc": "If True, the clusters are put on the vertices of a hypercube. If\nFalse, the clusters are put on the vertices of a random polytope.\n"
                                },
                                {
                                    "param_name": "shift",
                                    "param_type": "float, ndarray of shape (n_features,) or None, default=0.0",
                                    "param_desc": "Shift features by the specified value. If None, then features\nare shifted by a random value drawn in [-class_sep, class_sep].\n"
                                },
                                {
                                    "param_name": "scale",
                                    "param_type": "float, ndarray of shape (n_features,) or None, default=1.0",
                                    "param_desc": "Multiply features by the specified value. If None, then features\nare scaled by a random value drawn in [1, 100]. Note that scaling\nhappens after shifting.\n"
                                },
                                {
                                    "param_name": "shuffle",
                                    "param_type": "bool, default=True",
                                    "param_desc": "Shuffle the samples and the features.\n"
                                },
                                {
                                    "param_name": "random_state",
                                    "param_type": "int, RandomState instance or None, default=None",
                                    "param_desc": "Determines random number generation for dataset creation. Pass an int\nfor reproducible output across multiple function calls.\nSee Glossary.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "make_classification",
                            "descriptions": "Generate a random n-class classification problem. This initially creates clusters of points normally distributed (std=1)\nabout vertices of an n_informative-dimensional hypercube with sides of\nlength 2*class_sep and assigns an equal number of clusters to each\nclass. It introduces interdependence between these features and adds\nvarious types of further noise to the data. Without shuffling, X horizontally stacks features in the following\norder: the primary n_informative features, followed by n_redundant\nlinear combinations of the informative features, followed by n_repeated\nduplicates, drawn randomly with replacement from the informative and\nredundant features. The remaining features are filled with random noise.\nThus, without shuffling, all useful features are contained in the columns\nX[:, :n_informative + n_redundant + n_repeated]. For an example of usage, see\nPlot randomly generated classification dataset. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "n_samples": {
                                        "type": "integer",
                                        "description": "int, default=100. The number of samples.\n"
                                    },
                                    "n_features": {
                                        "type": "integer",
                                        "description": "int, default=20. The total number of features. These comprise n_informative\ninformative features, n_redundant redundant features,\nn_repeated duplicated features and\nn_features-n_informative-n_redundant-n_repeated useless features\ndrawn at random.\n"
                                    },
                                    "n_informative": {
                                        "type": "integer",
                                        "description": "int, default=2. The number of informative features. Each class is composed of a number\nof gaussian clusters each located around the vertices of a hypercube\nin a subspace of dimension n_informative. For each cluster,\ninformative features are drawn independently from  N(0, 1) and then\nrandomly linearly combined within each cluster in order to add\ncovariance. The clusters are then placed on the vertices of the\nhypercube.\n"
                                    },
                                    "n_redundant": {
                                        "type": "integer",
                                        "description": "int, default=2. The number of redundant features. These features are generated as\nrandom linear combinations of the informative features.\n"
                                    },
                                    "n_repeated": {
                                        "type": "integer",
                                        "description": "int, default=0. The number of duplicated features, drawn randomly from the informative\nand the redundant features.\n"
                                    },
                                    "n_classes": {
                                        "type": "integer",
                                        "description": "int, default=2. The number of classes (or labels) of the classification problem.\n"
                                    },
                                    "n_clusters_per_class": {
                                        "type": "integer",
                                        "description": "int, default=2. The number of clusters per class.\n"
                                    },
                                    "weights": {
                                        "type": "array",
                                        "description": "array-like of shape (n_classes,) or (n_classes - 1,),              default=None. The proportions of samples assigned to each class. If None, then\nclasses are balanced. Note that if len(weights) == n_classes - 1,\nthen the last class weight is automatically inferred.\nMore than n_samples samples may be returned if the sum of\nweights exceeds 1. Note that the actual class proportions will\nnot exactly match weights when flip_y isn\u2019t 0.\n"
                                    },
                                    "flip_y": {
                                        "type": "float",
                                        "description": "float, default=0.01. The fraction of samples whose class is assigned randomly. Larger\nvalues introduce noise in the labels and make the classification\ntask harder. Note that the default setting flip_y > 0 might lead\nto less than n_classes in y in some cases.\n"
                                    },
                                    "class_sep": {
                                        "type": "float",
                                        "description": "float, default=1.0. The factor multiplying the hypercube size.  Larger values spread\nout the clusters/classes and make the classification task easier.\n"
                                    },
                                    "hypercube": {
                                        "type": "boolean",
                                        "description": "bool, default=True. If True, the clusters are put on the vertices of a hypercube. If\nFalse, the clusters are put on the vertices of a random polytope.\n"
                                    },
                                    "shift": {
                                        "type": "float",
                                        "description": "float, ndarray of shape (n_features,) or None, default=0.0. Shift features by the specified value. If None, then features\nare shifted by a random value drawn in [-class_sep, class_sep].\n"
                                    },
                                    "scale": {
                                        "type": "float",
                                        "description": "float, ndarray of shape (n_features,) or None, default=1.0. Multiply features by the specified value. If None, then features\nare scaled by a random value drawn in [1, 100]. Note that scaling\nhappens after shifting.\n"
                                    },
                                    "shuffle": {
                                        "type": "boolean",
                                        "description": "bool, default=True. Shuffle the samples and the features.\n"
                                    },
                                    "random_state": {
                                        "type": "integer",
                                        "description": "int, RandomState instance or None, default=None. Determines random number generation for dataset creation. Pass an int\nfor reproducible output across multiple function calls.\nSee Glossary.\n"
                                    }
                                },
                                "required": [
                                    "n_samples=100",
                                    "n_features=20"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "make_friedman2",
                        "func_desc": "Generate the \"Friedman #2\" regression problem.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.datasets.make_friedman2.html#sklearn.datasets.make_friedman2",
                        "function_definitions": {
                            "function_name": "make_friedman2",
                            "full_function": "sklearn.datasets.make_friedman2(n_samples=100, *, noise=0.0, random_state=None)",
                            "function_text": "Generate the \u201cFriedman #2\u201d regression problem. This dataset is described in Friedman [1] and Breiman [2]. Inputs X are 4 independent features uniformly distributed on the\nintervals: The output y is created according to the formula: Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/datasets/sample_generators.html#sample-generators",
                            "parameter_names_desc": [
                                {
                                    "param_name": "n_samples",
                                    "param_type": "int, default=100",
                                    "param_desc": "The number of samples.\n"
                                },
                                {
                                    "param_name": "noise",
                                    "param_type": "float, default=0.0",
                                    "param_desc": "The standard deviation of the gaussian noise applied to the output.\n"
                                },
                                {
                                    "param_name": "random_state",
                                    "param_type": "int, RandomState instance or None, default=None",
                                    "param_desc": "Determines random number generation for dataset noise. Pass an int\nfor reproducible output across multiple function calls.\nSee Glossary.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "make_friedman2",
                            "descriptions": "Generate the \u201cFriedman #2\u201d regression problem. This dataset is described in Friedman [1] and Breiman [2]. Inputs X are 4 independent features uniformly distributed on the\nintervals: The output y is created according to the formula: Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "n_samples": {
                                        "type": "integer",
                                        "description": "int, default=100. The number of samples.\n"
                                    },
                                    "noise": {
                                        "type": "float",
                                        "description": "float, default=0.0. The standard deviation of the gaussian noise applied to the output.\n"
                                    },
                                    "random_state": {
                                        "type": "integer",
                                        "description": "int, RandomState instance or None, default=None. Determines random number generation for dataset noise. Pass an int\nfor reproducible output across multiple function calls.\nSee Glossary.\n"
                                    }
                                },
                                "required": [
                                    "n_samples=100"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "make_gaussian_quantiles",
                        "func_desc": "Generate isotropic Gaussian and label samples by quantile.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.datasets.make_gaussian_quantiles.html#sklearn.datasets.make_gaussian_quantiles",
                        "function_definitions": {
                            "function_name": "make_gaussian_quantiles",
                            "full_function": "sklearn.datasets.make_gaussian_quantiles(*, mean=None, cov=1.0, n_samples=100, n_features=2, n_classes=3, shuffle=True, random_state=None)",
                            "function_text": "Generate isotropic Gaussian and label samples by quantile. This classification dataset is constructed by taking a multi-dimensional\nstandard normal distribution and defining classes separated by nested\nconcentric multi-dimensional spheres such that roughly equal numbers of\nsamples are in each class (quantiles of the \\(\\chi^2\\) distribution). For an example of usage, see\nPlot randomly generated classification dataset. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/auto_examples/datasets/plot_random_dataset.html#sphx-glr-auto-examples-datasets-plot-random-dataset-py",
                            "parameter_names_desc": [
                                {
                                    "param_name": "mean",
                                    "param_type": "array-like of shape (n_features,), default=None",
                                    "param_desc": "The mean of the multi-dimensional normal distribution.\nIf None then use the origin (0, 0, \u2026).\n"
                                },
                                {
                                    "param_name": "cov",
                                    "param_type": "float, default=1.0",
                                    "param_desc": "The covariance matrix will be this value times the unit matrix. This\ndataset only produces symmetric normal distributions.\n"
                                },
                                {
                                    "param_name": "n_samples",
                                    "param_type": "int, default=100",
                                    "param_desc": "The total number of points equally divided among classes.\n"
                                },
                                {
                                    "param_name": "n_features",
                                    "param_type": "int, default=2",
                                    "param_desc": "The number of features for each sample.\n"
                                },
                                {
                                    "param_name": "n_classes",
                                    "param_type": "int, default=3",
                                    "param_desc": "The number of classes.\n"
                                },
                                {
                                    "param_name": "shuffle",
                                    "param_type": "bool, default=True",
                                    "param_desc": "Shuffle the samples.\n"
                                },
                                {
                                    "param_name": "random_state",
                                    "param_type": "int, RandomState instance or None, default=None",
                                    "param_desc": "Determines random number generation for dataset creation. Pass an int\nfor reproducible output across multiple function calls.\nSee Glossary.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "make_gaussian_quantiles",
                            "descriptions": "Generate isotropic Gaussian and label samples by quantile. This classification dataset is constructed by taking a multi-dimensional\nstandard normal distribution and defining classes separated by nested\nconcentric multi-dimensional spheres such that roughly equal numbers of\nsamples are in each class (quantiles of the \\(\\chi^2\\) distribution). For an example of usage, see\nPlot randomly generated classification dataset. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "mean": {
                                        "type": "array",
                                        "description": "array-like of shape (n_features,), default=None. The mean of the multi-dimensional normal distribution.\nIf None then use the origin (0, 0, \u2026).\n"
                                    },
                                    "cov": {
                                        "type": "float",
                                        "description": "float, default=1.0. The covariance matrix will be this value times the unit matrix. This\ndataset only produces symmetric normal distributions.\n"
                                    },
                                    "n_samples": {
                                        "type": "integer",
                                        "description": "int, default=100. The total number of points equally divided among classes.\n"
                                    },
                                    "n_features": {
                                        "type": "integer",
                                        "description": "int, default=2. The number of features for each sample.\n"
                                    },
                                    "n_classes": {
                                        "type": "integer",
                                        "description": "int, default=3. The number of classes.\n"
                                    },
                                    "shuffle": {
                                        "type": "boolean",
                                        "description": "bool, default=True. Shuffle the samples.\n"
                                    },
                                    "random_state": {
                                        "type": "integer",
                                        "description": "int, RandomState instance or None, default=None. Determines random number generation for dataset creation. Pass an int\nfor reproducible output across multiple function calls.\nSee Glossary.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "make_low_rank_matrix",
                        "func_desc": "Generate a mostly low rank matrix with bell-shaped singular values.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.datasets.make_low_rank_matrix.html#sklearn.datasets.make_low_rank_matrix",
                        "function_definitions": {
                            "function_name": "make_low_rank_matrix",
                            "full_function": "sklearn.datasets.make_low_rank_matrix(n_samples=100, n_features=100, *, effective_rank=10, tail_strength=0.5, random_state=None)",
                            "function_text": "Generate a mostly low rank matrix with bell-shaped singular values. Most of the variance can be explained by a bell-shaped curve of width\neffective_rank: the low rank part of the singular values profile is: The remaining singular values\u2019 tail is fat, decreasing as: The low rank part of the profile can be considered the structured\nsignal part of the data while the tail can be considered the noisy\npart of the data that cannot be summarized by a low number of linear\ncomponents (singular vectors). gray level pictures of faces TF-IDF vectors of text documents crawled from the web Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/datasets/sample_generators.html#sample-generators",
                            "parameter_names_desc": [
                                {
                                    "param_name": "n_samples",
                                    "param_type": "int, default=100",
                                    "param_desc": "The number of samples.\n"
                                },
                                {
                                    "param_name": "n_features",
                                    "param_type": "int, default=100",
                                    "param_desc": "The number of features.\n"
                                },
                                {
                                    "param_name": "effective_rank",
                                    "param_type": "int, default=10",
                                    "param_desc": "The approximate number of singular vectors required to explain most of\nthe data by linear combinations.\n"
                                },
                                {
                                    "param_name": "tail_strength",
                                    "param_type": "float, default=0.5",
                                    "param_desc": "The relative importance of the fat noisy tail of the singular values\nprofile. The value should be between 0 and 1.\n"
                                },
                                {
                                    "param_name": "random_state",
                                    "param_type": "int, RandomState instance or None, default=None",
                                    "param_desc": "Determines random number generation for dataset creation. Pass an int\nfor reproducible output across multiple function calls.\nSee Glossary.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "make_low_rank_matrix",
                            "descriptions": "Generate a mostly low rank matrix with bell-shaped singular values. Most of the variance can be explained by a bell-shaped curve of width\neffective_rank: the low rank part of the singular values profile is: The remaining singular values\u2019 tail is fat, decreasing as: The low rank part of the profile can be considered the structured\nsignal part of the data while the tail can be considered the noisy\npart of the data that cannot be summarized by a low number of linear\ncomponents (singular vectors). gray level pictures of faces TF-IDF vectors of text documents crawled from the web Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "n_samples": {
                                        "type": "integer",
                                        "description": "int, default=100. The number of samples.\n"
                                    },
                                    "n_features": {
                                        "type": "integer",
                                        "description": "int, default=100. The number of features.\n"
                                    },
                                    "effective_rank": {
                                        "type": "integer",
                                        "description": "int, default=10. The approximate number of singular vectors required to explain most of\nthe data by linear combinations.\n"
                                    },
                                    "tail_strength": {
                                        "type": "float",
                                        "description": "float, default=0.5. The relative importance of the fat noisy tail of the singular values\nprofile. The value should be between 0 and 1.\n"
                                    },
                                    "random_state": {
                                        "type": "integer",
                                        "description": "int, RandomState instance or None, default=None. Determines random number generation for dataset creation. Pass an int\nfor reproducible output across multiple function calls.\nSee Glossary.\n"
                                    }
                                },
                                "required": [
                                    "n_samples=100",
                                    "n_features=100"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "make_multilabel_classification",
                        "func_desc": "Generate a random multilabel classification problem.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.datasets.make_multilabel_classification.html#sklearn.datasets.make_multilabel_classification",
                        "function_definitions": {
                            "function_name": "make_multilabel_classification",
                            "full_function": "sklearn.datasets.make_multilabel_classification(n_samples=100, n_features=20, *, n_classes=5, n_labels=2, length=50, allow_unlabeled=True, sparse=False, return_indicator='dense', return_distributions=False, random_state=None)",
                            "function_text": "Generate a random multilabel classification problem. pick the number of labels: n ~ Poisson(n_labels) n times, choose a class c: c ~ Multinomial(theta) pick the document length: k ~ Poisson(length) k times, choose a word: w ~ Multinomial(theta_c) In the above process, rejection sampling is used to make sure that\nn is never zero or more than n_classes, and that the document length\nis never zero. Likewise, we reject classes which have already been chosen. For an example of usage, see\nPlot randomly generated multilabel dataset. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/auto_examples/datasets/plot_random_multilabel_dataset.html#sphx-glr-auto-examples-datasets-plot-random-multilabel-dataset-py",
                            "parameter_names_desc": [
                                {
                                    "param_name": "n_samples",
                                    "param_type": "int, default=100",
                                    "param_desc": "The number of samples.\n"
                                },
                                {
                                    "param_name": "n_features",
                                    "param_type": "int, default=20",
                                    "param_desc": "The total number of features.\n"
                                },
                                {
                                    "param_name": "n_classes",
                                    "param_type": "int, default=5",
                                    "param_desc": "The number of classes of the classification problem.\n"
                                },
                                {
                                    "param_name": "n_labels",
                                    "param_type": "int, default=2",
                                    "param_desc": "The average number of labels per instance. More precisely, the number\nof labels per sample is drawn from a Poisson distribution with\nn_labels as its expected value, but samples are bounded (using\nrejection sampling) by n_classes, and must be nonzero if\nallow_unlabeled is False.\n"
                                },
                                {
                                    "param_name": "length",
                                    "param_type": "int, default=50",
                                    "param_desc": "The sum of the features (number of words if documents) is drawn from\na Poisson distribution with this expected value.\n"
                                },
                                {
                                    "param_name": "allow_unlabeled",
                                    "param_type": "bool, default=True",
                                    "param_desc": "If True, some instances might not belong to any class.\n"
                                },
                                {
                                    "param_name": "sparse",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If True, return a sparse feature matrix.\n\nAdded in version 0.17: parameter to allow sparse output.\n\n"
                                },
                                {
                                    "param_name": "return_indicator",
                                    "param_type": "{\u2018dense\u2019, \u2018sparse\u2019} or False, default=\u2019dense\u2019",
                                    "param_desc": "If 'dense' return Y in the dense binary indicator format. If\n'sparse' return Y in the sparse binary indicator format.\nFalse returns a list of lists of labels.\n"
                                },
                                {
                                    "param_name": "return_distributions",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If True, return the prior class probability and conditional\nprobabilities of features given classes, from which the data was\ndrawn.\n"
                                },
                                {
                                    "param_name": "random_state",
                                    "param_type": "int, RandomState instance or None, default=None",
                                    "param_desc": "Determines random number generation for dataset creation. Pass an int\nfor reproducible output across multiple function calls.\nSee Glossary.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "make_multilabel_classification",
                            "descriptions": "Generate a random multilabel classification problem. pick the number of labels: n ~ Poisson(n_labels) n times, choose a class c: c ~ Multinomial(theta) pick the document length: k ~ Poisson(length) k times, choose a word: w ~ Multinomial(theta_c) In the above process, rejection sampling is used to make sure that\nn is never zero or more than n_classes, and that the document length\nis never zero. Likewise, we reject classes which have already been chosen. For an example of usage, see\nPlot randomly generated multilabel dataset. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "n_samples": {
                                        "type": "integer",
                                        "description": "int, default=100. The number of samples.\n"
                                    },
                                    "n_features": {
                                        "type": "integer",
                                        "description": "int, default=20. The total number of features.\n"
                                    },
                                    "n_classes": {
                                        "type": "integer",
                                        "description": "int, default=5. The number of classes of the classification problem.\n"
                                    },
                                    "n_labels": {
                                        "type": "integer",
                                        "description": "int, default=2. The average number of labels per instance. More precisely, the number\nof labels per sample is drawn from a Poisson distribution with\nn_labels as its expected value, but samples are bounded (using\nrejection sampling) by n_classes, and must be nonzero if\nallow_unlabeled is False.\n"
                                    },
                                    "length": {
                                        "type": "integer",
                                        "description": "int, default=50. The sum of the features (number of words if documents) is drawn from\na Poisson distribution with this expected value.\n"
                                    },
                                    "allow_unlabeled": {
                                        "type": "boolean",
                                        "description": "bool, default=True. If True, some instances might not belong to any class.\n"
                                    },
                                    "sparse": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If True, return a sparse feature matrix.\n\nAdded in version 0.17: parameter to allow sparse output.\n\n"
                                    },
                                    "return_indicator": {
                                        "type": "string",
                                        "enum": [
                                            "dense",
                                            " sparse"
                                        ],
                                        "description": "{\u2018dense\u2019, \u2018sparse\u2019} or False, default=\u2019dense\u2019. If 'dense' return Y in the dense binary indicator format. If\n'sparse' return Y in the sparse binary indicator format.\nFalse returns a list of lists of labels.\n"
                                    },
                                    "return_distributions": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If True, return the prior class probability and conditional\nprobabilities of features given classes, from which the data was\ndrawn.\n"
                                    },
                                    "random_state": {
                                        "type": "integer",
                                        "description": "int, RandomState instance or None, default=None. Determines random number generation for dataset creation. Pass an int\nfor reproducible output across multiple function calls.\nSee Glossary.\n"
                                    }
                                },
                                "required": [
                                    "n_samples=100",
                                    "n_features=20"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "make_s_curve",
                        "func_desc": "Generate an S curve dataset.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.datasets.make_s_curve.html#sklearn.datasets.make_s_curve",
                        "function_definitions": {
                            "function_name": "make_s_curve",
                            "full_function": "sklearn.datasets.make_s_curve(n_samples=100, *, noise=0.0, random_state=None)",
                            "function_text": "Generate an S curve dataset. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/datasets/sample_generators.html#sample-generators",
                            "parameter_names_desc": [
                                {
                                    "param_name": "n_samples",
                                    "param_type": "int, default=100",
                                    "param_desc": "The number of sample points on the S curve.\n"
                                },
                                {
                                    "param_name": "noise",
                                    "param_type": "float, default=0.0",
                                    "param_desc": "The standard deviation of the gaussian noise.\n"
                                },
                                {
                                    "param_name": "random_state",
                                    "param_type": "int, RandomState instance or None, default=None",
                                    "param_desc": "Determines random number generation for dataset creation. Pass an int\nfor reproducible output across multiple function calls.\nSee Glossary.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "make_s_curve",
                            "descriptions": "Generate an S curve dataset. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "n_samples": {
                                        "type": "integer",
                                        "description": "int, default=100. The number of sample points on the S curve.\n"
                                    },
                                    "noise": {
                                        "type": "float",
                                        "description": "float, default=0.0. The standard deviation of the gaussian noise.\n"
                                    },
                                    "random_state": {
                                        "type": "integer",
                                        "description": "int, RandomState instance or None, default=None. Determines random number generation for dataset creation. Pass an int\nfor reproducible output across multiple function calls.\nSee Glossary.\n"
                                    }
                                },
                                "required": [
                                    "n_samples=100"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "make_sparse_spd_matrix",
                        "func_desc": "Generate a sparse symmetric definite positive matrix.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.datasets.make_sparse_spd_matrix.html#sklearn.datasets.make_sparse_spd_matrix",
                        "function_definitions": {
                            "function_name": "make_sparse_spd_matrix",
                            "full_function": "sklearn.datasets.make_sparse_spd_matrix(n_dim=None, *, alpha=0.95, norm_diag=False, smallest_coef=0.1, largest_coef=0.9, sparse_format=None, random_state=None, dim='deprecated')",
                            "function_text": "Generate a sparse symmetric definite positive matrix. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/datasets/sample_generators.html#sample-generators",
                            "parameter_names_desc": [
                                {
                                    "param_name": "n_dim",
                                    "param_type": "int, default=1",
                                    "param_desc": "The size of the random matrix to generate.\n\nChanged in version 1.4: Renamed from dim to n_dim.\n\n"
                                },
                                {
                                    "param_name": "alpha",
                                    "param_type": "float, default=0.95",
                                    "param_desc": "The probability that a coefficient is zero (see notes). Larger values\nenforce more sparsity. The value should be in the range 0 and 1.\n"
                                },
                                {
                                    "param_name": "norm_diag",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Whether to normalize the output matrix to make the leading diagonal\nelements all 1.\n"
                                },
                                {
                                    "param_name": "smallest_coef",
                                    "param_type": "float, default=0.1",
                                    "param_desc": "The value of the smallest coefficient between 0 and 1.\n"
                                },
                                {
                                    "param_name": "largest_coef",
                                    "param_type": "float, default=0.9",
                                    "param_desc": "The value of the largest coefficient between 0 and 1.\n"
                                },
                                {
                                    "param_name": "sparse_format",
                                    "param_type": "str, default=None",
                                    "param_desc": "String representing the output sparse format, such as \u2018csc\u2019, \u2018csr\u2019, etc.\nIf None, return a dense numpy ndarray.\n\nAdded in version 1.4.\n\n"
                                },
                                {
                                    "param_name": "random_state",
                                    "param_type": "int, RandomState instance or None, default=None",
                                    "param_desc": "Determines random number generation for dataset creation. Pass an int\nfor reproducible output across multiple function calls.\nSee Glossary.\n"
                                },
                                {
                                    "param_name": "dim",
                                    "param_type": "int, default=1",
                                    "param_desc": "The size of the random matrix to generate.\n\nDeprecated since version 1.4: dim is deprecated and will be removed in 1.6.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "make_sparse_spd_matrix",
                            "descriptions": "Generate a sparse symmetric definite positive matrix. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "n_dim": {
                                        "type": "integer",
                                        "description": "int, default=1. The size of the random matrix to generate.\n\nChanged in version 1.4: Renamed from dim to n_dim.\n\n"
                                    },
                                    "alpha": {
                                        "type": "float",
                                        "description": "float, default=0.95. The probability that a coefficient is zero (see notes). Larger values\nenforce more sparsity. The value should be in the range 0 and 1.\n"
                                    },
                                    "norm_diag": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Whether to normalize the output matrix to make the leading diagonal\nelements all 1.\n"
                                    },
                                    "smallest_coef": {
                                        "type": "float",
                                        "description": "float, default=0.1. The value of the smallest coefficient between 0 and 1.\n"
                                    },
                                    "largest_coef": {
                                        "type": "float",
                                        "description": "float, default=0.9. The value of the largest coefficient between 0 and 1.\n"
                                    },
                                    "sparse_format": {
                                        "type": "string",
                                        "description": "str, default=None. String representing the output sparse format, such as \u2018csc\u2019, \u2018csr\u2019, etc.\nIf None, return a dense numpy ndarray.\n\nAdded in version 1.4.\n\n"
                                    },
                                    "random_state": {
                                        "type": "integer",
                                        "description": "int, RandomState instance or None, default=None. Determines random number generation for dataset creation. Pass an int\nfor reproducible output across multiple function calls.\nSee Glossary.\n"
                                    },
                                    "dim": {
                                        "type": "integer",
                                        "description": "int, default=1. The size of the random matrix to generate.\n\nDeprecated since version 1.4: dim is deprecated and will be removed in 1.6.\n\n"
                                    }
                                },
                                "required": [
                                    "n_dim=None"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "make_spd_matrix",
                        "func_desc": "Generate a random symmetric, positive-definite matrix.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.datasets.make_spd_matrix.html#sklearn.datasets.make_spd_matrix",
                        "function_definitions": {
                            "function_name": "make_spd_matrix",
                            "full_function": "sklearn.datasets.make_spd_matrix(n_dim, *, random_state=None)",
                            "function_text": "Generate a random symmetric, positive-definite matrix. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/datasets/sample_generators.html#sample-generators",
                            "parameter_names_desc": [
                                {
                                    "param_name": "n_dim",
                                    "param_type": "int",
                                    "param_desc": "The matrix dimension.\n"
                                },
                                {
                                    "param_name": "random_state",
                                    "param_type": "int, RandomState instance or None, default=None",
                                    "param_desc": "Determines random number generation for dataset creation. Pass an int\nfor reproducible output across multiple function calls.\nSee Glossary.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "make_spd_matrix",
                            "descriptions": "Generate a random symmetric, positive-definite matrix. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "n_dim": {
                                        "type": "integer",
                                        "description": "int. The matrix dimension.\n"
                                    },
                                    "random_state": {
                                        "type": "integer",
                                        "description": "int, RandomState instance or None, default=None. Determines random number generation for dataset creation. Pass an int\nfor reproducible output across multiple function calls.\nSee Glossary.\n"
                                    }
                                },
                                "required": [
                                    "n_dim"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "make_blobs",
                        "func_desc": "Generate isotropic Gaussian blobs for clustering.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.datasets.make_blobs.html#sklearn.datasets.make_blobs",
                        "function_definitions": {
                            "function_name": "make_blobs",
                            "full_function": "sklearn.datasets.make_blobs(n_samples=100, n_features=2, *, centers=None, cluster_std=1.0, center_box=(-10.0, 10.0), shuffle=True, random_state=None, return_centers=False)",
                            "function_text": "Generate isotropic Gaussian blobs for clustering. For an example of usage, see\nPlot randomly generated classification dataset. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/auto_examples/datasets/plot_random_dataset.html#sphx-glr-auto-examples-datasets-plot-random-dataset-py",
                            "parameter_names_desc": [
                                {
                                    "param_name": "n_samples",
                                    "param_type": "int or array-like, default=100",
                                    "param_desc": "If int, it is the total number of points equally divided among\nclusters.\nIf array-like, each element of the sequence indicates\nthe number of samples per cluster.\n\nChanged in version v0.20: one can now pass an array-like to the n_samples parameter\n\n"
                                },
                                {
                                    "param_name": "n_features",
                                    "param_type": "int, default=2",
                                    "param_desc": "The number of features for each sample.\n"
                                },
                                {
                                    "param_name": "centers",
                                    "param_type": "int or array-like of shape (n_centers, n_features), default=None",
                                    "param_desc": "The number of centers to generate, or the fixed center locations.\nIf n_samples is an int and centers is None, 3 centers are generated.\nIf n_samples is array-like, centers must be\neither None or an array of length equal to the length of n_samples.\n"
                                },
                                {
                                    "param_name": "cluster_std",
                                    "param_type": "float or array-like of float, default=1.0",
                                    "param_desc": "The standard deviation of the clusters.\n"
                                },
                                {
                                    "param_name": "center_box",
                                    "param_type": "tuple of float (min, max), default=(-10.0, 10.0)",
                                    "param_desc": "The bounding box for each cluster center when centers are\ngenerated at random.\n"
                                },
                                {
                                    "param_name": "shuffle",
                                    "param_type": "bool, default=True",
                                    "param_desc": "Shuffle the samples.\n"
                                },
                                {
                                    "param_name": "random_state",
                                    "param_type": "int, RandomState instance or None, default=None",
                                    "param_desc": "Determines random number generation for dataset creation. Pass an int\nfor reproducible output across multiple function calls.\nSee Glossary.\n"
                                },
                                {
                                    "param_name": "return_centers",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If True, then return the centers of each cluster.\n\nAdded in version 0.23.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "make_blobs",
                            "descriptions": "Generate isotropic Gaussian blobs for clustering. For an example of usage, see\nPlot randomly generated classification dataset. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "n_samples": {
                                        "type": "integer",
                                        "description": "int or array-like, default=100. If int, it is the total number of points equally divided among\nclusters.\nIf array-like, each element of the sequence indicates\nthe number of samples per cluster.\n\nChanged in version v0.20: one can now pass an array-like to the n_samples parameter\n\n"
                                    },
                                    "n_features": {
                                        "type": "integer",
                                        "description": "int, default=2. The number of features for each sample.\n"
                                    },
                                    "centers": {
                                        "type": "integer",
                                        "description": "int or array-like of shape (n_centers, n_features), default=None. The number of centers to generate, or the fixed center locations.\nIf n_samples is an int and centers is None, 3 centers are generated.\nIf n_samples is array-like, centers must be\neither None or an array of length equal to the length of n_samples.\n"
                                    },
                                    "cluster_std": {
                                        "type": "float",
                                        "description": "float or array-like of float, default=1.0. The standard deviation of the clusters.\n"
                                    },
                                    "center_box": {
                                        "type": "float",
                                        "description": "tuple of float (min, max), default=(-10.0, 10.0). The bounding box for each cluster center when centers are\ngenerated at random.\n"
                                    },
                                    "shuffle": {
                                        "type": "boolean",
                                        "description": "bool, default=True. Shuffle the samples.\n"
                                    },
                                    "random_state": {
                                        "type": "integer",
                                        "description": "int, RandomState instance or None, default=None. Determines random number generation for dataset creation. Pass an int\nfor reproducible output across multiple function calls.\nSee Glossary.\n"
                                    },
                                    "return_centers": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If True, then return the centers of each cluster.\n\nAdded in version 0.23.\n\n"
                                    }
                                },
                                "required": [
                                    "n_samples=100",
                                    "n_features=2"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "make_circles",
                        "func_desc": "Make a large circle containing a smaller circle in 2d.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.datasets.make_circles.html#sklearn.datasets.make_circles",
                        "function_definitions": {
                            "function_name": "make_circles",
                            "full_function": "sklearn.datasets.make_circles(n_samples=100, *, shuffle=True, noise=None, random_state=None, factor=0.8)",
                            "function_text": "Make a large circle containing a smaller circle in 2d. A simple toy dataset to visualize clustering and classification\nalgorithms. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/datasets/sample_generators.html#sample-generators",
                            "parameter_names_desc": [
                                {
                                    "param_name": "n_samples",
                                    "param_type": "int or tuple of shape (2,), dtype=int, default=100",
                                    "param_desc": "If int, it is the total number of points generated.\nFor odd numbers, the inner circle will have one point more than the\nouter circle.\nIf two-element tuple, number of points in outer circle and inner\ncircle.\n\nChanged in version 0.23: Added two-element tuple.\n\n"
                                },
                                {
                                    "param_name": "shuffle",
                                    "param_type": "bool, default=True",
                                    "param_desc": "Whether to shuffle the samples.\n"
                                },
                                {
                                    "param_name": "noise",
                                    "param_type": "float, default=None",
                                    "param_desc": "Standard deviation of Gaussian noise added to the data.\n"
                                },
                                {
                                    "param_name": "random_state",
                                    "param_type": "int, RandomState instance or None, default=None",
                                    "param_desc": "Determines random number generation for dataset shuffling and noise.\nPass an int for reproducible output across multiple function calls.\nSee Glossary.\n"
                                },
                                {
                                    "param_name": "factor",
                                    "param_type": "float, default=.8",
                                    "param_desc": "Scale factor between inner and outer circle in the range [0, 1).\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "make_circles",
                            "descriptions": "Make a large circle containing a smaller circle in 2d. A simple toy dataset to visualize clustering and classification\nalgorithms. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "n_samples": {
                                        "type": "integer",
                                        "description": "int or tuple of shape (2,), dtype=int, default=100. If int, it is the total number of points generated.\nFor odd numbers, the inner circle will have one point more than the\nouter circle.\nIf two-element tuple, number of points in outer circle and inner\ncircle.\n\nChanged in version 0.23: Added two-element tuple.\n\n"
                                    },
                                    "shuffle": {
                                        "type": "boolean",
                                        "description": "bool, default=True. Whether to shuffle the samples.\n"
                                    },
                                    "noise": {
                                        "type": "float",
                                        "description": "float, default=None. Standard deviation of Gaussian noise added to the data.\n"
                                    },
                                    "random_state": {
                                        "type": "integer",
                                        "description": "int, RandomState instance or None, default=None. Determines random number generation for dataset shuffling and noise.\nPass an int for reproducible output across multiple function calls.\nSee Glossary.\n"
                                    },
                                    "factor": {
                                        "type": "float",
                                        "description": "float, default=.8. Scale factor between inner and outer circle in the range [0, 1).\n"
                                    }
                                },
                                "required": [
                                    "n_samples=100"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "make_friedman1",
                        "func_desc": "Generate the \"Friedman #1\" regression problem.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.datasets.make_friedman1.html#sklearn.datasets.make_friedman1",
                        "function_definitions": {
                            "function_name": "make_friedman1",
                            "full_function": "sklearn.datasets.make_friedman1(n_samples=100, n_features=10, *, noise=0.0, random_state=None)",
                            "function_text": "Generate the \u201cFriedman #1\u201d regression problem. This dataset is described in Friedman [1] and Breiman [2]. Inputs X are independent features uniformly distributed on the interval\n[0, 1]. The output y is created according to the formula: Out of the n_features features, only 5 are actually used to compute\ny. The remaining features are independent of y. The number of features has to be >= 5. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/datasets/sample_generators.html#sample-generators",
                            "parameter_names_desc": [
                                {
                                    "param_name": "n_samples",
                                    "param_type": "int, default=100",
                                    "param_desc": "The number of samples.\n"
                                },
                                {
                                    "param_name": "n_features",
                                    "param_type": "int, default=10",
                                    "param_desc": "The number of features. Should be at least 5.\n"
                                },
                                {
                                    "param_name": "noise",
                                    "param_type": "float, default=0.0",
                                    "param_desc": "The standard deviation of the gaussian noise applied to the output.\n"
                                },
                                {
                                    "param_name": "random_state",
                                    "param_type": "int, RandomState instance or None, default=None",
                                    "param_desc": "Determines random number generation for dataset noise. Pass an int\nfor reproducible output across multiple function calls.\nSee Glossary.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "make_friedman1",
                            "descriptions": "Generate the \u201cFriedman #1\u201d regression problem. This dataset is described in Friedman [1] and Breiman [2]. Inputs X are independent features uniformly distributed on the interval\n[0, 1]. The output y is created according to the formula: Out of the n_features features, only 5 are actually used to compute\ny. The remaining features are independent of y. The number of features has to be >= 5. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "n_samples": {
                                        "type": "integer",
                                        "description": "int, default=100. The number of samples.\n"
                                    },
                                    "n_features": {
                                        "type": "integer",
                                        "description": "int, default=10. The number of features. Should be at least 5.\n"
                                    },
                                    "noise": {
                                        "type": "float",
                                        "description": "float, default=0.0. The standard deviation of the gaussian noise applied to the output.\n"
                                    },
                                    "random_state": {
                                        "type": "integer",
                                        "description": "int, RandomState instance or None, default=None. Determines random number generation for dataset noise. Pass an int\nfor reproducible output across multiple function calls.\nSee Glossary.\n"
                                    }
                                },
                                "required": [
                                    "n_samples=100",
                                    "n_features=10"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "make_friedman3",
                        "func_desc": "Generate the \"Friedman #3\" regression problem.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.datasets.make_friedman3.html#sklearn.datasets.make_friedman3",
                        "function_definitions": {
                            "function_name": "make_friedman3",
                            "full_function": "sklearn.datasets.make_friedman3(n_samples=100, *, noise=0.0, random_state=None)",
                            "function_text": "Generate the \u201cFriedman #3\u201d regression problem. This dataset is described in Friedman [1] and Breiman [2]. Inputs X are 4 independent features uniformly distributed on the\nintervals: The output y is created according to the formula: Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/datasets/sample_generators.html#sample-generators",
                            "parameter_names_desc": [
                                {
                                    "param_name": "n_samples",
                                    "param_type": "int, default=100",
                                    "param_desc": "The number of samples.\n"
                                },
                                {
                                    "param_name": "noise",
                                    "param_type": "float, default=0.0",
                                    "param_desc": "The standard deviation of the gaussian noise applied to the output.\n"
                                },
                                {
                                    "param_name": "random_state",
                                    "param_type": "int, RandomState instance or None, default=None",
                                    "param_desc": "Determines random number generation for dataset noise. Pass an int\nfor reproducible output across multiple function calls.\nSee Glossary.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "make_friedman3",
                            "descriptions": "Generate the \u201cFriedman #3\u201d regression problem. This dataset is described in Friedman [1] and Breiman [2]. Inputs X are 4 independent features uniformly distributed on the\nintervals: The output y is created according to the formula: Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "n_samples": {
                                        "type": "integer",
                                        "description": "int, default=100. The number of samples.\n"
                                    },
                                    "noise": {
                                        "type": "float",
                                        "description": "float, default=0.0. The standard deviation of the gaussian noise applied to the output.\n"
                                    },
                                    "random_state": {
                                        "type": "integer",
                                        "description": "int, RandomState instance or None, default=None. Determines random number generation for dataset noise. Pass an int\nfor reproducible output across multiple function calls.\nSee Glossary.\n"
                                    }
                                },
                                "required": [
                                    "n_samples=100"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "make_hastie_10_2",
                        "func_desc": "Generate data for binary classification used in Hastie et al. 2009, Example 10.2.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.datasets.make_hastie_10_2.html#sklearn.datasets.make_hastie_10_2",
                        "function_definitions": {
                            "function_name": "make_hastie_10_2",
                            "full_function": "sklearn.datasets.make_hastie_10_2(n_samples=12000, *, random_state=None)",
                            "function_text": "Generate data for binary classification used in Hastie et al. 2009, Example 10.2. The ten features are standard independent Gaussian and\nthe target y is defined by: Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/datasets/sample_generators.html#sample-generators",
                            "parameter_names_desc": [
                                {
                                    "param_name": "n_samples",
                                    "param_type": "int, default=12000",
                                    "param_desc": "The number of samples.\n"
                                },
                                {
                                    "param_name": "random_state",
                                    "param_type": "int, RandomState instance or None, default=None",
                                    "param_desc": "Determines random number generation for dataset creation. Pass an int\nfor reproducible output across multiple function calls.\nSee Glossary.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "make_hastie_10_2",
                            "descriptions": "Generate data for binary classification used in Hastie et al. 2009, Example 10.2. The ten features are standard independent Gaussian and\nthe target y is defined by: Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "n_samples": {
                                        "type": "integer",
                                        "description": "int, default=12000. The number of samples.\n"
                                    },
                                    "random_state": {
                                        "type": "integer",
                                        "description": "int, RandomState instance or None, default=None. Determines random number generation for dataset creation. Pass an int\nfor reproducible output across multiple function calls.\nSee Glossary.\n"
                                    }
                                },
                                "required": [
                                    "n_samples=12000"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "make_moons",
                        "func_desc": "Make two interleaving half circles.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.datasets.make_moons.html#sklearn.datasets.make_moons",
                        "function_definitions": {
                            "function_name": "make_moons",
                            "full_function": "sklearn.datasets.make_moons(n_samples=100, *, shuffle=True, noise=None, random_state=None)",
                            "function_text": "Make two interleaving half circles. A simple toy dataset to visualize clustering and classification\nalgorithms. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/datasets/sample_generators.html#sample-generators",
                            "parameter_names_desc": [
                                {
                                    "param_name": "n_samples",
                                    "param_type": "int or tuple of shape (2,), dtype=int, default=100",
                                    "param_desc": "If int, the total number of points generated.\nIf two-element tuple, number of points in each of two moons.\n\nChanged in version 0.23: Added two-element tuple.\n\n"
                                },
                                {
                                    "param_name": "shuffle",
                                    "param_type": "bool, default=True",
                                    "param_desc": "Whether to shuffle the samples.\n"
                                },
                                {
                                    "param_name": "noise",
                                    "param_type": "float, default=None",
                                    "param_desc": "Standard deviation of Gaussian noise added to the data.\n"
                                },
                                {
                                    "param_name": "random_state",
                                    "param_type": "int, RandomState instance or None, default=None",
                                    "param_desc": "Determines random number generation for dataset shuffling and noise.\nPass an int for reproducible output across multiple function calls.\nSee Glossary.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "make_moons",
                            "descriptions": "Make two interleaving half circles. A simple toy dataset to visualize clustering and classification\nalgorithms. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "n_samples": {
                                        "type": "integer",
                                        "description": "int or tuple of shape (2,), dtype=int, default=100. If int, the total number of points generated.\nIf two-element tuple, number of points in each of two moons.\n\nChanged in version 0.23: Added two-element tuple.\n\n"
                                    },
                                    "shuffle": {
                                        "type": "boolean",
                                        "description": "bool, default=True. Whether to shuffle the samples.\n"
                                    },
                                    "noise": {
                                        "type": "float",
                                        "description": "float, default=None. Standard deviation of Gaussian noise added to the data.\n"
                                    },
                                    "random_state": {
                                        "type": "integer",
                                        "description": "int, RandomState instance or None, default=None. Determines random number generation for dataset shuffling and noise.\nPass an int for reproducible output across multiple function calls.\nSee Glossary.\n"
                                    }
                                },
                                "required": [
                                    "n_samples=100"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "make_regression",
                        "func_desc": "Generate a random regression problem.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.datasets.make_regression.html#sklearn.datasets.make_regression",
                        "function_definitions": {
                            "function_name": "make_regression",
                            "full_function": "sklearn.datasets.make_regression(n_samples=100, n_features=100, *, n_informative=10, n_targets=1, bias=0.0, effective_rank=None, tail_strength=0.5, noise=0.0, shuffle=True, coef=False, random_state=None)",
                            "function_text": "Generate a random regression problem. The input set can either be well conditioned (by default) or have a low\nrank-fat tail singular profile. See make_low_rank_matrix for\nmore details. The output is generated by applying a (potentially biased) random linear\nregression model with n_informative nonzero regressors to the previously\ngenerated input and some gaussian centered noise with some adjustable\nscale. Read more in the User Guide.",
                            "func_text_user_guide": "sklearn.datasets.make_low_rank_matrix.html#sklearn.datasets.make_low_rank_matrix",
                            "parameter_names_desc": [
                                {
                                    "param_name": "n_samples",
                                    "param_type": "int, default=100",
                                    "param_desc": "The number of samples.\n"
                                },
                                {
                                    "param_name": "n_features",
                                    "param_type": "int, default=100",
                                    "param_desc": "The number of features.\n"
                                },
                                {
                                    "param_name": "n_informative",
                                    "param_type": "int, default=10",
                                    "param_desc": "The number of informative features, i.e., the number of features used\nto build the linear model used to generate the output.\n"
                                },
                                {
                                    "param_name": "n_targets",
                                    "param_type": "int, default=1",
                                    "param_desc": "The number of regression targets, i.e., the dimension of the y output\nvector associated with a sample. By default, the output is a scalar.\n"
                                },
                                {
                                    "param_name": "bias",
                                    "param_type": "float, default=0.0",
                                    "param_desc": "The bias term in the underlying linear model.\n"
                                },
                                {
                                    "param_name": "effective_rank",
                                    "param_type": "int, default=None",
                                    "param_desc": "\nIf not None:The approximate number of singular vectors required to explain most\nof the input data by linear combinations. Using this kind of\nsingular spectrum in the input allows the generator to reproduce\nthe correlations often observed in practice.\n\nIf None:The input set is well conditioned, centered and gaussian with\nunit variance.\n\n\n"
                                },
                                {
                                    "param_name": "tail_strength",
                                    "param_type": "float, default=0.5",
                                    "param_desc": "The relative importance of the fat noisy tail of the singular values\nprofile if effective_rank is not None. When a float, it should be\nbetween 0 and 1.\n"
                                },
                                {
                                    "param_name": "noise",
                                    "param_type": "float, default=0.0",
                                    "param_desc": "The standard deviation of the gaussian noise applied to the output.\n"
                                },
                                {
                                    "param_name": "shuffle",
                                    "param_type": "bool, default=True",
                                    "param_desc": "Shuffle the samples and the features.\n"
                                },
                                {
                                    "param_name": "coef",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If True, the coefficients of the underlying linear model are returned.\n"
                                },
                                {
                                    "param_name": "random_state",
                                    "param_type": "int, RandomState instance or None, default=None",
                                    "param_desc": "Determines random number generation for dataset creation. Pass an int\nfor reproducible output across multiple function calls.\nSee Glossary.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "make_regression",
                            "descriptions": "Generate a random regression problem. The input set can either be well conditioned (by default) or have a low\nrank-fat tail singular profile. See make_low_rank_matrix for\nmore details. The output is generated by applying a (potentially biased) random linear\nregression model with n_informative nonzero regressors to the previously\ngenerated input and some gaussian centered noise with some adjustable\nscale. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "n_samples": {
                                        "type": "integer",
                                        "description": "int, default=100. The number of samples.\n"
                                    },
                                    "n_features": {
                                        "type": "integer",
                                        "description": "int, default=100. The number of features.\n"
                                    },
                                    "n_informative": {
                                        "type": "integer",
                                        "description": "int, default=10. The number of informative features, i.e., the number of features used\nto build the linear model used to generate the output.\n"
                                    },
                                    "n_targets": {
                                        "type": "integer",
                                        "description": "int, default=1. The number of regression targets, i.e., the dimension of the y output\nvector associated with a sample. By default, the output is a scalar.\n"
                                    },
                                    "bias": {
                                        "type": "float",
                                        "description": "float, default=0.0. The bias term in the underlying linear model.\n"
                                    },
                                    "effective_rank": {
                                        "type": "integer",
                                        "description": "int, default=None. \nIf not None:The approximate number of singular vectors required to explain most\nof the input data by linear combinations. Using this kind of\nsingular spectrum in the input allows the generator to reproduce\nthe correlations often observed in practice.\n\nIf None:The input set is well conditioned, centered and gaussian with\nunit variance.\n\n\n"
                                    },
                                    "tail_strength": {
                                        "type": "float",
                                        "description": "float, default=0.5. The relative importance of the fat noisy tail of the singular values\nprofile if effective_rank is not None. When a float, it should be\nbetween 0 and 1.\n"
                                    },
                                    "noise": {
                                        "type": "float",
                                        "description": "float, default=0.0. The standard deviation of the gaussian noise applied to the output.\n"
                                    },
                                    "shuffle": {
                                        "type": "boolean",
                                        "description": "bool, default=True. Shuffle the samples and the features.\n"
                                    },
                                    "coef": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If True, the coefficients of the underlying linear model are returned.\n"
                                    },
                                    "random_state": {
                                        "type": "integer",
                                        "description": "int, RandomState instance or None, default=None. Determines random number generation for dataset creation. Pass an int\nfor reproducible output across multiple function calls.\nSee Glossary.\n"
                                    }
                                },
                                "required": [
                                    "n_samples=100",
                                    "n_features=100"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "make_sparse_coded_signal",
                        "func_desc": "Generate a signal as a sparse combination of dictionary elements.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.datasets.make_sparse_coded_signal.html#sklearn.datasets.make_sparse_coded_signal",
                        "function_definitions": {
                            "function_name": "make_sparse_coded_signal",
                            "full_function": "sklearn.datasets.make_sparse_coded_signal(n_samples, *, n_components, n_features, n_nonzero_coefs, random_state=None)",
                            "function_text": "Generate a signal as a sparse combination of dictionary elements. Returns matrices Y, D and X such that Y = XD where X is of shape\n(n_samples, n_components), D is of shape (n_components, n_features), and\neach row of X has exactly n_nonzero_coefs non-zero elements. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/datasets/sample_generators.html#sample-generators",
                            "parameter_names_desc": [
                                {
                                    "param_name": "n_samples",
                                    "param_type": "int",
                                    "param_desc": "Number of samples to generate.\n"
                                },
                                {
                                    "param_name": "n_components",
                                    "param_type": "int",
                                    "param_desc": "Number of components in the dictionary.\n"
                                },
                                {
                                    "param_name": "n_features",
                                    "param_type": "int",
                                    "param_desc": "Number of features of the dataset to generate.\n"
                                },
                                {
                                    "param_name": "n_nonzero_coefs",
                                    "param_type": "int",
                                    "param_desc": "Number of active (non-zero) coefficients in each sample.\n"
                                },
                                {
                                    "param_name": "random_state",
                                    "param_type": "int, RandomState instance or None, default=None",
                                    "param_desc": "Determines random number generation for dataset creation. Pass an int\nfor reproducible output across multiple function calls.\nSee Glossary.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "make_sparse_coded_signal",
                            "descriptions": "Generate a signal as a sparse combination of dictionary elements. Returns matrices Y, D and X such that Y = XD where X is of shape\n(n_samples, n_components), D is of shape (n_components, n_features), and\neach row of X has exactly n_nonzero_coefs non-zero elements. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "n_samples": {
                                        "type": "integer",
                                        "description": "int. Number of samples to generate.\n"
                                    },
                                    "n_components": {
                                        "type": "integer",
                                        "description": "int. Number of components in the dictionary.\n"
                                    },
                                    "n_features": {
                                        "type": "integer",
                                        "description": "int. Number of features of the dataset to generate.\n"
                                    },
                                    "n_nonzero_coefs": {
                                        "type": "integer",
                                        "description": "int. Number of active (non-zero) coefficients in each sample.\n"
                                    },
                                    "random_state": {
                                        "type": "integer",
                                        "description": "int, RandomState instance or None, default=None. Determines random number generation for dataset creation. Pass an int\nfor reproducible output across multiple function calls.\nSee Glossary.\n"
                                    }
                                },
                                "required": [
                                    "n_samples"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "make_sparse_uncorrelated",
                        "func_desc": "Generate a random regression problem with sparse uncorrelated design.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.datasets.make_sparse_uncorrelated.html#sklearn.datasets.make_sparse_uncorrelated",
                        "function_definitions": {
                            "function_name": "make_sparse_uncorrelated",
                            "full_function": "sklearn.datasets.make_sparse_uncorrelated(n_samples=100, n_features=10, *, random_state=None)",
                            "function_text": "Generate a random regression problem with sparse uncorrelated design. This dataset is described in Celeux et al [1]. as: Only the first 4 features are informative. The remaining features are\nuseless. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/datasets/sample_generators.html#sample-generators",
                            "parameter_names_desc": [
                                {
                                    "param_name": "n_samples",
                                    "param_type": "int, default=100",
                                    "param_desc": "The number of samples.\n"
                                },
                                {
                                    "param_name": "n_features",
                                    "param_type": "int, default=10",
                                    "param_desc": "The number of features.\n"
                                },
                                {
                                    "param_name": "random_state",
                                    "param_type": "int, RandomState instance or None, default=None",
                                    "param_desc": "Determines random number generation for dataset creation. Pass an int\nfor reproducible output across multiple function calls.\nSee Glossary.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "make_sparse_uncorrelated",
                            "descriptions": "Generate a random regression problem with sparse uncorrelated design. This dataset is described in Celeux et al [1]. as: Only the first 4 features are informative. The remaining features are\nuseless. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "n_samples": {
                                        "type": "integer",
                                        "description": "int, default=100. The number of samples.\n"
                                    },
                                    "n_features": {
                                        "type": "integer",
                                        "description": "int, default=10. The number of features.\n"
                                    },
                                    "random_state": {
                                        "type": "integer",
                                        "description": "int, RandomState instance or None, default=None. Determines random number generation for dataset creation. Pass an int\nfor reproducible output across multiple function calls.\nSee Glossary.\n"
                                    }
                                },
                                "required": [
                                    "n_samples=100",
                                    "n_features=10"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "make_swiss_roll",
                        "func_desc": "Generate a swiss roll dataset.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.datasets.make_swiss_roll.html#sklearn.datasets.make_swiss_roll",
                        "function_definitions": {
                            "function_name": "make_swiss_roll",
                            "full_function": "sklearn.datasets.make_swiss_roll(n_samples=100, *, noise=0.0, random_state=None, hole=False)",
                            "function_text": "Generate a swiss roll dataset. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/datasets/sample_generators.html#sample-generators",
                            "parameter_names_desc": [
                                {
                                    "param_name": "n_samples",
                                    "param_type": "int, default=100",
                                    "param_desc": "The number of sample points on the Swiss Roll.\n"
                                },
                                {
                                    "param_name": "noise",
                                    "param_type": "float, default=0.0",
                                    "param_desc": "The standard deviation of the gaussian noise.\n"
                                },
                                {
                                    "param_name": "random_state",
                                    "param_type": "int, RandomState instance or None, default=None",
                                    "param_desc": "Determines random number generation for dataset creation. Pass an int\nfor reproducible output across multiple function calls.\nSee Glossary.\n"
                                },
                                {
                                    "param_name": "hole",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If True generates the swiss roll with hole dataset.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "make_swiss_roll",
                            "descriptions": "Generate a swiss roll dataset. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "n_samples": {
                                        "type": "integer",
                                        "description": "int, default=100. The number of sample points on the Swiss Roll.\n"
                                    },
                                    "noise": {
                                        "type": "float",
                                        "description": "float, default=0.0. The standard deviation of the gaussian noise.\n"
                                    },
                                    "random_state": {
                                        "type": "integer",
                                        "description": "int, RandomState instance or None, default=None. Determines random number generation for dataset creation. Pass an int\nfor reproducible output across multiple function calls.\nSee Glossary.\n"
                                    },
                                    "hole": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If True generates the swiss roll with hole dataset.\n"
                                    }
                                },
                                "required": [
                                    "n_samples=100"
                                ]
                            }
                        }
                    }
                ]
            }
        ],
        "name": "sklearn.datasets",
        "url": "https://scikit-learn.org/stable/api/sklearn.datasets.html"
    },
    "sklearn.decomposition.html": {
        "functions": [
            {
                "defaults": [
                    {
                        "func_name": "DictionaryLearning",
                        "func_desc": "Dictionary learning.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.DictionaryLearning.html#sklearn.decomposition.DictionaryLearning",
                        "function_definitions": {
                            "function_name": "DictionaryLearning",
                            "full_function": "class sklearn.decomposition.DictionaryLearning(n_components=None, *, alpha=1, max_iter=1000, tol=1e-08, fit_algorithm='lars', transform_algorithm='omp', transform_n_nonzero_coefs=None, transform_alpha=None, n_jobs=None, code_init=None, dict_init=None, callback=None, verbose=False, split_sign=False, random_state=None, positive_code=False, positive_dict=False, transform_max_iter=1000)",
                            "function_text": "Dictionary learning. Finds a dictionary (a set of atoms) that performs well at sparsely\nencoding the fitted data. Solves the optimization problem: ||.||_Fro stands for the Frobenius norm and ||.||_1,1 stands for\nthe entry-wise matrix norm which is the sum of the absolute values\nof all the entries in the matrix. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/decomposition.html#dictionarylearning",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "ndarray of shape (n_samples, n_features)",
                                    "param_desc": "Test data to be transformed, must have the same number of\nfeatures as the data used to train the model.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "DictionaryLearning",
                            "descriptions": "Dictionary learning. Finds a dictionary (a set of atoms) that performs well at sparsely\nencoding the fitted data. Solves the optimization problem: ||.||_Fro stands for the Frobenius norm and ||.||_1,1 stands for\nthe entry-wise matrix norm which is the sum of the absolute values\nof all the entries in the matrix. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "ndarray of shape (n_samples, n_features). Test data to be transformed, must have the same number of\nfeatures as the data used to train the model.\n"
                                    }
                                },
                                "required": [
                                    "n_components=None"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "FastICA",
                        "func_desc": "FastICA: a fast algorithm for Independent Component Analysis.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.FastICA.html#sklearn.decomposition.FastICA",
                        "function_definitions": {
                            "function_name": "FastICA",
                            "full_function": "class sklearn.decomposition.FastICA(n_components=None, *, algorithm='parallel', whiten='unit-variance', fun='logcosh', fun_args=None, max_iter=200, tol=0.0001, w_init=None, whiten_solver='svd', random_state=None)",
                            "function_text": "FastICA: a fast algorithm for Independent Component Analysis. The implementation is based on [1]. Read more in the User Guide.",
                            "func_text_user_guide": "#r44c805292efc-1",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples, n_features)",
                                    "param_desc": "Data to transform, where n_samples is the number of samples\nand n_features is the number of features.\n"
                                },
                                {
                                    "param_name": "copy",
                                    "param_type": "bool, default=True",
                                    "param_desc": "If False, data passed to fit can be overwritten. Defaults to True.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "FastICA",
                            "descriptions": "FastICA: a fast algorithm for Independent Component Analysis. The implementation is based on [1]. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_features). Data to transform, where n_samples is the number of samples\nand n_features is the number of features.\n"
                                    },
                                    "copy": {
                                        "type": "boolean",
                                        "description": "bool, default=True. If False, data passed to fit can be overwritten. Defaults to True.\n"
                                    }
                                },
                                "required": [
                                    "n_components=None"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "KernelPCA",
                        "func_desc": "Kernel Principal component analysis (KPCA).",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.KernelPCA.html#sklearn.decomposition.KernelPCA",
                        "function_definitions": {
                            "function_name": "KernelPCA",
                            "full_function": "class sklearn.decomposition.KernelPCA(n_components=None, *, kernel='linear', gamma=None, degree=3, coef0=1, kernel_params=None, alpha=1.0, fit_inverse_transform=False, eigen_solver='auto', tol=0, max_iter=None, iterated_power='auto', remove_zero_eig=False, random_state=None, copy_X=True, n_jobs=None)",
                            "function_text": "Kernel Principal component analysis (KPCA). Non-linear dimensionality reduction through the use of kernels [1], see also\nPairwise metrics, Affinities and Kernels. It uses the scipy.linalg.eigh LAPACK implementation of the full SVD\nor the scipy.sparse.linalg.eigsh ARPACK implementation of the\ntruncated SVD, depending on the shape of the input data and the number of\ncomponents to extract. It can also use a randomized truncated SVD by the\nmethod proposed in [3], see eigen_solver. For a usage example and comparison between\nPrincipal Components Analysis (PCA) and its kernelized version (KPCA), see\nKernel PCA. For a usage example in denoising images using KPCA, see\nImage denoising using kernel PCA. Read more in the User Guide.",
                            "func_text_user_guide": "#r396fc7d924b8-1",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "Training vector, where n_samples is the number of samples\nand n_features is the number of features.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "KernelPCA",
                            "descriptions": "Kernel Principal component analysis (KPCA). Non-linear dimensionality reduction through the use of kernels [1], see also\nPairwise metrics, Affinities and Kernels. It uses the scipy.linalg.eigh LAPACK implementation of the full SVD\nor the scipy.sparse.linalg.eigsh ARPACK implementation of the\ntruncated SVD, depending on the shape of the input data and the number of\ncomponents to extract. It can also use a randomized truncated SVD by the\nmethod proposed in [3], see eigen_solver. For a usage example and comparison between\nPrincipal Components Analysis (PCA) and its kernelized version (KPCA), see\nKernel PCA. For a usage example in denoising images using KPCA, see\nImage denoising using kernel PCA. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). Training vector, where n_samples is the number of samples\nand n_features is the number of features.\n"
                                    }
                                },
                                "required": [
                                    "n_components=None"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "MiniBatchDictionaryLearning",
                        "func_desc": "Mini-batch dictionary learning.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning.html#sklearn.decomposition.MiniBatchDictionaryLearning",
                        "function_definitions": {
                            "function_name": "MiniBatchDictionaryLearning",
                            "full_function": "class sklearn.decomposition.MiniBatchDictionaryLearning(n_components=None, *, alpha=1, max_iter=1000, fit_algorithm='lars', n_jobs=None, batch_size=256, shuffle=True, dict_init=None, transform_algorithm='omp', transform_n_nonzero_coefs=None, transform_alpha=None, verbose=False, split_sign=False, random_state=None, positive_code=False, positive_dict=False, transform_max_iter=1000, callback=None, tol=0.001, max_no_improvement=10)",
                            "function_text": "Mini-batch dictionary learning. Finds a dictionary (a set of atoms) that performs well at sparsely\nencoding the fitted data. Solves the optimization problem: ||.||_Fro stands for the Frobenius norm and ||.||_1,1 stands for\nthe entry-wise matrix norm which is the sum of the absolute values\nof all the entries in the matrix. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/decomposition.html#dictionarylearning",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "ndarray of shape (n_samples, n_features)",
                                    "param_desc": "Test data to be transformed, must have the same number of\nfeatures as the data used to train the model.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "MiniBatchDictionaryLearning",
                            "descriptions": "Mini-batch dictionary learning. Finds a dictionary (a set of atoms) that performs well at sparsely\nencoding the fitted data. Solves the optimization problem: ||.||_Fro stands for the Frobenius norm and ||.||_1,1 stands for\nthe entry-wise matrix norm which is the sum of the absolute values\nof all the entries in the matrix. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "ndarray of shape (n_samples, n_features). Test data to be transformed, must have the same number of\nfeatures as the data used to train the model.\n"
                                    }
                                },
                                "required": [
                                    "n_components=None"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "MiniBatchSparsePCA",
                        "func_desc": "Mini-batch Sparse Principal Components Analysis.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.MiniBatchSparsePCA.html#sklearn.decomposition.MiniBatchSparsePCA",
                        "function_definitions": {
                            "function_name": "MiniBatchSparsePCA",
                            "full_function": "class sklearn.decomposition.MiniBatchSparsePCA(n_components=None, *, alpha=1, ridge_alpha=0.01, max_iter=1000, callback=None, batch_size=3, verbose=False, shuffle=True, n_jobs=None, method='lars', random_state=None, tol=0.001, max_no_improvement=10)",
                            "function_text": "Mini-batch Sparse Principal Components Analysis. Finds the set of sparse components that can optimally reconstruct\nthe data.  The amount of sparseness is controllable by the coefficient\nof the L1 penalty, given by the parameter alpha. For an example comparing sparse PCA to PCA, see\nFaces dataset decompositions Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/auto_examples/decomposition/plot_faces_decomposition.html#sphx-glr-auto-examples-decomposition-plot-faces-decomposition-py",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "ndarray of shape (n_samples, n_features)",
                                    "param_desc": "Test data to be transformed, must have the same number of\nfeatures as the data used to train the model.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "MiniBatchSparsePCA",
                            "descriptions": "Mini-batch Sparse Principal Components Analysis. Finds the set of sparse components that can optimally reconstruct\nthe data.  The amount of sparseness is controllable by the coefficient\nof the L1 penalty, given by the parameter alpha. For an example comparing sparse PCA to PCA, see\nFaces dataset decompositions Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "ndarray of shape (n_samples, n_features). Test data to be transformed, must have the same number of\nfeatures as the data used to train the model.\n"
                                    }
                                },
                                "required": [
                                    "n_components=None"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "PCA",
                        "func_desc": "Principal component analysis (PCA).",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.PCA.html#sklearn.decomposition.PCA",
                        "function_definitions": {
                            "function_name": "PCA",
                            "full_function": "class sklearn.decomposition.PCA(n_components=None, *, copy=True, whiten=False, svd_solver='auto', tol=0.0, iterated_power='auto', n_oversamples=10, power_iteration_normalizer='auto', random_state=None)",
                            "function_text": "Principal component analysis (PCA). Linear dimensionality reduction using Singular Value Decomposition of the\ndata to project it to a lower dimensional space. The input data is centered\nbut not scaled for each feature before applying the SVD. It uses the LAPACK implementation of the full SVD or a randomized truncated\nSVD by the method of Halko et al. 2009, depending on the shape of the input\ndata and the number of components to extract. With sparse inputs, the ARPACK implementation of the truncated SVD can be\nused (i.e. through scipy.sparse.linalg.svds). Alternatively, one\nmay consider TruncatedSVD where the data are not centered. Notice that this class only supports sparse inputs for some solvers such as\n\u201carpack\u201d and \u201ccovariance_eigh\u201d. See TruncatedSVD for an\nalternative with sparse data. For a usage example, see\nPCA example with Iris Data-set Read more in the User Guide.",
                            "func_text_user_guide": "sklearn.decomposition.TruncatedSVD.html#sklearn.decomposition.TruncatedSVD",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "New data, where n_samples is the number of samples\nand n_features is the number of features.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "PCA",
                            "descriptions": "Principal component analysis (PCA). Linear dimensionality reduction using Singular Value Decomposition of the\ndata to project it to a lower dimensional space. The input data is centered\nbut not scaled for each feature before applying the SVD. It uses the LAPACK implementation of the full SVD or a randomized truncated\nSVD by the method of Halko et al. 2009, depending on the shape of the input\ndata and the number of components to extract. With sparse inputs, the ARPACK implementation of the truncated SVD can be\nused (i.e. through scipy.sparse.linalg.svds). Alternatively, one\nmay consider TruncatedSVD where the data are not centered. Notice that this class only supports sparse inputs for some solvers such as\n\u201carpack\u201d and \u201ccovariance_eigh\u201d. See TruncatedSVD for an\nalternative with sparse data. For a usage example, see\nPCA example with Iris Data-set Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). New data, where n_samples is the number of samples\nand n_features is the number of features.\n"
                                    }
                                },
                                "required": [
                                    "n_components=None"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "SparsePCA",
                        "func_desc": "Sparse Principal Components Analysis (SparsePCA).",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.SparsePCA.html#sklearn.decomposition.SparsePCA",
                        "function_definitions": {
                            "function_name": "SparsePCA",
                            "full_function": "class sklearn.decomposition.SparsePCA(n_components=None, *, alpha=1, ridge_alpha=0.01, max_iter=1000, tol=1e-08, method='lars', n_jobs=None, U_init=None, V_init=None, verbose=False, random_state=None)",
                            "function_text": "Sparse Principal Components Analysis (SparsePCA). Finds the set of sparse components that can optimally reconstruct\nthe data.  The amount of sparseness is controllable by the coefficient\nof the L1 penalty, given by the parameter alpha. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/decomposition.html#sparsepca",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "ndarray of shape (n_samples, n_features)",
                                    "param_desc": "Test data to be transformed, must have the same number of\nfeatures as the data used to train the model.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "SparsePCA",
                            "descriptions": "Sparse Principal Components Analysis (SparsePCA). Finds the set of sparse components that can optimally reconstruct\nthe data.  The amount of sparseness is controllable by the coefficient\nof the L1 penalty, given by the parameter alpha. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "ndarray of shape (n_samples, n_features). Test data to be transformed, must have the same number of\nfeatures as the data used to train the model.\n"
                                    }
                                },
                                "required": [
                                    "n_components=None"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "dict_learning",
                        "func_desc": "Solve a dictionary learning matrix factorization problem.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.dict_learning.html#sklearn.decomposition.dict_learning",
                        "function_definitions": {
                            "function_name": "dict_learning",
                            "full_function": "sklearn.decomposition.dict_learning(X, n_components, *, alpha, max_iter=100, tol=1e-08, method='lars', n_jobs=None, dict_init=None, code_init=None, callback=None, verbose=False, random_state=None, return_n_iter=False, positive_dict=False, positive_code=False, method_max_iter=1000)",
                            "function_text": "Solve a dictionary learning matrix factorization problem. Finds the best dictionary and the corresponding sparse code for\napproximating the data matrix X by solving: where V is the dictionary and U is the sparse code. ||.||_Fro stands for\nthe Frobenius norm and ||.||_1,1 stands for the entry-wise matrix norm\nwhich is the sum of the absolute values of all the entries in the matrix. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/decomposition.html#dictionarylearning",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples, n_features)",
                                    "param_desc": "Data matrix.\n"
                                },
                                {
                                    "param_name": "n_components",
                                    "param_type": "int",
                                    "param_desc": "Number of dictionary atoms to extract.\n"
                                },
                                {
                                    "param_name": "alpha",
                                    "param_type": "int or float",
                                    "param_desc": "Sparsity controlling parameter.\n"
                                },
                                {
                                    "param_name": "max_iter",
                                    "param_type": "int, default=100",
                                    "param_desc": "Maximum number of iterations to perform.\n"
                                },
                                {
                                    "param_name": "tol",
                                    "param_type": "float, default=1e-8",
                                    "param_desc": "Tolerance for the stopping condition.\n"
                                },
                                {
                                    "param_name": "method",
                                    "param_type": "{\u2018lars\u2019, \u2018cd\u2019}, default=\u2019lars\u2019",
                                    "param_desc": "The method used:\n\n\n'lars': uses the least angle regression method to solve the lassoproblem (linear_model.lars_path);\n\n\n\n'cd': uses the coordinate descent method to compute the\nLasso solution (linear_model.Lasso). Lars will be faster if\nthe estimated components are sparse.\n\n"
                                },
                                {
                                    "param_name": "n_jobs",
                                    "param_type": "int, default=None",
                                    "param_desc": "Number of parallel jobs to run.\nNone means 1 unless in a joblib.parallel_backend context.\n-1 means using all processors. See Glossary\nfor more details.\n"
                                },
                                {
                                    "param_name": "dict_init",
                                    "param_type": "ndarray of shape (n_components, n_features), default=None",
                                    "param_desc": "Initial value for the dictionary for warm restart scenarios. Only used\nif code_init and dict_init are not None.\n"
                                },
                                {
                                    "param_name": "code_init",
                                    "param_type": "ndarray of shape (n_samples, n_components), default=None",
                                    "param_desc": "Initial value for the sparse code for warm restart scenarios. Only used\nif code_init and dict_init are not None.\n"
                                },
                                {
                                    "param_name": "callback",
                                    "param_type": "callable, default=None",
                                    "param_desc": "Callable that gets invoked every five iterations.\n"
                                },
                                {
                                    "param_name": "verbose",
                                    "param_type": "bool, default=False",
                                    "param_desc": "To control the verbosity of the procedure.\n"
                                },
                                {
                                    "param_name": "random_state",
                                    "param_type": "int, RandomState instance or None, default=None",
                                    "param_desc": "Used for randomly initializing the dictionary. Pass an int for\nreproducible results across multiple function calls.\nSee Glossary.\n"
                                },
                                {
                                    "param_name": "return_n_iter",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Whether or not to return the number of iterations.\n"
                                },
                                {
                                    "param_name": "positive_dict",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Whether to enforce positivity when finding the dictionary.\n\nAdded in version 0.20.\n\n"
                                },
                                {
                                    "param_name": "positive_code",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Whether to enforce positivity when finding the code.\n\nAdded in version 0.20.\n\n"
                                },
                                {
                                    "param_name": "method_max_iter",
                                    "param_type": "int, default=1000",
                                    "param_desc": "Maximum number of iterations to perform.\n\nAdded in version 0.22.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "dict_learning",
                            "descriptions": "Solve a dictionary learning matrix factorization problem. Finds the best dictionary and the corresponding sparse code for\napproximating the data matrix X by solving: where V is the dictionary and U is the sparse code. ||.||_Fro stands for\nthe Frobenius norm and ||.||_1,1 stands for the entry-wise matrix norm\nwhich is the sum of the absolute values of all the entries in the matrix. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_features). Data matrix.\n"
                                    },
                                    "n_components": {
                                        "type": "integer",
                                        "description": "int. Number of dictionary atoms to extract.\n"
                                    },
                                    "alpha": {
                                        "type": "integer",
                                        "description": "int or float. Sparsity controlling parameter.\n"
                                    },
                                    "max_iter": {
                                        "type": "integer",
                                        "description": "int, default=100. Maximum number of iterations to perform.\n"
                                    },
                                    "tol": {
                                        "type": "float",
                                        "description": "float, default=1e-8. Tolerance for the stopping condition.\n"
                                    },
                                    "method": {
                                        "type": "string",
                                        "enum": [
                                            "lars",
                                            " cd"
                                        ],
                                        "description": "{\u2018lars\u2019, \u2018cd\u2019}, default=\u2019lars\u2019. The method used:\n\n\n'lars': uses the least angle regression method to solve the lassoproblem (linear_model.lars_path);\n\n\n\n'cd': uses the coordinate descent method to compute the\nLasso solution (linear_model.Lasso). Lars will be faster if\nthe estimated components are sparse.\n\n"
                                    },
                                    "n_jobs": {
                                        "type": "integer",
                                        "description": "int, default=None. Number of parallel jobs to run.\nNone means 1 unless in a joblib.parallel_backend context.\n-1 means using all processors. See Glossary\nfor more details.\n"
                                    },
                                    "dict_init": {
                                        "type": "array",
                                        "description": "ndarray of shape (n_components, n_features), default=None. Initial value for the dictionary for warm restart scenarios. Only used\nif code_init and dict_init are not None.\n"
                                    },
                                    "code_init": {
                                        "type": "array",
                                        "description": "ndarray of shape (n_samples, n_components), default=None. Initial value for the sparse code for warm restart scenarios. Only used\nif code_init and dict_init are not None.\n"
                                    },
                                    "callback": {
                                        "type": "object",
                                        "description": "callable, default=None. Callable that gets invoked every five iterations.\n"
                                    },
                                    "verbose": {
                                        "type": "boolean",
                                        "description": "bool, default=False. To control the verbosity of the procedure.\n"
                                    },
                                    "random_state": {
                                        "type": "integer",
                                        "description": "int, RandomState instance or None, default=None. Used for randomly initializing the dictionary. Pass an int for\nreproducible results across multiple function calls.\nSee Glossary.\n"
                                    },
                                    "return_n_iter": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Whether or not to return the number of iterations.\n"
                                    },
                                    "positive_dict": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Whether to enforce positivity when finding the dictionary.\n\nAdded in version 0.20.\n\n"
                                    },
                                    "positive_code": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Whether to enforce positivity when finding the code.\n\nAdded in version 0.20.\n\n"
                                    },
                                    "method_max_iter": {
                                        "type": "integer",
                                        "description": "int, default=1000. Maximum number of iterations to perform.\n\nAdded in version 0.22.\n\n"
                                    }
                                },
                                "required": [
                                    "X",
                                    "n_components"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "fastica",
                        "func_desc": "Perform Fast Independent Component Analysis.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/fastica-function.html#sklearn.decomposition.fastica",
                        "function_definitions": {
                            "function_name": "fastica",
                            "full_function": "sklearn.decomposition.fastica(X, n_components=None, *, algorithm='parallel', whiten='unit-variance', fun='logcosh', fun_args=None, max_iter=200, tol=0.0001, w_init=None, whiten_solver='svd', random_state=None, return_X_mean=False, compute_sources=True, return_n_iter=False)",
                            "function_text": "Perform Fast Independent Component Analysis. The implementation is based on [1]. Read more in the User Guide.",
                            "func_text_user_guide": "#r4ef46ec4ecf2-1",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples, n_features)",
                                    "param_desc": "Training vector, where n_samples is the number of samples and\nn_features is the number of features.\n"
                                },
                                {
                                    "param_name": "n_components",
                                    "param_type": "int, default=None",
                                    "param_desc": "Number of components to use. If None is passed, all are used.\n"
                                },
                                {
                                    "param_name": "algorithm",
                                    "param_type": "{\u2018parallel\u2019, \u2018deflation\u2019}, default=\u2019parallel\u2019",
                                    "param_desc": "Specify which algorithm to use for FastICA.\n"
                                },
                                {
                                    "param_name": "whiten",
                                    "param_type": "str or bool, default=\u2019unit-variance\u2019",
                                    "param_desc": "Specify the whitening strategy to use.\n\nIf \u2018arbitrary-variance\u2019, a whitening with variance\narbitrary is used.\nIf \u2018unit-variance\u2019, the whitening matrix is rescaled to ensure that\neach recovered source has unit variance.\nIf False, the data is already considered to be whitened, and no\nwhitening is performed.\n\n\nChanged in version 1.3: The default value of whiten changed to \u2018unit-variance\u2019 in 1.3.\n\n"
                                },
                                {
                                    "param_name": "fun",
                                    "param_type": "{\u2018logcosh\u2019, \u2018exp\u2019, \u2018cube\u2019} or callable, default=\u2019logcosh\u2019",
                                    "param_desc": "The functional form of the G function used in the\napproximation to neg-entropy. Could be either \u2018logcosh\u2019, \u2018exp\u2019,\nor \u2018cube\u2019.\nYou can also provide your own function. It should return a tuple\ncontaining the value of the function, and of its derivative, in the\npoint. The derivative should be averaged along its last dimension.\nExample:\ndef my_g(x):\n    return x ** 3, (3 * x ** 2).mean(axis=-1)\n\n\n"
                                },
                                {
                                    "param_name": "fun_args",
                                    "param_type": "dict, default=None",
                                    "param_desc": "Arguments to send to the functional form.\nIf empty or None and if fun=\u2019logcosh\u2019, fun_args will take value\n{\u2018alpha\u2019 : 1.0}.\n"
                                },
                                {
                                    "param_name": "max_iter",
                                    "param_type": "int, default=200",
                                    "param_desc": "Maximum number of iterations to perform.\n"
                                },
                                {
                                    "param_name": "tol",
                                    "param_type": "float, default=1e-4",
                                    "param_desc": "A positive scalar giving the tolerance at which the\nun-mixing matrix is considered to have converged.\n"
                                },
                                {
                                    "param_name": "w_init",
                                    "param_type": "ndarray of shape (n_components, n_components), default=None",
                                    "param_desc": "Initial un-mixing array. If w_init=None, then an array of values\ndrawn from a normal distribution is used.\n"
                                },
                                {
                                    "param_name": "whiten_solver",
                                    "param_type": "{\u201ceigh\u201d, \u201csvd\u201d}, default=\u201dsvd\u201d",
                                    "param_desc": "The solver to use for whitening.\n\n\u201csvd\u201d is more stable numerically if the problem is degenerate, and\noften faster when n_samples <= n_features.\n\u201ceigh\u201d is generally more memory efficient when\nn_samples >= n_features, and can be faster when\nn_samples >= 50 * n_features.\n\n\nAdded in version 1.2.\n\n"
                                },
                                {
                                    "param_name": "random_state",
                                    "param_type": "int, RandomState instance or None, default=None",
                                    "param_desc": "Used to initialize w_init when not specified, with a\nnormal distribution. Pass an int, for reproducible results\nacross multiple function calls.\nSee Glossary.\n"
                                },
                                {
                                    "param_name": "return_X_mean",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If True, X_mean is returned too.\n"
                                },
                                {
                                    "param_name": "compute_sources",
                                    "param_type": "bool, default=True",
                                    "param_desc": "If False, sources are not computed, but only the rotation matrix.\nThis can save memory when working with big data. Defaults to True.\n"
                                },
                                {
                                    "param_name": "return_n_iter",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Whether or not to return the number of iterations.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "fastica",
                            "descriptions": "Perform Fast Independent Component Analysis. The implementation is based on [1]. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_features). Training vector, where n_samples is the number of samples and\nn_features is the number of features.\n"
                                    },
                                    "n_components": {
                                        "type": "integer",
                                        "description": "int, default=None. Number of components to use. If None is passed, all are used.\n"
                                    },
                                    "algorithm": {
                                        "type": "string",
                                        "enum": [
                                            "parallel",
                                            " deflation"
                                        ],
                                        "description": "{\u2018parallel\u2019, \u2018deflation\u2019}, default=\u2019parallel\u2019. Specify which algorithm to use for FastICA.\n"
                                    },
                                    "whiten": {
                                        "type": "string",
                                        "description": "str or bool, default=\u2019unit-variance\u2019. Specify the whitening strategy to use.\n\nIf \u2018arbitrary-variance\u2019, a whitening with variance\narbitrary is used.\nIf \u2018unit-variance\u2019, the whitening matrix is rescaled to ensure that\neach recovered source has unit variance.\nIf False, the data is already considered to be whitened, and no\nwhitening is performed.\n\n\nChanged in version 1.3: The default value of whiten changed to \u2018unit-variance\u2019 in 1.3.\n\n"
                                    },
                                    "fun": {
                                        "type": "object",
                                        "description": "{\u2018logcosh\u2019, \u2018exp\u2019, \u2018cube\u2019} or callable, default=\u2019logcosh\u2019. The functional form of the G function used in the\napproximation to neg-entropy. Could be either \u2018logcosh\u2019, \u2018exp\u2019,\nor \u2018cube\u2019.\nYou can also provide your own function. It should return a tuple\ncontaining the value of the function, and of its derivative, in the\npoint. The derivative should be averaged along its last dimension.\nExample:\ndef my_g(x):\n    return x ** 3, (3 * x ** 2).mean(axis=-1)\n\n\n"
                                    },
                                    "fun_args": {
                                        "type": "dict, default=None",
                                        "description": "dict, default=None. Arguments to send to the functional form.\nIf empty or None and if fun=\u2019logcosh\u2019, fun_args will take value\n{\u2018alpha\u2019 : 1.0}.\n"
                                    },
                                    "max_iter": {
                                        "type": "integer",
                                        "description": "int, default=200. Maximum number of iterations to perform.\n"
                                    },
                                    "tol": {
                                        "type": "float",
                                        "description": "float, default=1e-4. A positive scalar giving the tolerance at which the\nun-mixing matrix is considered to have converged.\n"
                                    },
                                    "w_init": {
                                        "type": "array",
                                        "description": "ndarray of shape (n_components, n_components), default=None. Initial un-mixing array. If w_init=None, then an array of values\ndrawn from a normal distribution is used.\n"
                                    },
                                    "whiten_solver": {
                                        "type": "{\u201ceigh\u201d, \u201csvd\u201d}, default=\u201dsvd\u201d",
                                        "description": "{\u201ceigh\u201d, \u201csvd\u201d}, default=\u201dsvd\u201d. The solver to use for whitening.\n\n\u201csvd\u201d is more stable numerically if the problem is degenerate, and\noften faster when n_samples <= n_features.\n\u201ceigh\u201d is generally more memory efficient when\nn_samples >= n_features, and can be faster when\nn_samples >= 50 * n_features.\n\n\nAdded in version 1.2.\n\n"
                                    },
                                    "random_state": {
                                        "type": "integer",
                                        "description": "int, RandomState instance or None, default=None. Used to initialize w_init when not specified, with a\nnormal distribution. Pass an int, for reproducible results\nacross multiple function calls.\nSee Glossary.\n"
                                    },
                                    "return_X_mean": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If True, X_mean is returned too.\n"
                                    },
                                    "compute_sources": {
                                        "type": "boolean",
                                        "description": "bool, default=True. If False, sources are not computed, but only the rotation matrix.\nThis can save memory when working with big data. Defaults to True.\n"
                                    },
                                    "return_n_iter": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Whether or not to return the number of iterations.\n"
                                    }
                                },
                                "required": [
                                    "X",
                                    "n_components=None"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "sparse_encode",
                        "func_desc": "Sparse coding.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.sparse_encode.html#sklearn.decomposition.sparse_encode",
                        "function_definitions": {
                            "function_name": "sparse_encode",
                            "full_function": "sklearn.decomposition.sparse_encode(X, dictionary, *, gram=None, cov=None, algorithm='lasso_lars', n_nonzero_coefs=None, alpha=None, copy_cov=True, init=None, max_iter=1000, n_jobs=None, check_input=True, verbose=0, positive=False)",
                            "function_text": "Sparse coding. Each row of the result is the solution to a sparse coding problem.\nThe goal is to find a sparse array code such that: Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/decomposition.html#sparsecoder",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples, n_features)",
                                    "param_desc": "Data matrix.\n"
                                },
                                {
                                    "param_name": "dictionary",
                                    "param_type": "array-like of shape (n_components, n_features)",
                                    "param_desc": "The dictionary matrix against which to solve the sparse coding of\nthe data. Some of the algorithms assume normalized rows for meaningful\noutput.\n"
                                },
                                {
                                    "param_name": "gram",
                                    "param_type": "array-like of shape (n_components, n_components), default=None",
                                    "param_desc": "Precomputed Gram matrix, dictionary * dictionary'.\n"
                                },
                                {
                                    "param_name": "cov",
                                    "param_type": "array-like of shape (n_components, n_samples), default=None",
                                    "param_desc": "Precomputed covariance, dictionary' * X.\n"
                                },
                                {
                                    "param_name": "algorithm",
                                    "param_type": "{\u2018lasso_lars\u2019, \u2018lasso_cd\u2019, \u2018lars\u2019, \u2018omp\u2019, \u2018threshold\u2019},             default=\u2019lasso_lars\u2019",
                                    "param_desc": "The algorithm used:\n\n'lars': uses the least angle regression method\n(linear_model.lars_path);\n'lasso_lars': uses Lars to compute the Lasso solution;\n'lasso_cd': uses the coordinate descent method to compute the\nLasso solution (linear_model.Lasso). lasso_lars will be faster if\nthe estimated components are sparse;\n'omp': uses orthogonal matching pursuit to estimate the sparse\nsolution;\n'threshold': squashes to zero all coefficients less than\nregularization from the projection dictionary * data'.\n\n"
                                },
                                {
                                    "param_name": "n_nonzero_coefs",
                                    "param_type": "int, default=None",
                                    "param_desc": "Number of nonzero coefficients to target in each column of the\nsolution. This is only used by algorithm='lars' and algorithm='omp'\nand is overridden by alpha in the omp case. If None, then\nn_nonzero_coefs=int(n_features / 10).\n"
                                },
                                {
                                    "param_name": "alpha",
                                    "param_type": "float, default=None",
                                    "param_desc": "If algorithm='lasso_lars' or algorithm='lasso_cd', alpha is the\npenalty applied to the L1 norm.\nIf algorithm='threshold', alpha is the absolute value of the\nthreshold below which coefficients will be squashed to zero.\nIf algorithm='omp', alpha is the tolerance parameter: the value of\nthe reconstruction error targeted. In this case, it overrides\nn_nonzero_coefs.\nIf None, default to 1.\n"
                                },
                                {
                                    "param_name": "copy_cov",
                                    "param_type": "bool, default=True",
                                    "param_desc": "Whether to copy the precomputed covariance matrix; if False, it may\nbe overwritten.\n"
                                },
                                {
                                    "param_name": "init",
                                    "param_type": "ndarray of shape (n_samples, n_components), default=None",
                                    "param_desc": "Initialization value of the sparse codes. Only used if\nalgorithm='lasso_cd'.\n"
                                },
                                {
                                    "param_name": "max_iter",
                                    "param_type": "int, default=1000",
                                    "param_desc": "Maximum number of iterations to perform if algorithm='lasso_cd' or\n'lasso_lars'.\n"
                                },
                                {
                                    "param_name": "n_jobs",
                                    "param_type": "int, default=None",
                                    "param_desc": "Number of parallel jobs to run.\nNone means 1 unless in a joblib.parallel_backend context.\n-1 means using all processors. See Glossary\nfor more details.\n"
                                },
                                {
                                    "param_name": "check_input",
                                    "param_type": "bool, default=True",
                                    "param_desc": "If False, the input arrays X and dictionary will not be checked.\n"
                                },
                                {
                                    "param_name": "verbose",
                                    "param_type": "int, default=0",
                                    "param_desc": "Controls the verbosity; the higher, the more messages.\n"
                                },
                                {
                                    "param_name": "positive",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Whether to enforce positivity when finding the encoding.\n\nAdded in version 0.20.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "sparse_encode",
                            "descriptions": "Sparse coding. Each row of the result is the solution to a sparse coding problem.\nThe goal is to find a sparse array code such that: Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_features). Data matrix.\n"
                                    },
                                    "dictionary": {
                                        "type": "array",
                                        "description": "array-like of shape (n_components, n_features). The dictionary matrix against which to solve the sparse coding of\nthe data. Some of the algorithms assume normalized rows for meaningful\noutput.\n"
                                    },
                                    "gram": {
                                        "type": "array",
                                        "description": "array-like of shape (n_components, n_components), default=None. Precomputed Gram matrix, dictionary * dictionary'.\n"
                                    },
                                    "cov": {
                                        "type": "array",
                                        "description": "array-like of shape (n_components, n_samples), default=None. Precomputed covariance, dictionary' * X.\n"
                                    },
                                    "algorithm": {
                                        "type": "string",
                                        "enum": [
                                            "lasso_lars",
                                            " lasso_cd",
                                            " lars",
                                            " omp",
                                            " threshold"
                                        ],
                                        "description": "{\u2018lasso_lars\u2019, \u2018lasso_cd\u2019, \u2018lars\u2019, \u2018omp\u2019, \u2018threshold\u2019},             default=\u2019lasso_lars\u2019. The algorithm used:\n\n'lars': uses the least angle regression method\n(linear_model.lars_path);\n'lasso_lars': uses Lars to compute the Lasso solution;\n'lasso_cd': uses the coordinate descent method to compute the\nLasso solution (linear_model.Lasso). lasso_lars will be faster if\nthe estimated components are sparse;\n'omp': uses orthogonal matching pursuit to estimate the sparse\nsolution;\n'threshold': squashes to zero all coefficients less than\nregularization from the projection dictionary * data'.\n\n"
                                    },
                                    "n_nonzero_coefs": {
                                        "type": "integer",
                                        "description": "int, default=None. Number of nonzero coefficients to target in each column of the\nsolution. This is only used by algorithm='lars' and algorithm='omp'\nand is overridden by alpha in the omp case. If None, then\nn_nonzero_coefs=int(n_features / 10).\n"
                                    },
                                    "alpha": {
                                        "type": "float",
                                        "description": "float, default=None. If algorithm='lasso_lars' or algorithm='lasso_cd', alpha is the\npenalty applied to the L1 norm.\nIf algorithm='threshold', alpha is the absolute value of the\nthreshold below which coefficients will be squashed to zero.\nIf algorithm='omp', alpha is the tolerance parameter: the value of\nthe reconstruction error targeted. In this case, it overrides\nn_nonzero_coefs.\nIf None, default to 1.\n"
                                    },
                                    "copy_cov": {
                                        "type": "boolean",
                                        "description": "bool, default=True. Whether to copy the precomputed covariance matrix; if False, it may\nbe overwritten.\n"
                                    },
                                    "init": {
                                        "type": "array",
                                        "description": "ndarray of shape (n_samples, n_components), default=None. Initialization value of the sparse codes. Only used if\nalgorithm='lasso_cd'.\n"
                                    },
                                    "max_iter": {
                                        "type": "integer",
                                        "description": "int, default=1000. Maximum number of iterations to perform if algorithm='lasso_cd' or\n'lasso_lars'.\n"
                                    },
                                    "n_jobs": {
                                        "type": "integer",
                                        "description": "int, default=None. Number of parallel jobs to run.\nNone means 1 unless in a joblib.parallel_backend context.\n-1 means using all processors. See Glossary\nfor more details.\n"
                                    },
                                    "check_input": {
                                        "type": "boolean",
                                        "description": "bool, default=True. If False, the input arrays X and dictionary will not be checked.\n"
                                    },
                                    "verbose": {
                                        "type": "integer",
                                        "description": "int, default=0. Controls the verbosity; the higher, the more messages.\n"
                                    },
                                    "positive": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Whether to enforce positivity when finding the encoding.\n\nAdded in version 0.20.\n\n"
                                    }
                                },
                                "required": [
                                    "X",
                                    "dictionary"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "FactorAnalysis",
                        "func_desc": "Factor Analysis (FA).",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.FactorAnalysis.html#sklearn.decomposition.FactorAnalysis",
                        "function_definitions": {
                            "function_name": "FactorAnalysis",
                            "full_function": "class sklearn.decomposition.FactorAnalysis(n_components=None, *, tol=0.01, copy=True, max_iter=1000, noise_variance_init=None, svd_method='randomized', iterated_power=3, rotation=None, random_state=0)",
                            "function_text": "Factor Analysis (FA). A simple linear generative model with Gaussian latent variables. The observations are assumed to be caused by a linear transformation of\nlower dimensional latent factors and added Gaussian noise.\nWithout loss of generality the factors are distributed according to a\nGaussian with zero mean and unit covariance. The noise is also zero mean\nand has an arbitrary diagonal covariance matrix. If we would restrict the model further, by assuming that the Gaussian\nnoise is even isotropic (all diagonal entries are the same) we would obtain\nPCA. FactorAnalysis performs a maximum likelihood estimate of the so-called\nloading matrix, the transformation of the latent variables to the\nobserved ones, using SVD based approach. Read more in the User Guide. Added in version 0.13.",
                            "func_text_user_guide": "sklearn.decomposition.PCA.html#sklearn.decomposition.PCA",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples, n_features)",
                                    "param_desc": "Training data.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "FactorAnalysis",
                            "descriptions": "Factor Analysis (FA). A simple linear generative model with Gaussian latent variables. The observations are assumed to be caused by a linear transformation of\nlower dimensional latent factors and added Gaussian noise.\nWithout loss of generality the factors are distributed according to a\nGaussian with zero mean and unit covariance. The noise is also zero mean\nand has an arbitrary diagonal covariance matrix. If we would restrict the model further, by assuming that the Gaussian\nnoise is even isotropic (all diagonal entries are the same) we would obtain\nPCA. FactorAnalysis performs a maximum likelihood estimate of the so-called\nloading matrix, the transformation of the latent variables to the\nobserved ones, using SVD based approach. Read more in the User Guide. Added in version 0.13.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_features). Training data.\n"
                                    }
                                },
                                "required": [
                                    "n_components=None"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "IncrementalPCA",
                        "func_desc": "Incremental principal components analysis (IPCA).",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.IncrementalPCA.html#sklearn.decomposition.IncrementalPCA",
                        "function_definitions": {
                            "function_name": "IncrementalPCA",
                            "full_function": "class sklearn.decomposition.IncrementalPCA(n_components=None, *, whiten=False, copy=True, batch_size=None)",
                            "function_text": "Incremental principal components analysis (IPCA). Linear dimensionality reduction using Singular Value Decomposition of\nthe data, keeping only the most significant singular vectors to\nproject the data to a lower dimensional space. The input data is centered\nbut not scaled for each feature before applying the SVD. Depending on the size of the input data, this algorithm can be much more\nmemory efficient than a PCA, and allows sparse input. This algorithm has constant memory complexity, on the order\nof batch_size * n_features, enabling use of np.memmap files without\nloading the entire file into memory. For sparse matrices, the input\nis converted to dense in batches (in order to be able to subtract the\nmean) which avoids storing the entire dense matrix at any one time. The computational overhead of each SVD is\nO(batch_size * n_features ** 2), but only 2 * batch_size samples\nremain in memory at a time. There will be n_samples / batch_size SVD\ncomputations to get the principal components, versus 1 large SVD of\ncomplexity O(n_samples * n_features ** 2) for PCA. For a usage example, see\nIncremental PCA. Read more in the User Guide. Added in version 0.16.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/auto_examples/decomposition/plot_incremental_pca.html#sphx-glr-auto-examples-decomposition-plot-incremental-pca-py",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "New data, where n_samples is the number of samples\nand n_features is the number of features.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "IncrementalPCA",
                            "descriptions": "Incremental principal components analysis (IPCA). Linear dimensionality reduction using Singular Value Decomposition of\nthe data, keeping only the most significant singular vectors to\nproject the data to a lower dimensional space. The input data is centered\nbut not scaled for each feature before applying the SVD. Depending on the size of the input data, this algorithm can be much more\nmemory efficient than a PCA, and allows sparse input. This algorithm has constant memory complexity, on the order\nof batch_size * n_features, enabling use of np.memmap files without\nloading the entire file into memory. For sparse matrices, the input\nis converted to dense in batches (in order to be able to subtract the\nmean) which avoids storing the entire dense matrix at any one time. The computational overhead of each SVD is\nO(batch_size * n_features ** 2), but only 2 * batch_size samples\nremain in memory at a time. There will be n_samples / batch_size SVD\ncomputations to get the principal components, versus 1 large SVD of\ncomplexity O(n_samples * n_features ** 2) for PCA. For a usage example, see\nIncremental PCA. Read more in the User Guide. Added in version 0.16.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). New data, where n_samples is the number of samples\nand n_features is the number of features.\n"
                                    }
                                },
                                "required": [
                                    "n_components=None"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "LatentDirichletAllocation",
                        "func_desc": "Latent Dirichlet Allocation with online variational Bayes algorithm.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.LatentDirichletAllocation.html#sklearn.decomposition.LatentDirichletAllocation",
                        "function_definitions": {
                            "function_name": "LatentDirichletAllocation",
                            "full_function": "class sklearn.decomposition.LatentDirichletAllocation(n_components=10, *, doc_topic_prior=None, topic_word_prior=None, learning_method='batch', learning_decay=0.7, learning_offset=10.0, max_iter=10, batch_size=128, evaluate_every=-1, total_samples=1000000.0, perp_tol=0.1, mean_change_tol=0.001, max_doc_update_iter=100, n_jobs=None, verbose=0, random_state=None)",
                            "function_text": "Latent Dirichlet Allocation with online variational Bayes algorithm. The implementation is based on [1] and [2]. Added in version 0.17. Read more in the User Guide.",
                            "func_text_user_guide": "#re25e5648fc37-1",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "Document word matrix.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "LatentDirichletAllocation",
                            "descriptions": "Latent Dirichlet Allocation with online variational Bayes algorithm. The implementation is based on [1] and [2]. Added in version 0.17. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). Document word matrix.\n"
                                    }
                                },
                                "required": [
                                    "n_components=10"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "MiniBatchNMF",
                        "func_desc": "Mini-Batch Non-Negative Matrix Factorization (NMF).",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.MiniBatchNMF.html#sklearn.decomposition.MiniBatchNMF",
                        "function_definitions": {
                            "function_name": "MiniBatchNMF",
                            "full_function": "class sklearn.decomposition.MiniBatchNMF(n_components='warn', *, init=None, batch_size=1024, beta_loss='frobenius', tol=0.0001, max_no_improvement=10, max_iter=200, alpha_W=0.0, alpha_H='same', l1_ratio=0.0, forget_factor=0.7, fresh_restarts=False, fresh_restarts_max_iter=30, transform_max_iter=None, random_state=None, verbose=0)",
                            "function_text": "Mini-Batch Non-Negative Matrix Factorization (NMF). Added in version 1.1. Find two non-negative matrices, i.e. matrices with all non-negative elements,\n(W, H) whose product approximates the non-negative matrix X. This\nfactorization can be used for example for dimensionality reduction, source\nseparation or topic extraction. The objective function is: Where: \\(||A||_{Fro}^2 = \\sum_{i,j} A_{ij}^2\\) (Frobenius norm) \\(||vec(A)||_1 = \\sum_{i,j} abs(A_{ij})\\) (Elementwise L1 norm) The generic norm \\(||X - WH||_{loss}^2\\) may represent\nthe Frobenius norm or another supported beta-divergence loss.\nThe choice between options is controlled by the beta_loss parameter. The objective function is minimized with an alternating minimization of W\nand H. Note that the transformed data is named W and the components matrix is\nnamed H. In the NMF literature, the naming convention is usually the opposite\nsince the data matrix X is transposed. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/decomposition.html#minibatchnmf",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "Data matrix to be transformed by the model.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "MiniBatchNMF",
                            "descriptions": "Mini-Batch Non-Negative Matrix Factorization (NMF). Added in version 1.1. Find two non-negative matrices, i.e. matrices with all non-negative elements,\n(W, H) whose product approximates the non-negative matrix X. This\nfactorization can be used for example for dimensionality reduction, source\nseparation or topic extraction. The objective function is: Where: \\(||A||_{Fro}^2 = \\sum_{i,j} A_{ij}^2\\) (Frobenius norm) \\(||vec(A)||_1 = \\sum_{i,j} abs(A_{ij})\\) (Elementwise L1 norm) The generic norm \\(||X - WH||_{loss}^2\\) may represent\nthe Frobenius norm or another supported beta-divergence loss.\nThe choice between options is controlled by the beta_loss parameter. The objective function is minimized with an alternating minimization of W\nand H. Note that the transformed data is named W and the components matrix is\nnamed H. In the NMF literature, the naming convention is usually the opposite\nsince the data matrix X is transposed. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). Data matrix to be transformed by the model.\n"
                                    }
                                },
                                "required": [
                                    "n_components='warn'"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "NMF",
                        "func_desc": "Non-Negative Matrix Factorization (NMF).",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.NMF.html#sklearn.decomposition.NMF",
                        "function_definitions": {
                            "function_name": "NMF",
                            "full_function": "class sklearn.decomposition.NMF(n_components='warn', *, init=None, solver='cd', beta_loss='frobenius', tol=0.0001, max_iter=200, random_state=None, alpha_W=0.0, alpha_H='same', l1_ratio=0.0, verbose=0, shuffle=False)",
                            "function_text": "Non-Negative Matrix Factorization (NMF). Find two non-negative matrices, i.e. matrices with all non-negative elements, (W, H)\nwhose product approximates the non-negative matrix X. This factorization can be used\nfor example for dimensionality reduction, source separation or topic extraction. The objective function is: Where: \\(||A||_{Fro}^2 = \\sum_{i,j} A_{ij}^2\\) (Frobenius norm) \\(||vec(A)||_1 = \\sum_{i,j} abs(A_{ij})\\) (Elementwise L1 norm) The generic norm \\(||X - WH||_{loss}\\) may represent\nthe Frobenius norm or another supported beta-divergence loss.\nThe choice between options is controlled by the beta_loss parameter. The regularization terms are scaled by n_features for W and by n_samples for\nH to keep their impact balanced with respect to one another and to the data fit\nterm as independent as possible of the size n_samples of the training set. The objective function is minimized with an alternating minimization of W\nand H. Note that the transformed data is named W and the components matrix is named H. In\nthe NMF literature, the naming convention is usually the opposite since the data\nmatrix X is transposed. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/decomposition.html#nmf",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "Training vector, where n_samples is the number of samples\nand n_features is the number of features.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "NMF",
                            "descriptions": "Non-Negative Matrix Factorization (NMF). Find two non-negative matrices, i.e. matrices with all non-negative elements, (W, H)\nwhose product approximates the non-negative matrix X. This factorization can be used\nfor example for dimensionality reduction, source separation or topic extraction. The objective function is: Where: \\(||A||_{Fro}^2 = \\sum_{i,j} A_{ij}^2\\) (Frobenius norm) \\(||vec(A)||_1 = \\sum_{i,j} abs(A_{ij})\\) (Elementwise L1 norm) The generic norm \\(||X - WH||_{loss}\\) may represent\nthe Frobenius norm or another supported beta-divergence loss.\nThe choice between options is controlled by the beta_loss parameter. The regularization terms are scaled by n_features for W and by n_samples for\nH to keep their impact balanced with respect to one another and to the data fit\nterm as independent as possible of the size n_samples of the training set. The objective function is minimized with an alternating minimization of W\nand H. Note that the transformed data is named W and the components matrix is named H. In\nthe NMF literature, the naming convention is usually the opposite since the data\nmatrix X is transposed. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). Training vector, where n_samples is the number of samples\nand n_features is the number of features.\n"
                                    }
                                },
                                "required": [
                                    "n_components='warn'"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "SparseCoder",
                        "func_desc": "Sparse coding.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.SparseCoder.html#sklearn.decomposition.SparseCoder",
                        "function_definitions": {
                            "function_name": "SparseCoder",
                            "full_function": "class sklearn.decomposition.SparseCoder(dictionary, *, transform_algorithm='omp', transform_n_nonzero_coefs=None, transform_alpha=None, split_sign=False, n_jobs=None, positive_code=False, transform_max_iter=1000)",
                            "function_text": "Sparse coding. Finds a sparse representation of data against a fixed, precomputed\ndictionary. Each row of the result is the solution to a sparse coding problem.\nThe goal is to find a sparse array code such that: Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/decomposition.html#sparsecoder",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "ndarray of shape (n_samples, n_features)",
                                    "param_desc": "Training vector, where n_samples is the number of samples\nand n_features is the number of features.\n"
                                },
                                {
                                    "param_name": "y",
                                    "param_type": "Ignored",
                                    "param_desc": "Not used, present for API consistency by convention.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "SparseCoder",
                            "descriptions": "Sparse coding. Finds a sparse representation of data against a fixed, precomputed\ndictionary. Each row of the result is the solution to a sparse coding problem.\nThe goal is to find a sparse array code such that: Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "ndarray of shape (n_samples, n_features). Training vector, where n_samples is the number of samples\nand n_features is the number of features.\n"
                                    },
                                    "y": {
                                        "type": "Ignored",
                                        "description": "Ignored. Not used, present for API consistency by convention.\n"
                                    }
                                },
                                "required": [
                                    "dictionary"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "TruncatedSVD",
                        "func_desc": "Dimensionality reduction using truncated SVD (aka LSA).",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.TruncatedSVD.html#sklearn.decomposition.TruncatedSVD",
                        "function_definitions": {
                            "function_name": "TruncatedSVD",
                            "full_function": "class sklearn.decomposition.TruncatedSVD(n_components=2, *, algorithm='randomized', n_iter=5, n_oversamples=10, power_iteration_normalizer='auto', random_state=None, tol=0.0)",
                            "function_text": "Dimensionality reduction using truncated SVD (aka LSA). This transformer performs linear dimensionality reduction by means of\ntruncated singular value decomposition (SVD). Contrary to PCA, this\nestimator does not center the data before computing the singular value\ndecomposition. This means it can work with sparse matrices\nefficiently. In particular, truncated SVD works on term count/tf-idf matrices as\nreturned by the vectorizers in sklearn.feature_extraction.text. In\nthat context, it is known as latent semantic analysis (LSA). This estimator supports two algorithms: a fast randomized SVD solver, and\na \u201cnaive\u201d algorithm that uses ARPACK as an eigensolver on X * X.T or\nX.T * X, whichever is more efficient. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/api/sklearn.feature_extraction.html#module-sklearn.feature_extraction.text",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "New data.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "TruncatedSVD",
                            "descriptions": "Dimensionality reduction using truncated SVD (aka LSA). This transformer performs linear dimensionality reduction by means of\ntruncated singular value decomposition (SVD). Contrary to PCA, this\nestimator does not center the data before computing the singular value\ndecomposition. This means it can work with sparse matrices\nefficiently. In particular, truncated SVD works on term count/tf-idf matrices as\nreturned by the vectorizers in sklearn.feature_extraction.text. In\nthat context, it is known as latent semantic analysis (LSA). This estimator supports two algorithms: a fast randomized SVD solver, and\na \u201cnaive\u201d algorithm that uses ARPACK as an eigensolver on X * X.T or\nX.T * X, whichever is more efficient. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). New data.\n"
                                    }
                                },
                                "required": [
                                    "n_components=2"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "dict_learning_online",
                        "func_desc": "Solve a dictionary learning matrix factorization problem online.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.dict_learning_online.html#sklearn.decomposition.dict_learning_online",
                        "function_definitions": {
                            "function_name": "dict_learning_online",
                            "full_function": "sklearn.decomposition.dict_learning_online(X, n_components=2, *, alpha=1, max_iter=100, return_code=True, dict_init=None, callback=None, batch_size=256, verbose=False, shuffle=True, n_jobs=None, method='lars', random_state=None, positive_dict=False, positive_code=False, method_max_iter=1000, tol=0.001, max_no_improvement=10)",
                            "function_text": "Solve a dictionary learning matrix factorization problem online. Finds the best dictionary and the corresponding sparse code for\napproximating the data matrix X by solving: where V is the dictionary and U is the sparse code. ||.||_Fro stands for\nthe Frobenius norm and ||.||_1,1 stands for the entry-wise matrix norm\nwhich is the sum of the absolute values of all the entries in the matrix.\nThis is accomplished by repeatedly iterating over mini-batches by slicing\nthe input data. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/decomposition.html#dictionarylearning",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples, n_features)",
                                    "param_desc": "Data matrix.\n"
                                },
                                {
                                    "param_name": "n_components",
                                    "param_type": "int or None, default=2",
                                    "param_desc": "Number of dictionary atoms to extract. If None, then n_components\nis set to n_features.\n"
                                },
                                {
                                    "param_name": "alpha",
                                    "param_type": "float, default=1",
                                    "param_desc": "Sparsity controlling parameter.\n"
                                },
                                {
                                    "param_name": "max_iter",
                                    "param_type": "int, default=100",
                                    "param_desc": "Maximum number of iterations over the complete dataset before\nstopping independently of any early stopping criterion heuristics.\n\nAdded in version 1.1.\n\n\nDeprecated since version 1.4: max_iter=None is deprecated in 1.4 and will be removed in 1.6.\nUse the default value (i.e. 100) instead.\n\n"
                                },
                                {
                                    "param_name": "return_code",
                                    "param_type": "bool, default=True",
                                    "param_desc": "Whether to also return the code U or just the dictionary V.\n"
                                },
                                {
                                    "param_name": "dict_init",
                                    "param_type": "ndarray of shape (n_components, n_features), default=None",
                                    "param_desc": "Initial values for the dictionary for warm restart scenarios.\nIf None, the initial values for the dictionary are created\nwith an SVD decomposition of the data via\nrandomized_svd.\n"
                                },
                                {
                                    "param_name": "callback",
                                    "param_type": "callable, default=None",
                                    "param_desc": "A callable that gets invoked at the end of each iteration.\n"
                                },
                                {
                                    "param_name": "batch_size",
                                    "param_type": "int, default=256",
                                    "param_desc": "The number of samples to take in each batch.\n\nChanged in version 1.3: The default value of batch_size changed from 3 to 256 in version 1.3.\n\n"
                                },
                                {
                                    "param_name": "verbose",
                                    "param_type": "bool, default=False",
                                    "param_desc": "To control the verbosity of the procedure.\n"
                                },
                                {
                                    "param_name": "shuffle",
                                    "param_type": "bool, default=True",
                                    "param_desc": "Whether to shuffle the data before splitting it in batches.\n"
                                },
                                {
                                    "param_name": "n_jobs",
                                    "param_type": "int, default=None",
                                    "param_desc": "Number of parallel jobs to run.\nNone means 1 unless in a joblib.parallel_backend context.\n-1 means using all processors. See Glossary\nfor more details.\n"
                                },
                                {
                                    "param_name": "method",
                                    "param_type": "{\u2018lars\u2019, \u2018cd\u2019}, default=\u2019lars\u2019",
                                    "param_desc": "\n'lars': uses the least angle regression method to solve the lasso\nproblem (linear_model.lars_path);\n'cd': uses the coordinate descent method to compute the\nLasso solution (linear_model.Lasso). Lars will be faster if\nthe estimated components are sparse.\n\n"
                                },
                                {
                                    "param_name": "random_state",
                                    "param_type": "int, RandomState instance or None, default=None",
                                    "param_desc": "Used for initializing the dictionary when dict_init is not\nspecified, randomly shuffling the data when shuffle is set to\nTrue, and updating the dictionary. Pass an int for reproducible\nresults across multiple function calls.\nSee Glossary.\n"
                                },
                                {
                                    "param_name": "positive_dict",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Whether to enforce positivity when finding the dictionary.\n\nAdded in version 0.20.\n\n"
                                },
                                {
                                    "param_name": "positive_code",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Whether to enforce positivity when finding the code.\n\nAdded in version 0.20.\n\n"
                                },
                                {
                                    "param_name": "method_max_iter",
                                    "param_type": "int, default=1000",
                                    "param_desc": "Maximum number of iterations to perform when solving the lasso problem.\n\nAdded in version 0.22.\n\n"
                                },
                                {
                                    "param_name": "tol",
                                    "param_type": "float, default=1e-3",
                                    "param_desc": "Control early stopping based on the norm of the differences in the\ndictionary between 2 steps.\nTo disable early stopping based on changes in the dictionary, set\ntol to 0.0.\n\nAdded in version 1.1.\n\n"
                                },
                                {
                                    "param_name": "max_no_improvement",
                                    "param_type": "int, default=10",
                                    "param_desc": "Control early stopping based on the consecutive number of mini batches\nthat does not yield an improvement on the smoothed cost function.\nTo disable convergence detection based on cost function, set\nmax_no_improvement to None.\n\nAdded in version 1.1.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "dict_learning_online",
                            "descriptions": "Solve a dictionary learning matrix factorization problem online. Finds the best dictionary and the corresponding sparse code for\napproximating the data matrix X by solving: where V is the dictionary and U is the sparse code. ||.||_Fro stands for\nthe Frobenius norm and ||.||_1,1 stands for the entry-wise matrix norm\nwhich is the sum of the absolute values of all the entries in the matrix.\nThis is accomplished by repeatedly iterating over mini-batches by slicing\nthe input data. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_features). Data matrix.\n"
                                    },
                                    "n_components": {
                                        "type": "integer",
                                        "description": "int or None, default=2. Number of dictionary atoms to extract. If None, then n_components\nis set to n_features.\n"
                                    },
                                    "alpha": {
                                        "type": "float",
                                        "description": "float, default=1. Sparsity controlling parameter.\n"
                                    },
                                    "max_iter": {
                                        "type": "integer",
                                        "description": "int, default=100. Maximum number of iterations over the complete dataset before\nstopping independently of any early stopping criterion heuristics.\n\nAdded in version 1.1.\n\n\nDeprecated since version 1.4: max_iter=None is deprecated in 1.4 and will be removed in 1.6.\nUse the default value (i.e. 100) instead.\n\n"
                                    },
                                    "return_code": {
                                        "type": "boolean",
                                        "description": "bool, default=True. Whether to also return the code U or just the dictionary V.\n"
                                    },
                                    "dict_init": {
                                        "type": "array",
                                        "description": "ndarray of shape (n_components, n_features), default=None. Initial values for the dictionary for warm restart scenarios.\nIf None, the initial values for the dictionary are created\nwith an SVD decomposition of the data via\nrandomized_svd.\n"
                                    },
                                    "callback": {
                                        "type": "object",
                                        "description": "callable, default=None. A callable that gets invoked at the end of each iteration.\n"
                                    },
                                    "batch_size": {
                                        "type": "integer",
                                        "description": "int, default=256. The number of samples to take in each batch.\n\nChanged in version 1.3: The default value of batch_size changed from 3 to 256 in version 1.3.\n\n"
                                    },
                                    "verbose": {
                                        "type": "boolean",
                                        "description": "bool, default=False. To control the verbosity of the procedure.\n"
                                    },
                                    "shuffle": {
                                        "type": "boolean",
                                        "description": "bool, default=True. Whether to shuffle the data before splitting it in batches.\n"
                                    },
                                    "n_jobs": {
                                        "type": "integer",
                                        "description": "int, default=None. Number of parallel jobs to run.\nNone means 1 unless in a joblib.parallel_backend context.\n-1 means using all processors. See Glossary\nfor more details.\n"
                                    },
                                    "method": {
                                        "type": "string",
                                        "enum": [
                                            "lars",
                                            " cd"
                                        ],
                                        "description": "{\u2018lars\u2019, \u2018cd\u2019}, default=\u2019lars\u2019. \n'lars': uses the least angle regression method to solve the lasso\nproblem (linear_model.lars_path);\n'cd': uses the coordinate descent method to compute the\nLasso solution (linear_model.Lasso). Lars will be faster if\nthe estimated components are sparse.\n\n"
                                    },
                                    "random_state": {
                                        "type": "integer",
                                        "description": "int, RandomState instance or None, default=None. Used for initializing the dictionary when dict_init is not\nspecified, randomly shuffling the data when shuffle is set to\nTrue, and updating the dictionary. Pass an int for reproducible\nresults across multiple function calls.\nSee Glossary.\n"
                                    },
                                    "positive_dict": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Whether to enforce positivity when finding the dictionary.\n\nAdded in version 0.20.\n\n"
                                    },
                                    "positive_code": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Whether to enforce positivity when finding the code.\n\nAdded in version 0.20.\n\n"
                                    },
                                    "method_max_iter": {
                                        "type": "integer",
                                        "description": "int, default=1000. Maximum number of iterations to perform when solving the lasso problem.\n\nAdded in version 0.22.\n\n"
                                    },
                                    "tol": {
                                        "type": "float",
                                        "description": "float, default=1e-3. Control early stopping based on the norm of the differences in the\ndictionary between 2 steps.\nTo disable early stopping based on changes in the dictionary, set\ntol to 0.0.\n\nAdded in version 1.1.\n\n"
                                    },
                                    "max_no_improvement": {
                                        "type": "integer",
                                        "description": "int, default=10. Control early stopping based on the consecutive number of mini batches\nthat does not yield an improvement on the smoothed cost function.\nTo disable convergence detection based on cost function, set\nmax_no_improvement to None.\n\nAdded in version 1.1.\n\n"
                                    }
                                },
                                "required": [
                                    "X",
                                    "n_components=2"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "non_negative_factorization",
                        "func_desc": "Compute Non-negative Matrix Factorization (NMF).",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.non_negative_factorization.html#sklearn.decomposition.non_negative_factorization",
                        "function_definitions": {
                            "function_name": "non_negative_factorization",
                            "full_function": "sklearn.decomposition.non_negative_factorization(X, W=None, H=None, n_components='warn', *, init=None, update_H=True, solver='cd', beta_loss='frobenius', tol=0.0001, max_iter=200, alpha_W=0.0, alpha_H='same', l1_ratio=0.0, random_state=None, verbose=0, shuffle=False)",
                            "function_text": "Compute Non-negative Matrix Factorization (NMF). Find two non-negative matrices (W, H) whose product approximates the non-\nnegative matrix X. This factorization can be used for example for\ndimensionality reduction, source separation or topic extraction. The objective function is: Where: \\(||A||_{Fro}^2 = \\sum_{i,j} A_{ij}^2\\) (Frobenius norm) \\(||vec(A)||_1 = \\sum_{i,j} abs(A_{ij})\\) (Elementwise L1 norm) The generic norm \\(||X - WH||_{loss}^2\\) may represent\nthe Frobenius norm or another supported beta-divergence loss.\nThe choice between options is controlled by the beta_loss parameter. The regularization terms are scaled by n_features for W and by n_samples for\nH to keep their impact balanced with respect to one another and to the data fit\nterm as independent as possible of the size n_samples of the training set. The objective function is minimized with an alternating minimization of W\nand H. If H is given and update_H=False, it solves for W only. Note that the transformed data is named W and the components matrix is named H. In\nthe NMF literature, the naming convention is usually the opposite since the data\nmatrix X is transposed.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/glossary.html#term-random_state",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "Constant matrix.\n"
                                },
                                {
                                    "param_name": "W",
                                    "param_type": "array-like of shape (n_samples, n_components), default=None",
                                    "param_desc": "If init='custom', it is used as initial guess for the solution.\nIf update_H=False, it is initialised as an array of zeros, unless\nsolver='mu', then it is filled with values calculated by\nnp.sqrt(X.mean() / self._n_components).\nIf None, uses the initialisation method specified in init.\n"
                                },
                                {
                                    "param_name": "H",
                                    "param_type": "array-like of shape (n_components, n_features), default=None",
                                    "param_desc": "If init='custom', it is used as initial guess for the solution.\nIf update_H=False, it is used as a constant, to solve for W only.\nIf None, uses the initialisation method specified in init.\n"
                                },
                                {
                                    "param_name": "n_components",
                                    "param_type": "int or {\u2018auto\u2019} or None, default=None",
                                    "param_desc": "Number of components, if n_components is not set all features\nare kept.\nIf n_components='auto', the number of components is automatically inferred\nfrom W or H shapes.\n\nChanged in version 1.4: Added 'auto' value.\n\n"
                                },
                                {
                                    "param_name": "init",
                                    "param_type": "{\u2018random\u2019, \u2018nndsvd\u2019, \u2018nndsvda\u2019, \u2018nndsvdar\u2019, \u2018custom\u2019}, default=None",
                                    "param_desc": "Method used to initialize the procedure.\nValid options:\n\nNone: \u2018nndsvda\u2019 if n_components < n_features, otherwise \u2018random\u2019.\n\u2018random\u2019: non-negative random matrices, scaled with:\nsqrt(X.mean() / n_components)\n\u2018nndsvd\u2019: Nonnegative Double Singular Value Decomposition (NNDSVD)\ninitialization (better for sparseness)\n\u2018nndsvda\u2019: NNDSVD with zeros filled with the average of X\n(better when sparsity is not desired)\n\u2018nndsvdar\u2019: NNDSVD with zeros filled with small random values\n(generally faster, less accurate alternative to NNDSVDa\nfor when sparsity is not desired)\n\u2018custom\u2019: If update_H=True, use custom matrices W and H which must both\nbe provided. If update_H=False, then only custom matrix H is used.\n\n\nChanged in version 0.23: The default value of init changed from \u2018random\u2019 to None in 0.23.\n\n\nChanged in version 1.1: When init=None and n_components is less than n_samples and n_features\ndefaults to nndsvda instead of nndsvd.\n\n"
                                },
                                {
                                    "param_name": "update_H",
                                    "param_type": "bool, default=True",
                                    "param_desc": "Set to True, both W and H will be estimated from initial guesses.\nSet to False, only W will be estimated.\n"
                                },
                                {
                                    "param_name": "solver",
                                    "param_type": "{\u2018cd\u2019, \u2018mu\u2019}, default=\u2019cd\u2019",
                                    "param_desc": "Numerical solver to use:\n\n\u2018cd\u2019 is a Coordinate Descent solver that uses Fast Hierarchical\nAlternating Least Squares (Fast HALS).\n\u2018mu\u2019 is a Multiplicative Update solver.\n\n\nAdded in version 0.17: Coordinate Descent solver.\n\n\nAdded in version 0.19: Multiplicative Update solver.\n\n"
                                },
                                {
                                    "param_name": "beta_loss",
                                    "param_type": "float or {\u2018frobenius\u2019, \u2018kullback-leibler\u2019,             \u2018itakura-saito\u2019}, default=\u2019frobenius\u2019",
                                    "param_desc": "Beta divergence to be minimized, measuring the distance between X\nand the dot product WH. Note that values different from \u2018frobenius\u2019\n(or 2) and \u2018kullback-leibler\u2019 (or 1) lead to significantly slower\nfits. Note that for beta_loss <= 0 (or \u2018itakura-saito\u2019), the input\nmatrix X cannot contain zeros. Used only in \u2018mu\u2019 solver.\n\nAdded in version 0.19.\n\n"
                                },
                                {
                                    "param_name": "tol",
                                    "param_type": "float, default=1e-4",
                                    "param_desc": "Tolerance of the stopping condition.\n"
                                },
                                {
                                    "param_name": "max_iter",
                                    "param_type": "int, default=200",
                                    "param_desc": "Maximum number of iterations before timing out.\n"
                                },
                                {
                                    "param_name": "alpha_W",
                                    "param_type": "float, default=0.0",
                                    "param_desc": "Constant that multiplies the regularization terms of W. Set it to zero\n(default) to have no regularization on W.\n\nAdded in version 1.0.\n\n"
                                },
                                {
                                    "param_name": "alpha_H",
                                    "param_type": "float or \u201csame\u201d, default=\u201dsame\u201d",
                                    "param_desc": "Constant that multiplies the regularization terms of H. Set it to zero to\nhave no regularization on H. If \u201csame\u201d (default), it takes the same value as\nalpha_W.\n\nAdded in version 1.0.\n\n"
                                },
                                {
                                    "param_name": "l1_ratio",
                                    "param_type": "float, default=0.0",
                                    "param_desc": "The regularization mixing parameter, with 0 <= l1_ratio <= 1.\nFor l1_ratio = 0 the penalty is an elementwise L2 penalty\n(aka Frobenius Norm).\nFor l1_ratio = 1 it is an elementwise L1 penalty.\nFor 0 < l1_ratio < 1, the penalty is a combination of L1 and L2.\n"
                                },
                                {
                                    "param_name": "random_state",
                                    "param_type": "int, RandomState instance or None, default=None",
                                    "param_desc": "Used for NMF initialisation (when init == \u2018nndsvdar\u2019 or\n\u2018random\u2019), and in Coordinate Descent. Pass an int for reproducible\nresults across multiple function calls.\nSee Glossary.\n"
                                },
                                {
                                    "param_name": "verbose",
                                    "param_type": "int, default=0",
                                    "param_desc": "The verbosity level.\n"
                                },
                                {
                                    "param_name": "shuffle",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If true, randomize the order of coordinates in the CD solver.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "non_negative_factorization",
                            "descriptions": "Compute Non-negative Matrix Factorization (NMF). Find two non-negative matrices (W, H) whose product approximates the non-\nnegative matrix X. This factorization can be used for example for\ndimensionality reduction, source separation or topic extraction. The objective function is: Where: \\(||A||_{Fro}^2 = \\sum_{i,j} A_{ij}^2\\) (Frobenius norm) \\(||vec(A)||_1 = \\sum_{i,j} abs(A_{ij})\\) (Elementwise L1 norm) The generic norm \\(||X - WH||_{loss}^2\\) may represent\nthe Frobenius norm or another supported beta-divergence loss.\nThe choice between options is controlled by the beta_loss parameter. The regularization terms are scaled by n_features for W and by n_samples for\nH to keep their impact balanced with respect to one another and to the data fit\nterm as independent as possible of the size n_samples of the training set. The objective function is minimized with an alternating minimization of W\nand H. If H is given and update_H=False, it solves for W only. Note that the transformed data is named W and the components matrix is named H. In\nthe NMF literature, the naming convention is usually the opposite since the data\nmatrix X is transposed.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). Constant matrix.\n"
                                    },
                                    "W": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_components), default=None. If init='custom', it is used as initial guess for the solution.\nIf update_H=False, it is initialised as an array of zeros, unless\nsolver='mu', then it is filled with values calculated by\nnp.sqrt(X.mean() / self._n_components).\nIf None, uses the initialisation method specified in init.\n"
                                    },
                                    "H": {
                                        "type": "array",
                                        "description": "array-like of shape (n_components, n_features), default=None. If init='custom', it is used as initial guess for the solution.\nIf update_H=False, it is used as a constant, to solve for W only.\nIf None, uses the initialisation method specified in init.\n"
                                    },
                                    "n_components": {
                                        "type": "integer",
                                        "description": "int or {\u2018auto\u2019} or None, default=None. Number of components, if n_components is not set all features\nare kept.\nIf n_components='auto', the number of components is automatically inferred\nfrom W or H shapes.\n\nChanged in version 1.4: Added 'auto' value.\n\n"
                                    },
                                    "init": {
                                        "type": "string",
                                        "enum": [
                                            "random",
                                            " nndsvd",
                                            " nndsvda",
                                            " nndsvdar",
                                            " custom"
                                        ],
                                        "description": "{\u2018random\u2019, \u2018nndsvd\u2019, \u2018nndsvda\u2019, \u2018nndsvdar\u2019, \u2018custom\u2019}, default=None. Method used to initialize the procedure.\nValid options:\n\nNone: \u2018nndsvda\u2019 if n_components < n_features, otherwise \u2018random\u2019.\n\u2018random\u2019: non-negative random matrices, scaled with:\nsqrt(X.mean() / n_components)\n\u2018nndsvd\u2019: Nonnegative Double Singular Value Decomposition (NNDSVD)\ninitialization (better for sparseness)\n\u2018nndsvda\u2019: NNDSVD with zeros filled with the average of X\n(better when sparsity is not desired)\n\u2018nndsvdar\u2019: NNDSVD with zeros filled with small random values\n(generally faster, less accurate alternative to NNDSVDa\nfor when sparsity is not desired)\n\u2018custom\u2019: If update_H=True, use custom matrices W and H which must both\nbe provided. If update_H=False, then only custom matrix H is used.\n\n\nChanged in version 0.23: The default value of init changed from \u2018random\u2019 to None in 0.23.\n\n\nChanged in version 1.1: When init=None and n_components is less than n_samples and n_features\ndefaults to nndsvda instead of nndsvd.\n\n"
                                    },
                                    "update_H": {
                                        "type": "boolean",
                                        "description": "bool, default=True. Set to True, both W and H will be estimated from initial guesses.\nSet to False, only W will be estimated.\n"
                                    },
                                    "solver": {
                                        "type": "string",
                                        "enum": [
                                            "cd",
                                            " mu"
                                        ],
                                        "description": "{\u2018cd\u2019, \u2018mu\u2019}, default=\u2019cd\u2019. Numerical solver to use:\n\n\u2018cd\u2019 is a Coordinate Descent solver that uses Fast Hierarchical\nAlternating Least Squares (Fast HALS).\n\u2018mu\u2019 is a Multiplicative Update solver.\n\n\nAdded in version 0.17: Coordinate Descent solver.\n\n\nAdded in version 0.19: Multiplicative Update solver.\n\n"
                                    },
                                    "beta_loss": {
                                        "type": "float",
                                        "description": "float or {\u2018frobenius\u2019, \u2018kullback-leibler\u2019,             \u2018itakura-saito\u2019}, default=\u2019frobenius\u2019. Beta divergence to be minimized, measuring the distance between X\nand the dot product WH. Note that values different from \u2018frobenius\u2019\n(or 2) and \u2018kullback-leibler\u2019 (or 1) lead to significantly slower\nfits. Note that for beta_loss <= 0 (or \u2018itakura-saito\u2019), the input\nmatrix X cannot contain zeros. Used only in \u2018mu\u2019 solver.\n\nAdded in version 0.19.\n\n"
                                    },
                                    "tol": {
                                        "type": "float",
                                        "description": "float, default=1e-4. Tolerance of the stopping condition.\n"
                                    },
                                    "max_iter": {
                                        "type": "integer",
                                        "description": "int, default=200. Maximum number of iterations before timing out.\n"
                                    },
                                    "alpha_W": {
                                        "type": "float",
                                        "description": "float, default=0.0. Constant that multiplies the regularization terms of W. Set it to zero\n(default) to have no regularization on W.\n\nAdded in version 1.0.\n\n"
                                    },
                                    "alpha_H": {
                                        "type": "float",
                                        "description": "float or \u201csame\u201d, default=\u201dsame\u201d. Constant that multiplies the regularization terms of H. Set it to zero to\nhave no regularization on H. If \u201csame\u201d (default), it takes the same value as\nalpha_W.\n\nAdded in version 1.0.\n\n"
                                    },
                                    "l1_ratio": {
                                        "type": "float",
                                        "description": "float, default=0.0. The regularization mixing parameter, with 0 <= l1_ratio <= 1.\nFor l1_ratio = 0 the penalty is an elementwise L2 penalty\n(aka Frobenius Norm).\nFor l1_ratio = 1 it is an elementwise L1 penalty.\nFor 0 < l1_ratio < 1, the penalty is a combination of L1 and L2.\n"
                                    },
                                    "random_state": {
                                        "type": "integer",
                                        "description": "int, RandomState instance or None, default=None. Used for NMF initialisation (when init == \u2018nndsvdar\u2019 or\n\u2018random\u2019), and in Coordinate Descent. Pass an int for reproducible\nresults across multiple function calls.\nSee Glossary.\n"
                                    },
                                    "verbose": {
                                        "type": "integer",
                                        "description": "int, default=0. The verbosity level.\n"
                                    },
                                    "shuffle": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If true, randomize the order of coordinates in the CD solver.\n"
                                    }
                                },
                                "required": [
                                    "X",
                                    "W=None",
                                    "H=None",
                                    "n_components='warn'"
                                ]
                            }
                        }
                    }
                ]
            }
        ],
        "name": "sklearn.decomposition",
        "url": "https://scikit-learn.org/stable/api/sklearn.decomposition.html"
    },
    "sklearn.discriminant_analysis.html": {
        "functions": [
            {
                "defaults": [
                    {
                        "func_name": "LinearDiscriminantAnalysis",
                        "func_desc": "Linear Discriminant Analysis.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.html#sklearn.discriminant_analysis.LinearDiscriminantAnalysis",
                        "function_definitions": {
                            "function_name": "LinearDiscriminantAnalysis",
                            "full_function": "class sklearn.discriminant_analysis.LinearDiscriminantAnalysis(solver='svd', shrinkage=None, priors=None, n_components=None, store_covariance=False, tol=0.0001, covariance_estimator=None)",
                            "function_text": "Linear Discriminant Analysis. A classifier with a linear decision boundary, generated by fitting class\nconditional densities to the data and using Bayes\u2019 rule. The model fits a Gaussian density to each class, assuming that all classes\nshare the same covariance matrix. The fitted model can also be used to reduce the dimensionality of the input\nby projecting it to the most discriminative directions, using the\ntransform method. Added in version 0.17. For a comparison between\nLinearDiscriminantAnalysis\nand QuadraticDiscriminantAnalysis, see\nLinear and Quadratic Discriminant Analysis with covariance ellipsoid. Read more in the User Guide.",
                            "func_text_user_guide": "#sklearn.discriminant_analysis.LinearDiscriminantAnalysis",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples, n_features)",
                                    "param_desc": "Input data.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "LinearDiscriminantAnalysis",
                            "descriptions": "Linear Discriminant Analysis. A classifier with a linear decision boundary, generated by fitting class\nconditional densities to the data and using Bayes\u2019 rule. The model fits a Gaussian density to each class, assuming that all classes\nshare the same covariance matrix. The fitted model can also be used to reduce the dimensionality of the input\nby projecting it to the most discriminative directions, using the\ntransform method. Added in version 0.17. For a comparison between\nLinearDiscriminantAnalysis\nand QuadraticDiscriminantAnalysis, see\nLinear and Quadratic Discriminant Analysis with covariance ellipsoid. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_features). Input data.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "QuadraticDiscriminantAnalysis",
                        "func_desc": "Quadratic Discriminant Analysis.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.html#sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis",
                        "function_definitions": {
                            "function_name": "QuadraticDiscriminantAnalysis",
                            "full_function": "class sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis(*, priors=None, reg_param=0.0, store_covariance=False, tol=0.0001)",
                            "function_text": "Quadratic Discriminant Analysis. A classifier with a quadratic decision boundary, generated\nby fitting class conditional densities to the data\nand using Bayes\u2019 rule. The model fits a Gaussian density to each class. Added in version 0.17. For a comparison between\nQuadraticDiscriminantAnalysis\nand LinearDiscriminantAnalysis, see\nLinear and Quadratic Discriminant Analysis with covariance ellipsoid. Read more in the User Guide.",
                            "func_text_user_guide": "#sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "QuadraticDiscriminantAnalysis",
                            "descriptions": "Quadratic Discriminant Analysis. A classifier with a quadratic decision boundary, generated\nby fitting class conditional densities to the data\nand using Bayes\u2019 rule. The model fits a Gaussian density to each class. Added in version 0.17. For a comparison between\nQuadraticDiscriminantAnalysis\nand LinearDiscriminantAnalysis, see\nLinear and Quadratic Discriminant Analysis with covariance ellipsoid. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    }
                ]
            }
        ],
        "name": "sklearn.discriminant_analysis",
        "url": "https://scikit-learn.org/stable/api/sklearn.discriminant_analysis.html"
    },
    "sklearn.dummy.html": {
        "functions": [
            {
                "defaults": [
                    {
                        "func_name": "DummyClassifier",
                        "func_desc": "DummyClassifier makes predictions that ignore the input features.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.dummy.DummyClassifier.html#sklearn.dummy.DummyClassifier",
                        "function_definitions": {
                            "function_name": "DummyClassifier",
                            "full_function": "class sklearn.dummy.DummyClassifier(*, strategy='prior', random_state=None, constant=None)",
                            "function_text": "DummyClassifier makes predictions that ignore the input features. This classifier serves as a simple baseline to compare against other more\ncomplex classifiers. The specific behavior of the baseline is selected with the strategy\nparameter. All strategies make predictions that ignore the input feature values passed\nas the X argument to fit and predict. The predictions, however,\ntypically depend on values observed in the y parameter passed to fit. Note that the \u201cstratified\u201d and \u201cuniform\u201d strategies lead to\nnon-deterministic predictions that can be rendered deterministic by setting\nthe random_state parameter if needed. The other strategies are naturally\ndeterministic and, once fit, always return the same constant prediction\nfor any value of X. Read more in the User Guide. Added in version 0.13.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/model_evaluation.html#dummy-estimators",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "DummyClassifier",
                            "descriptions": "DummyClassifier makes predictions that ignore the input features. This classifier serves as a simple baseline to compare against other more\ncomplex classifiers. The specific behavior of the baseline is selected with the strategy\nparameter. All strategies make predictions that ignore the input feature values passed\nas the X argument to fit and predict. The predictions, however,\ntypically depend on values observed in the y parameter passed to fit. Note that the \u201cstratified\u201d and \u201cuniform\u201d strategies lead to\nnon-deterministic predictions that can be rendered deterministic by setting\nthe random_state parameter if needed. The other strategies are naturally\ndeterministic and, once fit, always return the same constant prediction\nfor any value of X. Read more in the User Guide. Added in version 0.13.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "DummyRegressor",
                        "func_desc": "Regressor that makes predictions using simple rules.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.dummy.DummyRegressor.html#sklearn.dummy.DummyRegressor",
                        "function_definitions": {
                            "function_name": "DummyRegressor",
                            "full_function": "class sklearn.dummy.DummyRegressor(*, strategy='mean', constant=None, quantile=None)",
                            "function_text": "Regressor that makes predictions using simple rules. This regressor is useful as a simple baseline to compare with other\n(real) regressors. Do not use it for real problems. Read more in the User Guide. Added in version 0.13.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/model_evaluation.html#dummy-estimators",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "DummyRegressor",
                            "descriptions": "Regressor that makes predictions using simple rules. This regressor is useful as a simple baseline to compare with other\n(real) regressors. Do not use it for real problems. Read more in the User Guide. Added in version 0.13.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    }
                ]
            }
        ],
        "name": "sklearn.dummy",
        "url": "https://scikit-learn.org/stable/api/sklearn.dummy.html"
    },
    "sklearn.ensemble.html": {
        "functions": [
            {
                "defaults": [
                    {
                        "func_name": "AdaBoostClassifier",
                        "func_desc": "An AdaBoost classifier.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.AdaBoostClassifier.html#sklearn.ensemble.AdaBoostClassifier",
                        "function_definitions": {
                            "function_name": "AdaBoostClassifier",
                            "full_function": "class sklearn.ensemble.AdaBoostClassifier(estimator=None, *, n_estimators=50, learning_rate=1.0, algorithm='SAMME.R', random_state=None)",
                            "function_text": "An AdaBoost classifier. An AdaBoost [1] classifier is a meta-estimator that begins by fitting a\nclassifier on the original dataset and then fits additional copies of the\nclassifier on the same dataset but where the weights of incorrectly\nclassified instances are adjusted such that subsequent classifiers focus\nmore on difficult cases. This class implements the algorithm based on [2]. Read more in the User Guide. Added in version 0.14.",
                            "func_text_user_guide": "#r33e4ec8c4ad5-1",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "The training input samples. Sparse matrix can be CSC, CSR, COO,\nDOK, or LIL. COO, DOK, and LIL are converted to CSR.\n"
                                },
                                {
                                    "param_name": "y",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "Labels for X.\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Sample weights.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "AdaBoostClassifier",
                            "descriptions": "An AdaBoost classifier. An AdaBoost [1] classifier is a meta-estimator that begins by fitting a\nclassifier on the original dataset and then fits additional copies of the\nclassifier on the same dataset but where the weights of incorrectly\nclassified instances are adjusted such that subsequent classifiers focus\nmore on difficult cases. This class implements the algorithm based on [2]. Read more in the User Guide. Added in version 0.14.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). The training input samples. Sparse matrix can be CSC, CSR, COO,\nDOK, or LIL. COO, DOK, and LIL are converted to CSR.\n"
                                    },
                                    "y": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). Labels for X.\n"
                                    },
                                    "sample_weight": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Sample weights.\n"
                                    }
                                },
                                "required": [
                                    "estimator=None"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "BaggingClassifier",
                        "func_desc": "A Bagging classifier.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.BaggingClassifier.html#sklearn.ensemble.BaggingClassifier",
                        "function_definitions": {
                            "function_name": "BaggingClassifier",
                            "full_function": "class sklearn.ensemble.BaggingClassifier(estimator=None, n_estimators=10, *, max_samples=1.0, max_features=1.0, bootstrap=True, bootstrap_features=False, oob_score=False, warm_start=False, n_jobs=None, random_state=None, verbose=0)",
                            "function_text": "A Bagging classifier. A Bagging classifier is an ensemble meta-estimator that fits base\nclassifiers each on random subsets of the original dataset and then\naggregate their individual predictions (either by voting or by averaging)\nto form a final prediction. Such a meta-estimator can typically be used as\na way to reduce the variance of a black-box estimator (e.g., a decision\ntree), by introducing randomization into its construction procedure and\nthen making an ensemble out of it. This algorithm encompasses several works from the literature. When random\nsubsets of the dataset are drawn as random subsets of the samples, then\nthis algorithm is known as Pasting [1]. If samples are drawn with\nreplacement, then the method is known as Bagging [2]. When random subsets\nof the dataset are drawn as random subsets of the features, then the method\nis known as Random Subspaces [3]. Finally, when base estimators are built\non subsets of both samples and features, then the method is known as\nRandom Patches [4]. Read more in the User Guide. Added in version 0.15.",
                            "func_text_user_guide": "#rb1846455d0e5-1",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "BaggingClassifier",
                            "descriptions": "A Bagging classifier. A Bagging classifier is an ensemble meta-estimator that fits base\nclassifiers each on random subsets of the original dataset and then\naggregate their individual predictions (either by voting or by averaging)\nto form a final prediction. Such a meta-estimator can typically be used as\na way to reduce the variance of a black-box estimator (e.g., a decision\ntree), by introducing randomization into its construction procedure and\nthen making an ensemble out of it. This algorithm encompasses several works from the literature. When random\nsubsets of the dataset are drawn as random subsets of the samples, then\nthis algorithm is known as Pasting [1]. If samples are drawn with\nreplacement, then the method is known as Bagging [2]. When random subsets\nof the dataset are drawn as random subsets of the features, then the method\nis known as Random Subspaces [3]. Finally, when base estimators are built\non subsets of both samples and features, then the method is known as\nRandom Patches [4]. Read more in the User Guide. Added in version 0.15.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": [
                                    "estimator=None",
                                    "n_estimators=10"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "ExtraTreesClassifier",
                        "func_desc": "An extra-trees classifier.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.ExtraTreesClassifier.html#sklearn.ensemble.ExtraTreesClassifier",
                        "function_definitions": {
                            "function_name": "ExtraTreesClassifier",
                            "full_function": "class sklearn.ensemble.ExtraTreesClassifier(n_estimators=100, *, criterion='gini', max_depth=None, min_samples_split=2, min_samples_leaf=1, min_weight_fraction_leaf=0.0, max_features='sqrt', max_leaf_nodes=None, min_impurity_decrease=0.0, bootstrap=False, oob_score=False, n_jobs=None, random_state=None, verbose=0, warm_start=False, class_weight=None, ccp_alpha=0.0, max_samples=None, monotonic_cst=None)",
                            "function_text": "An extra-trees classifier. This class implements a meta estimator that fits a number of\nrandomized decision trees (a.k.a. extra-trees) on various sub-samples\nof the dataset and uses averaging to improve the predictive accuracy\nand control over-fitting. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/ensemble.html#forest",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "ExtraTreesClassifier",
                            "descriptions": "An extra-trees classifier. This class implements a meta estimator that fits a number of\nrandomized decision trees (a.k.a. extra-trees) on various sub-samples\nof the dataset and uses averaging to improve the predictive accuracy\nand control over-fitting. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": [
                                    "n_estimators=100"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "GradientBoostingClassifier",
                        "func_desc": "Gradient Boosting for classification.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.GradientBoostingClassifier.html#sklearn.ensemble.GradientBoostingClassifier",
                        "function_definitions": {
                            "function_name": "GradientBoostingClassifier",
                            "full_function": "class sklearn.ensemble.GradientBoostingClassifier(*, loss='log_loss', learning_rate=0.1, n_estimators=100, subsample=1.0, criterion='friedman_mse', min_samples_split=2, min_samples_leaf=1, min_weight_fraction_leaf=0.0, max_depth=3, min_impurity_decrease=0.0, init=None, random_state=None, max_features=None, verbose=0, max_leaf_nodes=None, warm_start=False, validation_fraction=0.1, n_iter_no_change=None, tol=0.0001, ccp_alpha=0.0)",
                            "function_text": "Gradient Boosting for classification. This algorithm builds an additive model in a forward stage-wise fashion; it\nallows for the optimization of arbitrary differentiable loss functions. In\neach stage n_classes_ regression trees are fit on the negative gradient\nof the loss function, e.g. binary or multiclass log loss. Binary\nclassification is a special case where only a single regression tree is\ninduced. sklearn.ensemble.HistGradientBoostingClassifier is a much faster\nvariant of this algorithm for intermediate datasets (n_samples >= 10_000). Read more in the User Guide.",
                            "func_text_user_guide": "sklearn.ensemble.HistGradientBoostingClassifier.html#sklearn.ensemble.HistGradientBoostingClassifier",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "The input samples. Internally, it will be converted to\ndtype=np.float32 and if a sparse matrix is provided\nto a sparse csr_matrix.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "GradientBoostingClassifier",
                            "descriptions": "Gradient Boosting for classification. This algorithm builds an additive model in a forward stage-wise fashion; it\nallows for the optimization of arbitrary differentiable loss functions. In\neach stage n_classes_ regression trees are fit on the negative gradient\nof the loss function, e.g. binary or multiclass log loss. Binary\nclassification is a special case where only a single regression tree is\ninduced. sklearn.ensemble.HistGradientBoostingClassifier is a much faster\nvariant of this algorithm for intermediate datasets (n_samples >= 10_000). Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). The input samples. Internally, it will be converted to\ndtype=np.float32 and if a sparse matrix is provided\nto a sparse csr_matrix.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "HistGradientBoostingClassifier",
                        "func_desc": "Histogram-based Gradient Boosting Classification Tree.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.HistGradientBoostingClassifier.html#sklearn.ensemble.HistGradientBoostingClassifier",
                        "function_definitions": {
                            "function_name": "HistGradientBoostingClassifier",
                            "full_function": "class sklearn.ensemble.HistGradientBoostingClassifier(loss='log_loss', *, learning_rate=0.1, max_iter=100, max_leaf_nodes=31, max_depth=None, min_samples_leaf=20, l2_regularization=0.0, max_features=1.0, max_bins=255, categorical_features='warn', monotonic_cst=None, interaction_cst=None, warm_start=False, early_stopping='auto', scoring='loss', validation_fraction=0.1, n_iter_no_change=10, tol=1e-07, verbose=0, random_state=None, class_weight=None)",
                            "function_text": "Histogram-based Gradient Boosting Classification Tree. This estimator is much faster than\nGradientBoostingClassifier\nfor big datasets (n_samples >= 10 000). This estimator has native support for missing values (NaNs). During\ntraining, the tree grower learns at each split point whether samples\nwith missing values should go to the left or right child, based on the\npotential gain. When predicting, samples with missing values are\nassigned to the left or right child consequently. If no missing values\nwere encountered for a given feature during training, then samples with\nmissing values are mapped to whichever child has the most samples. This implementation is inspired by\nLightGBM. Read more in the User Guide. Added in version 0.21.",
                            "func_text_user_guide": "sklearn.ensemble.GradientBoostingClassifier.html#sklearn.ensemble.GradientBoostingClassifier",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples, n_features)",
                                    "param_desc": "The input samples.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "HistGradientBoostingClassifier",
                            "descriptions": "Histogram-based Gradient Boosting Classification Tree. This estimator is much faster than\nGradientBoostingClassifier\nfor big datasets (n_samples >= 10 000). This estimator has native support for missing values (NaNs). During\ntraining, the tree grower learns at each split point whether samples\nwith missing values should go to the left or right child, based on the\npotential gain. When predicting, samples with missing values are\nassigned to the left or right child consequently. If no missing values\nwere encountered for a given feature during training, then samples with\nmissing values are mapped to whichever child has the most samples. This implementation is inspired by\nLightGBM. Read more in the User Guide. Added in version 0.21.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_features). The input samples.\n"
                                    }
                                },
                                "required": [
                                    "loss='log_loss'"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "IsolationForest",
                        "func_desc": "Isolation Forest Algorithm.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.IsolationForest.html#sklearn.ensemble.IsolationForest",
                        "function_definitions": {
                            "function_name": "IsolationForest",
                            "full_function": "class sklearn.ensemble.IsolationForest(*, n_estimators=100, max_samples='auto', contamination='auto', max_features=1.0, bootstrap=False, n_jobs=None, random_state=None, verbose=0, warm_start=False)",
                            "function_text": "Isolation Forest Algorithm. Return the anomaly score of each sample using the IsolationForest algorithm The IsolationForest \u2018isolates\u2019 observations by randomly selecting a feature\nand then randomly selecting a split value between the maximum and minimum\nvalues of the selected feature. Since recursive partitioning can be represented by a tree structure, the\nnumber of splittings required to isolate a sample is equivalent to the path\nlength from the root node to the terminating node. This path length, averaged over a forest of such random trees, is a\nmeasure of normality and our decision function. Random partitioning produces noticeably shorter paths for anomalies.\nHence, when a forest of random trees collectively produce shorter path\nlengths for particular samples, they are highly likely to be anomalies. Read more in the User Guide. Added in version 0.18.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/outlier_detection.html#isolation-forest",
                            "parameter_names_desc": [
                                {
                                    "param_name": "**params",
                                    "param_type": "dict",
                                    "param_desc": "Estimator parameters.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "IsolationForest",
                            "descriptions": "Isolation Forest Algorithm. Return the anomaly score of each sample using the IsolationForest algorithm The IsolationForest \u2018isolates\u2019 observations by randomly selecting a feature\nand then randomly selecting a split value between the maximum and minimum\nvalues of the selected feature. Since recursive partitioning can be represented by a tree structure, the\nnumber of splittings required to isolate a sample is equivalent to the path\nlength from the root node to the terminating node. This path length, averaged over a forest of such random trees, is a\nmeasure of normality and our decision function. Random partitioning produces noticeably shorter paths for anomalies.\nHence, when a forest of random trees collectively produce shorter path\nlengths for particular samples, they are highly likely to be anomalies. Read more in the User Guide. Added in version 0.18.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "**params": {
                                        "type": "dict",
                                        "description": "dict. Estimator parameters.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "RandomForestRegressor",
                        "func_desc": "A random forest regressor.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestRegressor.html#sklearn.ensemble.RandomForestRegressor",
                        "function_definitions": {
                            "function_name": "RandomForestRegressor",
                            "full_function": "class sklearn.ensemble.RandomForestRegressor(n_estimators=100, *, criterion='squared_error', max_depth=None, min_samples_split=2, min_samples_leaf=1, min_weight_fraction_leaf=0.0, max_features=1.0, max_leaf_nodes=None, min_impurity_decrease=0.0, bootstrap=True, oob_score=False, n_jobs=None, random_state=None, verbose=0, warm_start=False, ccp_alpha=0.0, max_samples=None, monotonic_cst=None)",
                            "function_text": "A random forest regressor. A random forest is a meta estimator that fits a number of decision tree\nregressors on various sub-samples of the dataset and uses averaging to\nimprove the predictive accuracy and control over-fitting.\nTrees in the forest use the best split strategy, i.e. equivalent to passing\nsplitter=\"best\" to the underlying DecisionTreeRegressor.\nThe sub-sample size is controlled with the max_samples parameter if\nbootstrap=True (default), otherwise the whole dataset is used to build\neach tree. For a comparison between tree-based ensemble models see the example\nComparing Random Forests and Histogram Gradient Boosting models. Read more in the User Guide.",
                            "func_text_user_guide": "sklearn.tree.DecisionTreeRegressor.html#sklearn.tree.DecisionTreeRegressor",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "RandomForestRegressor",
                            "descriptions": "A random forest regressor. A random forest is a meta estimator that fits a number of decision tree\nregressors on various sub-samples of the dataset and uses averaging to\nimprove the predictive accuracy and control over-fitting.\nTrees in the forest use the best split strategy, i.e. equivalent to passing\nsplitter=\"best\" to the underlying DecisionTreeRegressor.\nThe sub-sample size is controlled with the max_samples parameter if\nbootstrap=True (default), otherwise the whole dataset is used to build\neach tree. For a comparison between tree-based ensemble models see the example\nComparing Random Forests and Histogram Gradient Boosting models. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": [
                                    "n_estimators=100"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "StackingClassifier",
                        "func_desc": "Stack of estimators with a final classifier.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.StackingClassifier.html#sklearn.ensemble.StackingClassifier",
                        "function_definitions": {
                            "function_name": "StackingClassifier",
                            "full_function": "class sklearn.ensemble.StackingClassifier(estimators, final_estimator=None, *, cv=None, stack_method='auto', n_jobs=None, passthrough=False, verbose=0)",
                            "function_text": "Stack of estimators with a final classifier. Stacked generalization consists in stacking the output of individual\nestimator and use a classifier to compute the final prediction. Stacking\nallows to use the strength of each individual estimator by using their\noutput as input of a final estimator. Note that estimators_ are fitted on the full X while final_estimator_\nis trained using cross-validated predictions of the base estimators using\ncross_val_predict. Read more in the User Guide. Added in version 0.22.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/ensemble.html#stacking",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "Training vectors, where n_samples is the number of samples and\nn_features is the number of features.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "StackingClassifier",
                            "descriptions": "Stack of estimators with a final classifier. Stacked generalization consists in stacking the output of individual\nestimator and use a classifier to compute the final prediction. Stacking\nallows to use the strength of each individual estimator by using their\noutput as input of a final estimator. Note that estimators_ are fitted on the full X while final_estimator_\nis trained using cross-validated predictions of the base estimators using\ncross_val_predict. Read more in the User Guide. Added in version 0.22.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). Training vectors, where n_samples is the number of samples and\nn_features is the number of features.\n"
                                    }
                                },
                                "required": [
                                    "estimators",
                                    "final_estimator=None"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "VotingClassifier",
                        "func_desc": "Soft Voting/Majority Rule classifier for unfitted estimators.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.VotingClassifier.html#sklearn.ensemble.VotingClassifier",
                        "function_definitions": {
                            "function_name": "VotingClassifier",
                            "full_function": "class sklearn.ensemble.VotingClassifier(estimators, *, voting='hard', weights=None, n_jobs=None, flatten_transform=True, verbose=False)",
                            "function_text": "Soft Voting/Majority Rule classifier for unfitted estimators. Read more in the User Guide. Added in version 0.17.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/ensemble.html#voting-classifier",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "Training vectors, where n_samples is the number of samples and\nn_features is the number of features.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "VotingClassifier",
                            "descriptions": "Soft Voting/Majority Rule classifier for unfitted estimators. Read more in the User Guide. Added in version 0.17.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). Training vectors, where n_samples is the number of samples and\nn_features is the number of features.\n"
                                    }
                                },
                                "required": [
                                    "estimators"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "AdaBoostRegressor",
                        "func_desc": "An AdaBoost regressor.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.AdaBoostRegressor.html#sklearn.ensemble.AdaBoostRegressor",
                        "function_definitions": {
                            "function_name": "AdaBoostRegressor",
                            "full_function": "class sklearn.ensemble.AdaBoostRegressor(estimator=None, *, n_estimators=50, learning_rate=1.0, loss='linear', random_state=None)",
                            "function_text": "An AdaBoost regressor. An AdaBoost [1] regressor is a meta-estimator that begins by fitting a\nregressor on the original dataset and then fits additional copies of the\nregressor on the same dataset but where the weights of instances are\nadjusted according to the error of the current prediction. As such,\nsubsequent regressors focus more on difficult cases. This class implements the algorithm known as AdaBoost.R2 [2]. Read more in the User Guide. Added in version 0.14.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/ensemble.html#adaboost",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "The training input samples. Sparse matrix can be CSC, CSR, COO,\nDOK, or LIL. COO, DOK, and LIL are converted to CSR.\n"
                                },
                                {
                                    "param_name": "y",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "Labels for X.\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Sample weights.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "AdaBoostRegressor",
                            "descriptions": "An AdaBoost regressor. An AdaBoost [1] regressor is a meta-estimator that begins by fitting a\nregressor on the original dataset and then fits additional copies of the\nregressor on the same dataset but where the weights of instances are\nadjusted according to the error of the current prediction. As such,\nsubsequent regressors focus more on difficult cases. This class implements the algorithm known as AdaBoost.R2 [2]. Read more in the User Guide. Added in version 0.14.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). The training input samples. Sparse matrix can be CSC, CSR, COO,\nDOK, or LIL. COO, DOK, and LIL are converted to CSR.\n"
                                    },
                                    "y": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). Labels for X.\n"
                                    },
                                    "sample_weight": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Sample weights.\n"
                                    }
                                },
                                "required": [
                                    "estimator=None"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "BaggingRegressor",
                        "func_desc": "A Bagging regressor.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.BaggingRegressor.html#sklearn.ensemble.BaggingRegressor",
                        "function_definitions": {
                            "function_name": "BaggingRegressor",
                            "full_function": "class sklearn.ensemble.BaggingRegressor(estimator=None, n_estimators=10, *, max_samples=1.0, max_features=1.0, bootstrap=True, bootstrap_features=False, oob_score=False, warm_start=False, n_jobs=None, random_state=None, verbose=0)",
                            "function_text": "A Bagging regressor. A Bagging regressor is an ensemble meta-estimator that fits base\nregressors each on random subsets of the original dataset and then\naggregate their individual predictions (either by voting or by averaging)\nto form a final prediction. Such a meta-estimator can typically be used as\na way to reduce the variance of a black-box estimator (e.g., a decision\ntree), by introducing randomization into its construction procedure and\nthen making an ensemble out of it. This algorithm encompasses several works from the literature. When random\nsubsets of the dataset are drawn as random subsets of the samples, then\nthis algorithm is known as Pasting [1]. If samples are drawn with\nreplacement, then the method is known as Bagging [2]. When random subsets\nof the dataset are drawn as random subsets of the features, then the method\nis known as Random Subspaces [3]. Finally, when base estimators are built\non subsets of both samples and features, then the method is known as\nRandom Patches [4]. Read more in the User Guide. Added in version 0.15.",
                            "func_text_user_guide": "#r4d113ba76fc0-1",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "BaggingRegressor",
                            "descriptions": "A Bagging regressor. A Bagging regressor is an ensemble meta-estimator that fits base\nregressors each on random subsets of the original dataset and then\naggregate their individual predictions (either by voting or by averaging)\nto form a final prediction. Such a meta-estimator can typically be used as\na way to reduce the variance of a black-box estimator (e.g., a decision\ntree), by introducing randomization into its construction procedure and\nthen making an ensemble out of it. This algorithm encompasses several works from the literature. When random\nsubsets of the dataset are drawn as random subsets of the samples, then\nthis algorithm is known as Pasting [1]. If samples are drawn with\nreplacement, then the method is known as Bagging [2]. When random subsets\nof the dataset are drawn as random subsets of the features, then the method\nis known as Random Subspaces [3]. Finally, when base estimators are built\non subsets of both samples and features, then the method is known as\nRandom Patches [4]. Read more in the User Guide. Added in version 0.15.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": [
                                    "estimator=None",
                                    "n_estimators=10"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "ExtraTreesRegressor",
                        "func_desc": "An extra-trees regressor.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.ExtraTreesRegressor.html#sklearn.ensemble.ExtraTreesRegressor",
                        "function_definitions": {
                            "function_name": "ExtraTreesRegressor",
                            "full_function": "class sklearn.ensemble.ExtraTreesRegressor(n_estimators=100, *, criterion='squared_error', max_depth=None, min_samples_split=2, min_samples_leaf=1, min_weight_fraction_leaf=0.0, max_features=1.0, max_leaf_nodes=None, min_impurity_decrease=0.0, bootstrap=False, oob_score=False, n_jobs=None, random_state=None, verbose=0, warm_start=False, ccp_alpha=0.0, max_samples=None, monotonic_cst=None)",
                            "function_text": "An extra-trees regressor. This class implements a meta estimator that fits a number of\nrandomized decision trees (a.k.a. extra-trees) on various sub-samples\nof the dataset and uses averaging to improve the predictive accuracy\nand control over-fitting. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/ensemble.html#forest",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "ExtraTreesRegressor",
                            "descriptions": "An extra-trees regressor. This class implements a meta estimator that fits a number of\nrandomized decision trees (a.k.a. extra-trees) on various sub-samples\nof the dataset and uses averaging to improve the predictive accuracy\nand control over-fitting. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": [
                                    "n_estimators=100"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "GradientBoostingRegressor",
                        "func_desc": "Gradient Boosting for regression.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.GradientBoostingRegressor.html#sklearn.ensemble.GradientBoostingRegressor",
                        "function_definitions": {
                            "function_name": "GradientBoostingRegressor",
                            "full_function": "class sklearn.ensemble.GradientBoostingRegressor(*, loss='squared_error', learning_rate=0.1, n_estimators=100, subsample=1.0, criterion='friedman_mse', min_samples_split=2, min_samples_leaf=1, min_weight_fraction_leaf=0.0, max_depth=3, min_impurity_decrease=0.0, init=None, random_state=None, max_features=None, alpha=0.9, verbose=0, max_leaf_nodes=None, warm_start=False, validation_fraction=0.1, n_iter_no_change=None, tol=0.0001, ccp_alpha=0.0)",
                            "function_text": "Gradient Boosting for regression. This estimator builds an additive model in a forward stage-wise fashion; it\nallows for the optimization of arbitrary differentiable loss functions. In\neach stage a regression tree is fit on the negative gradient of the given\nloss function. sklearn.ensemble.HistGradientBoostingRegressor is a much faster\nvariant of this algorithm for intermediate datasets (n_samples >= 10_000). Read more in the User Guide.",
                            "func_text_user_guide": "sklearn.ensemble.HistGradientBoostingRegressor.html#sklearn.ensemble.HistGradientBoostingRegressor",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "The input samples. Internally, it will be converted to\ndtype=np.float32 and if a sparse matrix is provided\nto a sparse csr_matrix.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "GradientBoostingRegressor",
                            "descriptions": "Gradient Boosting for regression. This estimator builds an additive model in a forward stage-wise fashion; it\nallows for the optimization of arbitrary differentiable loss functions. In\neach stage a regression tree is fit on the negative gradient of the given\nloss function. sklearn.ensemble.HistGradientBoostingRegressor is a much faster\nvariant of this algorithm for intermediate datasets (n_samples >= 10_000). Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). The input samples. Internally, it will be converted to\ndtype=np.float32 and if a sparse matrix is provided\nto a sparse csr_matrix.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "HistGradientBoostingRegressor",
                        "func_desc": "Histogram-based Gradient Boosting Regression Tree.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.HistGradientBoostingRegressor.html#sklearn.ensemble.HistGradientBoostingRegressor",
                        "function_definitions": {
                            "function_name": "HistGradientBoostingRegressor",
                            "full_function": "class sklearn.ensemble.HistGradientBoostingRegressor(loss='squared_error', *, quantile=None, learning_rate=0.1, max_iter=100, max_leaf_nodes=31, max_depth=None, min_samples_leaf=20, l2_regularization=0.0, max_features=1.0, max_bins=255, categorical_features='warn', monotonic_cst=None, interaction_cst=None, warm_start=False, early_stopping='auto', scoring='loss', validation_fraction=0.1, n_iter_no_change=10, tol=1e-07, verbose=0, random_state=None)",
                            "function_text": "Histogram-based Gradient Boosting Regression Tree. This estimator is much faster than\nGradientBoostingRegressor\nfor big datasets (n_samples >= 10 000). This estimator has native support for missing values (NaNs). During\ntraining, the tree grower learns at each split point whether samples\nwith missing values should go to the left or right child, based on the\npotential gain. When predicting, samples with missing values are\nassigned to the left or right child consequently. If no missing values\nwere encountered for a given feature during training, then samples with\nmissing values are mapped to whichever child has the most samples.\nSee Features in Histogram Gradient Boosting Trees for a\nusecase example of this feature. This implementation is inspired by\nLightGBM. Read more in the User Guide. Added in version 0.21.",
                            "func_text_user_guide": "sklearn.ensemble.GradientBoostingRegressor.html#sklearn.ensemble.GradientBoostingRegressor",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples, n_features)",
                                    "param_desc": "The input samples.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "HistGradientBoostingRegressor",
                            "descriptions": "Histogram-based Gradient Boosting Regression Tree. This estimator is much faster than\nGradientBoostingRegressor\nfor big datasets (n_samples >= 10 000). This estimator has native support for missing values (NaNs). During\ntraining, the tree grower learns at each split point whether samples\nwith missing values should go to the left or right child, based on the\npotential gain. When predicting, samples with missing values are\nassigned to the left or right child consequently. If no missing values\nwere encountered for a given feature during training, then samples with\nmissing values are mapped to whichever child has the most samples.\nSee Features in Histogram Gradient Boosting Trees for a\nusecase example of this feature. This implementation is inspired by\nLightGBM. Read more in the User Guide. Added in version 0.21.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_features). The input samples.\n"
                                    }
                                },
                                "required": [
                                    "loss='squared_error'"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "RandomForestClassifier",
                        "func_desc": "A random forest classifier.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html#sklearn.ensemble.RandomForestClassifier",
                        "function_definitions": {
                            "function_name": "RandomForestClassifier",
                            "full_function": "class sklearn.ensemble.RandomForestClassifier(n_estimators=100, *, criterion='gini', max_depth=None, min_samples_split=2, min_samples_leaf=1, min_weight_fraction_leaf=0.0, max_features='sqrt', max_leaf_nodes=None, min_impurity_decrease=0.0, bootstrap=True, oob_score=False, n_jobs=None, random_state=None, verbose=0, warm_start=False, class_weight=None, ccp_alpha=0.0, max_samples=None, monotonic_cst=None)",
                            "function_text": "A random forest classifier. A random forest is a meta estimator that fits a number of decision tree\nclassifiers on various sub-samples of the dataset and uses averaging to\nimprove the predictive accuracy and control over-fitting.\nTrees in the forest use the best split strategy, i.e. equivalent to passing\nsplitter=\"best\" to the underlying DecisionTreeRegressor.\nThe sub-sample size is controlled with the max_samples parameter if\nbootstrap=True (default), otherwise the whole dataset is used to build\neach tree. For a comparison between tree-based ensemble models see the example\nComparing Random Forests and Histogram Gradient Boosting models. Read more in the User Guide.",
                            "func_text_user_guide": "sklearn.tree.DecisionTreeRegressor.html#sklearn.tree.DecisionTreeRegressor",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "RandomForestClassifier",
                            "descriptions": "A random forest classifier. A random forest is a meta estimator that fits a number of decision tree\nclassifiers on various sub-samples of the dataset and uses averaging to\nimprove the predictive accuracy and control over-fitting.\nTrees in the forest use the best split strategy, i.e. equivalent to passing\nsplitter=\"best\" to the underlying DecisionTreeRegressor.\nThe sub-sample size is controlled with the max_samples parameter if\nbootstrap=True (default), otherwise the whole dataset is used to build\neach tree. For a comparison between tree-based ensemble models see the example\nComparing Random Forests and Histogram Gradient Boosting models. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": [
                                    "n_estimators=100"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "RandomTreesEmbedding",
                        "func_desc": "An ensemble of totally random trees.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomTreesEmbedding.html#sklearn.ensemble.RandomTreesEmbedding",
                        "function_definitions": {
                            "function_name": "RandomTreesEmbedding",
                            "full_function": "class sklearn.ensemble.RandomTreesEmbedding(n_estimators=100, *, max_depth=5, min_samples_split=2, min_samples_leaf=1, min_weight_fraction_leaf=0.0, max_leaf_nodes=None, min_impurity_decrease=0.0, sparse_output=True, n_jobs=None, random_state=None, verbose=0, warm_start=False)",
                            "function_text": "An ensemble of totally random trees. An unsupervised transformation of a dataset to a high-dimensional\nsparse representation. A datapoint is coded according to which leaf of\neach tree it is sorted into. Using a one-hot encoding of the leaves,\nthis leads to a binary coding with as many ones as there are trees in\nthe forest. The dimensionality of the resulting representation is\nn_out <= n_estimators * max_leaf_nodes. If max_leaf_nodes == None,\nthe number of leaf nodes is at most n_estimators * 2 ** max_depth. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/ensemble.html#random-trees-embedding",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "Input data to be transformed. Use dtype=np.float32 for maximum\nefficiency. Sparse matrices are also supported, use sparse\ncsr_matrix for maximum efficiency.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "RandomTreesEmbedding",
                            "descriptions": "An ensemble of totally random trees. An unsupervised transformation of a dataset to a high-dimensional\nsparse representation. A datapoint is coded according to which leaf of\neach tree it is sorted into. Using a one-hot encoding of the leaves,\nthis leads to a binary coding with as many ones as there are trees in\nthe forest. The dimensionality of the resulting representation is\nn_out <= n_estimators * max_leaf_nodes. If max_leaf_nodes == None,\nthe number of leaf nodes is at most n_estimators * 2 ** max_depth. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). Input data to be transformed. Use dtype=np.float32 for maximum\nefficiency. Sparse matrices are also supported, use sparse\ncsr_matrix for maximum efficiency.\n"
                                    }
                                },
                                "required": [
                                    "n_estimators=100"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "StackingRegressor",
                        "func_desc": "Stack of estimators with a final regressor.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.StackingRegressor.html#sklearn.ensemble.StackingRegressor",
                        "function_definitions": {
                            "function_name": "StackingRegressor",
                            "full_function": "class sklearn.ensemble.StackingRegressor(estimators, final_estimator=None, *, cv=None, n_jobs=None, passthrough=False, verbose=0)",
                            "function_text": "Stack of estimators with a final regressor. Stacked generalization consists in stacking the output of individual\nestimator and use a regressor to compute the final prediction. Stacking\nallows to use the strength of each individual estimator by using their\noutput as input of a final estimator. Note that estimators_ are fitted on the full X while final_estimator_\nis trained using cross-validated predictions of the base estimators using\ncross_val_predict. Read more in the User Guide. Added in version 0.22.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/ensemble.html#stacking",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "Training vectors, where n_samples is the number of samples and\nn_features is the number of features.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "StackingRegressor",
                            "descriptions": "Stack of estimators with a final regressor. Stacked generalization consists in stacking the output of individual\nestimator and use a regressor to compute the final prediction. Stacking\nallows to use the strength of each individual estimator by using their\noutput as input of a final estimator. Note that estimators_ are fitted on the full X while final_estimator_\nis trained using cross-validated predictions of the base estimators using\ncross_val_predict. Read more in the User Guide. Added in version 0.22.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). Training vectors, where n_samples is the number of samples and\nn_features is the number of features.\n"
                                    }
                                },
                                "required": [
                                    "estimators",
                                    "final_estimator=None"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "VotingRegressor",
                        "func_desc": "Prediction voting regressor for unfitted estimators.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.VotingRegressor.html#sklearn.ensemble.VotingRegressor",
                        "function_definitions": {
                            "function_name": "VotingRegressor",
                            "full_function": "class sklearn.ensemble.VotingRegressor(estimators, *, weights=None, n_jobs=None, verbose=False)",
                            "function_text": "Prediction voting regressor for unfitted estimators. A voting regressor is an ensemble meta-estimator that fits several base\nregressors, each on the whole dataset. Then it averages the individual\npredictions to form a final prediction. Read more in the User Guide. Added in version 0.21.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/ensemble.html#voting-regressor",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "The input samples.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "VotingRegressor",
                            "descriptions": "Prediction voting regressor for unfitted estimators. A voting regressor is an ensemble meta-estimator that fits several base\nregressors, each on the whole dataset. Then it averages the individual\npredictions to form a final prediction. Read more in the User Guide. Added in version 0.21.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). The input samples.\n"
                                    }
                                },
                                "required": [
                                    "estimators"
                                ]
                            }
                        }
                    }
                ]
            }
        ],
        "name": "sklearn.ensemble",
        "url": "https://scikit-learn.org/stable/api/sklearn.ensemble.html"
    },
    "sklearn.exceptions.html": {
        "functions": [
            {
                "defaults": [
                    {
                        "func_name": "ConvergenceWarning",
                        "func_desc": "Custom warning to capture convergence problems",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.exceptions.ConvergenceWarning.html#sklearn.exceptions.ConvergenceWarning",
                        "function_definitions": {
                            "function_name": "ConvergenceWarning",
                            "full_function": "exception sklearn.exceptions.ConvergenceWarning",
                            "function_text": "Custom warning to capture convergence problems Changed in version 0.18: Moved from sklearn.utils.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": []
                        },
                        "function_calling": {}
                    },
                    {
                        "func_name": "DataDimensionalityWarning",
                        "func_desc": "Custom warning to notify potential issues with data dimensionality.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.exceptions.DataDimensionalityWarning.html#sklearn.exceptions.DataDimensionalityWarning",
                        "function_definitions": {
                            "function_name": "DataDimensionalityWarning",
                            "full_function": "exception sklearn.exceptions.DataDimensionalityWarning",
                            "function_text": "Custom warning to notify potential issues with data dimensionality. For example, in random projection, this warning is raised when the\nnumber of components, which quantifies the dimensionality of the target\nprojection space, is higher than the number of features, which quantifies\nthe dimensionality of the original source space, to imply that the\ndimensionality of the problem will not be reduced. Changed in version 0.18: Moved from sklearn.utils.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": []
                        },
                        "function_calling": {}
                    },
                    {
                        "func_name": "FitFailedWarning",
                        "func_desc": "Warning class used if there is an error while fitting the estimator.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.exceptions.FitFailedWarning.html#sklearn.exceptions.FitFailedWarning",
                        "function_definitions": {
                            "function_name": "FitFailedWarning",
                            "full_function": "exception sklearn.exceptions.FitFailedWarning",
                            "function_text": "Warning class used if there is an error while fitting the estimator. This Warning is used in meta estimators GridSearchCV and RandomizedSearchCV\nand the cross-validation helper function cross_val_score to warn when there\nis an error while fitting the estimator. Changed in version 0.18: Moved from sklearn.cross_validation.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": []
                        },
                        "function_calling": {}
                    },
                    {
                        "func_name": "NotFittedError",
                        "func_desc": "Exception class to raise if estimator is used before fitting.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.exceptions.NotFittedError.html#sklearn.exceptions.NotFittedError",
                        "function_definitions": {
                            "function_name": "NotFittedError",
                            "full_function": "exception sklearn.exceptions.NotFittedError",
                            "function_text": "Exception class to raise if estimator is used before fitting. This class inherits from both ValueError and AttributeError to help with\nexception handling and backward compatibility. Examples Changed in version 0.18: Moved from sklearn.utils.validation.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": []
                        },
                        "function_calling": {}
                    },
                    {
                        "func_name": "DataConversionWarning",
                        "func_desc": "Warning used to notify implicit data conversions happening in the code.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.exceptions.DataConversionWarning.html#sklearn.exceptions.DataConversionWarning",
                        "function_definitions": {
                            "function_name": "DataConversionWarning",
                            "full_function": "exception sklearn.exceptions.DataConversionWarning",
                            "function_text": "Warning used to notify implicit data conversions happening in the code. This warning occurs when some input data needs to be converted or\ninterpreted in a way that may not match the user\u2019s expectations. passes an integer array to a function which expects float input and\nwill convert the input requests a non-copying operation, but a copy is required to meet the\nimplementation\u2019s data-type expectations; passes an input whose shape can be interpreted ambiguously. Changed in version 0.18: Moved from sklearn.utils.validation.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": []
                        },
                        "function_calling": {}
                    },
                    {
                        "func_name": "EfficiencyWarning",
                        "func_desc": "Warning used to notify the user of inefficient computation.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.exceptions.EfficiencyWarning.html#sklearn.exceptions.EfficiencyWarning",
                        "function_definitions": {
                            "function_name": "EfficiencyWarning",
                            "full_function": "exception sklearn.exceptions.EfficiencyWarning",
                            "function_text": "Warning used to notify the user of inefficient computation. This warning notifies the user that the efficiency may not be optimal due\nto some reason which may be included as a part of the warning message.\nThis may be subclassed into a more specific Warning class. Added in version 0.18.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": []
                        },
                        "function_calling": {}
                    },
                    {
                        "func_name": "InconsistentVersionWarning",
                        "func_desc": "Warning raised when an estimator is unpickled with a inconsistent version.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.exceptions.InconsistentVersionWarning.html#sklearn.exceptions.InconsistentVersionWarning",
                        "function_definitions": {
                            "function_name": "InconsistentVersionWarning",
                            "full_function": "exception sklearn.exceptions.InconsistentVersionWarning(*, estimator_name, current_sklearn_version, original_sklearn_version)",
                            "function_text": "Warning raised when an estimator is unpickled with a inconsistent version.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "estimator_name",
                                    "param_type": "str",
                                    "param_desc": "Estimator name.\n"
                                },
                                {
                                    "param_name": "current_sklearn_version",
                                    "param_type": "str",
                                    "param_desc": "Current scikit-learn version.\n"
                                },
                                {
                                    "param_name": "original_sklearn_version",
                                    "param_type": "str",
                                    "param_desc": "Original scikit-learn version.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "InconsistentVersionWarning",
                            "descriptions": "Warning raised when an estimator is unpickled with a inconsistent version.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "estimator_name": {
                                        "type": "string",
                                        "description": "str. Estimator name.\n"
                                    },
                                    "current_sklearn_version": {
                                        "type": "string",
                                        "description": "str. Current scikit-learn version.\n"
                                    },
                                    "original_sklearn_version": {
                                        "type": "string",
                                        "description": "str. Original scikit-learn version.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "UndefinedMetricWarning",
                        "func_desc": "Warning used when the metric is invalid",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.exceptions.UndefinedMetricWarning.html#sklearn.exceptions.UndefinedMetricWarning",
                        "function_definitions": {
                            "function_name": "UndefinedMetricWarning",
                            "full_function": "exception sklearn.exceptions.UndefinedMetricWarning",
                            "function_text": "Warning used when the metric is invalid Changed in version 0.18: Moved from sklearn.base.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": []
                        },
                        "function_calling": {}
                    }
                ]
            }
        ],
        "name": "sklearn.exceptions",
        "url": "https://scikit-learn.org/stable/api/sklearn.exceptions.html"
    },
    "sklearn.experimental.html": {
        "functions": [
            {
                "defaults": [
                    {
                        "func_name": "enable_halving_search_cv",
                        "func_desc": "Enables Successive Halving search-estimators",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.experimental.enable_halving_search_cv.html#module-sklearn.experimental.enable_halving_search_cv",
                        "function_definitions": {
                            "function_name": "UndefinedMetricWarning",
                            "full_function": "exception sklearn.exceptions.UndefinedMetricWarning",
                            "function_text": "Warning used when the metric is invalid Changed in version 0.18: Moved from sklearn.base.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": []
                        },
                        "function_calling": {}
                    },
                    {
                        "func_name": "enable_iterative_imputer",
                        "func_desc": "Enables IterativeImputer",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.experimental.enable_iterative_imputer.html#module-sklearn.experimental.enable_iterative_imputer",
                        "function_definitions": {
                            "function_name": "UndefinedMetricWarning",
                            "full_function": "exception sklearn.exceptions.UndefinedMetricWarning",
                            "function_text": "Warning used when the metric is invalid Changed in version 0.18: Moved from sklearn.base.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": []
                        },
                        "function_calling": {}
                    }
                ]
            }
        ],
        "name": "sklearn.experimental",
        "url": "https://scikit-learn.org/stable/api/sklearn.experimental.html"
    },
    "sklearn.feature_extraction.html": {
        "functions": [
            {
                "defaults": [
                    {
                        "func_name": "DictVectorizer",
                        "func_desc": "Transforms lists of feature-value mappings to vectors.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.DictVectorizer.html#sklearn.feature_extraction.DictVectorizer",
                        "function_definitions": {
                            "function_name": "DictVectorizer",
                            "full_function": "class sklearn.feature_extraction.DictVectorizer(*, dtype=<class 'numpy.float64'>, separator='=', sparse=True, sort=True)",
                            "function_text": "Transforms lists of feature-value mappings to vectors. This transformer turns lists of mappings (dict-like objects) of feature\nnames to feature values into Numpy arrays or scipy.sparse matrices for use\nwith scikit-learn estimators. When feature values are strings, this transformer will do a binary one-hot\n(aka one-of-K) coding: one boolean-valued feature is constructed for each\nof the possible string values that the feature can take on. For instance,\na feature \u201cf\u201d that can take on the values \u201cham\u201d and \u201cspam\u201d will become two\nfeatures in the output, one signifying \u201cf=ham\u201d, the other \u201cf=spam\u201d. If a feature value is a sequence or set of strings, this transformer\nwill iterate over the values and will count the occurrences of each string\nvalue. However, note that this transformer will only do a binary one-hot encoding\nwhen feature values are of type string. If categorical features are\nrepresented as numeric values such as int or iterables of strings, the\nDictVectorizer can be followed by\nOneHotEncoder to complete\nbinary one-hot encoding. Features that do not occur in a sample (mapping) will have a zero value\nin the resulting array/matrix. For an efficiency comparison of the different feature extractors, see\nFeatureHasher and DictVectorizer Comparison. Read more in the User Guide.",
                            "func_text_user_guide": "sklearn.preprocessing.OneHotEncoder.html#sklearn.preprocessing.OneHotEncoder",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "Mapping or iterable over Mappings of shape (n_samples,)",
                                    "param_desc": "Dict(s) or Mapping(s) from feature names (arbitrary Python\nobjects) to feature values (strings or convertible to dtype).\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "DictVectorizer",
                            "descriptions": "Transforms lists of feature-value mappings to vectors. This transformer turns lists of mappings (dict-like objects) of feature\nnames to feature values into Numpy arrays or scipy.sparse matrices for use\nwith scikit-learn estimators. When feature values are strings, this transformer will do a binary one-hot\n(aka one-of-K) coding: one boolean-valued feature is constructed for each\nof the possible string values that the feature can take on. For instance,\na feature \u201cf\u201d that can take on the values \u201cham\u201d and \u201cspam\u201d will become two\nfeatures in the output, one signifying \u201cf=ham\u201d, the other \u201cf=spam\u201d. If a feature value is a sequence or set of strings, this transformer\nwill iterate over the values and will count the occurrences of each string\nvalue. However, note that this transformer will only do a binary one-hot encoding\nwhen feature values are of type string. If categorical features are\nrepresented as numeric values such as int or iterables of strings, the\nDictVectorizer can be followed by\nOneHotEncoder to complete\nbinary one-hot encoding. Features that do not occur in a sample (mapping) will have a zero value\nin the resulting array/matrix. For an efficiency comparison of the different feature extractors, see\nFeatureHasher and DictVectorizer Comparison. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "Mapping or iterable over Mappings of shape (n_samples,)",
                                        "description": "Mapping or iterable over Mappings of shape (n_samples,). Dict(s) or Mapping(s) from feature names (arbitrary Python\nobjects) to feature values (strings or convertible to dtype).\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "FeatureHasher",
                        "func_desc": "Implements feature hashing, aka the hashing trick.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.FeatureHasher.html#sklearn.feature_extraction.FeatureHasher",
                        "function_definitions": {
                            "function_name": "FeatureHasher",
                            "full_function": "class sklearn.feature_extraction.FeatureHasher(n_features=1048576, *, input_type='dict', dtype=<class 'numpy.float64'>, alternate_sign=True)",
                            "function_text": "Implements feature hashing, aka the hashing trick. This class turns sequences of symbolic feature names (strings) into\nscipy.sparse matrices, using a hash function to compute the matrix column\ncorresponding to a name. The hash function employed is the signed 32-bit\nversion of Murmurhash3. Feature names of type byte string are used as-is. Unicode strings are\nconverted to UTF-8 first, but no Unicode normalization is done.\nFeature values must be (finite) numbers. This class is a low-memory alternative to DictVectorizer and\nCountVectorizer, intended for large-scale (online) learning and situations\nwhere memory is tight, e.g. when running prediction code on embedded\ndevices. For an efficiency comparison of the different feature extractors, see\nFeatureHasher and DictVectorizer Comparison. Read more in the User Guide. Added in version 0.13.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/auto_examples/text/plot_hashing_vs_dict_vectorizer.html#sphx-glr-auto-examples-text-plot-hashing-vs-dict-vectorizer-py",
                            "parameter_names_desc": [
                                {
                                    "param_name": "raw_X",
                                    "param_type": "iterable over iterable over raw features, length = n_samples",
                                    "param_desc": "Samples. Each sample must be iterable an (e.g., a list or tuple)\ncontaining/generating feature names (and optionally values, see\nthe input_type constructor argument) which will be hashed.\nraw_X need not support the len function, so it can be the result\nof a generator; n_samples is determined on the fly.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "FeatureHasher",
                            "descriptions": "Implements feature hashing, aka the hashing trick. This class turns sequences of symbolic feature names (strings) into\nscipy.sparse matrices, using a hash function to compute the matrix column\ncorresponding to a name. The hash function employed is the signed 32-bit\nversion of Murmurhash3. Feature names of type byte string are used as-is. Unicode strings are\nconverted to UTF-8 first, but no Unicode normalization is done.\nFeature values must be (finite) numbers. This class is a low-memory alternative to DictVectorizer and\nCountVectorizer, intended for large-scale (online) learning and situations\nwhere memory is tight, e.g. when running prediction code on embedded\ndevices. For an efficiency comparison of the different feature extractors, see\nFeatureHasher and DictVectorizer Comparison. Read more in the User Guide. Added in version 0.13.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "raw_X": {
                                        "type": "iterable over iterable over raw features, length = n_samples",
                                        "description": "iterable over iterable over raw features, length = n_samples. Samples. Each sample must be iterable an (e.g., a list or tuple)\ncontaining/generating feature names (and optionally values, see\nthe input_type constructor argument) which will be hashed.\nraw_X need not support the len function, so it can be the result\nof a generator; n_samples is determined on the fly.\n"
                                    }
                                },
                                "required": [
                                    "n_features=1048576"
                                ]
                            }
                        }
                    }
                ]
            },
            {
                "From images": [
                    {
                        "func_name": "image.PatchExtractor",
                        "func_desc": "Extracts patches from a collection of images.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.image.PatchExtractor.html#sklearn.feature_extraction.image.PatchExtractor",
                        "function_definitions": {
                            "function_name": "PatchExtractor",
                            "full_function": "class sklearn.feature_extraction.image.PatchExtractor(*, patch_size=None, max_patches=None, random_state=None)",
                            "function_text": "Extracts patches from a collection of images. Read more in the User Guide. Added in version 0.9.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/feature_extraction.html#image-feature-extraction",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "ndarray of shape (n_samples, image_height, image_width) or                 (n_samples, image_height, image_width, n_channels)",
                                    "param_desc": "Array of images from which to extract patches. For color images,\nthe last dimension specifies the channel: a RGB image would have\nn_channels=3.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "PatchExtractor",
                            "descriptions": "Extracts patches from a collection of images. Read more in the User Guide. Added in version 0.9.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "ndarray of shape (n_samples, image_height, image_width) or                 (n_samples, image_height, image_width, n_channels). Array of images from which to extract patches. For color images,\nthe last dimension specifies the channel: a RGB image would have\nn_channels=3.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "image.grid_to_graph",
                        "func_desc": "Graph of the pixel-to-pixel connections.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.image.grid_to_graph.html#sklearn.feature_extraction.image.grid_to_graph",
                        "function_definitions": {
                            "function_name": "grid_to_graph",
                            "full_function": "sklearn.feature_extraction.image.grid_to_graph(n_x, n_y, n_z=1, *, mask=None, return_as=<class 'scipy.sparse._coo.coo_matrix'>, dtype=<class 'int'>)",
                            "function_text": "Graph of the pixel-to-pixel connections. Edges exist if 2 voxels are connected.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "n_x",
                                    "param_type": "int",
                                    "param_desc": "Dimension in x axis.\n"
                                },
                                {
                                    "param_name": "n_y",
                                    "param_type": "int",
                                    "param_desc": "Dimension in y axis.\n"
                                },
                                {
                                    "param_name": "n_z",
                                    "param_type": "int, default=1",
                                    "param_desc": "Dimension in z axis.\n"
                                },
                                {
                                    "param_name": "mask",
                                    "param_type": "ndarray of shape (n_x, n_y, n_z), dtype=bool, default=None",
                                    "param_desc": "An optional mask of the image, to consider only part of the\npixels.\n"
                                },
                                {
                                    "param_name": "return_as",
                                    "param_type": "np.ndarray or a sparse matrix class,             default=sparse.coo_matrix",
                                    "param_desc": "The class to use to build the returned adjacency matrix.\n"
                                },
                                {
                                    "param_name": "dtype",
                                    "param_type": "dtype, default=int",
                                    "param_desc": "The data of the returned sparse matrix. By default it is int.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "grid_to_graph",
                            "descriptions": "Graph of the pixel-to-pixel connections. Edges exist if 2 voxels are connected.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "n_x": {
                                        "type": "integer",
                                        "description": "int. Dimension in x axis.\n"
                                    },
                                    "n_y": {
                                        "type": "integer",
                                        "description": "int. Dimension in y axis.\n"
                                    },
                                    "n_z": {
                                        "type": "integer",
                                        "description": "int, default=1. Dimension in z axis.\n"
                                    },
                                    "mask": {
                                        "type": "boolean",
                                        "description": "ndarray of shape (n_x, n_y, n_z), dtype=bool, default=None. An optional mask of the image, to consider only part of the\npixels.\n"
                                    },
                                    "return_as": {
                                        "type": "array",
                                        "description": "np.ndarray or a sparse matrix class,             default=sparse.coo_matrix. The class to use to build the returned adjacency matrix.\n"
                                    },
                                    "dtype": {
                                        "type": "integer",
                                        "description": "dtype, default=int. The data of the returned sparse matrix. By default it is int.\n"
                                    }
                                },
                                "required": [
                                    "n_x",
                                    "n_y",
                                    "n_z=1"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "image.reconstruct_from_patches_2d",
                        "func_desc": "Reconstruct the image from all of its patches.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d.html#sklearn.feature_extraction.image.reconstruct_from_patches_2d",
                        "function_definitions": {
                            "function_name": "reconstruct_from_patches_2d",
                            "full_function": "sklearn.feature_extraction.image.reconstruct_from_patches_2d(patches, image_size)",
                            "function_text": "Reconstruct the image from all of its patches. Patches are assumed to overlap and the image is constructed by filling in\nthe patches from left to right, top to bottom, averaging the overlapping\nregions. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/feature_extraction.html#image-feature-extraction",
                            "parameter_names_desc": [
                                {
                                    "param_name": "patches",
                                    "param_type": "ndarray of shape (n_patches, patch_height, patch_width) or         (n_patches, patch_height, patch_width, n_channels)",
                                    "param_desc": "The complete set of patches. If the patches contain colour information,\nchannels are indexed along the last dimension: RGB patches would\nhave n_channels=3.\n"
                                },
                                {
                                    "param_name": "image_size",
                                    "param_type": "tuple of int (image_height, image_width) or         (image_height, image_width, n_channels)",
                                    "param_desc": "The size of the image that will be reconstructed.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "reconstruct_from_patches_2d",
                            "descriptions": "Reconstruct the image from all of its patches. Patches are assumed to overlap and the image is constructed by filling in\nthe patches from left to right, top to bottom, averaging the overlapping\nregions. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "patches": {
                                        "type": "array",
                                        "description": "ndarray of shape (n_patches, patch_height, patch_width) or         (n_patches, patch_height, patch_width, n_channels). The complete set of patches. If the patches contain colour information,\nchannels are indexed along the last dimension: RGB patches would\nhave n_channels=3.\n"
                                    },
                                    "image_size": {
                                        "type": "integer",
                                        "description": "tuple of int (image_height, image_width) or         (image_height, image_width, n_channels). The size of the image that will be reconstructed.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "image.extract_patches_2d",
                        "func_desc": "Reshape a 2D image into a collection of patches.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.image.extract_patches_2d.html#sklearn.feature_extraction.image.extract_patches_2d",
                        "function_definitions": {
                            "function_name": "extract_patches_2d",
                            "full_function": "sklearn.feature_extraction.image.extract_patches_2d(image, patch_size, *, max_patches=None, random_state=None)",
                            "function_text": "Reshape a 2D image into a collection of patches. The resulting patches are allocated in a dedicated array. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/feature_extraction.html#image-feature-extraction",
                            "parameter_names_desc": [
                                {
                                    "param_name": "image",
                                    "param_type": "ndarray of shape (image_height, image_width) or         (image_height, image_width, n_channels)",
                                    "param_desc": "The original image data. For color images, the last dimension specifies\nthe channel: a RGB image would have n_channels=3.\n"
                                },
                                {
                                    "param_name": "patch_size",
                                    "param_type": "tuple of int (patch_height, patch_width)",
                                    "param_desc": "The dimensions of one patch.\n"
                                },
                                {
                                    "param_name": "max_patches",
                                    "param_type": "int or float, default=None",
                                    "param_desc": "The maximum number of patches to extract. If max_patches is a float\nbetween 0 and 1, it is taken to be a proportion of the total number\nof patches. If max_patches is None it corresponds to the total number\nof patches that can be extracted.\n"
                                },
                                {
                                    "param_name": "random_state",
                                    "param_type": "int, RandomState instance, default=None",
                                    "param_desc": "Determines the random number generator used for random sampling when\nmax_patches is not None. Use an int to make the randomness\ndeterministic.\nSee Glossary.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "extract_patches_2d",
                            "descriptions": "Reshape a 2D image into a collection of patches. The resulting patches are allocated in a dedicated array. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "image": {
                                        "type": "array",
                                        "description": "ndarray of shape (image_height, image_width) or         (image_height, image_width, n_channels). The original image data. For color images, the last dimension specifies\nthe channel: a RGB image would have n_channels=3.\n"
                                    },
                                    "patch_size": {
                                        "type": "integer",
                                        "description": "tuple of int (patch_height, patch_width). The dimensions of one patch.\n"
                                    },
                                    "max_patches": {
                                        "type": "integer",
                                        "description": "int or float, default=None. The maximum number of patches to extract. If max_patches is a float\nbetween 0 and 1, it is taken to be a proportion of the total number\nof patches. If max_patches is None it corresponds to the total number\nof patches that can be extracted.\n"
                                    },
                                    "random_state": {
                                        "type": "integer",
                                        "description": "int, RandomState instance, default=None. Determines the random number generator used for random sampling when\nmax_patches is not None. Use an int to make the randomness\ndeterministic.\nSee Glossary.\n"
                                    }
                                },
                                "required": [
                                    "image",
                                    "patch_size"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "image.img_to_graph",
                        "func_desc": "Graph of the pixel-to-pixel gradient connections.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.image.img_to_graph.html#sklearn.feature_extraction.image.img_to_graph",
                        "function_definitions": {
                            "function_name": "img_to_graph",
                            "full_function": "sklearn.feature_extraction.image.img_to_graph(img, *, mask=None, return_as=<class 'scipy.sparse._coo.coo_matrix'>, dtype=None)",
                            "function_text": "Graph of the pixel-to-pixel gradient connections. Edges are weighted with the gradient values. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/feature_extraction.html#image-feature-extraction",
                            "parameter_names_desc": [
                                {
                                    "param_name": "img",
                                    "param_type": "array-like of shape (height, width) or (height, width, channel)",
                                    "param_desc": "2D or 3D image.\n"
                                },
                                {
                                    "param_name": "mask",
                                    "param_type": "ndarray of shape (height, width) or             (height, width, channel), dtype=bool, default=None",
                                    "param_desc": "An optional mask of the image, to consider only part of the\npixels.\n"
                                },
                                {
                                    "param_name": "return_as",
                                    "param_type": "np.ndarray or a sparse matrix class,             default=sparse.coo_matrix",
                                    "param_desc": "The class to use to build the returned adjacency matrix.\n"
                                },
                                {
                                    "param_name": "dtype",
                                    "param_type": "dtype, default=None",
                                    "param_desc": "The data of the returned sparse matrix. By default it is the\ndtype of img.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "img_to_graph",
                            "descriptions": "Graph of the pixel-to-pixel gradient connections. Edges are weighted with the gradient values. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "img": {
                                        "type": "array",
                                        "description": "array-like of shape (height, width) or (height, width, channel). 2D or 3D image.\n"
                                    },
                                    "mask": {
                                        "type": "boolean",
                                        "description": "ndarray of shape (height, width) or             (height, width, channel), dtype=bool, default=None. An optional mask of the image, to consider only part of the\npixels.\n"
                                    },
                                    "return_as": {
                                        "type": "array",
                                        "description": "np.ndarray or a sparse matrix class,             default=sparse.coo_matrix. The class to use to build the returned adjacency matrix.\n"
                                    },
                                    "dtype": {
                                        "type": "dtype, default=None",
                                        "description": "dtype, default=None. The data of the returned sparse matrix. By default it is the\ndtype of img.\n"
                                    }
                                },
                                "required": [
                                    "img"
                                ]
                            }
                        }
                    }
                ]
            },
            {
                "From text": [
                    {
                        "func_name": "text.CountVectorizer",
                        "func_desc": "Convert a collection of text documents to a matrix of token counts.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.text.CountVectorizer.html#sklearn.feature_extraction.text.CountVectorizer",
                        "function_definitions": {
                            "function_name": "CountVectorizer",
                            "full_function": "class sklearn.feature_extraction.text.CountVectorizer(*, input='content', encoding='utf-8', decode_error='strict', strip_accents=None, lowercase=True, preprocessor=None, tokenizer=None, stop_words=None, token_pattern='(?u)\\\\b\\\\w\\\\w+\\\\b', ngram_range=(1, 1), analyzer='word', max_df=1.0, min_df=1, max_features=None, vocabulary=None, binary=False, dtype=<class 'numpy.int64'>)",
                            "function_text": "Convert a collection of text documents to a matrix of token counts. This implementation produces a sparse representation of the counts using\nscipy.sparse.csr_matrix. If you do not provide an a-priori dictionary and you do not use an analyzer\nthat does some kind of feature selection then the number of features will\nbe equal to the vocabulary size found by analyzing the data. For an efficiency comparison of the different feature extractors, see\nFeatureHasher and DictVectorizer Comparison. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/auto_examples/text/plot_hashing_vs_dict_vectorizer.html#sphx-glr-auto-examples-text-plot-hashing-vs-dict-vectorizer-py",
                            "parameter_names_desc": [
                                {
                                    "param_name": "raw_documents",
                                    "param_type": "iterable",
                                    "param_desc": "An iterable which generates either str, unicode or file objects.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "CountVectorizer",
                            "descriptions": "Convert a collection of text documents to a matrix of token counts. This implementation produces a sparse representation of the counts using\nscipy.sparse.csr_matrix. If you do not provide an a-priori dictionary and you do not use an analyzer\nthat does some kind of feature selection then the number of features will\nbe equal to the vocabulary size found by analyzing the data. For an efficiency comparison of the different feature extractors, see\nFeatureHasher and DictVectorizer Comparison. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "raw_documents": {
                                        "type": "iterable",
                                        "description": "iterable. An iterable which generates either str, unicode or file objects.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "text.TfidfTransformer",
                        "func_desc": "Transform a count matrix to a normalized tf or tf-idf representation.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.text.TfidfTransformer.html#sklearn.feature_extraction.text.TfidfTransformer",
                        "function_definitions": {
                            "function_name": "TfidfTransformer",
                            "full_function": "class sklearn.feature_extraction.text.TfidfTransformer(*, norm='l2', use_idf=True, smooth_idf=True, sublinear_tf=False)",
                            "function_text": "Transform a count matrix to a normalized tf or tf-idf representation. Tf means term-frequency while tf-idf means term-frequency times inverse\ndocument-frequency. This is a common term weighting scheme in information\nretrieval, that has also found good use in document classification. The goal of using tf-idf instead of the raw frequencies of occurrence of a\ntoken in a given document is to scale down the impact of tokens that occur\nvery frequently in a given corpus and that are hence empirically less\ninformative than features that occur in a small fraction of the training\ncorpus. The formula that is used to compute the tf-idf for a term t of a document d\nin a document set is tf-idf(t, d) = tf(t, d) * idf(t), and the idf is\ncomputed as idf(t) = log [ n / df(t) ] + 1 (if smooth_idf=False), where\nn is the total number of documents in the document set and df(t) is the\ndocument frequency of t; the document frequency is the number of documents\nin the document set that contain the term t. The effect of adding \u201c1\u201d to\nthe idf in the equation above is that terms with zero idf, i.e., terms\nthat occur in all documents in a training set, will not be entirely\nignored.\n(Note that the idf formula above differs from the standard textbook\nnotation that defines the idf as\nidf(t) = log [ n / (df(t) + 1) ]). If smooth_idf=True (the default), the constant \u201c1\u201d is added to the\nnumerator and denominator of the idf as if an extra document was seen\ncontaining every term in the collection exactly once, which prevents\nzero divisions: idf(t) = log [ (1 + n) / (1 + df(t)) ] + 1. Furthermore, the formulas used to compute tf and idf depend\non parameter settings that correspond to the SMART notation used in IR\nas follows: Tf is \u201cn\u201d (natural) by default, \u201cl\u201d (logarithmic) when\nsublinear_tf=True.\nIdf is \u201ct\u201d when use_idf is given, \u201cn\u201d (none) otherwise.\nNormalization is \u201cc\u201d (cosine) when norm='l2', \u201cn\u201d (none)\nwhen norm=None. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/feature_extraction.html#text-feature-extraction",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "sparse matrix of (n_samples, n_features)",
                                    "param_desc": "A matrix of term/token counts.\n"
                                },
                                {
                                    "param_name": "copy",
                                    "param_type": "bool, default=True",
                                    "param_desc": "Whether to copy X and operate on the copy or perform in-place\noperations. copy=False will only be effective with CSR sparse matrix.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "TfidfTransformer",
                            "descriptions": "Transform a count matrix to a normalized tf or tf-idf representation. Tf means term-frequency while tf-idf means term-frequency times inverse\ndocument-frequency. This is a common term weighting scheme in information\nretrieval, that has also found good use in document classification. The goal of using tf-idf instead of the raw frequencies of occurrence of a\ntoken in a given document is to scale down the impact of tokens that occur\nvery frequently in a given corpus and that are hence empirically less\ninformative than features that occur in a small fraction of the training\ncorpus. The formula that is used to compute the tf-idf for a term t of a document d\nin a document set is tf-idf(t, d) = tf(t, d) * idf(t), and the idf is\ncomputed as idf(t) = log [ n / df(t) ] + 1 (if smooth_idf=False), where\nn is the total number of documents in the document set and df(t) is the\ndocument frequency of t; the document frequency is the number of documents\nin the document set that contain the term t. The effect of adding \u201c1\u201d to\nthe idf in the equation above is that terms with zero idf, i.e., terms\nthat occur in all documents in a training set, will not be entirely\nignored.\n(Note that the idf formula above differs from the standard textbook\nnotation that defines the idf as\nidf(t) = log [ n / (df(t) + 1) ]). If smooth_idf=True (the default), the constant \u201c1\u201d is added to the\nnumerator and denominator of the idf as if an extra document was seen\ncontaining every term in the collection exactly once, which prevents\nzero divisions: idf(t) = log [ (1 + n) / (1 + df(t)) ] + 1. Furthermore, the formulas used to compute tf and idf depend\non parameter settings that correspond to the SMART notation used in IR\nas follows: Tf is \u201cn\u201d (natural) by default, \u201cl\u201d (logarithmic) when\nsublinear_tf=True.\nIdf is \u201ct\u201d when use_idf is given, \u201cn\u201d (none) otherwise.\nNormalization is \u201cc\u201d (cosine) when norm='l2', \u201cn\u201d (none)\nwhen norm=None. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "sparse matrix of (n_samples, n_features)",
                                        "description": "sparse matrix of (n_samples, n_features). A matrix of term/token counts.\n"
                                    },
                                    "copy": {
                                        "type": "boolean",
                                        "description": "bool, default=True. Whether to copy X and operate on the copy or perform in-place\noperations. copy=False will only be effective with CSR sparse matrix.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "text.HashingVectorizer",
                        "func_desc": "Convert a collection of text documents to a matrix of token occurrences.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.text.HashingVectorizer.html#sklearn.feature_extraction.text.HashingVectorizer",
                        "function_definitions": {
                            "function_name": "HashingVectorizer",
                            "full_function": "class sklearn.feature_extraction.text.HashingVectorizer(*, input='content', encoding='utf-8', decode_error='strict', strip_accents=None, lowercase=True, preprocessor=None, tokenizer=None, stop_words=None, token_pattern='(?u)\\\\b\\\\w\\\\w+\\\\b', ngram_range=(1, 1), analyzer='word', n_features=1048576, binary=False, norm='l2', alternate_sign=True, dtype=<class 'numpy.float64'>)",
                            "function_text": "Convert a collection of text documents to a matrix of token occurrences. It turns a collection of text documents into a scipy.sparse matrix holding\ntoken occurrence counts (or binary occurrence information), possibly\nnormalized as token frequencies if norm=\u2019l1\u2019 or projected on the euclidean\nunit sphere if norm=\u2019l2\u2019. This text vectorizer implementation uses the hashing trick to find the\ntoken string name to feature integer index mapping. This strategy has several advantages: it is very low memory scalable to large datasets as there is no need to\nstore a vocabulary dictionary in memory. it is fast to pickle and un-pickle as it holds no state besides the\nconstructor parameters. it can be used in a streaming (partial fit) or parallel pipeline as there\nis no state computed during fit. There are also a couple of cons (vs using a CountVectorizer with an\nin-memory vocabulary): there is no way to compute the inverse transform (from feature indices to\nstring feature names) which can be a problem when trying to introspect\nwhich features are most important to a model. there can be collisions: distinct tokens can be mapped to the same\nfeature index. However in practice this is rarely an issue if n_features\nis large enough (e.g. 2 ** 18 for text classification problems). no IDF weighting as this would render the transformer stateful. The hash function employed is the signed 32-bit version of Murmurhash3. For an efficiency comparison of the different feature extractors, see\nFeatureHasher and DictVectorizer Comparison. For an example of document clustering and comparison with\nTfidfVectorizer, see\nClustering text documents using k-means. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/auto_examples/text/plot_hashing_vs_dict_vectorizer.html#sphx-glr-auto-examples-text-plot-hashing-vs-dict-vectorizer-py",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "iterable over raw text documents, length = n_samples",
                                    "param_desc": "Samples. Each sample must be a text document (either bytes or\nunicode strings, file name or file object depending on the\nconstructor argument) which will be tokenized and hashed.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "HashingVectorizer",
                            "descriptions": "Convert a collection of text documents to a matrix of token occurrences. It turns a collection of text documents into a scipy.sparse matrix holding\ntoken occurrence counts (or binary occurrence information), possibly\nnormalized as token frequencies if norm=\u2019l1\u2019 or projected on the euclidean\nunit sphere if norm=\u2019l2\u2019. This text vectorizer implementation uses the hashing trick to find the\ntoken string name to feature integer index mapping. This strategy has several advantages: it is very low memory scalable to large datasets as there is no need to\nstore a vocabulary dictionary in memory. it is fast to pickle and un-pickle as it holds no state besides the\nconstructor parameters. it can be used in a streaming (partial fit) or parallel pipeline as there\nis no state computed during fit. There are also a couple of cons (vs using a CountVectorizer with an\nin-memory vocabulary): there is no way to compute the inverse transform (from feature indices to\nstring feature names) which can be a problem when trying to introspect\nwhich features are most important to a model. there can be collisions: distinct tokens can be mapped to the same\nfeature index. However in practice this is rarely an issue if n_features\nis large enough (e.g. 2 ** 18 for text classification problems). no IDF weighting as this would render the transformer stateful. The hash function employed is the signed 32-bit version of Murmurhash3. For an efficiency comparison of the different feature extractors, see\nFeatureHasher and DictVectorizer Comparison. For an example of document clustering and comparison with\nTfidfVectorizer, see\nClustering text documents using k-means. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "iterable over raw text documents, length = n_samples",
                                        "description": "iterable over raw text documents, length = n_samples. Samples. Each sample must be a text document (either bytes or\nunicode strings, file name or file object depending on the\nconstructor argument) which will be tokenized and hashed.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "text.TfidfVectorizer",
                        "func_desc": "Convert a collection of raw documents to a matrix of TF-IDF features.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.html#sklearn.feature_extraction.text.TfidfVectorizer",
                        "function_definitions": {
                            "function_name": "TfidfVectorizer",
                            "full_function": "class sklearn.feature_extraction.text.TfidfVectorizer(*, input='content', encoding='utf-8', decode_error='strict', strip_accents=None, lowercase=True, preprocessor=None, tokenizer=None, analyzer='word', stop_words=None, token_pattern='(?u)\\\\b\\\\w\\\\w+\\\\b', ngram_range=(1, 1), max_df=1.0, min_df=1, max_features=None, vocabulary=None, binary=False, dtype=<class 'numpy.float64'>, norm='l2', use_idf=True, smooth_idf=True, sublinear_tf=False)",
                            "function_text": "Convert a collection of raw documents to a matrix of TF-IDF features. Equivalent to CountVectorizer followed by\nTfidfTransformer. For an example of usage, see\nClassification of text documents using sparse features. For an efficiency comparison of the different feature extractors, see\nFeatureHasher and DictVectorizer Comparison. For an example of document clustering and comparison with\nHashingVectorizer, see\nClustering text documents using k-means. Read more in the User Guide.",
                            "func_text_user_guide": "sklearn.feature_extraction.text.CountVectorizer.html#sklearn.feature_extraction.text.CountVectorizer",
                            "parameter_names_desc": [
                                {
                                    "param_name": "raw_documents",
                                    "param_type": "iterable",
                                    "param_desc": "An iterable which generates either str, unicode or file objects.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "TfidfVectorizer",
                            "descriptions": "Convert a collection of raw documents to a matrix of TF-IDF features. Equivalent to CountVectorizer followed by\nTfidfTransformer. For an example of usage, see\nClassification of text documents using sparse features. For an efficiency comparison of the different feature extractors, see\nFeatureHasher and DictVectorizer Comparison. For an example of document clustering and comparison with\nHashingVectorizer, see\nClustering text documents using k-means. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "raw_documents": {
                                        "type": "iterable",
                                        "description": "iterable. An iterable which generates either str, unicode or file objects.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    }
                ]
            }
        ],
        "name": "sklearn.feature_extraction",
        "url": "https://scikit-learn.org/stable/api/sklearn.feature_extraction.html"
    },
    "sklearn.feature_selection.html": {
        "functions": [
            {
                "defaults": [
                    {
                        "func_name": "GenericUnivariateSelect",
                        "func_desc": "Univariate feature selector with configurable strategy.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.GenericUnivariateSelect.html#sklearn.feature_selection.GenericUnivariateSelect",
                        "function_definitions": {
                            "function_name": "GenericUnivariateSelect",
                            "full_function": "class sklearn.feature_selection.GenericUnivariateSelect(score_func=<function f_classif>, *, mode='percentile', param=1e-05)",
                            "function_text": "Univariate feature selector with configurable strategy. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/feature_selection.html#univariate-feature-selection",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array of shape [n_samples, n_features]",
                                    "param_desc": "The input samples.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "GenericUnivariateSelect",
                            "descriptions": "Univariate feature selector with configurable strategy. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array of shape [n_samples, n_features]. The input samples.\n"
                                    }
                                },
                                "required": [
                                    "score_func=<function f_classif>"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "RFECV",
                        "func_desc": "Recursive feature elimination with cross-validation to select features.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.RFECV.html#sklearn.feature_selection.RFECV",
                        "function_definitions": {
                            "function_name": "RFECV",
                            "full_function": "class sklearn.feature_selection.RFECV(estimator, *, step=1, min_features_to_select=1, cv=None, scoring=None, verbose=0, n_jobs=None, importance_getter='auto')",
                            "function_text": "Recursive feature elimination with cross-validation to select features. The number of features selected is tuned automatically by fitting an RFE\nselector on the different cross-validation splits (provided by the cv parameter).\nThe performance of the RFE selector are evaluated using scorer for\ndifferent number of selected features and aggregated together. Finally, the scores\nare averaged across folds and the number of features selected is set to the number\nof features that maximize the cross-validation score.\nSee glossary entry for cross-validation estimator. Read more in the User Guide.",
                            "func_text_user_guide": "sklearn.feature_selection.RFE.html#sklearn.feature_selection.RFE",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array of shape [n_samples, n_features]",
                                    "param_desc": "The input samples.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "RFECV",
                            "descriptions": "Recursive feature elimination with cross-validation to select features. The number of features selected is tuned automatically by fitting an RFE\nselector on the different cross-validation splits (provided by the cv parameter).\nThe performance of the RFE selector are evaluated using scorer for\ndifferent number of selected features and aggregated together. Finally, the scores\nare averaged across folds and the number of features selected is set to the number\nof features that maximize the cross-validation score.\nSee glossary entry for cross-validation estimator. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array of shape [n_samples, n_features]. The input samples.\n"
                                    }
                                },
                                "required": [
                                    "estimator"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "SelectFpr",
                        "func_desc": "Filter: Select the pvalues below alpha based on a FPR test.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.SelectFpr.html#sklearn.feature_selection.SelectFpr",
                        "function_definitions": {
                            "function_name": "SelectFpr",
                            "full_function": "class sklearn.feature_selection.SelectFpr(score_func=<function f_classif>, *, alpha=0.05)",
                            "function_text": "Filter: Select the pvalues below alpha based on a FPR test. FPR test stands for False Positive Rate test. It controls the total\namount of false detections. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/feature_selection.html#univariate-feature-selection",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array of shape [n_samples, n_features]",
                                    "param_desc": "The input samples.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "SelectFpr",
                            "descriptions": "Filter: Select the pvalues below alpha based on a FPR test. FPR test stands for False Positive Rate test. It controls the total\namount of false detections. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array of shape [n_samples, n_features]. The input samples.\n"
                                    }
                                },
                                "required": [
                                    "score_func=<function f_classif>"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "SelectFwe",
                        "func_desc": "Filter: Select the p-values corresponding to Family-wise error rate.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.SelectFwe.html#sklearn.feature_selection.SelectFwe",
                        "function_definitions": {
                            "function_name": "SelectFwe",
                            "full_function": "class sklearn.feature_selection.SelectFwe(score_func=<function f_classif>, *, alpha=0.05)",
                            "function_text": "Filter: Select the p-values corresponding to Family-wise error rate. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/feature_selection.html#univariate-feature-selection",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array of shape [n_samples, n_features]",
                                    "param_desc": "The input samples.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "SelectFwe",
                            "descriptions": "Filter: Select the p-values corresponding to Family-wise error rate. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array of shape [n_samples, n_features]. The input samples.\n"
                                    }
                                },
                                "required": [
                                    "score_func=<function f_classif>"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "SelectPercentile",
                        "func_desc": "Select features according to a percentile of the highest scores.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.SelectPercentile.html#sklearn.feature_selection.SelectPercentile",
                        "function_definitions": {
                            "function_name": "SelectPercentile",
                            "full_function": "class sklearn.feature_selection.SelectPercentile(score_func=<function f_classif>, *, percentile=10)",
                            "function_text": "Select features according to a percentile of the highest scores. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/feature_selection.html#univariate-feature-selection",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array of shape [n_samples, n_features]",
                                    "param_desc": "The input samples.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "SelectPercentile",
                            "descriptions": "Select features according to a percentile of the highest scores. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array of shape [n_samples, n_features]. The input samples.\n"
                                    }
                                },
                                "required": [
                                    "score_func=<function f_classif>"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "SequentialFeatureSelector",
                        "func_desc": "Transformer that performs Sequential Feature Selection.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.SequentialFeatureSelector.html#sklearn.feature_selection.SequentialFeatureSelector",
                        "function_definitions": {
                            "function_name": "SequentialFeatureSelector",
                            "full_function": "class sklearn.feature_selection.SequentialFeatureSelector(estimator, *, n_features_to_select='auto', tol=None, direction='forward', scoring=None, cv=5, n_jobs=None)",
                            "function_text": "Transformer that performs Sequential Feature Selection. This Sequential Feature Selector adds (forward selection) or\nremoves (backward selection) features to form a feature subset in a\ngreedy fashion. At each stage, this estimator chooses the best feature to\nadd or remove based on the cross-validation score of an estimator. In\nthe case of unsupervised learning, this Sequential Feature Selector\nlooks only at the features (X), not the desired outputs (y). Read more in the User Guide. Added in version 0.24.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/feature_selection.html#sequential-feature-selection",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array of shape [n_samples, n_features]",
                                    "param_desc": "The input samples.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "SequentialFeatureSelector",
                            "descriptions": "Transformer that performs Sequential Feature Selection. This Sequential Feature Selector adds (forward selection) or\nremoves (backward selection) features to form a feature subset in a\ngreedy fashion. At each stage, this estimator chooses the best feature to\nadd or remove based on the cross-validation score of an estimator. In\nthe case of unsupervised learning, this Sequential Feature Selector\nlooks only at the features (X), not the desired outputs (y). Read more in the User Guide. Added in version 0.24.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array of shape [n_samples, n_features]. The input samples.\n"
                                    }
                                },
                                "required": [
                                    "estimator"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "chi2",
                        "func_desc": "Compute chi-squared stats between each non-negative feature and class.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.chi2.html#sklearn.feature_selection.chi2",
                        "function_definitions": {
                            "function_name": "chi2",
                            "full_function": "sklearn.feature_selection.chi2(X, y)",
                            "function_text": "Compute chi-squared stats between each non-negative feature and class. This score can be used to select the n_features features with the\nhighest values for the test chi-squared statistic from X, which must\ncontain only non-negative features such as booleans or frequencies\n(e.g., term counts in document classification), relative to the classes. Recall that the chi-square test measures dependence between stochastic\nvariables, so using this function \u201cweeds out\u201d the features that are the\nmost likely to be independent of class and therefore irrelevant for\nclassification. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/feature_selection.html#univariate-feature-selection",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "Sample vectors.\n"
                                },
                                {
                                    "param_name": "y",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "Target vector (class labels).\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "chi2",
                            "descriptions": "Compute chi-squared stats between each non-negative feature and class. This score can be used to select the n_features features with the\nhighest values for the test chi-squared statistic from X, which must\ncontain only non-negative features such as booleans or frequencies\n(e.g., term counts in document classification), relative to the classes. Recall that the chi-square test measures dependence between stochastic\nvariables, so using this function \u201cweeds out\u201d the features that are the\nmost likely to be independent of class and therefore irrelevant for\nclassification. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). Sample vectors.\n"
                                    },
                                    "y": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). Target vector (class labels).\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "f_regression",
                        "func_desc": "Univariate linear regression tests returning F-statistic and p-values.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.f_regression.html#sklearn.feature_selection.f_regression",
                        "function_definitions": {
                            "function_name": "f_regression",
                            "full_function": "sklearn.feature_selection.f_regression(X, y, *, center=True, force_finite=True)",
                            "function_text": "Univariate linear regression tests returning F-statistic and p-values. Quick linear model for testing the effect of a single regressor,\nsequentially for many regressors. This is done in 2 steps: The cross correlation between each regressor and the target is computed\nusing r_regression as: It is converted to an F score and then to a p-value. f_regression is derived from r_regression and will rank\nfeatures in the same order if all the features are positively correlated\nwith the target. Note however that contrary to f_regression, r_regression\nvalues lie in [-1, 1] and can thus be negative. f_regression is\ntherefore recommended as a feature selection criterion to identify\npotentially predictive feature for a downstream classifier, irrespective of\nthe sign of the association with the target variable. Furthermore f_regression returns p-values while\nr_regression does not. Read more in the User Guide.",
                            "func_text_user_guide": "sklearn.feature_selection.r_regression.html#sklearn.feature_selection.r_regression",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "The data matrix.\n"
                                },
                                {
                                    "param_name": "y",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "The target vector.\n"
                                },
                                {
                                    "param_name": "center",
                                    "param_type": "bool, default=True",
                                    "param_desc": "Whether or not to center the data matrix X and the target vector y.\nBy default, X and y will be centered.\n"
                                },
                                {
                                    "param_name": "force_finite",
                                    "param_type": "bool, default=True",
                                    "param_desc": "Whether or not to force the F-statistics and associated p-values to\nbe finite. There are two cases where the F-statistic is expected to not\nbe finite:\n\nwhen the target y or some features in X are constant. In this\ncase, the Pearson\u2019s R correlation is not defined leading to obtain\nnp.nan values in the F-statistic and p-value. When\nforce_finite=True, the F-statistic is set to 0.0 and the\nassociated p-value is set to 1.0.\nwhen a feature in X is perfectly correlated (or\nanti-correlated) with the target y. In this case, the F-statistic\nis expected to be np.inf. When force_finite=True, the F-statistic\nis set to np.finfo(dtype).max and the associated p-value is set to\n0.0.\n\n\nAdded in version 1.1.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "f_regression",
                            "descriptions": "Univariate linear regression tests returning F-statistic and p-values. Quick linear model for testing the effect of a single regressor,\nsequentially for many regressors. This is done in 2 steps: The cross correlation between each regressor and the target is computed\nusing r_regression as: It is converted to an F score and then to a p-value. f_regression is derived from r_regression and will rank\nfeatures in the same order if all the features are positively correlated\nwith the target. Note however that contrary to f_regression, r_regression\nvalues lie in [-1, 1] and can thus be negative. f_regression is\ntherefore recommended as a feature selection criterion to identify\npotentially predictive feature for a downstream classifier, irrespective of\nthe sign of the association with the target variable. Furthermore f_regression returns p-values while\nr_regression does not. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). The data matrix.\n"
                                    },
                                    "y": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). The target vector.\n"
                                    },
                                    "center": {
                                        "type": "boolean",
                                        "description": "bool, default=True. Whether or not to center the data matrix X and the target vector y.\nBy default, X and y will be centered.\n"
                                    },
                                    "force_finite": {
                                        "type": "boolean",
                                        "description": "bool, default=True. Whether or not to force the F-statistics and associated p-values to\nbe finite. There are two cases where the F-statistic is expected to not\nbe finite:\n\nwhen the target y or some features in X are constant. In this\ncase, the Pearson\u2019s R correlation is not defined leading to obtain\nnp.nan values in the F-statistic and p-value. When\nforce_finite=True, the F-statistic is set to 0.0 and the\nassociated p-value is set to 1.0.\nwhen a feature in X is perfectly correlated (or\nanti-correlated) with the target y. In this case, the F-statistic\nis expected to be np.inf. When force_finite=True, the F-statistic\nis set to np.finfo(dtype).max and the associated p-value is set to\n0.0.\n\n\nAdded in version 1.1.\n\n"
                                    }
                                },
                                "required": [
                                    "X",
                                    "y"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "mutual_info_regression",
                        "func_desc": "Estimate mutual information for a continuous target variable.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.mutual_info_regression.html#sklearn.feature_selection.mutual_info_regression",
                        "function_definitions": {
                            "function_name": "mutual_info_regression",
                            "full_function": "sklearn.feature_selection.mutual_info_regression(X, y, *, discrete_features='auto', n_neighbors=3, copy=True, random_state=None, n_jobs=None)",
                            "function_text": "Estimate mutual information for a continuous target variable. Mutual information (MI) [1] between two random variables is a non-negative\nvalue, which measures the dependency between the variables. It is equal\nto zero if and only if two random variables are independent, and higher\nvalues mean higher dependency. The function relies on nonparametric methods based on entropy estimation\nfrom k-nearest neighbors distances as described in [2] and [3]. Both\nmethods are based on the idea originally proposed in [4]. It can be used for univariate features selection, read more in the\nUser Guide.",
                            "func_text_user_guide": "#r37d39d7589e2-1",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like or sparse matrix, shape (n_samples, n_features)",
                                    "param_desc": "Feature matrix.\n"
                                },
                                {
                                    "param_name": "y",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "Target vector.\n"
                                },
                                {
                                    "param_name": "discrete_features",
                                    "param_type": "{\u2018auto\u2019, bool, array-like}, default=\u2019auto\u2019",
                                    "param_desc": "If bool, then determines whether to consider all features discrete\nor continuous. If array, then it should be either a boolean mask\nwith shape (n_features,) or array with indices of discrete features.\nIf \u2018auto\u2019, it is assigned to False for dense X and to True for\nsparse X.\n"
                                },
                                {
                                    "param_name": "n_neighbors",
                                    "param_type": "int, default=3",
                                    "param_desc": "Number of neighbors to use for MI estimation for continuous variables,\nsee [2] and [3]. Higher values reduce variance of the estimation, but\ncould introduce a bias.\n"
                                },
                                {
                                    "param_name": "copy",
                                    "param_type": "bool, default=True",
                                    "param_desc": "Whether to make a copy of the given data. If set to False, the initial\ndata will be overwritten.\n"
                                },
                                {
                                    "param_name": "random_state",
                                    "param_type": "int, RandomState instance or None, default=None",
                                    "param_desc": "Determines random number generation for adding small noise to\ncontinuous variables in order to remove repeated values.\nPass an int for reproducible results across multiple function calls.\nSee Glossary.\n"
                                },
                                {
                                    "param_name": "n_jobs",
                                    "param_type": "int, default=None",
                                    "param_desc": "The number of jobs to use for computing the mutual information.\nThe parallelization is done on the columns of X.\nNone means 1 unless in a joblib.parallel_backend context.\n-1 means using all processors. See Glossary\nfor more details.\n\nAdded in version 1.5.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "mutual_info_regression",
                            "descriptions": "Estimate mutual information for a continuous target variable. Mutual information (MI) [1] between two random variables is a non-negative\nvalue, which measures the dependency between the variables. It is equal\nto zero if and only if two random variables are independent, and higher\nvalues mean higher dependency. The function relies on nonparametric methods based on entropy estimation\nfrom k-nearest neighbors distances as described in [2] and [3]. Both\nmethods are based on the idea originally proposed in [4]. It can be used for univariate features selection, read more in the\nUser Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like or sparse matrix, shape (n_samples, n_features). Feature matrix.\n"
                                    },
                                    "y": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). Target vector.\n"
                                    },
                                    "discrete_features": {
                                        "type": "boolean",
                                        "description": "{\u2018auto\u2019, bool, array-like}, default=\u2019auto\u2019. If bool, then determines whether to consider all features discrete\nor continuous. If array, then it should be either a boolean mask\nwith shape (n_features,) or array with indices of discrete features.\nIf \u2018auto\u2019, it is assigned to False for dense X and to True for\nsparse X.\n"
                                    },
                                    "n_neighbors": {
                                        "type": "integer",
                                        "description": "int, default=3. Number of neighbors to use for MI estimation for continuous variables,\nsee [2] and [3]. Higher values reduce variance of the estimation, but\ncould introduce a bias.\n"
                                    },
                                    "copy": {
                                        "type": "boolean",
                                        "description": "bool, default=True. Whether to make a copy of the given data. If set to False, the initial\ndata will be overwritten.\n"
                                    },
                                    "random_state": {
                                        "type": "integer",
                                        "description": "int, RandomState instance or None, default=None. Determines random number generation for adding small noise to\ncontinuous variables in order to remove repeated values.\nPass an int for reproducible results across multiple function calls.\nSee Glossary.\n"
                                    },
                                    "n_jobs": {
                                        "type": "integer",
                                        "description": "int, default=None. The number of jobs to use for computing the mutual information.\nThe parallelization is done on the columns of X.\nNone means 1 unless in a joblib.parallel_backend context.\n-1 means using all processors. See Glossary\nfor more details.\n\nAdded in version 1.5.\n\n"
                                    }
                                },
                                "required": [
                                    "X",
                                    "y"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "RFE",
                        "func_desc": "Feature ranking with recursive feature elimination.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.RFE.html#sklearn.feature_selection.RFE",
                        "function_definitions": {
                            "function_name": "RFE",
                            "full_function": "class sklearn.feature_selection.RFE(estimator, *, n_features_to_select=None, step=1, verbose=0, importance_getter='auto')",
                            "function_text": "Feature ranking with recursive feature elimination. Given an external estimator that assigns weights to features (e.g., the\ncoefficients of a linear model), the goal of recursive feature elimination\n(RFE) is to select features by recursively considering smaller and smaller\nsets of features. First, the estimator is trained on the initial set of\nfeatures and the importance of each feature is obtained either through\nany specific attribute or callable.\nThen, the least important features are pruned from current set of features.\nThat procedure is recursively repeated on the pruned set until the desired\nnumber of features to select is eventually reached. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/feature_selection.html#rfe",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array of shape [n_samples, n_features]",
                                    "param_desc": "The input samples.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "RFE",
                            "descriptions": "Feature ranking with recursive feature elimination. Given an external estimator that assigns weights to features (e.g., the\ncoefficients of a linear model), the goal of recursive feature elimination\n(RFE) is to select features by recursively considering smaller and smaller\nsets of features. First, the estimator is trained on the initial set of\nfeatures and the importance of each feature is obtained either through\nany specific attribute or callable.\nThen, the least important features are pruned from current set of features.\nThat procedure is recursively repeated on the pruned set until the desired\nnumber of features to select is eventually reached. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array of shape [n_samples, n_features]. The input samples.\n"
                                    }
                                },
                                "required": [
                                    "estimator"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "SelectFdr",
                        "func_desc": "Filter: Select the p-values for an estimated false discovery rate.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.SelectFdr.html#sklearn.feature_selection.SelectFdr",
                        "function_definitions": {
                            "function_name": "SelectFdr",
                            "full_function": "class sklearn.feature_selection.SelectFdr(score_func=<function f_classif>, *, alpha=0.05)",
                            "function_text": "Filter: Select the p-values for an estimated false discovery rate. This uses the Benjamini-Hochberg procedure. alpha is an upper bound\non the expected false discovery rate. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/feature_selection.html#univariate-feature-selection",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array of shape [n_samples, n_features]",
                                    "param_desc": "The input samples.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "SelectFdr",
                            "descriptions": "Filter: Select the p-values for an estimated false discovery rate. This uses the Benjamini-Hochberg procedure. alpha is an upper bound\non the expected false discovery rate. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array of shape [n_samples, n_features]. The input samples.\n"
                                    }
                                },
                                "required": [
                                    "score_func=<function f_classif>"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "SelectFromModel",
                        "func_desc": "Meta-transformer for selecting features based on importance weights.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.SelectFromModel.html#sklearn.feature_selection.SelectFromModel",
                        "function_definitions": {
                            "function_name": "SelectFromModel",
                            "full_function": "class sklearn.feature_selection.SelectFromModel(estimator, *, threshold=None, prefit=False, norm_order=1, max_features=None, importance_getter='auto')",
                            "function_text": "Meta-transformer for selecting features based on importance weights. Added in version 0.17. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/feature_selection.html#select-from-model",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array of shape [n_samples, n_features]",
                                    "param_desc": "The input samples.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "SelectFromModel",
                            "descriptions": "Meta-transformer for selecting features based on importance weights. Added in version 0.17. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array of shape [n_samples, n_features]. The input samples.\n"
                                    }
                                },
                                "required": [
                                    "estimator"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "SelectKBest",
                        "func_desc": "Select features according to the k highest scores.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.SelectKBest.html#sklearn.feature_selection.SelectKBest",
                        "function_definitions": {
                            "function_name": "SelectKBest",
                            "full_function": "class sklearn.feature_selection.SelectKBest(score_func=<function f_classif>, *, k=10)",
                            "function_text": "Select features according to the k highest scores. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/feature_selection.html#univariate-feature-selection",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array of shape [n_samples, n_features]",
                                    "param_desc": "The input samples.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "SelectKBest",
                            "descriptions": "Select features according to the k highest scores. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array of shape [n_samples, n_features]. The input samples.\n"
                                    }
                                },
                                "required": [
                                    "score_func=<function f_classif>"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "SelectorMixin",
                        "func_desc": "Transformer mixin that performs feature selection given a support mask",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.SelectorMixin.html#sklearn.feature_selection.SelectorMixin",
                        "function_definitions": {
                            "function_name": "SelectorMixin",
                            "full_function": "class sklearn.feature_selection.SelectorMixin",
                            "function_text": "Transformer mixin that performs feature selection given a support mask This mixin provides a feature selector implementation with transform and\ninverse_transform functionality given an implementation of\n_get_support_mask. Examples Fit to data, then transform it. Fits transformer to X and y with optional parameters fit_params\nand returns a transformed version of X.",
                            "func_text_user_guide": "#sklearn.feature_selection.SelectorMixin.transform",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array of shape [n_samples, n_features]",
                                    "param_desc": "The input samples.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "SelectorMixin",
                            "descriptions": "Transformer mixin that performs feature selection given a support mask This mixin provides a feature selector implementation with transform and\ninverse_transform functionality given an implementation of\n_get_support_mask. Examples Fit to data, then transform it. Fits transformer to X and y with optional parameters fit_params\nand returns a transformed version of X.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array of shape [n_samples, n_features]. The input samples.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "VarianceThreshold",
                        "func_desc": "Feature selector that removes all low-variance features.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.VarianceThreshold.html#sklearn.feature_selection.VarianceThreshold",
                        "function_definitions": {
                            "function_name": "VarianceThreshold",
                            "full_function": "class sklearn.feature_selection.VarianceThreshold(threshold=0.0)",
                            "function_text": "Feature selector that removes all low-variance features. This feature selection algorithm looks only at the features (X), not the\ndesired outputs (y), and can thus be used for unsupervised learning. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/feature_selection.html#variance-threshold",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array of shape [n_samples, n_features]",
                                    "param_desc": "The input samples.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "VarianceThreshold",
                            "descriptions": "Feature selector that removes all low-variance features. This feature selection algorithm looks only at the features (X), not the\ndesired outputs (y), and can thus be used for unsupervised learning. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array of shape [n_samples, n_features]. The input samples.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "f_classif",
                        "func_desc": "Compute the ANOVA F-value for the provided sample.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.f_classif.html#sklearn.feature_selection.f_classif",
                        "function_definitions": {
                            "function_name": "f_classif",
                            "full_function": "sklearn.feature_selection.f_classif(X, y)",
                            "function_text": "Compute the ANOVA F-value for the provided sample. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/feature_selection.html#univariate-feature-selection",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "The set of regressors that will be tested sequentially.\n"
                                },
                                {
                                    "param_name": "y",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "The target vector.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "f_classif",
                            "descriptions": "Compute the ANOVA F-value for the provided sample. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). The set of regressors that will be tested sequentially.\n"
                                    },
                                    "y": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). The target vector.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "mutual_info_classif",
                        "func_desc": "Estimate mutual information for a discrete target variable.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.mutual_info_classif.html#sklearn.feature_selection.mutual_info_classif",
                        "function_definitions": {
                            "function_name": "mutual_info_classif",
                            "full_function": "sklearn.feature_selection.mutual_info_classif(X, y, *, discrete_features='auto', n_neighbors=3, copy=True, random_state=None, n_jobs=None)",
                            "function_text": "Estimate mutual information for a discrete target variable. Mutual information (MI) [1] between two random variables is a non-negative\nvalue, which measures the dependency between the variables. It is equal\nto zero if and only if two random variables are independent, and higher\nvalues mean higher dependency. The function relies on nonparametric methods based on entropy estimation\nfrom k-nearest neighbors distances as described in [2] and [3]. Both\nmethods are based on the idea originally proposed in [4]. It can be used for univariate features selection, read more in the\nUser Guide.",
                            "func_text_user_guide": "#r50b872b699c4-1",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "Feature matrix.\n"
                                },
                                {
                                    "param_name": "y",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "Target vector.\n"
                                },
                                {
                                    "param_name": "discrete_features",
                                    "param_type": "\u2018auto\u2019, bool or array-like, default=\u2019auto\u2019",
                                    "param_desc": "If bool, then determines whether to consider all features discrete\nor continuous. If array, then it should be either a boolean mask\nwith shape (n_features,) or array with indices of discrete features.\nIf \u2018auto\u2019, it is assigned to False for dense X and to True for\nsparse X.\n"
                                },
                                {
                                    "param_name": "n_neighbors",
                                    "param_type": "int, default=3",
                                    "param_desc": "Number of neighbors to use for MI estimation for continuous variables,\nsee [2] and [3]. Higher values reduce variance of the estimation, but\ncould introduce a bias.\n"
                                },
                                {
                                    "param_name": "copy",
                                    "param_type": "bool, default=True",
                                    "param_desc": "Whether to make a copy of the given data. If set to False, the initial\ndata will be overwritten.\n"
                                },
                                {
                                    "param_name": "random_state",
                                    "param_type": "int, RandomState instance or None, default=None",
                                    "param_desc": "Determines random number generation for adding small noise to\ncontinuous variables in order to remove repeated values.\nPass an int for reproducible results across multiple function calls.\nSee Glossary.\n"
                                },
                                {
                                    "param_name": "n_jobs",
                                    "param_type": "int, default=None",
                                    "param_desc": "The number of jobs to use for computing the mutual information.\nThe parallelization is done on the columns of X.\nNone means 1 unless in a joblib.parallel_backend context.\n-1 means using all processors. See Glossary\nfor more details.\n\nAdded in version 1.5.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "mutual_info_classif",
                            "descriptions": "Estimate mutual information for a discrete target variable. Mutual information (MI) [1] between two random variables is a non-negative\nvalue, which measures the dependency between the variables. It is equal\nto zero if and only if two random variables are independent, and higher\nvalues mean higher dependency. The function relies on nonparametric methods based on entropy estimation\nfrom k-nearest neighbors distances as described in [2] and [3]. Both\nmethods are based on the idea originally proposed in [4]. It can be used for univariate features selection, read more in the\nUser Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). Feature matrix.\n"
                                    },
                                    "y": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). Target vector.\n"
                                    },
                                    "discrete_features": {
                                        "type": "boolean",
                                        "description": "\u2018auto\u2019, bool or array-like, default=\u2019auto\u2019. If bool, then determines whether to consider all features discrete\nor continuous. If array, then it should be either a boolean mask\nwith shape (n_features,) or array with indices of discrete features.\nIf \u2018auto\u2019, it is assigned to False for dense X and to True for\nsparse X.\n"
                                    },
                                    "n_neighbors": {
                                        "type": "integer",
                                        "description": "int, default=3. Number of neighbors to use for MI estimation for continuous variables,\nsee [2] and [3]. Higher values reduce variance of the estimation, but\ncould introduce a bias.\n"
                                    },
                                    "copy": {
                                        "type": "boolean",
                                        "description": "bool, default=True. Whether to make a copy of the given data. If set to False, the initial\ndata will be overwritten.\n"
                                    },
                                    "random_state": {
                                        "type": "integer",
                                        "description": "int, RandomState instance or None, default=None. Determines random number generation for adding small noise to\ncontinuous variables in order to remove repeated values.\nPass an int for reproducible results across multiple function calls.\nSee Glossary.\n"
                                    },
                                    "n_jobs": {
                                        "type": "integer",
                                        "description": "int, default=None. The number of jobs to use for computing the mutual information.\nThe parallelization is done on the columns of X.\nNone means 1 unless in a joblib.parallel_backend context.\n-1 means using all processors. See Glossary\nfor more details.\n\nAdded in version 1.5.\n\n"
                                    }
                                },
                                "required": [
                                    "X",
                                    "y"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "r_regression",
                        "func_desc": "Compute Pearson's r for each features and the target.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.r_regression.html#sklearn.feature_selection.r_regression",
                        "function_definitions": {
                            "function_name": "r_regression",
                            "full_function": "sklearn.feature_selection.r_regression(X, y, *, center=True, force_finite=True)",
                            "function_text": "Compute Pearson\u2019s r for each features and the target. Pearson\u2019s r is also known as the Pearson correlation coefficient. Linear model for testing the individual effect of each of many regressors.\nThis is a scoring function to be used in a feature selection procedure, not\na free standing feature selection procedure. The cross correlation between each regressor and the target is computed\nas: For more on usage see the User Guide. Added in version 1.0.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/feature_selection.html#univariate-feature-selection",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "The data matrix.\n"
                                },
                                {
                                    "param_name": "y",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "The target vector.\n"
                                },
                                {
                                    "param_name": "center",
                                    "param_type": "bool, default=True",
                                    "param_desc": "Whether or not to center the data matrix X and the target vector y.\nBy default, X and y will be centered.\n"
                                },
                                {
                                    "param_name": "force_finite",
                                    "param_type": "bool, default=True",
                                    "param_desc": "Whether or not to force the Pearson\u2019s R correlation to be finite.\nIn the particular case where some features in X or the target y\nare constant, the Pearson\u2019s R correlation is not defined. When\nforce_finite=False, a correlation of np.nan is returned to\nacknowledge this case. When force_finite=True, this value will be\nforced to a minimal correlation of 0.0.\n\nAdded in version 1.1.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "r_regression",
                            "descriptions": "Compute Pearson\u2019s r for each features and the target. Pearson\u2019s r is also known as the Pearson correlation coefficient. Linear model for testing the individual effect of each of many regressors.\nThis is a scoring function to be used in a feature selection procedure, not\na free standing feature selection procedure. The cross correlation between each regressor and the target is computed\nas: For more on usage see the User Guide. Added in version 1.0.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). The data matrix.\n"
                                    },
                                    "y": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). The target vector.\n"
                                    },
                                    "center": {
                                        "type": "boolean",
                                        "description": "bool, default=True. Whether or not to center the data matrix X and the target vector y.\nBy default, X and y will be centered.\n"
                                    },
                                    "force_finite": {
                                        "type": "boolean",
                                        "description": "bool, default=True. Whether or not to force the Pearson\u2019s R correlation to be finite.\nIn the particular case where some features in X or the target y\nare constant, the Pearson\u2019s R correlation is not defined. When\nforce_finite=False, a correlation of np.nan is returned to\nacknowledge this case. When force_finite=True, this value will be\nforced to a minimal correlation of 0.0.\n\nAdded in version 1.1.\n\n"
                                    }
                                },
                                "required": [
                                    "X",
                                    "y"
                                ]
                            }
                        }
                    }
                ]
            }
        ],
        "name": "sklearn.feature_selection",
        "url": "https://scikit-learn.org/stable/api/sklearn.feature_selection.html"
    },
    "sklearn.gaussian_process.html": {
        "functions": [
            {
                "defaults": [
                    {
                        "func_name": "GaussianProcessClassifier",
                        "func_desc": "Gaussian process classification (GPC) based on Laplace approximation.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.html#sklearn.gaussian_process.GaussianProcessClassifier",
                        "function_definitions": {
                            "function_name": "GaussianProcessClassifier",
                            "full_function": "class sklearn.gaussian_process.GaussianProcessClassifier(kernel=None, *, optimizer='fmin_l_bfgs_b', n_restarts_optimizer=0, max_iter_predict=100, warm_start=False, copy_X_train=True, random_state=None, multi_class='one_vs_rest', n_jobs=None)",
                            "function_text": "Gaussian process classification (GPC) based on Laplace approximation. The implementation is based on Algorithm 3.1, 3.2, and 5.1 from [RW2006]. Internally, the Laplace approximation is used for approximating the\nnon-Gaussian posterior by a Gaussian. Currently, the implementation is restricted to using the logistic link\nfunction. For multi-class classification, several binary one-versus rest\nclassifiers are fitted. Note that this class thus does not implement\na true multi-class Laplace approximation. Read more in the User Guide. Added in version 0.18.",
                            "func_text_user_guide": "#r2da648a61a73-rw2006",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "GaussianProcessClassifier",
                            "descriptions": "Gaussian process classification (GPC) based on Laplace approximation. The implementation is based on Algorithm 3.1, 3.2, and 5.1 from [RW2006]. Internally, the Laplace approximation is used for approximating the\nnon-Gaussian posterior by a Gaussian. Currently, the implementation is restricted to using the logistic link\nfunction. For multi-class classification, several binary one-versus rest\nclassifiers are fitted. Note that this class thus does not implement\na true multi-class Laplace approximation. Read more in the User Guide. Added in version 0.18.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": [
                                    "kernel=None"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "GaussianProcessRegressor",
                        "func_desc": "Gaussian process regression (GPR).",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.gaussian_process.GaussianProcessRegressor.html#sklearn.gaussian_process.GaussianProcessRegressor",
                        "function_definitions": {
                            "function_name": "GaussianProcessRegressor",
                            "full_function": "class sklearn.gaussian_process.GaussianProcessRegressor(kernel=None, *, alpha=1e-10, optimizer='fmin_l_bfgs_b', n_restarts_optimizer=0, normalize_y=False, copy_X_train=True, n_targets=None, random_state=None)",
                            "function_text": "Gaussian process regression (GPR). The implementation is based on Algorithm 2.1 of [RW2006]. In addition to standard scikit-learn estimator API,\nGaussianProcessRegressor: allows prediction without prior fitting (based on the GP prior) provides an additional method sample_y(X), which evaluates samples\ndrawn from the GPR (prior or posterior) at given inputs exposes a method log_marginal_likelihood(theta), which can be used\nexternally for other ways of selecting hyperparameters, e.g., via\nMarkov chain Monte Carlo. To learn the difference between a point-estimate approach vs. a more\nBayesian modelling approach, refer to the example entitled\nComparison of kernel ridge and Gaussian process regression. Read more in the User Guide. Added in version 0.18.",
                            "func_text_user_guide": "#rf75674b0f418-rw2006",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "GaussianProcessRegressor",
                            "descriptions": "Gaussian process regression (GPR). The implementation is based on Algorithm 2.1 of [RW2006]. In addition to standard scikit-learn estimator API,\nGaussianProcessRegressor: allows prediction without prior fitting (based on the GP prior) provides an additional method sample_y(X), which evaluates samples\ndrawn from the GPR (prior or posterior) at given inputs exposes a method log_marginal_likelihood(theta), which can be used\nexternally for other ways of selecting hyperparameters, e.g., via\nMarkov chain Monte Carlo. To learn the difference between a point-estimate approach vs. a more\nBayesian modelling approach, refer to the example entitled\nComparison of kernel ridge and Gaussian process regression. Read more in the User Guide. Added in version 0.18.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": [
                                    "kernel=None"
                                ]
                            }
                        }
                    }
                ]
            },
            {
                "Kernels": [
                    {
                        "func_name": "kernels.CompoundKernel",
                        "func_desc": "Kernel which is composed of a set of other kernels.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.gaussian_process.kernels.CompoundKernel.html#sklearn.gaussian_process.kernels.CompoundKernel",
                        "function_definitions": {
                            "function_name": "CompoundKernel",
                            "full_function": "class sklearn.gaussian_process.kernels.CompoundKernel(kernels)",
                            "function_text": "Kernel which is composed of a set of other kernels. Added in version 0.18.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "theta",
                                    "param_type": "ndarray of shape (n_dims,)",
                                    "param_desc": "The non-fixed, log-transformed hyperparameters of the kernel\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "CompoundKernel",
                            "descriptions": "Kernel which is composed of a set of other kernels. Added in version 0.18.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "theta": {
                                        "type": "array",
                                        "description": "ndarray of shape (n_dims,). The non-fixed, log-transformed hyperparameters of the kernel\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "kernels.DotProduct",
                        "func_desc": "Dot-Product kernel.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.gaussian_process.kernels.DotProduct.html#sklearn.gaussian_process.kernels.DotProduct",
                        "function_definitions": {
                            "function_name": "DotProduct",
                            "full_function": "class sklearn.gaussian_process.kernels.DotProduct(sigma_0=1.0, sigma_0_bounds=(1e-05, 100000.0))",
                            "function_text": "Dot-Product kernel. The DotProduct kernel is non-stationary and can be obtained from linear\nregression by putting \\(N(0, 1)\\) priors on the coefficients\nof \\(x_d (d = 1, . . . , D)\\) and a prior of \\(N(0, \\sigma_0^2)\\)\non the bias. The DotProduct kernel is invariant to a rotation of\nthe coordinates about the origin, but not translations.\nIt is parameterized by a parameter sigma_0 \\(\\sigma\\)\nwhich controls the inhomogenity of the kernel. For \\(\\sigma_0^2 =0\\),\nthe kernel is called the homogeneous linear kernel, otherwise\nit is inhomogeneous. The kernel is given by The DotProduct kernel is commonly combined with exponentiation. See [1], Chapter 4, Section 4.2, for further details regarding the\nDotProduct kernel. Read more in the User Guide. Added in version 0.18.",
                            "func_text_user_guide": "#r95f74c4622c1-1",
                            "parameter_names_desc": [
                                {
                                    "param_name": "theta",
                                    "param_type": "ndarray of shape (n_dims,)",
                                    "param_desc": "The non-fixed, log-transformed hyperparameters of the kernel\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "DotProduct",
                            "descriptions": "Dot-Product kernel. The DotProduct kernel is non-stationary and can be obtained from linear\nregression by putting \\(N(0, 1)\\) priors on the coefficients\nof \\(x_d (d = 1, . . . , D)\\) and a prior of \\(N(0, \\sigma_0^2)\\)\non the bias. The DotProduct kernel is invariant to a rotation of\nthe coordinates about the origin, but not translations.\nIt is parameterized by a parameter sigma_0 \\(\\sigma\\)\nwhich controls the inhomogenity of the kernel. For \\(\\sigma_0^2 =0\\),\nthe kernel is called the homogeneous linear kernel, otherwise\nit is inhomogeneous. The kernel is given by The DotProduct kernel is commonly combined with exponentiation. See [1], Chapter 4, Section 4.2, for further details regarding the\nDotProduct kernel. Read more in the User Guide. Added in version 0.18.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "theta": {
                                        "type": "array",
                                        "description": "ndarray of shape (n_dims,). The non-fixed, log-transformed hyperparameters of the kernel\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "kernels.Exponentiation",
                        "func_desc": "The Exponentiation kernel takes one base kernel and a scalar parameter \\(p\\) and combines them via",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.gaussian_process.kernels.Exponentiation.html#sklearn.gaussian_process.kernels.Exponentiation",
                        "function_definitions": {
                            "function_name": "Exponentiation",
                            "full_function": "class sklearn.gaussian_process.kernels.Exponentiation(kernel, exponent)",
                            "function_text": "The Exponentiation kernel takes one base kernel and a scalar parameter\n\\(p\\) and combines them via Note that the __pow__ magic method is overridden, so\nExponentiation(RBF(), 2) is equivalent to using the ** operator\nwith RBF() ** 2. Read more in the User Guide. Added in version 0.18.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/gaussian_process.html#gp-kernels",
                            "parameter_names_desc": [
                                {
                                    "param_name": "theta",
                                    "param_type": "ndarray of shape (n_dims,)",
                                    "param_desc": "The non-fixed, log-transformed hyperparameters of the kernel\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "Exponentiation",
                            "descriptions": "The Exponentiation kernel takes one base kernel and a scalar parameter\n\\(p\\) and combines them via Note that the __pow__ magic method is overridden, so\nExponentiation(RBF(), 2) is equivalent to using the ** operator\nwith RBF() ** 2. Read more in the User Guide. Added in version 0.18.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "theta": {
                                        "type": "array",
                                        "description": "ndarray of shape (n_dims,). The non-fixed, log-transformed hyperparameters of the kernel\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "kernels.Kernel",
                        "func_desc": "Base class for all kernels.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.gaussian_process.kernels.Kernel.html#sklearn.gaussian_process.kernels.Kernel",
                        "function_definitions": {
                            "function_name": "Kernel",
                            "full_function": "class sklearn.gaussian_process.kernels.Kernel",
                            "function_text": "Base class for all kernels. Added in version 0.18. Examples Evaluate the kernel. Returns the log-transformed bounds on the theta.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": []
                        },
                        "function_calling": {}
                    },
                    {
                        "func_name": "kernels.PairwiseKernel",
                        "func_desc": "Wrapper for kernels in sklearn.metrics.pairwise.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel.html#sklearn.gaussian_process.kernels.PairwiseKernel",
                        "function_definitions": {
                            "function_name": "PairwiseKernel",
                            "full_function": "class sklearn.gaussian_process.kernels.PairwiseKernel(gamma=1.0, gamma_bounds=(1e-05, 100000.0), metric='linear', pairwise_kernels_kwargs=None)",
                            "function_text": "Wrapper for kernels in sklearn.metrics.pairwise. A thin wrapper around the functionality of the kernels in\nsklearn.metrics.pairwise. kernels support only isotropic distances. The parameter gamma is\nconsidered to be a hyperparameter and may be optimized. The other\nkernel parameters are set directly at initialization and are kept\nfixed. Added in version 0.18.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "theta",
                                    "param_type": "ndarray of shape (n_dims,)",
                                    "param_desc": "The non-fixed, log-transformed hyperparameters of the kernel\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "PairwiseKernel",
                            "descriptions": "Wrapper for kernels in sklearn.metrics.pairwise. A thin wrapper around the functionality of the kernels in\nsklearn.metrics.pairwise. kernels support only isotropic distances. The parameter gamma is\nconsidered to be a hyperparameter and may be optimized. The other\nkernel parameters are set directly at initialization and are kept\nfixed. Added in version 0.18.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "theta": {
                                        "type": "array",
                                        "description": "ndarray of shape (n_dims,). The non-fixed, log-transformed hyperparameters of the kernel\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "kernels.RBF",
                        "func_desc": "Radial basis function kernel (aka squared-exponential kernel).",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.gaussian_process.kernels.RBF.html#sklearn.gaussian_process.kernels.RBF",
                        "function_definitions": {
                            "function_name": "RBF",
                            "full_function": "class sklearn.gaussian_process.kernels.RBF(length_scale=1.0, length_scale_bounds=(1e-05, 100000.0))",
                            "function_text": "Radial basis function kernel (aka squared-exponential kernel). The RBF kernel is a stationary kernel. It is also known as the\n\u201csquared exponential\u201d kernel. It is parameterized by a length scale\nparameter \\(l>0\\), which can either be a scalar (isotropic variant\nof the kernel) or a vector with the same number of dimensions as the inputs\nX (anisotropic variant of the kernel). The kernel is given by: where \\(l\\) is the length scale of the kernel and\n\\(d(\\cdot,\\cdot)\\) is the Euclidean distance.\nFor advice on how to set the length scale parameter, see e.g. [1]. This kernel is infinitely differentiable, which implies that GPs with this\nkernel as covariance function have mean square derivatives of all orders,\nand are thus very smooth.\nSee [2], Chapter 4, Section 4.2, for further details of the RBF kernel. Read more in the User Guide. Added in version 0.18.",
                            "func_text_user_guide": "#redc669bcbe98-1",
                            "parameter_names_desc": [
                                {
                                    "param_name": "theta",
                                    "param_type": "ndarray of shape (n_dims,)",
                                    "param_desc": "The non-fixed, log-transformed hyperparameters of the kernel\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "RBF",
                            "descriptions": "Radial basis function kernel (aka squared-exponential kernel). The RBF kernel is a stationary kernel. It is also known as the\n\u201csquared exponential\u201d kernel. It is parameterized by a length scale\nparameter \\(l>0\\), which can either be a scalar (isotropic variant\nof the kernel) or a vector with the same number of dimensions as the inputs\nX (anisotropic variant of the kernel). The kernel is given by: where \\(l\\) is the length scale of the kernel and\n\\(d(\\cdot,\\cdot)\\) is the Euclidean distance.\nFor advice on how to set the length scale parameter, see e.g. [1]. This kernel is infinitely differentiable, which implies that GPs with this\nkernel as covariance function have mean square derivatives of all orders,\nand are thus very smooth.\nSee [2], Chapter 4, Section 4.2, for further details of the RBF kernel. Read more in the User Guide. Added in version 0.18.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "theta": {
                                        "type": "array",
                                        "description": "ndarray of shape (n_dims,). The non-fixed, log-transformed hyperparameters of the kernel\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "kernels.Sum",
                        "func_desc": "The Sum kernel takes two kernels \\(k_1\\) and \\(k_2\\) and combines them via",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.gaussian_process.kernels.Sum.html#sklearn.gaussian_process.kernels.Sum",
                        "function_definitions": {
                            "function_name": "Sum",
                            "full_function": "class sklearn.gaussian_process.kernels.Sum(k1, k2)",
                            "function_text": "The Sum kernel takes two kernels \\(k_1\\) and \\(k_2\\)\nand combines them via Note that the __add__ magic method is overridden, so\nSum(RBF(), RBF()) is equivalent to using the + operator\nwith RBF() + RBF(). Read more in the User Guide. Added in version 0.18.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/gaussian_process.html#gp-kernels",
                            "parameter_names_desc": [
                                {
                                    "param_name": "theta",
                                    "param_type": "ndarray of shape (n_dims,)",
                                    "param_desc": "The non-fixed, log-transformed hyperparameters of the kernel\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "Sum",
                            "descriptions": "The Sum kernel takes two kernels \\(k_1\\) and \\(k_2\\)\nand combines them via Note that the __add__ magic method is overridden, so\nSum(RBF(), RBF()) is equivalent to using the + operator\nwith RBF() + RBF(). Read more in the User Guide. Added in version 0.18.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "theta": {
                                        "type": "array",
                                        "description": "ndarray of shape (n_dims,). The non-fixed, log-transformed hyperparameters of the kernel\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "kernels.ConstantKernel",
                        "func_desc": "Constant kernel.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.gaussian_process.kernels.ConstantKernel.html#sklearn.gaussian_process.kernels.ConstantKernel",
                        "function_definitions": {
                            "function_name": "ConstantKernel",
                            "full_function": "class sklearn.gaussian_process.kernels.ConstantKernel(constant_value=1.0, constant_value_bounds=(1e-05, 100000.0))",
                            "function_text": "Constant kernel. Can be used as part of a product-kernel where it scales the magnitude of\nthe other factor (kernel) or as part of a sum-kernel, where it modifies\nthe mean of the Gaussian process. Adding a constant kernel is equivalent to adding a constant: is the same as: Read more in the User Guide. Added in version 0.18.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/gaussian_process.html#gp-kernels",
                            "parameter_names_desc": [
                                {
                                    "param_name": "theta",
                                    "param_type": "ndarray of shape (n_dims,)",
                                    "param_desc": "The non-fixed, log-transformed hyperparameters of the kernel\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "ConstantKernel",
                            "descriptions": "Constant kernel. Can be used as part of a product-kernel where it scales the magnitude of\nthe other factor (kernel) or as part of a sum-kernel, where it modifies\nthe mean of the Gaussian process. Adding a constant kernel is equivalent to adding a constant: is the same as: Read more in the User Guide. Added in version 0.18.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "theta": {
                                        "type": "array",
                                        "description": "ndarray of shape (n_dims,). The non-fixed, log-transformed hyperparameters of the kernel\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "kernels.ExpSineSquared",
                        "func_desc": "Exp-Sine-Squared kernel (aka periodic kernel).",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared.html#sklearn.gaussian_process.kernels.ExpSineSquared",
                        "function_definitions": {
                            "function_name": "ExpSineSquared",
                            "full_function": "class sklearn.gaussian_process.kernels.ExpSineSquared(length_scale=1.0, periodicity=1.0, length_scale_bounds=(1e-05, 100000.0), periodicity_bounds=(1e-05, 100000.0))",
                            "function_text": "Exp-Sine-Squared kernel (aka periodic kernel). The ExpSineSquared kernel allows one to model functions which repeat\nthemselves exactly. It is parameterized by a length scale\nparameter \\(l>0\\) and a periodicity parameter \\(p>0\\).\nOnly the isotropic variant where \\(l\\) is a scalar is\nsupported at the moment. The kernel is given by: where \\(l\\) is the length scale of the kernel, \\(p\\) the\nperiodicity of the kernel and \\(d(\\cdot,\\cdot)\\) is the\nEuclidean distance. Read more in the User Guide. Added in version 0.18.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/gaussian_process.html#gp-kernels",
                            "parameter_names_desc": [
                                {
                                    "param_name": "theta",
                                    "param_type": "ndarray of shape (n_dims,)",
                                    "param_desc": "The non-fixed, log-transformed hyperparameters of the kernel\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "ExpSineSquared",
                            "descriptions": "Exp-Sine-Squared kernel (aka periodic kernel). The ExpSineSquared kernel allows one to model functions which repeat\nthemselves exactly. It is parameterized by a length scale\nparameter \\(l>0\\) and a periodicity parameter \\(p>0\\).\nOnly the isotropic variant where \\(l\\) is a scalar is\nsupported at the moment. The kernel is given by: where \\(l\\) is the length scale of the kernel, \\(p\\) the\nperiodicity of the kernel and \\(d(\\cdot,\\cdot)\\) is the\nEuclidean distance. Read more in the User Guide. Added in version 0.18.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "theta": {
                                        "type": "array",
                                        "description": "ndarray of shape (n_dims,). The non-fixed, log-transformed hyperparameters of the kernel\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "kernels.Hyperparameter",
                        "func_desc": "A kernel hyperparameter's specification in form of a namedtuple.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.gaussian_process.kernels.Hyperparameter.html#sklearn.gaussian_process.kernels.Hyperparameter",
                        "function_definitions": {
                            "function_name": "Hyperparameter",
                            "full_function": "class sklearn.gaussian_process.kernels.Hyperparameter(name, value_type, bounds, n_elements=1, fixed=None)",
                            "function_text": "A kernel hyperparameter\u2019s specification in form of a namedtuple. Added in version 0.18.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": []
                        },
                        "function_calling": {}
                    },
                    {
                        "func_name": "kernels.Matern",
                        "func_desc": "Matern kernel.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.gaussian_process.kernels.Matern.html#sklearn.gaussian_process.kernels.Matern",
                        "function_definitions": {
                            "function_name": "Matern",
                            "full_function": "class sklearn.gaussian_process.kernels.Matern(length_scale=1.0, length_scale_bounds=(1e-05, 100000.0), nu=1.5)",
                            "function_text": "Matern kernel. The class of Matern kernels is a generalization of the RBF.\nIt has an additional parameter \\(\\nu\\) which controls the\nsmoothness of the resulting function. The smaller \\(\\nu\\),\nthe less smooth the approximated function is.\nAs \\(\\nu\\rightarrow\\infty\\), the kernel becomes equivalent to\nthe RBF kernel. When \\(\\nu = 1/2\\), the Mat\u00e9rn kernel\nbecomes identical to the absolute exponential kernel.\nImportant intermediate values are\n\\(\\nu=1.5\\) (once differentiable functions)\nand \\(\\nu=2.5\\) (twice differentiable functions). The kernel is given by: where \\(d(\\cdot,\\cdot)\\) is the Euclidean distance,\n\\(K_{\\nu}(\\cdot)\\) is a modified Bessel function and\n\\(\\Gamma(\\cdot)\\) is the gamma function.\nSee [1], Chapter 4, Section 4.2, for details regarding the different\nvariants of the Matern kernel. Read more in the User Guide. Added in version 0.18.",
                            "func_text_user_guide": "sklearn.gaussian_process.kernels.RBF.html#sklearn.gaussian_process.kernels.RBF",
                            "parameter_names_desc": [
                                {
                                    "param_name": "theta",
                                    "param_type": "ndarray of shape (n_dims,)",
                                    "param_desc": "The non-fixed, log-transformed hyperparameters of the kernel\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "Matern",
                            "descriptions": "Matern kernel. The class of Matern kernels is a generalization of the RBF.\nIt has an additional parameter \\(\\nu\\) which controls the\nsmoothness of the resulting function. The smaller \\(\\nu\\),\nthe less smooth the approximated function is.\nAs \\(\\nu\\rightarrow\\infty\\), the kernel becomes equivalent to\nthe RBF kernel. When \\(\\nu = 1/2\\), the Mat\u00e9rn kernel\nbecomes identical to the absolute exponential kernel.\nImportant intermediate values are\n\\(\\nu=1.5\\) (once differentiable functions)\nand \\(\\nu=2.5\\) (twice differentiable functions). The kernel is given by: where \\(d(\\cdot,\\cdot)\\) is the Euclidean distance,\n\\(K_{\\nu}(\\cdot)\\) is a modified Bessel function and\n\\(\\Gamma(\\cdot)\\) is the gamma function.\nSee [1], Chapter 4, Section 4.2, for details regarding the different\nvariants of the Matern kernel. Read more in the User Guide. Added in version 0.18.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "theta": {
                                        "type": "array",
                                        "description": "ndarray of shape (n_dims,). The non-fixed, log-transformed hyperparameters of the kernel\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "kernels.Product",
                        "func_desc": "The Product kernel takes two kernels \\(k_1\\) and \\(k_2\\) and combines them via",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.gaussian_process.kernels.Product.html#sklearn.gaussian_process.kernels.Product",
                        "function_definitions": {
                            "function_name": "Product",
                            "full_function": "class sklearn.gaussian_process.kernels.Product(k1, k2)",
                            "function_text": "The Product kernel takes two kernels \\(k_1\\) and \\(k_2\\)\nand combines them via Note that the __mul__ magic method is overridden, so\nProduct(RBF(), RBF()) is equivalent to using the * operator\nwith RBF() * RBF(). Read more in the User Guide. Added in version 0.18.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/gaussian_process.html#gp-kernels",
                            "parameter_names_desc": [
                                {
                                    "param_name": "theta",
                                    "param_type": "ndarray of shape (n_dims,)",
                                    "param_desc": "The non-fixed, log-transformed hyperparameters of the kernel\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "Product",
                            "descriptions": "The Product kernel takes two kernels \\(k_1\\) and \\(k_2\\)\nand combines them via Note that the __mul__ magic method is overridden, so\nProduct(RBF(), RBF()) is equivalent to using the * operator\nwith RBF() * RBF(). Read more in the User Guide. Added in version 0.18.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "theta": {
                                        "type": "array",
                                        "description": "ndarray of shape (n_dims,). The non-fixed, log-transformed hyperparameters of the kernel\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "kernels.RationalQuadratic",
                        "func_desc": "Rational Quadratic kernel.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic.html#sklearn.gaussian_process.kernels.RationalQuadratic",
                        "function_definitions": {
                            "function_name": "RationalQuadratic",
                            "full_function": "class sklearn.gaussian_process.kernels.RationalQuadratic(length_scale=1.0, alpha=1.0, length_scale_bounds=(1e-05, 100000.0), alpha_bounds=(1e-05, 100000.0))",
                            "function_text": "Rational Quadratic kernel. The RationalQuadratic kernel can be seen as a scale mixture (an infinite\nsum) of RBF kernels with different characteristic length scales. It is\nparameterized by a length scale parameter \\(l>0\\) and a scale\nmixture parameter \\(\\alpha>0\\). Only the isotropic variant\nwhere length_scale \\(l\\) is a scalar is supported at the moment.\nThe kernel is given by: where \\(\\alpha\\) is the scale mixture parameter, \\(l\\) is\nthe length scale of the kernel and \\(d(\\cdot,\\cdot)\\) is the\nEuclidean distance.\nFor advice on how to set the parameters, see e.g. [1]. Read more in the User Guide. Added in version 0.18.",
                            "func_text_user_guide": "#rc7764613bdcf-1",
                            "parameter_names_desc": [
                                {
                                    "param_name": "theta",
                                    "param_type": "ndarray of shape (n_dims,)",
                                    "param_desc": "The non-fixed, log-transformed hyperparameters of the kernel\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "RationalQuadratic",
                            "descriptions": "Rational Quadratic kernel. The RationalQuadratic kernel can be seen as a scale mixture (an infinite\nsum) of RBF kernels with different characteristic length scales. It is\nparameterized by a length scale parameter \\(l>0\\) and a scale\nmixture parameter \\(\\alpha>0\\). Only the isotropic variant\nwhere length_scale \\(l\\) is a scalar is supported at the moment.\nThe kernel is given by: where \\(\\alpha\\) is the scale mixture parameter, \\(l\\) is\nthe length scale of the kernel and \\(d(\\cdot,\\cdot)\\) is the\nEuclidean distance.\nFor advice on how to set the parameters, see e.g. [1]. Read more in the User Guide. Added in version 0.18.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "theta": {
                                        "type": "array",
                                        "description": "ndarray of shape (n_dims,). The non-fixed, log-transformed hyperparameters of the kernel\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "kernels.WhiteKernel",
                        "func_desc": "White kernel.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.gaussian_process.kernels.WhiteKernel.html#sklearn.gaussian_process.kernels.WhiteKernel",
                        "function_definitions": {
                            "function_name": "WhiteKernel",
                            "full_function": "class sklearn.gaussian_process.kernels.WhiteKernel(noise_level=1.0, noise_level_bounds=(1e-05, 100000.0))",
                            "function_text": "White kernel. The main use-case of this kernel is as part of a sum-kernel where it\nexplains the noise of the signal as independently and identically\nnormally-distributed. The parameter noise_level equals the variance of this\nnoise. Read more in the User Guide. Added in version 0.18.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/gaussian_process.html#gp-kernels",
                            "parameter_names_desc": [
                                {
                                    "param_name": "theta",
                                    "param_type": "ndarray of shape (n_dims,)",
                                    "param_desc": "The non-fixed, log-transformed hyperparameters of the kernel\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "WhiteKernel",
                            "descriptions": "White kernel. The main use-case of this kernel is as part of a sum-kernel where it\nexplains the noise of the signal as independently and identically\nnormally-distributed. The parameter noise_level equals the variance of this\nnoise. Read more in the User Guide. Added in version 0.18.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "theta": {
                                        "type": "array",
                                        "description": "ndarray of shape (n_dims,). The non-fixed, log-transformed hyperparameters of the kernel\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    }
                ]
            }
        ],
        "name": "sklearn.gaussian_process",
        "url": "https://scikit-learn.org/stable/api/sklearn.gaussian_process.html"
    },
    "sklearn.impute.html": {
        "functions": [
            {
                "defaults": [
                    {
                        "func_name": "IterativeImputer",
                        "func_desc": "Multivariate imputer that estimates each feature from all the others.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.impute.IterativeImputer.html#sklearn.impute.IterativeImputer",
                        "function_definitions": {
                            "function_name": "IterativeImputer",
                            "full_function": "class sklearn.impute.IterativeImputer(estimator=None, *, missing_values=nan, sample_posterior=False, max_iter=10, tol=0.001, n_nearest_features=None, initial_strategy='mean', fill_value=None, imputation_order='ascending', skip_complete=False, min_value=-inf, max_value=inf, verbose=0, random_state=None, add_indicator=False, keep_empty_features=False)",
                            "function_text": "Multivariate imputer that estimates each feature from all the others. A strategy for imputing missing values by modeling each feature with\nmissing values as a function of other features in a round-robin fashion. Read more in the User Guide. Added in version 0.21. Note This estimator is still experimental for now: the predictions\nand the API might change without any deprecation cycle. To use it,\nyou need to explicitly import enable_iterative_imputer:",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/impute.html#iterative-imputer",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples, n_features)",
                                    "param_desc": "The input data to complete.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "IterativeImputer",
                            "descriptions": "Multivariate imputer that estimates each feature from all the others. A strategy for imputing missing values by modeling each feature with\nmissing values as a function of other features in a round-robin fashion. Read more in the User Guide. Added in version 0.21. Note This estimator is still experimental for now: the predictions\nand the API might change without any deprecation cycle. To use it,\nyou need to explicitly import enable_iterative_imputer:",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_features). The input data to complete.\n"
                                    }
                                },
                                "required": [
                                    "estimator=None"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "MissingIndicator",
                        "func_desc": "Binary indicators for missing values.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.impute.MissingIndicator.html#sklearn.impute.MissingIndicator",
                        "function_definitions": {
                            "function_name": "MissingIndicator",
                            "full_function": "class sklearn.impute.MissingIndicator(*, missing_values=nan, features='missing-only', sparse='auto', error_on_new=True)",
                            "function_text": "Binary indicators for missing values. Note that this component typically should not be used in a vanilla\nPipeline consisting of transformers and a\nclassifier, but rather could be added using a\nFeatureUnion or\nColumnTransformer. Read more in the User Guide. Added in version 0.20.",
                            "func_text_user_guide": "sklearn.pipeline.Pipeline.html#sklearn.pipeline.Pipeline",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "The input data to complete.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "MissingIndicator",
                            "descriptions": "Binary indicators for missing values. Note that this component typically should not be used in a vanilla\nPipeline consisting of transformers and a\nclassifier, but rather could be added using a\nFeatureUnion or\nColumnTransformer. Read more in the User Guide. Added in version 0.20.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). The input data to complete.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "KNNImputer",
                        "func_desc": "Imputation for completing missing values using k-Nearest Neighbors.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.impute.KNNImputer.html#sklearn.impute.KNNImputer",
                        "function_definitions": {
                            "function_name": "KNNImputer",
                            "full_function": "class sklearn.impute.KNNImputer(*, missing_values=nan, n_neighbors=5, weights='uniform', metric='nan_euclidean', copy=True, add_indicator=False, keep_empty_features=False)",
                            "function_text": "Imputation for completing missing values using k-Nearest Neighbors. Each sample\u2019s missing values are imputed using the mean value from\nn_neighbors nearest neighbors found in the training set. Two samples are\nclose if the features that neither is missing are close. Read more in the User Guide. Added in version 0.22.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/impute.html#knnimpute",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples, n_features)",
                                    "param_desc": "The input data to complete.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "KNNImputer",
                            "descriptions": "Imputation for completing missing values using k-Nearest Neighbors. Each sample\u2019s missing values are imputed using the mean value from\nn_neighbors nearest neighbors found in the training set. Two samples are\nclose if the features that neither is missing are close. Read more in the User Guide. Added in version 0.22.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_features). The input data to complete.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "SimpleImputer",
                        "func_desc": "Univariate imputer for completing missing values with simple strategies.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.impute.SimpleImputer.html#sklearn.impute.SimpleImputer",
                        "function_definitions": {
                            "function_name": "SimpleImputer",
                            "full_function": "class sklearn.impute.SimpleImputer(*, missing_values=nan, strategy='mean', fill_value=None, copy=True, add_indicator=False, keep_empty_features=False)",
                            "function_text": "Univariate imputer for completing missing values with simple strategies. Replace missing values using a descriptive statistic (e.g. mean, median, or\nmost frequent) along each column, or using a constant value. Read more in the User Guide. Added in version 0.20: SimpleImputer replaces the previous sklearn.preprocessing.Imputer\nestimator which is now removed.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/impute.html#impute",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix}, shape (n_samples, n_features)",
                                    "param_desc": "The input data to complete.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "SimpleImputer",
                            "descriptions": "Univariate imputer for completing missing values with simple strategies. Replace missing values using a descriptive statistic (e.g. mean, median, or\nmost frequent) along each column, or using a constant value. Read more in the User Guide. Added in version 0.20: SimpleImputer replaces the previous sklearn.preprocessing.Imputer\nestimator which is now removed.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix}, shape (n_samples, n_features). The input data to complete.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    }
                ]
            }
        ],
        "name": "sklearn.impute",
        "url": "https://scikit-learn.org/stable/api/sklearn.impute.html"
    },
    "sklearn.inspection.html": {
        "functions": [
            {
                "defaults": [
                    {
                        "func_name": "partial_dependence",
                        "func_desc": "Partial dependence of features.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.inspection.partial_dependence.html#sklearn.inspection.partial_dependence",
                        "function_definitions": {
                            "function_name": "partial_dependence",
                            "full_function": "sklearn.inspection.partial_dependence(estimator, X, features, *, sample_weight=None, categorical_features=None, feature_names=None, response_method='auto', percentiles=(0.05, 0.95), grid_resolution=100, method='auto', kind='average')",
                            "function_text": "Partial dependence of features. Partial dependence of a feature (or a set of features) corresponds to\nthe average response of an estimator for each possible value of the\nfeature. Read more in the User Guide. Warning For GradientBoostingClassifier and\nGradientBoostingRegressor, the\n'recursion' method (used by default) will not account for the init\npredictor of the boosting process. In practice, this will produce\nthe same values as 'brute' up to a constant offset in the target\nresponse, provided that init is a constant estimator (which is the\ndefault). However, if init is not a constant estimator, the\npartial dependence values are incorrect for 'recursion' because the\noffset will be sample-dependent. It is preferable to use the 'brute'\nmethod. Note that this only applies to\nGradientBoostingClassifier and\nGradientBoostingRegressor, not to\nHistGradientBoostingClassifier and\nHistGradientBoostingRegressor.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/partial_dependence.html#partial-dependence",
                            "parameter_names_desc": [
                                {
                                    "param_name": "estimator",
                                    "param_type": "BaseEstimator",
                                    "param_desc": "A fitted estimator object implementing predict,\npredict_proba, or decision_function.\nMultioutput-multiclass classifiers are not supported.\n"
                                },
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix or dataframe} of shape (n_samples, n_features)",
                                    "param_desc": "X is used to generate a grid of values for the target\nfeatures (where the partial dependence will be evaluated), and\nalso to generate values for the complement features when the\nmethod is \u2018brute\u2019.\n"
                                },
                                {
                                    "param_name": "features",
                                    "param_type": "array-like of {int, str, bool} or int or str",
                                    "param_desc": "The feature (e.g. [0]) or pair of interacting features\n(e.g. [(0, 1)]) for which the partial dependency should be computed.\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Sample weights are used to calculate weighted means when averaging the\nmodel output. If None, then samples are equally weighted. If\nsample_weight is not None, then method will be set to 'brute'.\nNote that sample_weight is ignored for kind='individual'.\n\nAdded in version 1.3.\n\n"
                                },
                                {
                                    "param_name": "categorical_features",
                                    "param_type": "array-like of shape (n_features,) or shape             (n_categorical_features,), dtype={bool, int, str}, default=None",
                                    "param_desc": "Indicates the categorical features.\n\nNone: no feature will be considered categorical;\n\nboolean array-like: boolean mask of shape (n_features,)indicating which features are categorical. Thus, this array has\nthe same shape has X.shape[1];\n\n\n\n\ninteger or string array-like: integer indices or stringsindicating categorical features.\n\n\n\n\n\nAdded in version 1.2.\n\n"
                                },
                                {
                                    "param_name": "feature_names",
                                    "param_type": "array-like of shape (n_features,), dtype=str, default=None",
                                    "param_desc": "Name of each feature; feature_names[i] holds the name of the feature\nwith index i.\nBy default, the name of the feature corresponds to their numerical\nindex for NumPy array and their column name for pandas dataframe.\n\nAdded in version 1.2.\n\n"
                                },
                                {
                                    "param_name": "response_method",
                                    "param_type": "{\u2018auto\u2019, \u2018predict_proba\u2019, \u2018decision_function\u2019},             default=\u2019auto\u2019",
                                    "param_desc": "Specifies whether to use predict_proba or\ndecision_function as the target response. For regressors\nthis parameter is ignored and the response is always the output of\npredict. By default, predict_proba is tried first\nand we revert to decision_function if it doesn\u2019t exist. If\nmethod is \u2018recursion\u2019, the response is always the output of\ndecision_function.\n"
                                },
                                {
                                    "param_name": "percentiles",
                                    "param_type": "tuple of float, default=(0.05, 0.95)",
                                    "param_desc": "The lower and upper percentile used to create the extreme values\nfor the grid. Must be in [0, 1].\n"
                                },
                                {
                                    "param_name": "grid_resolution",
                                    "param_type": "int, default=100",
                                    "param_desc": "The number of equally spaced points on the grid, for each target\nfeature.\n"
                                },
                                {
                                    "param_name": "method",
                                    "param_type": "{\u2018auto\u2019, \u2018recursion\u2019, \u2018brute\u2019}, default=\u2019auto\u2019",
                                    "param_desc": "The method used to calculate the averaged predictions:\n\n'recursion' is only supported for some tree-based estimators\n(namely\nGradientBoostingClassifier,\nGradientBoostingRegressor,\nHistGradientBoostingClassifier,\nHistGradientBoostingRegressor,\nDecisionTreeRegressor,\nRandomForestRegressor,\n) when kind='average'.\nThis is more efficient in terms of speed.\nWith this method, the target response of a\nclassifier is always the decision function, not the predicted\nprobabilities. Since the 'recursion' method implicitly computes\nthe average of the Individual Conditional Expectation (ICE) by\ndesign, it is not compatible with ICE and thus kind must be\n'average'.\n'brute' is supported for any estimator, but is more\ncomputationally intensive.\n'auto': the 'recursion' is used for estimators that support it,\nand 'brute' is used otherwise. If sample_weight is not None,\nthen 'brute' is used regardless of the estimator.\n\nPlease see this note for\ndifferences between the 'brute' and 'recursion' method.\n"
                                },
                                {
                                    "param_name": "kind",
                                    "param_type": "{\u2018average\u2019, \u2018individual\u2019, \u2018both\u2019}, default=\u2019average\u2019",
                                    "param_desc": "Whether to return the partial dependence averaged across all the\nsamples in the dataset or one value per sample or both.\nSee Returns below.\nNote that the fast method='recursion' option is only available for\nkind='average' and sample_weights=None. Computing individual\ndependencies and doing weighted averages requires using the slower\nmethod='brute'.\n\nAdded in version 0.24.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "partial_dependence",
                            "descriptions": "Partial dependence of features. Partial dependence of a feature (or a set of features) corresponds to\nthe average response of an estimator for each possible value of the\nfeature. Read more in the User Guide. Warning For GradientBoostingClassifier and\nGradientBoostingRegressor, the\n'recursion' method (used by default) will not account for the init\npredictor of the boosting process. In practice, this will produce\nthe same values as 'brute' up to a constant offset in the target\nresponse, provided that init is a constant estimator (which is the\ndefault). However, if init is not a constant estimator, the\npartial dependence values are incorrect for 'recursion' because the\noffset will be sample-dependent. It is preferable to use the 'brute'\nmethod. Note that this only applies to\nGradientBoostingClassifier and\nGradientBoostingRegressor, not to\nHistGradientBoostingClassifier and\nHistGradientBoostingRegressor.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "estimator": {
                                        "type": "BaseEstimator",
                                        "description": "BaseEstimator. A fitted estimator object implementing predict,\npredict_proba, or decision_function.\nMultioutput-multiclass classifiers are not supported.\n"
                                    },
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix or dataframe} of shape (n_samples, n_features). X is used to generate a grid of values for the target\nfeatures (where the partial dependence will be evaluated), and\nalso to generate values for the complement features when the\nmethod is \u2018brute\u2019.\n"
                                    },
                                    "features": {
                                        "type": "integer",
                                        "description": "array-like of {int, str, bool} or int or str. The feature (e.g. [0]) or pair of interacting features\n(e.g. [(0, 1)]) for which the partial dependency should be computed.\n"
                                    },
                                    "sample_weight": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Sample weights are used to calculate weighted means when averaging the\nmodel output. If None, then samples are equally weighted. If\nsample_weight is not None, then method will be set to 'brute'.\nNote that sample_weight is ignored for kind='individual'.\n\nAdded in version 1.3.\n\n"
                                    },
                                    "categorical_features": {
                                        "type": "integer",
                                        "description": "array-like of shape (n_features,) or shape             (n_categorical_features,), dtype={bool, int, str}, default=None. Indicates the categorical features.\n\nNone: no feature will be considered categorical;\n\nboolean array-like: boolean mask of shape (n_features,)indicating which features are categorical. Thus, this array has\nthe same shape has X.shape[1];\n\n\n\n\ninteger or string array-like: integer indices or stringsindicating categorical features.\n\n\n\n\n\nAdded in version 1.2.\n\n"
                                    },
                                    "feature_names": {
                                        "type": "string",
                                        "description": "array-like of shape (n_features,), dtype=str, default=None. Name of each feature; feature_names[i] holds the name of the feature\nwith index i.\nBy default, the name of the feature corresponds to their numerical\nindex for NumPy array and their column name for pandas dataframe.\n\nAdded in version 1.2.\n\n"
                                    },
                                    "response_method": {
                                        "type": "string",
                                        "enum": [
                                            "auto",
                                            " predict_proba",
                                            " decision_function"
                                        ],
                                        "description": "{\u2018auto\u2019, \u2018predict_proba\u2019, \u2018decision_function\u2019},             default=\u2019auto\u2019. Specifies whether to use predict_proba or\ndecision_function as the target response. For regressors\nthis parameter is ignored and the response is always the output of\npredict. By default, predict_proba is tried first\nand we revert to decision_function if it doesn\u2019t exist. If\nmethod is \u2018recursion\u2019, the response is always the output of\ndecision_function.\n"
                                    },
                                    "percentiles": {
                                        "type": "float",
                                        "description": "tuple of float, default=(0.05, 0.95). The lower and upper percentile used to create the extreme values\nfor the grid. Must be in [0, 1].\n"
                                    },
                                    "grid_resolution": {
                                        "type": "integer",
                                        "description": "int, default=100. The number of equally spaced points on the grid, for each target\nfeature.\n"
                                    },
                                    "method": {
                                        "type": "string",
                                        "enum": [
                                            "auto",
                                            " recursion",
                                            " brute"
                                        ],
                                        "description": "{\u2018auto\u2019, \u2018recursion\u2019, \u2018brute\u2019}, default=\u2019auto\u2019. The method used to calculate the averaged predictions:\n\n'recursion' is only supported for some tree-based estimators\n(namely\nGradientBoostingClassifier,\nGradientBoostingRegressor,\nHistGradientBoostingClassifier,\nHistGradientBoostingRegressor,\nDecisionTreeRegressor,\nRandomForestRegressor,\n) when kind='average'.\nThis is more efficient in terms of speed.\nWith this method, the target response of a\nclassifier is always the decision function, not the predicted\nprobabilities. Since the 'recursion' method implicitly computes\nthe average of the Individual Conditional Expectation (ICE) by\ndesign, it is not compatible with ICE and thus kind must be\n'average'.\n'brute' is supported for any estimator, but is more\ncomputationally intensive.\n'auto': the 'recursion' is used for estimators that support it,\nand 'brute' is used otherwise. If sample_weight is not None,\nthen 'brute' is used regardless of the estimator.\n\nPlease see this note for\ndifferences between the 'brute' and 'recursion' method.\n"
                                    },
                                    "kind": {
                                        "type": "string",
                                        "enum": [
                                            "average",
                                            " individual",
                                            " both"
                                        ],
                                        "description": "{\u2018average\u2019, \u2018individual\u2019, \u2018both\u2019}, default=\u2019average\u2019. Whether to return the partial dependence averaged across all the\nsamples in the dataset or one value per sample or both.\nSee Returns below.\nNote that the fast method='recursion' option is only available for\nkind='average' and sample_weights=None. Computing individual\ndependencies and doing weighted averages requires using the slower\nmethod='brute'.\n\nAdded in version 0.24.\n\n"
                                    }
                                },
                                "required": [
                                    "estimator",
                                    "X",
                                    "features"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "permutation_importance",
                        "func_desc": "Permutation importance for feature evaluation [Rd9e56ef97513-BRE].",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.inspection.permutation_importance.html#sklearn.inspection.permutation_importance",
                        "function_definitions": {
                            "function_name": "permutation_importance",
                            "full_function": "sklearn.inspection.permutation_importance(estimator, X, y, *, scoring=None, n_repeats=5, n_jobs=None, random_state=None, sample_weight=None, max_samples=1.0)",
                            "function_text": "Permutation importance for feature evaluation [BRE]. The estimator is required to be a fitted estimator. X can be the\ndata set used to train the estimator or a hold-out set. The permutation\nimportance of a feature is calculated as follows. First, a baseline metric,\ndefined by scoring, is evaluated on a (potentially different)\ndataset defined by the X. Next, a feature column from the validation set\nis permuted and the metric is evaluated again. The permutation importance\nis defined to be the difference between the baseline metric and metric from\npermutating the feature column. Read more in the User Guide.",
                            "func_text_user_guide": "#rd9e56ef97513-bre",
                            "parameter_names_desc": [
                                {
                                    "param_name": "estimator",
                                    "param_type": "object",
                                    "param_desc": "An estimator that has already been fitted and is compatible\nwith scorer.\n"
                                },
                                {
                                    "param_name": "X",
                                    "param_type": "ndarray or DataFrame, shape (n_samples, n_features)",
                                    "param_desc": "Data on which permutation importance will be computed.\n"
                                },
                                {
                                    "param_name": "y",
                                    "param_type": "array-like or None, shape (n_samples, ) or (n_samples, n_classes)",
                                    "param_desc": "Targets for supervised or None for unsupervised.\n"
                                },
                                {
                                    "param_name": "scoring",
                                    "param_type": "str, callable, list, tuple, or dict, default=None",
                                    "param_desc": "Scorer to use.\nIf scoring represents a single score, one can use:\n\na single string (see The scoring parameter: defining model evaluation rules);\na callable (see Defining your scoring strategy from metric functions) that returns a single value.\n\nIf scoring represents multiple scores, one can use:\n\na list or tuple of unique strings;\na callable returning a dictionary where the keys are the metric\nnames and the values are the metric scores;\na dictionary with metric names as keys and callables a values.\n\nPassing multiple scores to scoring is more efficient than calling\npermutation_importance for each of the scores as it reuses\npredictions to avoid redundant computation.\nIf None, the estimator\u2019s default scorer is used.\n"
                                },
                                {
                                    "param_name": "n_repeats",
                                    "param_type": "int, default=5",
                                    "param_desc": "Number of times to permute a feature.\n"
                                },
                                {
                                    "param_name": "n_jobs",
                                    "param_type": "int or None, default=None",
                                    "param_desc": "Number of jobs to run in parallel. The computation is done by computing\npermutation score for each columns and parallelized over the columns.\nNone means 1 unless in a joblib.parallel_backend context.\n-1 means using all processors. See Glossary\nfor more details.\n"
                                },
                                {
                                    "param_name": "random_state",
                                    "param_type": "int, RandomState instance, default=None",
                                    "param_desc": "Pseudo-random number generator to control the permutations of each\nfeature.\nPass an int to get reproducible results across function calls.\nSee Glossary.\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Sample weights used in scoring.\n\nAdded in version 0.24.\n\n"
                                },
                                {
                                    "param_name": "max_samples",
                                    "param_type": "int or float, default=1.0",
                                    "param_desc": "The number of samples to draw from X to compute feature importance\nin each repeat (without replacement).\n\nIf int, then draw max_samples samples.\nIf float, then draw max_samples * X.shape[0] samples.\nIf max_samples is equal to 1.0 or X.shape[0], all samples\nwill be used.\n\nWhile using this option may provide less accurate importance estimates,\nit keeps the method tractable when evaluating feature importance on\nlarge datasets. In combination with n_repeats, this allows to control\nthe computational speed vs statistical accuracy trade-off of this method.\n\nAdded in version 1.0.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "permutation_importance",
                            "descriptions": "Permutation importance for feature evaluation [BRE]. The estimator is required to be a fitted estimator. X can be the\ndata set used to train the estimator or a hold-out set. The permutation\nimportance of a feature is calculated as follows. First, a baseline metric,\ndefined by scoring, is evaluated on a (potentially different)\ndataset defined by the X. Next, a feature column from the validation set\nis permuted and the metric is evaluated again. The permutation importance\nis defined to be the difference between the baseline metric and metric from\npermutating the feature column. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "estimator": {
                                        "type": "object",
                                        "description": "object. An estimator that has already been fitted and is compatible\nwith scorer.\n"
                                    },
                                    "X": {
                                        "type": "array",
                                        "description": "ndarray or DataFrame, shape (n_samples, n_features). Data on which permutation importance will be computed.\n"
                                    },
                                    "y": {
                                        "type": "array",
                                        "description": "array-like or None, shape (n_samples, ) or (n_samples, n_classes). Targets for supervised or None for unsupervised.\n"
                                    },
                                    "scoring": {
                                        "type": "string",
                                        "description": "str, callable, list, tuple, or dict, default=None. Scorer to use.\nIf scoring represents a single score, one can use:\n\na single string (see The scoring parameter: defining model evaluation rules);\na callable (see Defining your scoring strategy from metric functions) that returns a single value.\n\nIf scoring represents multiple scores, one can use:\n\na list or tuple of unique strings;\na callable returning a dictionary where the keys are the metric\nnames and the values are the metric scores;\na dictionary with metric names as keys and callables a values.\n\nPassing multiple scores to scoring is more efficient than calling\npermutation_importance for each of the scores as it reuses\npredictions to avoid redundant computation.\nIf None, the estimator\u2019s default scorer is used.\n"
                                    },
                                    "n_repeats": {
                                        "type": "integer",
                                        "description": "int, default=5. Number of times to permute a feature.\n"
                                    },
                                    "n_jobs": {
                                        "type": "integer",
                                        "description": "int or None, default=None. Number of jobs to run in parallel. The computation is done by computing\npermutation score for each columns and parallelized over the columns.\nNone means 1 unless in a joblib.parallel_backend context.\n-1 means using all processors. See Glossary\nfor more details.\n"
                                    },
                                    "random_state": {
                                        "type": "integer",
                                        "description": "int, RandomState instance, default=None. Pseudo-random number generator to control the permutations of each\nfeature.\nPass an int to get reproducible results across function calls.\nSee Glossary.\n"
                                    },
                                    "sample_weight": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Sample weights used in scoring.\n\nAdded in version 0.24.\n\n"
                                    },
                                    "max_samples": {
                                        "type": "integer",
                                        "description": "int or float, default=1.0. The number of samples to draw from X to compute feature importance\nin each repeat (without replacement).\n\nIf int, then draw max_samples samples.\nIf float, then draw max_samples * X.shape[0] samples.\nIf max_samples is equal to 1.0 or X.shape[0], all samples\nwill be used.\n\nWhile using this option may provide less accurate importance estimates,\nit keeps the method tractable when evaluating feature importance on\nlarge datasets. In combination with n_repeats, this allows to control\nthe computational speed vs statistical accuracy trade-off of this method.\n\nAdded in version 1.0.\n\n"
                                    }
                                },
                                "required": [
                                    "estimator",
                                    "X",
                                    "y"
                                ]
                            }
                        }
                    }
                ]
            },
            {
                "Plotting": [
                    {
                        "func_name": "DecisionBoundaryDisplay",
                        "func_desc": "Decisions boundary visualization.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.inspection.DecisionBoundaryDisplay.html#sklearn.inspection.DecisionBoundaryDisplay",
                        "function_definitions": {
                            "function_name": "DecisionBoundaryDisplay",
                            "full_function": "class sklearn.inspection.DecisionBoundaryDisplay(*, xx0, xx1, response, xlabel=None, ylabel=None)",
                            "function_text": "Decisions boundary visualization. It is recommended to use\nfrom_estimator\nto create a DecisionBoundaryDisplay. All parameters are stored as\nattributes. Read more in the User Guide. Added in version 1.1.",
                            "func_text_user_guide": "#sklearn.inspection.DecisionBoundaryDisplay.from_estimator",
                            "parameter_names_desc": [
                                {
                                    "param_name": "plot_method",
                                    "param_type": "{\u2018contourf\u2019, \u2018contour\u2019, \u2018pcolormesh\u2019}, default=\u2019contourf\u2019",
                                    "param_desc": "Plotting method to call when plotting the response. Please refer\nto the following matplotlib documentation for details:\ncontourf,\ncontour,\npcolormesh.\n"
                                },
                                {
                                    "param_name": "ax",
                                    "param_type": "Matplotlib axes, default=None",
                                    "param_desc": "Axes object to plot on. If None, a new figure and axes is\ncreated.\n"
                                },
                                {
                                    "param_name": "xlabel",
                                    "param_type": "str, default=None",
                                    "param_desc": "Overwrite the x-axis label.\n"
                                },
                                {
                                    "param_name": "ylabel",
                                    "param_type": "str, default=None",
                                    "param_desc": "Overwrite the y-axis label.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "DecisionBoundaryDisplay",
                            "descriptions": "Decisions boundary visualization. It is recommended to use\nfrom_estimator\nto create a DecisionBoundaryDisplay. All parameters are stored as\nattributes. Read more in the User Guide. Added in version 1.1.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "plot_method": {
                                        "type": "string",
                                        "enum": [
                                            "contourf",
                                            " contour",
                                            " pcolormesh"
                                        ],
                                        "description": "{\u2018contourf\u2019, \u2018contour\u2019, \u2018pcolormesh\u2019}, default=\u2019contourf\u2019. Plotting method to call when plotting the response. Please refer\nto the following matplotlib documentation for details:\ncontourf,\ncontour,\npcolormesh.\n"
                                    },
                                    "ax": {
                                        "type": "Matplotlib axes, default=None",
                                        "description": "Matplotlib axes, default=None. Axes object to plot on. If None, a new figure and axes is\ncreated.\n"
                                    },
                                    "xlabel": {
                                        "type": "string",
                                        "description": "str, default=None. Overwrite the x-axis label.\n"
                                    },
                                    "ylabel": {
                                        "type": "string",
                                        "description": "str, default=None. Overwrite the y-axis label.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "PartialDependenceDisplay",
                        "func_desc": "Partial Dependence Plot (PDP).",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.inspection.PartialDependenceDisplay.html#sklearn.inspection.PartialDependenceDisplay",
                        "function_definitions": {
                            "function_name": "PartialDependenceDisplay",
                            "full_function": "class sklearn.inspection.PartialDependenceDisplay(pd_results, *, features, feature_names, target_idx, deciles, kind='average', subsample=1000, random_state=None, is_categorical=None)",
                            "function_text": "Partial Dependence Plot (PDP). This can also display individual partial dependencies which are often\nreferred to as: Individual Condition Expectation (ICE). It is recommended to use\nfrom_estimator to create a\nPartialDependenceDisplay. All parameters are\nstored as attributes. Read more in\nAdvanced Plotting With Partial Dependence\nand the User Guide. Added in version 0.22.",
                            "func_text_user_guide": "#sklearn.inspection.PartialDependenceDisplay.from_estimator",
                            "parameter_names_desc": [
                                {
                                    "param_name": "ax",
                                    "param_type": "Matplotlib axes or array-like of Matplotlib axes, default=None",
                                    "param_desc": "\n\nIf a single axis is passed in, it is treated as a bounding axesand a grid of partial dependence plots will be drawn within\nthese bounds. The n_cols parameter controls the number of\ncolumns in the grid.\n\n\n\n\nIf an array-like of axes are passed in, the partial dependenceplots will be drawn directly into these axes.\n\n\n\n\nIf None, a figure and a bounding axes is created and treatedas the single axes case.\n\n\n\n\n"
                                },
                                {
                                    "param_name": "n_cols",
                                    "param_type": "int, default=3",
                                    "param_desc": "The maximum number of columns in the grid plot. Only active when\nax is a single axes or None.\n"
                                },
                                {
                                    "param_name": "line_kw",
                                    "param_type": "dict, default=None",
                                    "param_desc": "Dict with keywords passed to the matplotlib.pyplot.plot call.\nFor one-way partial dependence plots.\n"
                                },
                                {
                                    "param_name": "ice_lines_kw",
                                    "param_type": "dict, default=None",
                                    "param_desc": "Dictionary with keywords passed to the matplotlib.pyplot.plot call.\nFor ICE lines in the one-way partial dependence plots.\nThe key value pairs defined in ice_lines_kw takes priority over\nline_kw.\n\nAdded in version 1.0.\n\n"
                                },
                                {
                                    "param_name": "pd_line_kw",
                                    "param_type": "dict, default=None",
                                    "param_desc": "Dictionary with keywords passed to the matplotlib.pyplot.plot call.\nFor partial dependence in one-way partial dependence plots.\nThe key value pairs defined in pd_line_kw takes priority over\nline_kw.\n\nAdded in version 1.0.\n\n"
                                },
                                {
                                    "param_name": "contour_kw",
                                    "param_type": "dict, default=None",
                                    "param_desc": "Dict with keywords passed to the matplotlib.pyplot.contourf\ncall for two-way partial dependence plots.\n"
                                },
                                {
                                    "param_name": "bar_kw",
                                    "param_type": "dict, default=None",
                                    "param_desc": "Dict with keywords passed to the matplotlib.pyplot.bar\ncall for one-way categorical partial dependence plots.\n\nAdded in version 1.2.\n\n"
                                },
                                {
                                    "param_name": "heatmap_kw",
                                    "param_type": "dict, default=None",
                                    "param_desc": "Dict with keywords passed to the matplotlib.pyplot.imshow\ncall for two-way categorical partial dependence plots.\n\nAdded in version 1.2.\n\n"
                                },
                                {
                                    "param_name": "pdp_lim",
                                    "param_type": "dict, default=None",
                                    "param_desc": "Global min and max average predictions, such that all plots will have the\nsame scale and y limits. pdp_lim[1] is the global min and max for single\npartial dependence curves. pdp_lim[2] is the global min and max for\ntwo-way partial dependence curves. If None (default), the limit will be\ninferred from the global minimum and maximum of all predictions.\n\nAdded in version 1.1.\n\n"
                                },
                                {
                                    "param_name": "centered",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If True, the ICE and PD lines will start at the origin of the\ny-axis. By default, no centering is done.\n\nAdded in version 1.1.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "PartialDependenceDisplay",
                            "descriptions": "Partial Dependence Plot (PDP). This can also display individual partial dependencies which are often\nreferred to as: Individual Condition Expectation (ICE). It is recommended to use\nfrom_estimator to create a\nPartialDependenceDisplay. All parameters are\nstored as attributes. Read more in\nAdvanced Plotting With Partial Dependence\nand the User Guide. Added in version 0.22.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "ax": {
                                        "type": "array",
                                        "description": "Matplotlib axes or array-like of Matplotlib axes, default=None. \n\nIf a single axis is passed in, it is treated as a bounding axesand a grid of partial dependence plots will be drawn within\nthese bounds. The n_cols parameter controls the number of\ncolumns in the grid.\n\n\n\n\nIf an array-like of axes are passed in, the partial dependenceplots will be drawn directly into these axes.\n\n\n\n\nIf None, a figure and a bounding axes is created and treatedas the single axes case.\n\n\n\n\n"
                                    },
                                    "n_cols": {
                                        "type": "integer",
                                        "description": "int, default=3. The maximum number of columns in the grid plot. Only active when\nax is a single axes or None.\n"
                                    },
                                    "line_kw": {
                                        "type": "dict, default=None",
                                        "description": "dict, default=None. Dict with keywords passed to the matplotlib.pyplot.plot call.\nFor one-way partial dependence plots.\n"
                                    },
                                    "ice_lines_kw": {
                                        "type": "dict, default=None",
                                        "description": "dict, default=None. Dictionary with keywords passed to the matplotlib.pyplot.plot call.\nFor ICE lines in the one-way partial dependence plots.\nThe key value pairs defined in ice_lines_kw takes priority over\nline_kw.\n\nAdded in version 1.0.\n\n"
                                    },
                                    "pd_line_kw": {
                                        "type": "dict, default=None",
                                        "description": "dict, default=None. Dictionary with keywords passed to the matplotlib.pyplot.plot call.\nFor partial dependence in one-way partial dependence plots.\nThe key value pairs defined in pd_line_kw takes priority over\nline_kw.\n\nAdded in version 1.0.\n\n"
                                    },
                                    "contour_kw": {
                                        "type": "dict, default=None",
                                        "description": "dict, default=None. Dict with keywords passed to the matplotlib.pyplot.contourf\ncall for two-way partial dependence plots.\n"
                                    },
                                    "bar_kw": {
                                        "type": "dict, default=None",
                                        "description": "dict, default=None. Dict with keywords passed to the matplotlib.pyplot.bar\ncall for one-way categorical partial dependence plots.\n\nAdded in version 1.2.\n\n"
                                    },
                                    "heatmap_kw": {
                                        "type": "dict, default=None",
                                        "description": "dict, default=None. Dict with keywords passed to the matplotlib.pyplot.imshow\ncall for two-way categorical partial dependence plots.\n\nAdded in version 1.2.\n\n"
                                    },
                                    "pdp_lim": {
                                        "type": "dict, default=None",
                                        "description": "dict, default=None. Global min and max average predictions, such that all plots will have the\nsame scale and y limits. pdp_lim[1] is the global min and max for single\npartial dependence curves. pdp_lim[2] is the global min and max for\ntwo-way partial dependence curves. If None (default), the limit will be\ninferred from the global minimum and maximum of all predictions.\n\nAdded in version 1.1.\n\n"
                                    },
                                    "centered": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If True, the ICE and PD lines will start at the origin of the\ny-axis. By default, no centering is done.\n\nAdded in version 1.1.\n\n"
                                    }
                                },
                                "required": [
                                    "pd_results"
                                ]
                            }
                        }
                    }
                ]
            }
        ],
        "name": "sklearn.inspection",
        "url": "https://scikit-learn.org/stable/api/sklearn.inspection.html"
    },
    "sklearn.isotonic.html": {
        "functions": [
            {
                "defaults": [
                    {
                        "func_name": "IsotonicRegression",
                        "func_desc": "Isotonic regression model.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.isotonic.IsotonicRegression.html#sklearn.isotonic.IsotonicRegression",
                        "function_definitions": {
                            "function_name": "IsotonicRegression",
                            "full_function": "class sklearn.isotonic.IsotonicRegression(*, y_min=None, y_max=None, increasing=True, out_of_bounds='nan')",
                            "function_text": "Isotonic regression model. Read more in the User Guide. Added in version 0.13.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/isotonic.html#isotonic",
                            "parameter_names_desc": [
                                {
                                    "param_name": "T",
                                    "param_type": "array-like of shape (n_samples,) or (n_samples, 1)",
                                    "param_desc": "Data to transform.\n\nChanged in version 0.24: Also accepts 2d array with 1 feature.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "IsotonicRegression",
                            "descriptions": "Isotonic regression model. Read more in the User Guide. Added in version 0.13.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "T": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,) or (n_samples, 1). Data to transform.\n\nChanged in version 0.24: Also accepts 2d array with 1 feature.\n\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "isotonic_regression",
                        "func_desc": "Solve the isotonic regression model.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.isotonic.isotonic_regression.html#sklearn.isotonic.isotonic_regression",
                        "function_definitions": {
                            "function_name": "isotonic_regression",
                            "full_function": "sklearn.isotonic.isotonic_regression(y, *, sample_weight=None, y_min=None, y_max=None, increasing=True)",
                            "function_text": "Solve the isotonic regression model. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/isotonic.html#isotonic",
                            "parameter_names_desc": [
                                {
                                    "param_name": "y",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "The data.\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Weights on each point of the regression.\nIf None, weight is set to 1 (equal weights).\n"
                                },
                                {
                                    "param_name": "y_min",
                                    "param_type": "float, default=None",
                                    "param_desc": "Lower bound on the lowest predicted value (the minimum value may\nstill be higher). If not set, defaults to -inf.\n"
                                },
                                {
                                    "param_name": "y_max",
                                    "param_type": "float, default=None",
                                    "param_desc": "Upper bound on the highest predicted value (the maximum may still be\nlower). If not set, defaults to +inf.\n"
                                },
                                {
                                    "param_name": "increasing",
                                    "param_type": "bool, default=True",
                                    "param_desc": "Whether to compute y_ is increasing (if set to True) or decreasing\n(if set to False).\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "isotonic_regression",
                            "descriptions": "Solve the isotonic regression model. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "y": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). The data.\n"
                                    },
                                    "sample_weight": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Weights on each point of the regression.\nIf None, weight is set to 1 (equal weights).\n"
                                    },
                                    "y_min": {
                                        "type": "float",
                                        "description": "float, default=None. Lower bound on the lowest predicted value (the minimum value may\nstill be higher). If not set, defaults to -inf.\n"
                                    },
                                    "y_max": {
                                        "type": "float",
                                        "description": "float, default=None. Upper bound on the highest predicted value (the maximum may still be\nlower). If not set, defaults to +inf.\n"
                                    },
                                    "increasing": {
                                        "type": "boolean",
                                        "description": "bool, default=True. Whether to compute y_ is increasing (if set to True) or decreasing\n(if set to False).\n"
                                    }
                                },
                                "required": [
                                    "y"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "check_increasing",
                        "func_desc": "Determine whether y is monotonically correlated with x.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.isotonic.check_increasing.html#sklearn.isotonic.check_increasing",
                        "function_definitions": {
                            "function_name": "check_increasing",
                            "full_function": "sklearn.isotonic.check_increasing(x, y)",
                            "function_text": "Determine whether y is monotonically correlated with x. y is found increasing or decreasing with respect to x based on a Spearman\ncorrelation test.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "x",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "Training data.\n"
                                },
                                {
                                    "param_name": "y",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "Training target.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "check_increasing",
                            "descriptions": "Determine whether y is monotonically correlated with x. y is found increasing or decreasing with respect to x based on a Spearman\ncorrelation test.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "x": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). Training data.\n"
                                    },
                                    "y": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). Training target.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    }
                ]
            }
        ],
        "name": "sklearn.isotonic",
        "url": "https://scikit-learn.org/stable/api/sklearn.isotonic.html"
    },
    "sklearn.kernel_approximation.html": {
        "functions": [
            {
                "defaults": [
                    {
                        "func_name": "AdditiveChi2Sampler",
                        "func_desc": "Approximate feature map for additive chi2 kernel.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler.html#sklearn.kernel_approximation.AdditiveChi2Sampler",
                        "function_definitions": {
                            "function_name": "AdditiveChi2Sampler",
                            "full_function": "class sklearn.kernel_approximation.AdditiveChi2Sampler(*, sample_steps=2, sample_interval=None)",
                            "function_text": "Approximate feature map for additive chi2 kernel. Uses sampling the fourier transform of the kernel characteristic\nat regular intervals. Since the kernel that is to be approximated is additive, the components of\nthe input vectors can be treated separately.  Each entry in the original\nspace is transformed into 2*sample_steps-1 features, where sample_steps is\na parameter of the method. Typical values of sample_steps include 1, 2 and\n3. Optimal choices for the sampling interval for certain data ranges can be\ncomputed (see the reference). The default values should be reasonable. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/kernel_approximation.html#additive-chi-kernel-approx",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix}, shape (n_samples, n_features)",
                                    "param_desc": "Training data, where n_samples is the number of samples\nand n_features is the number of features.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "AdditiveChi2Sampler",
                            "descriptions": "Approximate feature map for additive chi2 kernel. Uses sampling the fourier transform of the kernel characteristic\nat regular intervals. Since the kernel that is to be approximated is additive, the components of\nthe input vectors can be treated separately.  Each entry in the original\nspace is transformed into 2*sample_steps-1 features, where sample_steps is\na parameter of the method. Typical values of sample_steps include 1, 2 and\n3. Optimal choices for the sampling interval for certain data ranges can be\ncomputed (see the reference). The default values should be reasonable. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix}, shape (n_samples, n_features). Training data, where n_samples is the number of samples\nand n_features is the number of features.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "PolynomialCountSketch",
                        "func_desc": "Polynomial kernel approximation via Tensor Sketch.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.kernel_approximation.PolynomialCountSketch.html#sklearn.kernel_approximation.PolynomialCountSketch",
                        "function_definitions": {
                            "function_name": "PolynomialCountSketch",
                            "full_function": "class sklearn.kernel_approximation.PolynomialCountSketch(*, gamma=1.0, degree=2, coef0=0, n_components=100, random_state=None)",
                            "function_text": "Polynomial kernel approximation via Tensor Sketch. Implements Tensor Sketch, which approximates the feature map\nof the polynomial kernel: by efficiently computing a Count Sketch of the outer product of a\nvector with itself using Fast Fourier Transforms (FFT). Read more in the\nUser Guide. Added in version 0.24.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/kernel_approximation.html#polynomial-kernel-approx",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like}, shape (n_samples, n_features)",
                                    "param_desc": "New data, where n_samples is the number of samples\nand n_features is the number of features.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "PolynomialCountSketch",
                            "descriptions": "Polynomial kernel approximation via Tensor Sketch. Implements Tensor Sketch, which approximates the feature map\nof the polynomial kernel: by efficiently computing a Count Sketch of the outer product of a\nvector with itself using Fast Fourier Transforms (FFT). Read more in the\nUser Guide. Added in version 0.24.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like}, shape (n_samples, n_features). New data, where n_samples is the number of samples\nand n_features is the number of features.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "SkewedChi2Sampler",
                        "func_desc": "Approximate feature map for \"skewed chi-squared\" kernel.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler.html#sklearn.kernel_approximation.SkewedChi2Sampler",
                        "function_definitions": {
                            "function_name": "SkewedChi2Sampler",
                            "full_function": "class sklearn.kernel_approximation.SkewedChi2Sampler(*, skewedness=1.0, n_components=100, random_state=None)",
                            "function_text": "Approximate feature map for \u201cskewed chi-squared\u201d kernel. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/kernel_approximation.html#skewed-chi-kernel-approx",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like, shape (n_samples, n_features)",
                                    "param_desc": "New data, where n_samples is the number of samples\nand n_features is the number of features. All values of X must be\nstrictly greater than \u201c-skewedness\u201d.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "SkewedChi2Sampler",
                            "descriptions": "Approximate feature map for \u201cskewed chi-squared\u201d kernel. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like, shape (n_samples, n_features). New data, where n_samples is the number of samples\nand n_features is the number of features. All values of X must be\nstrictly greater than \u201c-skewedness\u201d.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "Nystroem",
                        "func_desc": "Approximate a kernel map using a subset of the training data.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.kernel_approximation.Nystroem.html#sklearn.kernel_approximation.Nystroem",
                        "function_definitions": {
                            "function_name": "Nystroem",
                            "full_function": "class sklearn.kernel_approximation.Nystroem(kernel='rbf', *, gamma=None, coef0=None, degree=None, kernel_params=None, n_components=100, random_state=None, n_jobs=None)",
                            "function_text": "Approximate a kernel map using a subset of the training data. Constructs an approximate feature map for an arbitrary kernel\nusing a subset of the data as basis. Read more in the User Guide. Added in version 0.13.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/kernel_approximation.html#nystroem-kernel-approx",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples, n_features)",
                                    "param_desc": "Data to transform.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "Nystroem",
                            "descriptions": "Approximate a kernel map using a subset of the training data. Constructs an approximate feature map for an arbitrary kernel\nusing a subset of the data as basis. Read more in the User Guide. Added in version 0.13.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_features). Data to transform.\n"
                                    }
                                },
                                "required": [
                                    "kernel='rbf'"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "RBFSampler",
                        "func_desc": "Approximate a RBF kernel feature map using random Fourier features.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.kernel_approximation.RBFSampler.html#sklearn.kernel_approximation.RBFSampler",
                        "function_definitions": {
                            "function_name": "RBFSampler",
                            "full_function": "class sklearn.kernel_approximation.RBFSampler(*, gamma=1.0, n_components=100, random_state=None)",
                            "function_text": "Approximate a RBF kernel feature map using random Fourier features. It implements a variant of Random Kitchen Sinks.[1] Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/kernel_approximation.html#rbf-kernel-approx",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix}, shape (n_samples, n_features)",
                                    "param_desc": "New data, where n_samples is the number of samples\nand n_features is the number of features.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "RBFSampler",
                            "descriptions": "Approximate a RBF kernel feature map using random Fourier features. It implements a variant of Random Kitchen Sinks.[1] Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix}, shape (n_samples, n_features). New data, where n_samples is the number of samples\nand n_features is the number of features.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    }
                ]
            }
        ],
        "name": "sklearn.kernel_approximation",
        "url": "https://scikit-learn.org/stable/api/sklearn.kernel_approximation.html"
    },
    "sklearn.kernel_ridge.html": {
        "functions": [
            {
                "defaults": [
                    {
                        "func_name": "KernelRidge",
                        "func_desc": "Kernel ridge regression.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.kernel_ridge.KernelRidge.html#sklearn.kernel_ridge.KernelRidge",
                        "function_definitions": {
                            "function_name": "KernelRidge",
                            "full_function": "class sklearn.kernel_ridge.KernelRidge(alpha=1, *, kernel='linear', gamma=None, degree=3, coef0=1, kernel_params=None)",
                            "function_text": "Kernel ridge regression. Kernel ridge regression (KRR) combines ridge regression (linear least\nsquares with l2-norm regularization) with the kernel trick. It thus\nlearns a linear function in the space induced by the respective kernel and\nthe data. For non-linear kernels, this corresponds to a non-linear\nfunction in the original space. The form of the model learned by KRR is identical to support vector\nregression (SVR). However, different loss functions are used: KRR uses\nsquared error loss while support vector regression uses epsilon-insensitive\nloss, both combined with l2 regularization. In contrast to SVR, fitting a\nKRR model can be done in closed-form and is typically faster for\nmedium-sized datasets. On the other hand, the learned model is non-sparse\nand thus slower than SVR, which learns a sparse model for epsilon > 0, at\nprediction-time. This estimator has built-in support for multi-variate regression\n(i.e., when y is a 2d-array of shape [n_samples, n_targets]). Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/kernel_ridge.html#kernel-ridge",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "KernelRidge",
                            "descriptions": "Kernel ridge regression. Kernel ridge regression (KRR) combines ridge regression (linear least\nsquares with l2-norm regularization) with the kernel trick. It thus\nlearns a linear function in the space induced by the respective kernel and\nthe data. For non-linear kernels, this corresponds to a non-linear\nfunction in the original space. The form of the model learned by KRR is identical to support vector\nregression (SVR). However, different loss functions are used: KRR uses\nsquared error loss while support vector regression uses epsilon-insensitive\nloss, both combined with l2 regularization. In contrast to SVR, fitting a\nKRR model can be done in closed-form and is typically faster for\nmedium-sized datasets. On the other hand, the learned model is non-sparse\nand thus slower than SVR, which learns a sparse model for epsilon > 0, at\nprediction-time. This estimator has built-in support for multi-variate regression\n(i.e., when y is a 2d-array of shape [n_samples, n_targets]). Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": [
                                    "alpha=1"
                                ]
                            }
                        }
                    }
                ]
            }
        ],
        "name": "sklearn.kernel_ridge",
        "url": "https://scikit-learn.org/stable/api/sklearn.kernel_ridge.html"
    },
    "sklearn.linear_model.html": {
        "functions": [
            {
                "Linear classifiers": [
                    {
                        "func_name": "LogisticRegression",
                        "func_desc": "Logistic Regression (aka logit, MaxEnt) classifier.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html#sklearn.linear_model.LogisticRegression",
                        "function_definitions": {
                            "function_name": "LogisticRegression",
                            "full_function": "class sklearn.linear_model.LogisticRegression(penalty='l2', *, dual=False, tol=0.0001, C=1.0, fit_intercept=True, intercept_scaling=1, class_weight=None, random_state=None, solver='lbfgs', max_iter=100, multi_class='deprecated', verbose=0, warm_start=False, n_jobs=None, l1_ratio=None)",
                            "function_text": "Logistic Regression (aka logit, MaxEnt) classifier. In the multiclass case, the training algorithm uses the one-vs-rest (OvR)\nscheme if the \u2018multi_class\u2019 option is set to \u2018ovr\u2019, and uses the\ncross-entropy loss if the \u2018multi_class\u2019 option is set to \u2018multinomial\u2019.\n(Currently the \u2018multinomial\u2019 option is supported only by the \u2018lbfgs\u2019,\n\u2018sag\u2019, \u2018saga\u2019 and \u2018newton-cg\u2019 solvers.) This class implements regularized logistic regression using the\n\u2018liblinear\u2019 library, \u2018newton-cg\u2019, \u2018sag\u2019, \u2018saga\u2019 and \u2018lbfgs\u2019 solvers. Note\nthat regularization is applied by default. It can handle both dense\nand sparse input. Use C-ordered arrays or CSR matrices containing 64-bit\nfloats for optimal performance; any other input format will be converted\n(and copied). The \u2018newton-cg\u2019, \u2018sag\u2019, and \u2018lbfgs\u2019 solvers support only L2 regularization\nwith primal formulation, or no regularization. The \u2018liblinear\u2019 solver\nsupports both L1 and L2 regularization, with a dual formulation only for\nthe L2 penalty. The Elastic-Net regularization is only supported by the\n\u2018saga\u2019 solver. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression",
                            "parameter_names_desc": []
                        },
                        "function_calling": {}
                    },
                    {
                        "func_name": "PassiveAggressiveClassifier",
                        "func_desc": "Passive Aggressive Classifier.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.PassiveAggressiveClassifier.html#sklearn.linear_model.PassiveAggressiveClassifier",
                        "function_definitions": {
                            "function_name": "PassiveAggressiveClassifier",
                            "full_function": "class sklearn.linear_model.PassiveAggressiveClassifier(*, C=1.0, fit_intercept=True, max_iter=1000, tol=0.001, early_stopping=False, validation_fraction=0.1, n_iter_no_change=5, shuffle=True, verbose=0, loss='hinge', n_jobs=None, random_state=None, warm_start=False, class_weight=None, average=False)",
                            "function_text": "Passive Aggressive Classifier. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/linear_model.html#passive-aggressive",
                            "parameter_names_desc": []
                        },
                        "function_calling": {}
                    },
                    {
                        "func_name": "RidgeClassifier",
                        "func_desc": "Classifier using Ridge regression.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.RidgeClassifier.html#sklearn.linear_model.RidgeClassifier",
                        "function_definitions": {
                            "function_name": "RidgeClassifier",
                            "full_function": "class sklearn.linear_model.RidgeClassifier(alpha=1.0, *, fit_intercept=True, copy_X=True, max_iter=None, tol=0.0001, class_weight=None, solver='auto', positive=False, random_state=None)",
                            "function_text": "Classifier using Ridge regression. This classifier first converts the target values into {-1, 1} and\nthen treats the problem as a regression task (multi-output regression in\nthe multiclass case). Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/linear_model.html#ridge-regression",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "RidgeClassifier",
                            "descriptions": "Classifier using Ridge regression. This classifier first converts the target values into {-1, 1} and\nthen treats the problem as a regression task (multi-output regression in\nthe multiclass case). Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": [
                                    "alpha=1.0"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "SGDClassifier",
                        "func_desc": "Linear classifiers (SVM, logistic regression, etc.) with SGD training.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.SGDClassifier.html#sklearn.linear_model.SGDClassifier",
                        "function_definitions": {
                            "function_name": "SGDClassifier",
                            "full_function": "class sklearn.linear_model.SGDClassifier(loss='hinge', *, penalty='l2', alpha=0.0001, l1_ratio=0.15, fit_intercept=True, max_iter=1000, tol=0.001, shuffle=True, verbose=0, epsilon=0.1, n_jobs=None, random_state=None, learning_rate='optimal', eta0=0.0, power_t=0.5, early_stopping=False, validation_fraction=0.1, n_iter_no_change=5, class_weight=None, warm_start=False, average=False)",
                            "function_text": "Linear classifiers (SVM, logistic regression, etc.) with SGD training. This estimator implements regularized linear models with stochastic\ngradient descent (SGD) learning: the gradient of the loss is estimated\neach sample at a time and the model is updated along the way with a\ndecreasing strength schedule (aka learning rate). SGD allows minibatch\n(online/out-of-core) learning via the partial_fit method.\nFor best results using the default learning rate schedule, the data should\nhave zero mean and unit variance. This implementation works with data represented as dense or sparse arrays\nof floating point values for the features. The model it fits can be\ncontrolled with the loss parameter; by default, it fits a linear support\nvector machine (SVM). The regularizer is a penalty added to the loss function that shrinks model\nparameters towards the zero vector using either the squared euclidean norm\nL2 or the absolute norm L1 or a combination of both (Elastic Net). If the\nparameter update crosses the 0.0 value because of the regularizer, the\nupdate is truncated to 0.0 to allow for learning sparse models and achieve\nonline feature selection. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/sgd.html#sgd",
                            "parameter_names_desc": []
                        },
                        "function_calling": {}
                    },
                    {
                        "func_name": "LogisticRegressionCV",
                        "func_desc": "Logistic Regression CV (aka logit, MaxEnt) classifier.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegressionCV.html#sklearn.linear_model.LogisticRegressionCV",
                        "function_definitions": {
                            "function_name": "LogisticRegressionCV",
                            "full_function": "class sklearn.linear_model.LogisticRegressionCV(*, Cs=10, fit_intercept=True, cv=None, dual=False, penalty='l2', scoring=None, solver='lbfgs', tol=0.0001, max_iter=100, class_weight=None, n_jobs=None, verbose=0, refit=True, intercept_scaling=1.0, multi_class='deprecated', random_state=None, l1_ratios=None)",
                            "function_text": "Logistic Regression CV (aka logit, MaxEnt) classifier. See glossary entry for cross-validation estimator. This class implements logistic regression using liblinear, newton-cg, sag\nor lbfgs optimizer. The newton-cg, sag and lbfgs solvers support only L2\nregularization with primal formulation. The liblinear solver supports both\nL1 and L2 regularization, with a dual formulation only for the L2 penalty.\nElastic-Net penalty is only supported by the saga solver. For the grid of Cs values and l1_ratios values, the best hyperparameter\nis selected by the cross-validator\nStratifiedKFold, but it can be changed\nusing the cv parameter. The \u2018newton-cg\u2019, \u2018sag\u2019, \u2018saga\u2019 and \u2018lbfgs\u2019\nsolvers can warm-start the coefficients (see Glossary). Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/glossary.html#term-cross-validation-estimator",
                            "parameter_names_desc": []
                        },
                        "function_calling": {}
                    },
                    {
                        "func_name": "Perceptron",
                        "func_desc": "Linear perceptron classifier.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.Perceptron.html#sklearn.linear_model.Perceptron",
                        "function_definitions": {
                            "function_name": "Perceptron",
                            "full_function": "class sklearn.linear_model.Perceptron(*, penalty=None, alpha=0.0001, l1_ratio=0.15, fit_intercept=True, max_iter=1000, tol=0.001, shuffle=True, verbose=0, eta0=1.0, n_jobs=None, random_state=0, early_stopping=False, validation_fraction=0.1, n_iter_no_change=5, class_weight=None, warm_start=False)",
                            "function_text": "Linear perceptron classifier. The implementation is a wrapper around SGDClassifier\nby fixing the loss and learning_rate parameters as: Other available parameters are described below and are forwarded to\nSGDClassifier. Read more in the User Guide.",
                            "func_text_user_guide": "sklearn.linear_model.SGDClassifier.html#sklearn.linear_model.SGDClassifier",
                            "parameter_names_desc": []
                        },
                        "function_calling": {}
                    },
                    {
                        "func_name": "RidgeClassifierCV",
                        "func_desc": "Ridge classifier with built-in cross-validation.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.RidgeClassifierCV.html#sklearn.linear_model.RidgeClassifierCV",
                        "function_definitions": {
                            "function_name": "RidgeClassifierCV",
                            "full_function": "class sklearn.linear_model.RidgeClassifierCV(alphas=(0.1, 1.0, 10.0), *, fit_intercept=True, scoring=None, cv=None, class_weight=None, store_cv_results=None, store_cv_values='deprecated')",
                            "function_text": "Ridge classifier with built-in cross-validation. See glossary entry for cross-validation estimator. By default, it performs Leave-One-Out Cross-Validation. Currently,\nonly the n_features > n_samples case is handled efficiently. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/glossary.html#term-cross-validation-estimator",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "RidgeClassifierCV",
                            "descriptions": "Ridge classifier with built-in cross-validation. See glossary entry for cross-validation estimator. By default, it performs Leave-One-Out Cross-Validation. Currently,\nonly the n_features > n_samples case is handled efficiently. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": [
                                    "alphas=(0.1",
                                    "1.0",
                                    "10.0)"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "SGDOneClassSVM",
                        "func_desc": "Solves linear One-Class SVM using Stochastic Gradient Descent.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.SGDOneClassSVM.html#sklearn.linear_model.SGDOneClassSVM",
                        "function_definitions": {
                            "function_name": "SGDOneClassSVM",
                            "full_function": "class sklearn.linear_model.SGDOneClassSVM(nu=0.5, fit_intercept=True, max_iter=1000, tol=0.001, shuffle=True, verbose=0, random_state=None, learning_rate='optimal', eta0=0.0, power_t=0.5, warm_start=False, average=False)",
                            "function_text": "Solves linear One-Class SVM using Stochastic Gradient Descent. This implementation is meant to be used with a kernel approximation\ntechnique (e.g. sklearn.kernel_approximation.Nystroem) to obtain results\nsimilar to sklearn.svm.OneClassSVM which uses a Gaussian kernel by\ndefault. Read more in the User Guide. Added in version 1.0.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/sgd.html#sgd-online-one-class-svm",
                            "parameter_names_desc": []
                        },
                        "function_calling": {}
                    }
                ]
            },
            {
                "Classical linear regressors": [
                    {
                        "func_name": "LinearRegression",
                        "func_desc": "Ordinary least squares Linear Regression.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html#sklearn.linear_model.LinearRegression",
                        "function_definitions": {
                            "function_name": "LinearRegression",
                            "full_function": "class sklearn.linear_model.LinearRegression(*, fit_intercept=True, copy_X=True, n_jobs=None, positive=False)",
                            "function_text": "Ordinary least squares Linear Regression. LinearRegression fits a linear model with coefficients w = (w1, \u2026, wp)\nto minimize the residual sum of squares between the observed targets in\nthe dataset, and the targets predicted by the linear approximation.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/glossary.html#term-n_jobs",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "LinearRegression",
                            "descriptions": "Ordinary least squares Linear Regression. LinearRegression fits a linear model with coefficients w = (w1, \u2026, wp)\nto minimize the residual sum of squares between the observed targets in\nthe dataset, and the targets predicted by the linear approximation.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "RidgeCV",
                        "func_desc": "Ridge regression with built-in cross-validation.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.RidgeCV.html#sklearn.linear_model.RidgeCV",
                        "function_definitions": {
                            "function_name": "RidgeCV",
                            "full_function": "class sklearn.linear_model.RidgeCV(alphas=(0.1, 1.0, 10.0), *, fit_intercept=True, scoring=None, cv=None, gcv_mode=None, store_cv_results=None, alpha_per_target=False, store_cv_values='deprecated')",
                            "function_text": "Ridge regression with built-in cross-validation. See glossary entry for cross-validation estimator. By default, it performs efficient Leave-One-Out Cross-Validation. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/glossary.html#term-cross-validation-estimator",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "RidgeCV",
                            "descriptions": "Ridge regression with built-in cross-validation. See glossary entry for cross-validation estimator. By default, it performs efficient Leave-One-Out Cross-Validation. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": [
                                    "alphas=(0.1",
                                    "1.0",
                                    "10.0)"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "Ridge",
                        "func_desc": "Linear least squares with l2 regularization.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.Ridge.html#sklearn.linear_model.Ridge",
                        "function_definitions": {
                            "function_name": "Ridge",
                            "full_function": "class sklearn.linear_model.Ridge(alpha=1.0, *, fit_intercept=True, copy_X=True, max_iter=None, tol=0.0001, solver='auto', positive=False, random_state=None)",
                            "function_text": "Linear least squares with l2 regularization. Minimizes the objective function: This model solves a regression model where the loss function is\nthe linear least squares function and regularization is given by\nthe l2-norm. Also known as Ridge Regression or Tikhonov regularization.\nThis estimator has built-in support for multi-variate regression\n(i.e., when y is a 2d-array of shape (n_samples, n_targets)). Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/linear_model.html#ridge-regression",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "Ridge",
                            "descriptions": "Linear least squares with l2 regularization. Minimizes the objective function: This model solves a regression model where the loss function is\nthe linear least squares function and regularization is given by\nthe l2-norm. Also known as Ridge Regression or Tikhonov regularization.\nThis estimator has built-in support for multi-variate regression\n(i.e., when y is a 2d-array of shape (n_samples, n_targets)). Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": [
                                    "alpha=1.0"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "SGDRegressor",
                        "func_desc": "Linear model fitted by minimizing a regularized empirical loss with SGD.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.SGDRegressor.html#sklearn.linear_model.SGDRegressor",
                        "function_definitions": {
                            "function_name": "SGDRegressor",
                            "full_function": "class sklearn.linear_model.SGDRegressor(loss='squared_error', *, penalty='l2', alpha=0.0001, l1_ratio=0.15, fit_intercept=True, max_iter=1000, tol=0.001, shuffle=True, verbose=0, epsilon=0.1, random_state=None, learning_rate='invscaling', eta0=0.01, power_t=0.25, early_stopping=False, validation_fraction=0.1, n_iter_no_change=5, warm_start=False, average=False)",
                            "function_text": "Linear model fitted by minimizing a regularized empirical loss with SGD. SGD stands for Stochastic Gradient Descent: the gradient of the loss is\nestimated each sample at a time and the model is updated along the way with\na decreasing strength schedule (aka learning rate). The regularizer is a penalty added to the loss function that shrinks model\nparameters towards the zero vector using either the squared euclidean norm\nL2 or the absolute norm L1 or a combination of both (Elastic Net). If the\nparameter update crosses the 0.0 value because of the regularizer, the\nupdate is truncated to 0.0 to allow for learning sparse models and achieve\nonline feature selection. This implementation works with data represented as dense numpy arrays of\nfloating point values for the features. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/sgd.html#sgd",
                            "parameter_names_desc": []
                        },
                        "function_calling": {}
                    }
                ]
            },
            {
                "Regressors with variable selection": [
                    {
                        "func_name": "ElasticNet",
                        "func_desc": "Linear regression with combined L1 and L2 priors as regularizer.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.ElasticNet.html#sklearn.linear_model.ElasticNet",
                        "function_definitions": {
                            "function_name": "ElasticNet",
                            "full_function": "class sklearn.linear_model.ElasticNet(alpha=1.0, *, l1_ratio=0.5, fit_intercept=True, precompute=False, max_iter=1000, copy_X=True, tol=0.0001, warm_start=False, positive=False, random_state=None, selection='cyclic')",
                            "function_text": "Linear regression with combined L1 and L2 priors as regularizer. Minimizes the objective function: If you are interested in controlling the L1 and L2 penalty\nseparately, keep in mind that this is equivalent to: where: The parameter l1_ratio corresponds to alpha in the glmnet R package while\nalpha corresponds to the lambda parameter in glmnet. Specifically, l1_ratio\n= 1 is the lasso penalty. Currently, l1_ratio <= 0.01 is not reliable,\nunless you supply your own sequence of alpha. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/linear_model.html#elastic-net",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "ElasticNet",
                            "descriptions": "Linear regression with combined L1 and L2 priors as regularizer. Minimizes the objective function: If you are interested in controlling the L1 and L2 penalty\nseparately, keep in mind that this is equivalent to: where: The parameter l1_ratio corresponds to alpha in the glmnet R package while\nalpha corresponds to the lambda parameter in glmnet. Specifically, l1_ratio\n= 1 is the lasso penalty. Currently, l1_ratio <= 0.01 is not reliable,\nunless you supply your own sequence of alpha. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": [
                                    "alpha=1.0"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "Lars",
                        "func_desc": "Least Angle Regression model a.k.a.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.Lars.html#sklearn.linear_model.Lars",
                        "function_definitions": {
                            "function_name": "Lars",
                            "full_function": "class sklearn.linear_model.Lars(*, fit_intercept=True, verbose=False, precompute='auto', n_nonzero_coefs=500, eps=2.220446049250313e-16, copy_X=True, fit_path=True, jitter=None, random_state=None)",
                            "function_text": "Least Angle Regression model a.k.a. LAR. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/linear_model.html#least-angle-regression",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "Lars",
                            "descriptions": "Least Angle Regression model a.k.a. LAR. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "Lasso",
                        "func_desc": "Linear Model trained with L1 prior as regularizer (aka the Lasso).",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.Lasso.html#sklearn.linear_model.Lasso",
                        "function_definitions": {
                            "function_name": "Lasso",
                            "full_function": "class sklearn.linear_model.Lasso(alpha=1.0, *, fit_intercept=True, precompute=False, copy_X=True, max_iter=1000, tol=0.0001, warm_start=False, positive=False, random_state=None, selection='cyclic')",
                            "function_text": "Linear Model trained with L1 prior as regularizer (aka the Lasso). The optimization objective for Lasso is: Technically the Lasso model is optimizing the same objective function as\nthe Elastic Net with l1_ratio=1.0 (no L2 penalty). Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/linear_model.html#lasso",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "Lasso",
                            "descriptions": "Linear Model trained with L1 prior as regularizer (aka the Lasso). The optimization objective for Lasso is: Technically the Lasso model is optimizing the same objective function as\nthe Elastic Net with l1_ratio=1.0 (no L2 penalty). Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": [
                                    "alpha=1.0"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "LassoLars",
                        "func_desc": "Lasso model fit with Least Angle Regression a.k.a.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LassoLars.html#sklearn.linear_model.LassoLars",
                        "function_definitions": {
                            "function_name": "LassoLars",
                            "full_function": "class sklearn.linear_model.LassoLars(alpha=1.0, *, fit_intercept=True, verbose=False, precompute='auto', max_iter=500, eps=2.220446049250313e-16, copy_X=True, fit_path=True, positive=False, jitter=None, random_state=None)",
                            "function_text": "Lasso model fit with Least Angle Regression a.k.a. Lars. It is a Linear Model trained with an L1 prior as regularizer. The optimization objective for Lasso is: Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/linear_model.html#least-angle-regression",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "LassoLars",
                            "descriptions": "Lasso model fit with Least Angle Regression a.k.a. Lars. It is a Linear Model trained with an L1 prior as regularizer. The optimization objective for Lasso is: Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": [
                                    "alpha=1.0"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "LassoLarsIC",
                        "func_desc": "Lasso model fit with Lars using BIC or AIC for model selection.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LassoLarsIC.html#sklearn.linear_model.LassoLarsIC",
                        "function_definitions": {
                            "function_name": "LassoLarsIC",
                            "full_function": "class sklearn.linear_model.LassoLarsIC(criterion='aic', *, fit_intercept=True, verbose=False, precompute='auto', max_iter=500, eps=2.220446049250313e-16, copy_X=True, positive=False, noise_variance=None)",
                            "function_text": "Lasso model fit with Lars using BIC or AIC for model selection. The optimization objective for Lasso is: AIC is the Akaike information criterion [2] and BIC is the Bayes\nInformation criterion [3]. Such criteria are useful to select the value\nof the regularization parameter by making a trade-off between the\ngoodness of fit and the complexity of the model. A good model should\nexplain well the data while being simple. Read more in the User Guide.",
                            "func_text_user_guide": "#rde9cc43d0d41-2",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "LassoLarsIC",
                            "descriptions": "Lasso model fit with Lars using BIC or AIC for model selection. The optimization objective for Lasso is: AIC is the Akaike information criterion [2] and BIC is the Bayes\nInformation criterion [3]. Such criteria are useful to select the value\nof the regularization parameter by making a trade-off between the\ngoodness of fit and the complexity of the model. A good model should\nexplain well the data while being simple. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": [
                                    "criterion='aic'"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "OrthogonalMatchingPursuitCV",
                        "func_desc": "Cross-validated Orthogonal Matching Pursuit model (OMP).",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV.html#sklearn.linear_model.OrthogonalMatchingPursuitCV",
                        "function_definitions": {
                            "function_name": "OrthogonalMatchingPursuitCV",
                            "full_function": "class sklearn.linear_model.OrthogonalMatchingPursuitCV(*, copy=True, fit_intercept=True, max_iter=None, cv=None, n_jobs=None, verbose=False)",
                            "function_text": "Cross-validated Orthogonal Matching Pursuit model (OMP). See glossary entry for cross-validation estimator. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/glossary.html#term-cross-validation-estimator",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "OrthogonalMatchingPursuitCV",
                            "descriptions": "Cross-validated Orthogonal Matching Pursuit model (OMP). See glossary entry for cross-validation estimator. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "ElasticNetCV",
                        "func_desc": "Elastic Net model with iterative fitting along a regularization path.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.ElasticNetCV.html#sklearn.linear_model.ElasticNetCV",
                        "function_definitions": {
                            "function_name": "ElasticNetCV",
                            "full_function": "class sklearn.linear_model.ElasticNetCV(*, l1_ratio=0.5, eps=0.001, n_alphas=100, alphas=None, fit_intercept=True, precompute='auto', max_iter=1000, tol=0.0001, cv=None, copy_X=True, verbose=0, n_jobs=None, positive=False, random_state=None, selection='cyclic')",
                            "function_text": "Elastic Net model with iterative fitting along a regularization path. See glossary entry for cross-validation estimator. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/glossary.html#term-cross-validation-estimator",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "ElasticNetCV",
                            "descriptions": "Elastic Net model with iterative fitting along a regularization path. See glossary entry for cross-validation estimator. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "LarsCV",
                        "func_desc": "Cross-validated Least Angle Regression model.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LarsCV.html#sklearn.linear_model.LarsCV",
                        "function_definitions": {
                            "function_name": "LarsCV",
                            "full_function": "class sklearn.linear_model.LarsCV(*, fit_intercept=True, verbose=False, max_iter=500, precompute='auto', cv=None, max_n_alphas=1000, n_jobs=None, eps=2.220446049250313e-16, copy_X=True)",
                            "function_text": "Cross-validated Least Angle Regression model. See glossary entry for cross-validation estimator. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/glossary.html#term-cross-validation-estimator",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "LarsCV",
                            "descriptions": "Cross-validated Least Angle Regression model. See glossary entry for cross-validation estimator. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "LassoCV",
                        "func_desc": "Lasso linear model with iterative fitting along a regularization path.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LassoCV.html#sklearn.linear_model.LassoCV",
                        "function_definitions": {
                            "function_name": "LassoCV",
                            "full_function": "class sklearn.linear_model.LassoCV(*, eps=0.001, n_alphas=100, alphas=None, fit_intercept=True, precompute='auto', max_iter=1000, tol=0.0001, copy_X=True, cv=None, verbose=False, n_jobs=None, positive=False, random_state=None, selection='cyclic')",
                            "function_text": "Lasso linear model with iterative fitting along a regularization path. See glossary entry for cross-validation estimator. The best model is selected by cross-validation. The optimization objective for Lasso is: Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/glossary.html#term-cross-validation-estimator",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "LassoCV",
                            "descriptions": "Lasso linear model with iterative fitting along a regularization path. See glossary entry for cross-validation estimator. The best model is selected by cross-validation. The optimization objective for Lasso is: Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "LassoLarsCV",
                        "func_desc": "Cross-validated Lasso, using the LARS algorithm.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LassoLarsCV.html#sklearn.linear_model.LassoLarsCV",
                        "function_definitions": {
                            "function_name": "LassoLarsCV",
                            "full_function": "class sklearn.linear_model.LassoLarsCV(*, fit_intercept=True, verbose=False, max_iter=500, precompute='auto', cv=None, max_n_alphas=1000, n_jobs=None, eps=2.220446049250313e-16, copy_X=True, positive=False)",
                            "function_text": "Cross-validated Lasso, using the LARS algorithm. See glossary entry for cross-validation estimator. The optimization objective for Lasso is: Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/glossary.html#term-cross-validation-estimator",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "LassoLarsCV",
                            "descriptions": "Cross-validated Lasso, using the LARS algorithm. See glossary entry for cross-validation estimator. The optimization objective for Lasso is: Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "OrthogonalMatchingPursuit",
                        "func_desc": "Orthogonal Matching Pursuit model (OMP).",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit.html#sklearn.linear_model.OrthogonalMatchingPursuit",
                        "function_definitions": {
                            "function_name": "OrthogonalMatchingPursuit",
                            "full_function": "class sklearn.linear_model.OrthogonalMatchingPursuit(*, n_nonzero_coefs=None, tol=None, fit_intercept=True, precompute='auto')",
                            "function_text": "Orthogonal Matching Pursuit model (OMP). Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/linear_model.html#omp",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "OrthogonalMatchingPursuit",
                            "descriptions": "Orthogonal Matching Pursuit model (OMP). Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    }
                ]
            },
            {
                "Bayesian regressors": [
                    {
                        "func_name": "ARDRegression",
                        "func_desc": "Bayesian ARD regression.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.ARDRegression.html#sklearn.linear_model.ARDRegression",
                        "function_definitions": {
                            "function_name": "ARDRegression",
                            "full_function": "class sklearn.linear_model.ARDRegression(*, max_iter=300, tol=0.001, alpha_1=1e-06, alpha_2=1e-06, lambda_1=1e-06, lambda_2=1e-06, compute_score=False, threshold_lambda=10000.0, fit_intercept=True, copy_X=True, verbose=False)",
                            "function_text": "Bayesian ARD regression. Fit the weights of a regression model, using an ARD prior. The weights of\nthe regression model are assumed to be in Gaussian distributions.\nAlso estimate the parameters lambda (precisions of the distributions of the\nweights) and alpha (precision of the distribution of the noise).\nThe estimation is done by an iterative procedures (Evidence Maximization) Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/linear_model.html#bayesian-regression",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "ARDRegression",
                            "descriptions": "Bayesian ARD regression. Fit the weights of a regression model, using an ARD prior. The weights of\nthe regression model are assumed to be in Gaussian distributions.\nAlso estimate the parameters lambda (precisions of the distributions of the\nweights) and alpha (precision of the distribution of the noise).\nThe estimation is done by an iterative procedures (Evidence Maximization) Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "BayesianRidge",
                        "func_desc": "Bayesian ridge regression.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.BayesianRidge.html#sklearn.linear_model.BayesianRidge",
                        "function_definitions": {
                            "function_name": "BayesianRidge",
                            "full_function": "class sklearn.linear_model.BayesianRidge(*, max_iter=300, tol=0.001, alpha_1=1e-06, alpha_2=1e-06, lambda_1=1e-06, lambda_2=1e-06, alpha_init=None, lambda_init=None, compute_score=False, fit_intercept=True, copy_X=True, verbose=False)",
                            "function_text": "Bayesian ridge regression. Fit a Bayesian ridge model. See the Notes section for details on this\nimplementation and the optimization of the regularization parameters\nlambda (precision of the weights) and alpha (precision of the noise). Read more in the User Guide.\nFor an intuitive visualization of how the sinusoid is approximated by\na polynomial using different pairs of initial values, see\nCurve Fitting with Bayesian Ridge Regression.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/linear_model.html#bayesian-regression",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "BayesianRidge",
                            "descriptions": "Bayesian ridge regression. Fit a Bayesian ridge model. See the Notes section for details on this\nimplementation and the optimization of the regularization parameters\nlambda (precision of the weights) and alpha (precision of the noise). Read more in the User Guide.\nFor an intuitive visualization of how the sinusoid is approximated by\na polynomial using different pairs of initial values, see\nCurve Fitting with Bayesian Ridge Regression.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    }
                ]
            },
            {
                "Multi-task linear regressors with variable selection": [
                    {
                        "func_name": "MultiTaskElasticNet",
                        "func_desc": "Multi-task ElasticNet model trained with L1/L2 mixed-norm as regularizer.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.MultiTaskElasticNet.html#sklearn.linear_model.MultiTaskElasticNet",
                        "function_definitions": {
                            "function_name": "MultiTaskElasticNet",
                            "full_function": "class sklearn.linear_model.MultiTaskElasticNet(alpha=1.0, *, l1_ratio=0.5, fit_intercept=True, copy_X=True, max_iter=1000, tol=0.0001, warm_start=False, random_state=None, selection='cyclic')",
                            "function_text": "Multi-task ElasticNet model trained with L1/L2 mixed-norm as regularizer. The optimization objective for MultiTaskElasticNet is: Where: i.e. the sum of norms of each row. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/linear_model.html#multi-task-elastic-net",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "MultiTaskElasticNet",
                            "descriptions": "Multi-task ElasticNet model trained with L1/L2 mixed-norm as regularizer. The optimization objective for MultiTaskElasticNet is: Where: i.e. the sum of norms of each row. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": [
                                    "alpha=1.0"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "MultiTaskLasso",
                        "func_desc": "Multi-task Lasso model trained with L1/L2 mixed-norm as regularizer.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.MultiTaskLasso.html#sklearn.linear_model.MultiTaskLasso",
                        "function_definitions": {
                            "function_name": "MultiTaskLasso",
                            "full_function": "class sklearn.linear_model.MultiTaskLasso(alpha=1.0, *, fit_intercept=True, copy_X=True, max_iter=1000, tol=0.0001, warm_start=False, random_state=None, selection='cyclic')",
                            "function_text": "Multi-task Lasso model trained with L1/L2 mixed-norm as regularizer. The optimization objective for Lasso is: Where: i.e. the sum of norm of each row. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/linear_model.html#multi-task-lasso",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "MultiTaskLasso",
                            "descriptions": "Multi-task Lasso model trained with L1/L2 mixed-norm as regularizer. The optimization objective for Lasso is: Where: i.e. the sum of norm of each row. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": [
                                    "alpha=1.0"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "MultiTaskElasticNetCV",
                        "func_desc": "Multi-task L1/L2 ElasticNet with built-in cross-validation.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.MultiTaskElasticNetCV.html#sklearn.linear_model.MultiTaskElasticNetCV",
                        "function_definitions": {
                            "function_name": "MultiTaskElasticNetCV",
                            "full_function": "class sklearn.linear_model.MultiTaskElasticNetCV(*, l1_ratio=0.5, eps=0.001, n_alphas=100, alphas=None, fit_intercept=True, max_iter=1000, tol=0.0001, cv=None, copy_X=True, verbose=0, n_jobs=None, random_state=None, selection='cyclic')",
                            "function_text": "Multi-task L1/L2 ElasticNet with built-in cross-validation. See glossary entry for cross-validation estimator. The optimization objective for MultiTaskElasticNet is: Where: i.e. the sum of norm of each row. Read more in the User Guide. Added in version 0.15.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/glossary.html#term-cross-validation-estimator",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "MultiTaskElasticNetCV",
                            "descriptions": "Multi-task L1/L2 ElasticNet with built-in cross-validation. See glossary entry for cross-validation estimator. The optimization objective for MultiTaskElasticNet is: Where: i.e. the sum of norm of each row. Read more in the User Guide. Added in version 0.15.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "MultiTaskLassoCV",
                        "func_desc": "Multi-task Lasso model trained with L1/L2 mixed-norm as regularizer.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.MultiTaskLassoCV.html#sklearn.linear_model.MultiTaskLassoCV",
                        "function_definitions": {
                            "function_name": "MultiTaskLassoCV",
                            "full_function": "class sklearn.linear_model.MultiTaskLassoCV(*, eps=0.001, n_alphas=100, alphas=None, fit_intercept=True, max_iter=1000, tol=0.0001, copy_X=True, cv=None, verbose=False, n_jobs=None, random_state=None, selection='cyclic')",
                            "function_text": "Multi-task Lasso model trained with L1/L2 mixed-norm as regularizer. See glossary entry for cross-validation estimator. The optimization objective for MultiTaskLasso is: Where: i.e. the sum of norm of each row. Read more in the User Guide. Added in version 0.15.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/glossary.html#term-cross-validation-estimator",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "MultiTaskLassoCV",
                            "descriptions": "Multi-task Lasso model trained with L1/L2 mixed-norm as regularizer. See glossary entry for cross-validation estimator. The optimization objective for MultiTaskLasso is: Where: i.e. the sum of norm of each row. Read more in the User Guide. Added in version 0.15.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    }
                ]
            },
            {
                "Outlier-robust regressors": [
                    {
                        "func_name": "HuberRegressor",
                        "func_desc": "L2-regularized linear regression model that is robust to outliers.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.HuberRegressor.html#sklearn.linear_model.HuberRegressor",
                        "function_definitions": {
                            "function_name": "HuberRegressor",
                            "full_function": "class sklearn.linear_model.HuberRegressor(*, epsilon=1.35, max_iter=100, alpha=0.0001, warm_start=False, fit_intercept=True, tol=1e-05)",
                            "function_text": "L2-regularized linear regression model that is robust to outliers. The Huber Regressor optimizes the squared loss for the samples where\n|(y - Xw - c) / sigma| < epsilon and the absolute loss for the samples\nwhere |(y - Xw - c) / sigma| > epsilon, where the model coefficients\nw, the intercept c and the scale sigma are parameters\nto be optimized. The parameter sigma makes sure that if y is scaled up\nor down by a certain factor, one does not need to rescale epsilon to\nachieve the same robustness. Note that this does not take into account\nthe fact that the different features of X may be of different scales. The Huber loss function has the advantage of not being heavily influenced\nby the outliers while not completely ignoring their effect. Read more in the User Guide Added in version 0.18.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/linear_model.html#huber-regression",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "HuberRegressor",
                            "descriptions": "L2-regularized linear regression model that is robust to outliers. The Huber Regressor optimizes the squared loss for the samples where\n|(y - Xw - c) / sigma| < epsilon and the absolute loss for the samples\nwhere |(y - Xw - c) / sigma| > epsilon, where the model coefficients\nw, the intercept c and the scale sigma are parameters\nto be optimized. The parameter sigma makes sure that if y is scaled up\nor down by a certain factor, one does not need to rescale epsilon to\nachieve the same robustness. Note that this does not take into account\nthe fact that the different features of X may be of different scales. The Huber loss function has the advantage of not being heavily influenced\nby the outliers while not completely ignoring their effect. Read more in the User Guide Added in version 0.18.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "RANSACRegressor",
                        "func_desc": "RANSAC (RANdom SAmple Consensus) algorithm.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.RANSACRegressor.html#sklearn.linear_model.RANSACRegressor",
                        "function_definitions": {
                            "function_name": "RANSACRegressor",
                            "full_function": "class sklearn.linear_model.RANSACRegressor(estimator=None, *, min_samples=None, residual_threshold=None, is_data_valid=None, is_model_valid=None, max_trials=100, max_skips=inf, stop_n_inliers=inf, stop_score=inf, stop_probability=0.99, loss='absolute_error', random_state=None)",
                            "function_text": "RANSAC (RANdom SAmple Consensus) algorithm. RANSAC is an iterative algorithm for the robust estimation of parameters\nfrom a subset of inliers from the complete data set. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/linear_model.html#ransac-regression",
                            "parameter_names_desc": [
                                {
                                    "param_name": "**params",
                                    "param_type": "dict",
                                    "param_desc": "Estimator parameters.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "RANSACRegressor",
                            "descriptions": "RANSAC (RANdom SAmple Consensus) algorithm. RANSAC is an iterative algorithm for the robust estimation of parameters\nfrom a subset of inliers from the complete data set. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "**params": {
                                        "type": "dict",
                                        "description": "dict. Estimator parameters.\n"
                                    }
                                },
                                "required": [
                                    "estimator=None"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "QuantileRegressor",
                        "func_desc": "Linear regression model that predicts conditional quantiles.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.QuantileRegressor.html#sklearn.linear_model.QuantileRegressor",
                        "function_definitions": {
                            "function_name": "QuantileRegressor",
                            "full_function": "class sklearn.linear_model.QuantileRegressor(*, quantile=0.5, alpha=1.0, fit_intercept=True, solver='highs', solver_options=None)",
                            "function_text": "Linear regression model that predicts conditional quantiles. The linear QuantileRegressor optimizes the pinball loss for a\ndesired quantile and is robust to outliers. This model uses an L1 regularization like\nLasso. Read more in the User Guide. Added in version 1.0.",
                            "func_text_user_guide": "#sklearn.linear_model.QuantileRegressor",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "QuantileRegressor",
                            "descriptions": "Linear regression model that predicts conditional quantiles. The linear QuantileRegressor optimizes the pinball loss for a\ndesired quantile and is robust to outliers. This model uses an L1 regularization like\nLasso. Read more in the User Guide. Added in version 1.0.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "TheilSenRegressor",
                        "func_desc": "Theil-Sen Estimator: robust multivariate regression model.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.TheilSenRegressor.html#sklearn.linear_model.TheilSenRegressor",
                        "function_definitions": {
                            "function_name": "TheilSenRegressor",
                            "full_function": "class sklearn.linear_model.TheilSenRegressor(*, fit_intercept=True, copy_X=True, max_subpopulation=10000.0, n_subsamples=None, max_iter=300, tol=0.001, random_state=None, n_jobs=None, verbose=False)",
                            "function_text": "Theil-Sen Estimator: robust multivariate regression model. The algorithm calculates least square solutions on subsets with size\nn_subsamples of the samples in X. Any value of n_subsamples between the\nnumber of features and samples leads to an estimator with a compromise\nbetween robustness and efficiency. Since the number of least square\nsolutions is \u201cn_samples choose n_subsamples\u201d, it can be extremely large\nand can therefore be limited with max_subpopulation. If this limit is\nreached, the subsets are chosen randomly. In a final step, the spatial\nmedian (or L1 median) is calculated of all least square solutions. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/linear_model.html#theil-sen-regression",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "TheilSenRegressor",
                            "descriptions": "Theil-Sen Estimator: robust multivariate regression model. The algorithm calculates least square solutions on subsets with size\nn_subsamples of the samples in X. Any value of n_subsamples between the\nnumber of features and samples leads to an estimator with a compromise\nbetween robustness and efficiency. Since the number of least square\nsolutions is \u201cn_samples choose n_subsamples\u201d, it can be extremely large\nand can therefore be limited with max_subpopulation. If this limit is\nreached, the subsets are chosen randomly. In a final step, the spatial\nmedian (or L1 median) is calculated of all least square solutions. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    }
                ]
            },
            {
                "Generalized linear models (GLM) for regression": [
                    {
                        "func_name": "GammaRegressor",
                        "func_desc": "Generalized Linear Model with a Gamma distribution.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.GammaRegressor.html#sklearn.linear_model.GammaRegressor",
                        "function_definitions": {
                            "function_name": "GammaRegressor",
                            "full_function": "class sklearn.linear_model.GammaRegressor(*, alpha=1.0, fit_intercept=True, solver='lbfgs', max_iter=100, tol=0.0001, warm_start=False, verbose=0)",
                            "function_text": "Generalized Linear Model with a Gamma distribution. This regressor uses the \u2018log\u2019 link function. Read more in the User Guide. Added in version 0.23.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/linear_model.html#generalized-linear-models",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "GammaRegressor",
                            "descriptions": "Generalized Linear Model with a Gamma distribution. This regressor uses the \u2018log\u2019 link function. Read more in the User Guide. Added in version 0.23.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "TweedieRegressor",
                        "func_desc": "Generalized Linear Model with a Tweedie distribution.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.TweedieRegressor.html#sklearn.linear_model.TweedieRegressor",
                        "function_definitions": {
                            "function_name": "TweedieRegressor",
                            "full_function": "class sklearn.linear_model.TweedieRegressor(*, power=0.0, alpha=1.0, fit_intercept=True, link='auto', solver='lbfgs', max_iter=100, tol=0.0001, warm_start=False, verbose=0)",
                            "function_text": "Generalized Linear Model with a Tweedie distribution. This estimator can be used to model different GLMs depending on the\npower parameter, which determines the underlying distribution. Read more in the User Guide. Added in version 0.23.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/linear_model.html#generalized-linear-models",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "TweedieRegressor",
                            "descriptions": "Generalized Linear Model with a Tweedie distribution. This estimator can be used to model different GLMs depending on the\npower parameter, which determines the underlying distribution. Read more in the User Guide. Added in version 0.23.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "PoissonRegressor",
                        "func_desc": "Generalized Linear Model with a Poisson distribution.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.PoissonRegressor.html#sklearn.linear_model.PoissonRegressor",
                        "function_definitions": {
                            "function_name": "PoissonRegressor",
                            "full_function": "class sklearn.linear_model.PoissonRegressor(*, alpha=1.0, fit_intercept=True, solver='lbfgs', max_iter=100, tol=0.0001, warm_start=False, verbose=0)",
                            "function_text": "Generalized Linear Model with a Poisson distribution. This regressor uses the \u2018log\u2019 link function. Read more in the User Guide. Added in version 0.23.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/linear_model.html#generalized-linear-models",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "PoissonRegressor",
                            "descriptions": "Generalized Linear Model with a Poisson distribution. This regressor uses the \u2018log\u2019 link function. Read more in the User Guide. Added in version 0.23.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    }
                ]
            },
            {
                "Miscellaneous": [
                    {
                        "func_name": "PassiveAggressiveRegressor",
                        "func_desc": "Passive Aggressive Regressor.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.PassiveAggressiveRegressor.html#sklearn.linear_model.PassiveAggressiveRegressor",
                        "function_definitions": {
                            "function_name": "PassiveAggressiveRegressor",
                            "full_function": "class sklearn.linear_model.PassiveAggressiveRegressor(*, C=1.0, fit_intercept=True, max_iter=1000, tol=0.001, early_stopping=False, validation_fraction=0.1, n_iter_no_change=5, shuffle=True, verbose=0, loss='epsilon_insensitive', epsilon=0.1, random_state=None, warm_start=False, average=False)",
                            "function_text": "Passive Aggressive Regressor. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/linear_model.html#passive-aggressive",
                            "parameter_names_desc": []
                        },
                        "function_calling": {}
                    },
                    {
                        "func_name": "lars_path",
                        "func_desc": "Compute Least Angle Regression or Lasso path using the LARS algorithm.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.lars_path.html#sklearn.linear_model.lars_path",
                        "function_definitions": {
                            "function_name": "lars_path",
                            "full_function": "sklearn.linear_model.lars_path(X, y, Xy=None, *, Gram=None, max_iter=500, alpha_min=0, method='lar', copy_X=True, eps=2.220446049250313e-16, copy_Gram=True, verbose=0, return_path=True, return_n_iter=False, positive=False)",
                            "function_text": "Compute Least Angle Regression or Lasso path using the LARS algorithm. The optimization objective for the case method=\u2019lasso\u2019 is: in the case of method=\u2019lar\u2019, the objective function is only known in\nthe form of an implicit equation (see discussion in [1]). Read more in the User Guide.",
                            "func_text_user_guide": "#r2391cff0bbde-1",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "None or ndarray of shape (n_samples, n_features)",
                                    "param_desc": "Input data. Note that if X is None then the Gram matrix must be\nspecified, i.e., cannot be None or False.\n"
                                },
                                {
                                    "param_name": "y",
                                    "param_type": "None or ndarray of shape (n_samples,)",
                                    "param_desc": "Input targets.\n"
                                },
                                {
                                    "param_name": "Xy",
                                    "param_type": "array-like of shape (n_features,), default=None",
                                    "param_desc": "Xy = X.T @ y that can be precomputed. It is useful\nonly when the Gram matrix is precomputed.\n"
                                },
                                {
                                    "param_name": "Gram",
                                    "param_type": "None, \u2018auto\u2019, bool, ndarray of shape (n_features, n_features),             default=None",
                                    "param_desc": "Precomputed Gram matrix X.T @ X, if 'auto', the Gram\nmatrix is precomputed from the given X, if there are more samples\nthan features.\n"
                                },
                                {
                                    "param_name": "max_iter",
                                    "param_type": "int, default=500",
                                    "param_desc": "Maximum number of iterations to perform, set to infinity for no limit.\n"
                                },
                                {
                                    "param_name": "alpha_min",
                                    "param_type": "float, default=0",
                                    "param_desc": "Minimum correlation along the path. It corresponds to the\nregularization parameter alpha in the Lasso.\n"
                                },
                                {
                                    "param_name": "method",
                                    "param_type": "{\u2018lar\u2019, \u2018lasso\u2019}, default=\u2019lar\u2019",
                                    "param_desc": "Specifies the returned model. Select 'lar' for Least Angle\nRegression, 'lasso' for the Lasso.\n"
                                },
                                {
                                    "param_name": "copy_X",
                                    "param_type": "bool, default=True",
                                    "param_desc": "If False, X is overwritten.\n"
                                },
                                {
                                    "param_name": "eps",
                                    "param_type": "float, default=np.finfo(float).eps",
                                    "param_desc": "The machine-precision regularization in the computation of the\nCholesky diagonal factors. Increase this for very ill-conditioned\nsystems. Unlike the tol parameter in some iterative\noptimization-based algorithms, this parameter does not control\nthe tolerance of the optimization.\n"
                                },
                                {
                                    "param_name": "copy_Gram",
                                    "param_type": "bool, default=True",
                                    "param_desc": "If False, Gram is overwritten.\n"
                                },
                                {
                                    "param_name": "verbose",
                                    "param_type": "int, default=0",
                                    "param_desc": "Controls output verbosity.\n"
                                },
                                {
                                    "param_name": "return_path",
                                    "param_type": "bool, default=True",
                                    "param_desc": "If True, returns the entire path, else returns only the\nlast point of the path.\n"
                                },
                                {
                                    "param_name": "return_n_iter",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Whether to return the number of iterations.\n"
                                },
                                {
                                    "param_name": "positive",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Restrict coefficients to be >= 0.\nThis option is only allowed with method \u2018lasso\u2019. Note that the model\ncoefficients will not converge to the ordinary-least-squares solution\nfor small values of alpha. Only coefficients up to the smallest alpha\nvalue (alphas_[alphas_ > 0.].min() when fit_path=True) reached by\nthe stepwise Lars-Lasso algorithm are typically in congruence with the\nsolution of the coordinate descent lasso_path function.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "lars_path",
                            "descriptions": "Compute Least Angle Regression or Lasso path using the LARS algorithm. The optimization objective for the case method=\u2019lasso\u2019 is: in the case of method=\u2019lar\u2019, the objective function is only known in\nthe form of an implicit equation (see discussion in [1]). Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "None or ndarray of shape (n_samples, n_features). Input data. Note that if X is None then the Gram matrix must be\nspecified, i.e., cannot be None or False.\n"
                                    },
                                    "y": {
                                        "type": "array",
                                        "description": "None or ndarray of shape (n_samples,). Input targets.\n"
                                    },
                                    "Xy": {
                                        "type": "array",
                                        "description": "array-like of shape (n_features,), default=None. Xy = X.T @ y that can be precomputed. It is useful\nonly when the Gram matrix is precomputed.\n"
                                    },
                                    "Gram": {
                                        "type": "boolean",
                                        "description": "None, \u2018auto\u2019, bool, ndarray of shape (n_features, n_features),             default=None. Precomputed Gram matrix X.T @ X, if 'auto', the Gram\nmatrix is precomputed from the given X, if there are more samples\nthan features.\n"
                                    },
                                    "max_iter": {
                                        "type": "integer",
                                        "description": "int, default=500. Maximum number of iterations to perform, set to infinity for no limit.\n"
                                    },
                                    "alpha_min": {
                                        "type": "float",
                                        "description": "float, default=0. Minimum correlation along the path. It corresponds to the\nregularization parameter alpha in the Lasso.\n"
                                    },
                                    "method": {
                                        "type": "string",
                                        "enum": [
                                            "lar",
                                            " lasso"
                                        ],
                                        "description": "{\u2018lar\u2019, \u2018lasso\u2019}, default=\u2019lar\u2019. Specifies the returned model. Select 'lar' for Least Angle\nRegression, 'lasso' for the Lasso.\n"
                                    },
                                    "copy_X": {
                                        "type": "boolean",
                                        "description": "bool, default=True. If False, X is overwritten.\n"
                                    },
                                    "eps": {
                                        "type": "float",
                                        "description": "float, default=np.finfo(float).eps. The machine-precision regularization in the computation of the\nCholesky diagonal factors. Increase this for very ill-conditioned\nsystems. Unlike the tol parameter in some iterative\noptimization-based algorithms, this parameter does not control\nthe tolerance of the optimization.\n"
                                    },
                                    "copy_Gram": {
                                        "type": "boolean",
                                        "description": "bool, default=True. If False, Gram is overwritten.\n"
                                    },
                                    "verbose": {
                                        "type": "integer",
                                        "description": "int, default=0. Controls output verbosity.\n"
                                    },
                                    "return_path": {
                                        "type": "boolean",
                                        "description": "bool, default=True. If True, returns the entire path, else returns only the\nlast point of the path.\n"
                                    },
                                    "return_n_iter": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Whether to return the number of iterations.\n"
                                    },
                                    "positive": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Restrict coefficients to be >= 0.\nThis option is only allowed with method \u2018lasso\u2019. Note that the model\ncoefficients will not converge to the ordinary-least-squares solution\nfor small values of alpha. Only coefficients up to the smallest alpha\nvalue (alphas_[alphas_ > 0.].min() when fit_path=True) reached by\nthe stepwise Lars-Lasso algorithm are typically in congruence with the\nsolution of the coordinate descent lasso_path function.\n"
                                    }
                                },
                                "required": [
                                    "X",
                                    "y",
                                    "Xy=None"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "lasso_path",
                        "func_desc": "Compute Lasso path with coordinate descent.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.lasso_path.html#sklearn.linear_model.lasso_path",
                        "function_definitions": {
                            "function_name": "lasso_path",
                            "full_function": "sklearn.linear_model.lasso_path(X, y, *, eps=0.001, n_alphas=100, alphas=None, precompute='auto', Xy=None, copy_X=True, coef_init=None, verbose=False, return_n_iter=False, positive=False, **params)",
                            "function_text": "Compute Lasso path with coordinate descent. The Lasso optimization function varies for mono and multi-outputs. For mono-output tasks it is: For multi-output tasks it is: Where: i.e. the sum of norm of each row. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/linear_model.html#lasso",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "Training data. Pass directly as Fortran-contiguous data to avoid\nunnecessary memory duplication. If y is mono-output then X\ncan be sparse.\n"
                                },
                                {
                                    "param_name": "y",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples,) or         (n_samples, n_targets)",
                                    "param_desc": "Target values.\n"
                                },
                                {
                                    "param_name": "eps",
                                    "param_type": "float, default=1e-3",
                                    "param_desc": "Length of the path. eps=1e-3 means that\nalpha_min / alpha_max = 1e-3.\n"
                                },
                                {
                                    "param_name": "n_alphas",
                                    "param_type": "int, default=100",
                                    "param_desc": "Number of alphas along the regularization path.\n"
                                },
                                {
                                    "param_name": "alphas",
                                    "param_type": "array-like, default=None",
                                    "param_desc": "List of alphas where to compute the models.\nIf None alphas are set automatically.\n"
                                },
                                {
                                    "param_name": "precompute",
                                    "param_type": "\u2018auto\u2019, bool or array-like of shape             (n_features, n_features), default=\u2019auto\u2019",
                                    "param_desc": "Whether to use a precomputed Gram matrix to speed up\ncalculations. If set to 'auto' let us decide. The Gram\nmatrix can also be passed as argument.\n"
                                },
                                {
                                    "param_name": "Xy",
                                    "param_type": "array-like of shape (n_features,) or (n_features, n_targets),         default=None",
                                    "param_desc": "Xy = np.dot(X.T, y) that can be precomputed. It is useful\nonly when the Gram matrix is precomputed.\n"
                                },
                                {
                                    "param_name": "copy_X",
                                    "param_type": "bool, default=True",
                                    "param_desc": "If True, X will be copied; else, it may be overwritten.\n"
                                },
                                {
                                    "param_name": "coef_init",
                                    "param_type": "array-like of shape (n_features, ), default=None",
                                    "param_desc": "The initial values of the coefficients.\n"
                                },
                                {
                                    "param_name": "verbose",
                                    "param_type": "bool or int, default=False",
                                    "param_desc": "Amount of verbosity.\n"
                                },
                                {
                                    "param_name": "return_n_iter",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Whether to return the number of iterations or not.\n"
                                },
                                {
                                    "param_name": "positive",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If set to True, forces coefficients to be positive.\n(Only allowed when y.ndim == 1).\n"
                                },
                                {
                                    "param_name": "**params",
                                    "param_type": "kwargs",
                                    "param_desc": "Keyword arguments passed to the coordinate descent solver.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "lasso_path",
                            "descriptions": "Compute Lasso path with coordinate descent. The Lasso optimization function varies for mono and multi-outputs. For mono-output tasks it is: For multi-output tasks it is: Where: i.e. the sum of norm of each row. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). Training data. Pass directly as Fortran-contiguous data to avoid\nunnecessary memory duplication. If y is mono-output then X\ncan be sparse.\n"
                                    },
                                    "y": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples,) or         (n_samples, n_targets). Target values.\n"
                                    },
                                    "eps": {
                                        "type": "float",
                                        "description": "float, default=1e-3. Length of the path. eps=1e-3 means that\nalpha_min / alpha_max = 1e-3.\n"
                                    },
                                    "n_alphas": {
                                        "type": "integer",
                                        "description": "int, default=100. Number of alphas along the regularization path.\n"
                                    },
                                    "alphas": {
                                        "type": "array",
                                        "description": "array-like, default=None. List of alphas where to compute the models.\nIf None alphas are set automatically.\n"
                                    },
                                    "precompute": {
                                        "type": "boolean",
                                        "description": "\u2018auto\u2019, bool or array-like of shape             (n_features, n_features), default=\u2019auto\u2019. Whether to use a precomputed Gram matrix to speed up\ncalculations. If set to 'auto' let us decide. The Gram\nmatrix can also be passed as argument.\n"
                                    },
                                    "Xy": {
                                        "type": "array",
                                        "description": "array-like of shape (n_features,) or (n_features, n_targets),         default=None. Xy = np.dot(X.T, y) that can be precomputed. It is useful\nonly when the Gram matrix is precomputed.\n"
                                    },
                                    "copy_X": {
                                        "type": "boolean",
                                        "description": "bool, default=True. If True, X will be copied; else, it may be overwritten.\n"
                                    },
                                    "coef_init": {
                                        "type": "array",
                                        "description": "array-like of shape (n_features, ), default=None. The initial values of the coefficients.\n"
                                    },
                                    "verbose": {
                                        "type": "integer",
                                        "description": "bool or int, default=False. Amount of verbosity.\n"
                                    },
                                    "return_n_iter": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Whether to return the number of iterations or not.\n"
                                    },
                                    "positive": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If set to True, forces coefficients to be positive.\n(Only allowed when y.ndim == 1).\n"
                                    },
                                    "**params": {
                                        "type": "kwargs",
                                        "description": "kwargs. Keyword arguments passed to the coordinate descent solver.\n"
                                    }
                                },
                                "required": [
                                    "X",
                                    "y"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "orthogonal_mp_gram",
                        "func_desc": "Gram Orthogonal Matching Pursuit (OMP).",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.orthogonal_mp_gram.html#sklearn.linear_model.orthogonal_mp_gram",
                        "function_definitions": {
                            "function_name": "orthogonal_mp_gram",
                            "full_function": "sklearn.linear_model.orthogonal_mp_gram(Gram, Xy, *, n_nonzero_coefs=None, tol=None, norms_squared=None, copy_Gram=True, copy_Xy=True, return_path=False, return_n_iter=False)",
                            "function_text": "Gram Orthogonal Matching Pursuit (OMP). Solves n_targets Orthogonal Matching Pursuit problems using only\nthe Gram matrix X.T * X and the product X.T * y. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/linear_model.html#omp",
                            "parameter_names_desc": [
                                {
                                    "param_name": "Gram",
                                    "param_type": "array-like of shape (n_features, n_features)",
                                    "param_desc": "Gram matrix of the input data: X.T * X.\n"
                                },
                                {
                                    "param_name": "Xy",
                                    "param_type": "array-like of shape (n_features,) or (n_features, n_targets)",
                                    "param_desc": "Input targets multiplied by X: X.T * y.\n"
                                },
                                {
                                    "param_name": "n_nonzero_coefs",
                                    "param_type": "int, default=None",
                                    "param_desc": "Desired number of non-zero entries in the solution. If None (by\ndefault) this value is set to 10% of n_features.\n"
                                },
                                {
                                    "param_name": "tol",
                                    "param_type": "float, default=None",
                                    "param_desc": "Maximum squared norm of the residual. If not None,\noverrides n_nonzero_coefs.\n"
                                },
                                {
                                    "param_name": "norms_squared",
                                    "param_type": "array-like of shape (n_targets,), default=None",
                                    "param_desc": "Squared L2 norms of the lines of y. Required if tol is not None.\n"
                                },
                                {
                                    "param_name": "copy_Gram",
                                    "param_type": "bool, default=True",
                                    "param_desc": "Whether the gram matrix must be copied by the algorithm. A False\nvalue is only helpful if it is already Fortran-ordered, otherwise a\ncopy is made anyway.\n"
                                },
                                {
                                    "param_name": "copy_Xy",
                                    "param_type": "bool, default=True",
                                    "param_desc": "Whether the covariance vector Xy must be copied by the algorithm.\nIf False, it may be overwritten.\n"
                                },
                                {
                                    "param_name": "return_path",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Whether to return every value of the nonzero coefficients along the\nforward path. Useful for cross-validation.\n"
                                },
                                {
                                    "param_name": "return_n_iter",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Whether or not to return the number of iterations.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "orthogonal_mp_gram",
                            "descriptions": "Gram Orthogonal Matching Pursuit (OMP). Solves n_targets Orthogonal Matching Pursuit problems using only\nthe Gram matrix X.T * X and the product X.T * y. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "Gram": {
                                        "type": "array",
                                        "description": "array-like of shape (n_features, n_features). Gram matrix of the input data: X.T * X.\n"
                                    },
                                    "Xy": {
                                        "type": "array",
                                        "description": "array-like of shape (n_features,) or (n_features, n_targets). Input targets multiplied by X: X.T * y.\n"
                                    },
                                    "n_nonzero_coefs": {
                                        "type": "integer",
                                        "description": "int, default=None. Desired number of non-zero entries in the solution. If None (by\ndefault) this value is set to 10% of n_features.\n"
                                    },
                                    "tol": {
                                        "type": "float",
                                        "description": "float, default=None. Maximum squared norm of the residual. If not None,\noverrides n_nonzero_coefs.\n"
                                    },
                                    "norms_squared": {
                                        "type": "array",
                                        "description": "array-like of shape (n_targets,), default=None. Squared L2 norms of the lines of y. Required if tol is not None.\n"
                                    },
                                    "copy_Gram": {
                                        "type": "boolean",
                                        "description": "bool, default=True. Whether the gram matrix must be copied by the algorithm. A False\nvalue is only helpful if it is already Fortran-ordered, otherwise a\ncopy is made anyway.\n"
                                    },
                                    "copy_Xy": {
                                        "type": "boolean",
                                        "description": "bool, default=True. Whether the covariance vector Xy must be copied by the algorithm.\nIf False, it may be overwritten.\n"
                                    },
                                    "return_path": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Whether to return every value of the nonzero coefficients along the\nforward path. Useful for cross-validation.\n"
                                    },
                                    "return_n_iter": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Whether or not to return the number of iterations.\n"
                                    }
                                },
                                "required": [
                                    "Gram",
                                    "Xy"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "enet_path",
                        "func_desc": "Compute elastic net path with coordinate descent.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.enet_path.html#sklearn.linear_model.enet_path",
                        "function_definitions": {
                            "function_name": "enet_path",
                            "full_function": "sklearn.linear_model.enet_path(X, y, *, l1_ratio=0.5, eps=0.001, n_alphas=100, alphas=None, precompute='auto', Xy=None, copy_X=True, coef_init=None, verbose=False, return_n_iter=False, positive=False, check_input=True, **params)",
                            "function_text": "Compute elastic net path with coordinate descent. The elastic net optimization function varies for mono and multi-outputs. For mono-output tasks it is: For multi-output tasks it is: Where: i.e. the sum of norm of each row. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/linear_model.html#elastic-net",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "Training data. Pass directly as Fortran-contiguous data to avoid\nunnecessary memory duplication. If y is mono-output then X\ncan be sparse.\n"
                                },
                                {
                                    "param_name": "y",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples,) or         (n_samples, n_targets)",
                                    "param_desc": "Target values.\n"
                                },
                                {
                                    "param_name": "l1_ratio",
                                    "param_type": "float, default=0.5",
                                    "param_desc": "Number between 0 and 1 passed to elastic net (scaling between\nl1 and l2 penalties). l1_ratio=1 corresponds to the Lasso.\n"
                                },
                                {
                                    "param_name": "eps",
                                    "param_type": "float, default=1e-3",
                                    "param_desc": "Length of the path. eps=1e-3 means that\nalpha_min / alpha_max = 1e-3.\n"
                                },
                                {
                                    "param_name": "n_alphas",
                                    "param_type": "int, default=100",
                                    "param_desc": "Number of alphas along the regularization path.\n"
                                },
                                {
                                    "param_name": "alphas",
                                    "param_type": "array-like, default=None",
                                    "param_desc": "List of alphas where to compute the models.\nIf None alphas are set automatically.\n"
                                },
                                {
                                    "param_name": "precompute",
                                    "param_type": "\u2018auto\u2019, bool or array-like of shape             (n_features, n_features), default=\u2019auto\u2019",
                                    "param_desc": "Whether to use a precomputed Gram matrix to speed up\ncalculations. If set to 'auto' let us decide. The Gram\nmatrix can also be passed as argument.\n"
                                },
                                {
                                    "param_name": "Xy",
                                    "param_type": "array-like of shape (n_features,) or (n_features, n_targets),         default=None",
                                    "param_desc": "Xy = np.dot(X.T, y) that can be precomputed. It is useful\nonly when the Gram matrix is precomputed.\n"
                                },
                                {
                                    "param_name": "copy_X",
                                    "param_type": "bool, default=True",
                                    "param_desc": "If True, X will be copied; else, it may be overwritten.\n"
                                },
                                {
                                    "param_name": "coef_init",
                                    "param_type": "array-like of shape (n_features, ), default=None",
                                    "param_desc": "The initial values of the coefficients.\n"
                                },
                                {
                                    "param_name": "verbose",
                                    "param_type": "bool or int, default=False",
                                    "param_desc": "Amount of verbosity.\n"
                                },
                                {
                                    "param_name": "return_n_iter",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Whether to return the number of iterations or not.\n"
                                },
                                {
                                    "param_name": "positive",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If set to True, forces coefficients to be positive.\n(Only allowed when y.ndim == 1).\n"
                                },
                                {
                                    "param_name": "check_input",
                                    "param_type": "bool, default=True",
                                    "param_desc": "If set to False, the input validation checks are skipped (including the\nGram matrix when provided). It is assumed that they are handled\nby the caller.\n"
                                },
                                {
                                    "param_name": "**params",
                                    "param_type": "kwargs",
                                    "param_desc": "Keyword arguments passed to the coordinate descent solver.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "enet_path",
                            "descriptions": "Compute elastic net path with coordinate descent. The elastic net optimization function varies for mono and multi-outputs. For mono-output tasks it is: For multi-output tasks it is: Where: i.e. the sum of norm of each row. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). Training data. Pass directly as Fortran-contiguous data to avoid\nunnecessary memory duplication. If y is mono-output then X\ncan be sparse.\n"
                                    },
                                    "y": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples,) or         (n_samples, n_targets). Target values.\n"
                                    },
                                    "l1_ratio": {
                                        "type": "float",
                                        "description": "float, default=0.5. Number between 0 and 1 passed to elastic net (scaling between\nl1 and l2 penalties). l1_ratio=1 corresponds to the Lasso.\n"
                                    },
                                    "eps": {
                                        "type": "float",
                                        "description": "float, default=1e-3. Length of the path. eps=1e-3 means that\nalpha_min / alpha_max = 1e-3.\n"
                                    },
                                    "n_alphas": {
                                        "type": "integer",
                                        "description": "int, default=100. Number of alphas along the regularization path.\n"
                                    },
                                    "alphas": {
                                        "type": "array",
                                        "description": "array-like, default=None. List of alphas where to compute the models.\nIf None alphas are set automatically.\n"
                                    },
                                    "precompute": {
                                        "type": "boolean",
                                        "description": "\u2018auto\u2019, bool or array-like of shape             (n_features, n_features), default=\u2019auto\u2019. Whether to use a precomputed Gram matrix to speed up\ncalculations. If set to 'auto' let us decide. The Gram\nmatrix can also be passed as argument.\n"
                                    },
                                    "Xy": {
                                        "type": "array",
                                        "description": "array-like of shape (n_features,) or (n_features, n_targets),         default=None. Xy = np.dot(X.T, y) that can be precomputed. It is useful\nonly when the Gram matrix is precomputed.\n"
                                    },
                                    "copy_X": {
                                        "type": "boolean",
                                        "description": "bool, default=True. If True, X will be copied; else, it may be overwritten.\n"
                                    },
                                    "coef_init": {
                                        "type": "array",
                                        "description": "array-like of shape (n_features, ), default=None. The initial values of the coefficients.\n"
                                    },
                                    "verbose": {
                                        "type": "integer",
                                        "description": "bool or int, default=False. Amount of verbosity.\n"
                                    },
                                    "return_n_iter": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Whether to return the number of iterations or not.\n"
                                    },
                                    "positive": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If set to True, forces coefficients to be positive.\n(Only allowed when y.ndim == 1).\n"
                                    },
                                    "check_input": {
                                        "type": "boolean",
                                        "description": "bool, default=True. If set to False, the input validation checks are skipped (including the\nGram matrix when provided). It is assumed that they are handled\nby the caller.\n"
                                    },
                                    "**params": {
                                        "type": "kwargs",
                                        "description": "kwargs. Keyword arguments passed to the coordinate descent solver.\n"
                                    }
                                },
                                "required": [
                                    "X",
                                    "y"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "lars_path_gram",
                        "func_desc": "The lars_path in the sufficient stats mode.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.lars_path_gram.html#sklearn.linear_model.lars_path_gram",
                        "function_definitions": {
                            "function_name": "lars_path_gram",
                            "full_function": "sklearn.linear_model.lars_path_gram(Xy, Gram, *, n_samples, max_iter=500, alpha_min=0, method='lar', copy_X=True, eps=2.220446049250313e-16, copy_Gram=True, verbose=0, return_path=True, return_n_iter=False, positive=False)",
                            "function_text": "The lars_path in the sufficient stats mode. The optimization objective for the case method=\u2019lasso\u2019 is: in the case of method=\u2019lar\u2019, the objective function is only known in\nthe form of an implicit equation (see discussion in [1]). Read more in the User Guide.",
                            "func_text_user_guide": "#r34229eeff553-1",
                            "parameter_names_desc": [
                                {
                                    "param_name": "Xy",
                                    "param_type": "ndarray of shape (n_features,)",
                                    "param_desc": "Xy = X.T @ y.\n"
                                },
                                {
                                    "param_name": "Gram",
                                    "param_type": "ndarray of shape (n_features, n_features)",
                                    "param_desc": "Gram = X.T @ X.\n"
                                },
                                {
                                    "param_name": "n_samples",
                                    "param_type": "int",
                                    "param_desc": "Equivalent size of sample.\n"
                                },
                                {
                                    "param_name": "max_iter",
                                    "param_type": "int, default=500",
                                    "param_desc": "Maximum number of iterations to perform, set to infinity for no limit.\n"
                                },
                                {
                                    "param_name": "alpha_min",
                                    "param_type": "float, default=0",
                                    "param_desc": "Minimum correlation along the path. It corresponds to the\nregularization parameter alpha parameter in the Lasso.\n"
                                },
                                {
                                    "param_name": "method",
                                    "param_type": "{\u2018lar\u2019, \u2018lasso\u2019}, default=\u2019lar\u2019",
                                    "param_desc": "Specifies the returned model. Select 'lar' for Least Angle\nRegression, 'lasso' for the Lasso.\n"
                                },
                                {
                                    "param_name": "copy_X",
                                    "param_type": "bool, default=True",
                                    "param_desc": "If False, X is overwritten.\n"
                                },
                                {
                                    "param_name": "eps",
                                    "param_type": "float, default=np.finfo(float).eps",
                                    "param_desc": "The machine-precision regularization in the computation of the\nCholesky diagonal factors. Increase this for very ill-conditioned\nsystems. Unlike the tol parameter in some iterative\noptimization-based algorithms, this parameter does not control\nthe tolerance of the optimization.\n"
                                },
                                {
                                    "param_name": "copy_Gram",
                                    "param_type": "bool, default=True",
                                    "param_desc": "If False, Gram is overwritten.\n"
                                },
                                {
                                    "param_name": "verbose",
                                    "param_type": "int, default=0",
                                    "param_desc": "Controls output verbosity.\n"
                                },
                                {
                                    "param_name": "return_path",
                                    "param_type": "bool, default=True",
                                    "param_desc": "If return_path==True returns the entire path, else returns only the\nlast point of the path.\n"
                                },
                                {
                                    "param_name": "return_n_iter",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Whether to return the number of iterations.\n"
                                },
                                {
                                    "param_name": "positive",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Restrict coefficients to be >= 0.\nThis option is only allowed with method \u2018lasso\u2019. Note that the model\ncoefficients will not converge to the ordinary-least-squares solution\nfor small values of alpha. Only coefficients up to the smallest alpha\nvalue (alphas_[alphas_ > 0.].min() when fit_path=True) reached by\nthe stepwise Lars-Lasso algorithm are typically in congruence with the\nsolution of the coordinate descent lasso_path function.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "lars_path_gram",
                            "descriptions": "The lars_path in the sufficient stats mode. The optimization objective for the case method=\u2019lasso\u2019 is: in the case of method=\u2019lar\u2019, the objective function is only known in\nthe form of an implicit equation (see discussion in [1]). Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "Xy": {
                                        "type": "array",
                                        "description": "ndarray of shape (n_features,). Xy = X.T @ y.\n"
                                    },
                                    "Gram": {
                                        "type": "array",
                                        "description": "ndarray of shape (n_features, n_features). Gram = X.T @ X.\n"
                                    },
                                    "n_samples": {
                                        "type": "integer",
                                        "description": "int. Equivalent size of sample.\n"
                                    },
                                    "max_iter": {
                                        "type": "integer",
                                        "description": "int, default=500. Maximum number of iterations to perform, set to infinity for no limit.\n"
                                    },
                                    "alpha_min": {
                                        "type": "float",
                                        "description": "float, default=0. Minimum correlation along the path. It corresponds to the\nregularization parameter alpha parameter in the Lasso.\n"
                                    },
                                    "method": {
                                        "type": "string",
                                        "enum": [
                                            "lar",
                                            " lasso"
                                        ],
                                        "description": "{\u2018lar\u2019, \u2018lasso\u2019}, default=\u2019lar\u2019. Specifies the returned model. Select 'lar' for Least Angle\nRegression, 'lasso' for the Lasso.\n"
                                    },
                                    "copy_X": {
                                        "type": "boolean",
                                        "description": "bool, default=True. If False, X is overwritten.\n"
                                    },
                                    "eps": {
                                        "type": "float",
                                        "description": "float, default=np.finfo(float).eps. The machine-precision regularization in the computation of the\nCholesky diagonal factors. Increase this for very ill-conditioned\nsystems. Unlike the tol parameter in some iterative\noptimization-based algorithms, this parameter does not control\nthe tolerance of the optimization.\n"
                                    },
                                    "copy_Gram": {
                                        "type": "boolean",
                                        "description": "bool, default=True. If False, Gram is overwritten.\n"
                                    },
                                    "verbose": {
                                        "type": "integer",
                                        "description": "int, default=0. Controls output verbosity.\n"
                                    },
                                    "return_path": {
                                        "type": "boolean",
                                        "description": "bool, default=True. If return_path==True returns the entire path, else returns only the\nlast point of the path.\n"
                                    },
                                    "return_n_iter": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Whether to return the number of iterations.\n"
                                    },
                                    "positive": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Restrict coefficients to be >= 0.\nThis option is only allowed with method \u2018lasso\u2019. Note that the model\ncoefficients will not converge to the ordinary-least-squares solution\nfor small values of alpha. Only coefficients up to the smallest alpha\nvalue (alphas_[alphas_ > 0.].min() when fit_path=True) reached by\nthe stepwise Lars-Lasso algorithm are typically in congruence with the\nsolution of the coordinate descent lasso_path function.\n"
                                    }
                                },
                                "required": [
                                    "Xy",
                                    "Gram"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "orthogonal_mp",
                        "func_desc": "Orthogonal Matching Pursuit (OMP).",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.orthogonal_mp.html#sklearn.linear_model.orthogonal_mp",
                        "function_definitions": {
                            "function_name": "orthogonal_mp",
                            "full_function": "sklearn.linear_model.orthogonal_mp(X, y, *, n_nonzero_coefs=None, tol=None, precompute=False, copy_X=True, return_path=False, return_n_iter=False)",
                            "function_text": "Orthogonal Matching Pursuit (OMP). Solves n_targets Orthogonal Matching Pursuit problems.\nAn instance of the problem has the form: When parametrized by the number of non-zero coefficients using\nn_nonzero_coefs:\nargmin ||y - Xgamma||^2 subject to ||gamma||_0 <= n_{nonzero coefs} When parametrized by error using the parameter tol:\nargmin ||gamma||_0 subject to ||y - Xgamma||^2 <= tol Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/linear_model.html#omp",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples, n_features)",
                                    "param_desc": "Input data. Columns are assumed to have unit norm.\n"
                                },
                                {
                                    "param_name": "y",
                                    "param_type": "ndarray of shape (n_samples,) or (n_samples, n_targets)",
                                    "param_desc": "Input targets.\n"
                                },
                                {
                                    "param_name": "n_nonzero_coefs",
                                    "param_type": "int, default=None",
                                    "param_desc": "Desired number of non-zero entries in the solution. If None (by\ndefault) this value is set to 10% of n_features.\n"
                                },
                                {
                                    "param_name": "tol",
                                    "param_type": "float, default=None",
                                    "param_desc": "Maximum squared norm of the residual. If not None, overrides n_nonzero_coefs.\n"
                                },
                                {
                                    "param_name": "precompute",
                                    "param_type": "\u2018auto\u2019 or bool, default=False",
                                    "param_desc": "Whether to perform precomputations. Improves performance when n_targets\nor n_samples is very large.\n"
                                },
                                {
                                    "param_name": "copy_X",
                                    "param_type": "bool, default=True",
                                    "param_desc": "Whether the design matrix X must be copied by the algorithm. A false\nvalue is only helpful if X is already Fortran-ordered, otherwise a\ncopy is made anyway.\n"
                                },
                                {
                                    "param_name": "return_path",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Whether to return every value of the nonzero coefficients along the\nforward path. Useful for cross-validation.\n"
                                },
                                {
                                    "param_name": "return_n_iter",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Whether or not to return the number of iterations.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "orthogonal_mp",
                            "descriptions": "Orthogonal Matching Pursuit (OMP). Solves n_targets Orthogonal Matching Pursuit problems.\nAn instance of the problem has the form: When parametrized by the number of non-zero coefficients using\nn_nonzero_coefs:\nargmin ||y - Xgamma||^2 subject to ||gamma||_0 <= n_{nonzero coefs} When parametrized by error using the parameter tol:\nargmin ||gamma||_0 subject to ||y - Xgamma||^2 <= tol Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_features). Input data. Columns are assumed to have unit norm.\n"
                                    },
                                    "y": {
                                        "type": "array",
                                        "description": "ndarray of shape (n_samples,) or (n_samples, n_targets). Input targets.\n"
                                    },
                                    "n_nonzero_coefs": {
                                        "type": "integer",
                                        "description": "int, default=None. Desired number of non-zero entries in the solution. If None (by\ndefault) this value is set to 10% of n_features.\n"
                                    },
                                    "tol": {
                                        "type": "float",
                                        "description": "float, default=None. Maximum squared norm of the residual. If not None, overrides n_nonzero_coefs.\n"
                                    },
                                    "precompute": {
                                        "type": "boolean",
                                        "description": "\u2018auto\u2019 or bool, default=False. Whether to perform precomputations. Improves performance when n_targets\nor n_samples is very large.\n"
                                    },
                                    "copy_X": {
                                        "type": "boolean",
                                        "description": "bool, default=True. Whether the design matrix X must be copied by the algorithm. A false\nvalue is only helpful if X is already Fortran-ordered, otherwise a\ncopy is made anyway.\n"
                                    },
                                    "return_path": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Whether to return every value of the nonzero coefficients along the\nforward path. Useful for cross-validation.\n"
                                    },
                                    "return_n_iter": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Whether or not to return the number of iterations.\n"
                                    }
                                },
                                "required": [
                                    "X",
                                    "y"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "ridge_regression",
                        "func_desc": "Solve the ridge equation by the method of normal equations.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.ridge_regression.html#sklearn.linear_model.ridge_regression",
                        "function_definitions": {
                            "function_name": "ridge_regression",
                            "full_function": "sklearn.linear_model.ridge_regression(X, y, alpha, *, sample_weight=None, solver='auto', max_iter=None, tol=0.0001, verbose=0, positive=False, random_state=None, return_n_iter=False, return_intercept=False, check_input=True)",
                            "function_text": "Solve the ridge equation by the method of normal equations. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/linear_model.html#ridge-regression",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix, LinearOperator} of shape         (n_samples, n_features)",
                                    "param_desc": "Training data.\n"
                                },
                                {
                                    "param_name": "y",
                                    "param_type": "array-like of shape (n_samples,) or (n_samples, n_targets)",
                                    "param_desc": "Target values.\n"
                                },
                                {
                                    "param_name": "alpha",
                                    "param_type": "float or array-like of shape (n_targets,)",
                                    "param_desc": "Constant that multiplies the L2 term, controlling regularization\nstrength. alpha must be a non-negative float i.e. in [0, inf).\nWhen alpha = 0, the objective is equivalent to ordinary least\nsquares, solved by the LinearRegression object. For numerical\nreasons, using alpha = 0 with the Ridge object is not advised.\nInstead, you should use the LinearRegression object.\nIf an array is passed, penalties are assumed to be specific to the\ntargets. Hence they must correspond in number.\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "float or array-like of shape (n_samples,), default=None",
                                    "param_desc": "Individual weights for each sample. If given a float, every sample\nwill have the same weight. If sample_weight is not None and\nsolver=\u2019auto\u2019, the solver will be set to \u2018cholesky\u2019.\n\nAdded in version 0.17.\n\n"
                                },
                                {
                                    "param_name": "solver",
                                    "param_type": "{\u2018auto\u2019, \u2018svd\u2019, \u2018cholesky\u2019, \u2018lsqr\u2019, \u2018sparse_cg\u2019,             \u2018sag\u2019, \u2018saga\u2019, \u2018lbfgs\u2019}, default=\u2019auto\u2019",
                                    "param_desc": "Solver to use in the computational routines:\n\n\u2018auto\u2019 chooses the solver automatically based on the type of data.\n\u2018svd\u2019 uses a Singular Value Decomposition of X to compute the Ridge\ncoefficients. It is the most stable solver, in particular more stable\nfor singular matrices than \u2018cholesky\u2019 at the cost of being slower.\n\u2018cholesky\u2019 uses the standard scipy.linalg.solve function to\nobtain a closed-form solution via a Cholesky decomposition of\ndot(X.T, X)\n\u2018sparse_cg\u2019 uses the conjugate gradient solver as found in\nscipy.sparse.linalg.cg. As an iterative algorithm, this solver is\nmore appropriate than \u2018cholesky\u2019 for large-scale data\n(possibility to set tol and max_iter).\n\u2018lsqr\u2019 uses the dedicated regularized least-squares routine\nscipy.sparse.linalg.lsqr. It is the fastest and uses an iterative\nprocedure.\n\u2018sag\u2019 uses a Stochastic Average Gradient descent, and \u2018saga\u2019 uses\nits improved, unbiased version named SAGA. Both methods also use an\niterative procedure, and are often faster than other solvers when\nboth n_samples and n_features are large. Note that \u2018sag\u2019 and\n\u2018saga\u2019 fast convergence is only guaranteed on features with\napproximately the same scale. You can preprocess the data with a\nscaler from sklearn.preprocessing.\n\u2018lbfgs\u2019 uses L-BFGS-B algorithm implemented in\nscipy.optimize.minimize. It can be used only when positive\nis True.\n\nAll solvers except \u2018svd\u2019 support both dense and sparse data. However, only\n\u2018lsqr\u2019, \u2018sag\u2019, \u2018sparse_cg\u2019, and \u2018lbfgs\u2019 support sparse input when\nfit_intercept is True.\n\nAdded in version 0.17: Stochastic Average Gradient descent solver.\n\n\nAdded in version 0.19: SAGA solver.\n\n"
                                },
                                {
                                    "param_name": "max_iter",
                                    "param_type": "int, default=None",
                                    "param_desc": "Maximum number of iterations for conjugate gradient solver.\nFor the \u2018sparse_cg\u2019 and \u2018lsqr\u2019 solvers, the default value is determined\nby scipy.sparse.linalg. For \u2018sag\u2019 and saga solver, the default value is\n1000. For \u2018lbfgs\u2019 solver, the default value is 15000.\n"
                                },
                                {
                                    "param_name": "tol",
                                    "param_type": "float, default=1e-4",
                                    "param_desc": "Precision of the solution. Note that tol has no effect for solvers \u2018svd\u2019 and\n\u2018cholesky\u2019.\n\nChanged in version 1.2: Default value changed from 1e-3 to 1e-4 for consistency with other linear\nmodels.\n\n"
                                },
                                {
                                    "param_name": "verbose",
                                    "param_type": "int, default=0",
                                    "param_desc": "Verbosity level. Setting verbose > 0 will display additional\ninformation depending on the solver used.\n"
                                },
                                {
                                    "param_name": "positive",
                                    "param_type": "bool, default=False",
                                    "param_desc": "When set to True, forces the coefficients to be positive.\nOnly \u2018lbfgs\u2019 solver is supported in this case.\n"
                                },
                                {
                                    "param_name": "random_state",
                                    "param_type": "int, RandomState instance, default=None",
                                    "param_desc": "Used when solver == \u2018sag\u2019 or \u2018saga\u2019 to shuffle the data.\nSee Glossary for details.\n"
                                },
                                {
                                    "param_name": "return_n_iter",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If True, the method also returns n_iter, the actual number of\niteration performed by the solver.\n\nAdded in version 0.17.\n\n"
                                },
                                {
                                    "param_name": "return_intercept",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If True and if X is sparse, the method also returns the intercept,\nand the solver is automatically changed to \u2018sag\u2019. This is only a\ntemporary fix for fitting the intercept with sparse data. For dense\ndata, use sklearn.linear_model._preprocess_data before your regression.\n\nAdded in version 0.17.\n\n"
                                },
                                {
                                    "param_name": "check_input",
                                    "param_type": "bool, default=True",
                                    "param_desc": "If False, the input arrays X and y will not be checked.\n\nAdded in version 0.21.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "ridge_regression",
                            "descriptions": "Solve the ridge equation by the method of normal equations. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix, LinearOperator} of shape         (n_samples, n_features). Training data.\n"
                                    },
                                    "y": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,) or (n_samples, n_targets). Target values.\n"
                                    },
                                    "alpha": {
                                        "type": "float",
                                        "description": "float or array-like of shape (n_targets,). Constant that multiplies the L2 term, controlling regularization\nstrength. alpha must be a non-negative float i.e. in [0, inf).\nWhen alpha = 0, the objective is equivalent to ordinary least\nsquares, solved by the LinearRegression object. For numerical\nreasons, using alpha = 0 with the Ridge object is not advised.\nInstead, you should use the LinearRegression object.\nIf an array is passed, penalties are assumed to be specific to the\ntargets. Hence they must correspond in number.\n"
                                    },
                                    "sample_weight": {
                                        "type": "float",
                                        "description": "float or array-like of shape (n_samples,), default=None. Individual weights for each sample. If given a float, every sample\nwill have the same weight. If sample_weight is not None and\nsolver=\u2019auto\u2019, the solver will be set to \u2018cholesky\u2019.\n\nAdded in version 0.17.\n\n"
                                    },
                                    "solver": {
                                        "type": "string",
                                        "enum": [
                                            "auto",
                                            " svd",
                                            " cholesky",
                                            " lsqr",
                                            " sparse_cg",
                                            "             sag",
                                            " saga",
                                            " lbfgs"
                                        ],
                                        "description": "{\u2018auto\u2019, \u2018svd\u2019, \u2018cholesky\u2019, \u2018lsqr\u2019, \u2018sparse_cg\u2019,             \u2018sag\u2019, \u2018saga\u2019, \u2018lbfgs\u2019}, default=\u2019auto\u2019. Solver to use in the computational routines:\n\n\u2018auto\u2019 chooses the solver automatically based on the type of data.\n\u2018svd\u2019 uses a Singular Value Decomposition of X to compute the Ridge\ncoefficients. It is the most stable solver, in particular more stable\nfor singular matrices than \u2018cholesky\u2019 at the cost of being slower.\n\u2018cholesky\u2019 uses the standard scipy.linalg.solve function to\nobtain a closed-form solution via a Cholesky decomposition of\ndot(X.T, X)\n\u2018sparse_cg\u2019 uses the conjugate gradient solver as found in\nscipy.sparse.linalg.cg. As an iterative algorithm, this solver is\nmore appropriate than \u2018cholesky\u2019 for large-scale data\n(possibility to set tol and max_iter).\n\u2018lsqr\u2019 uses the dedicated regularized least-squares routine\nscipy.sparse.linalg.lsqr. It is the fastest and uses an iterative\nprocedure.\n\u2018sag\u2019 uses a Stochastic Average Gradient descent, and \u2018saga\u2019 uses\nits improved, unbiased version named SAGA. Both methods also use an\niterative procedure, and are often faster than other solvers when\nboth n_samples and n_features are large. Note that \u2018sag\u2019 and\n\u2018saga\u2019 fast convergence is only guaranteed on features with\napproximately the same scale. You can preprocess the data with a\nscaler from sklearn.preprocessing.\n\u2018lbfgs\u2019 uses L-BFGS-B algorithm implemented in\nscipy.optimize.minimize. It can be used only when positive\nis True.\n\nAll solvers except \u2018svd\u2019 support both dense and sparse data. However, only\n\u2018lsqr\u2019, \u2018sag\u2019, \u2018sparse_cg\u2019, and \u2018lbfgs\u2019 support sparse input when\nfit_intercept is True.\n\nAdded in version 0.17: Stochastic Average Gradient descent solver.\n\n\nAdded in version 0.19: SAGA solver.\n\n"
                                    },
                                    "max_iter": {
                                        "type": "integer",
                                        "description": "int, default=None. Maximum number of iterations for conjugate gradient solver.\nFor the \u2018sparse_cg\u2019 and \u2018lsqr\u2019 solvers, the default value is determined\nby scipy.sparse.linalg. For \u2018sag\u2019 and saga solver, the default value is\n1000. For \u2018lbfgs\u2019 solver, the default value is 15000.\n"
                                    },
                                    "tol": {
                                        "type": "float",
                                        "description": "float, default=1e-4. Precision of the solution. Note that tol has no effect for solvers \u2018svd\u2019 and\n\u2018cholesky\u2019.\n\nChanged in version 1.2: Default value changed from 1e-3 to 1e-4 for consistency with other linear\nmodels.\n\n"
                                    },
                                    "verbose": {
                                        "type": "integer",
                                        "description": "int, default=0. Verbosity level. Setting verbose > 0 will display additional\ninformation depending on the solver used.\n"
                                    },
                                    "positive": {
                                        "type": "boolean",
                                        "description": "bool, default=False. When set to True, forces the coefficients to be positive.\nOnly \u2018lbfgs\u2019 solver is supported in this case.\n"
                                    },
                                    "random_state": {
                                        "type": "integer",
                                        "description": "int, RandomState instance, default=None. Used when solver == \u2018sag\u2019 or \u2018saga\u2019 to shuffle the data.\nSee Glossary for details.\n"
                                    },
                                    "return_n_iter": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If True, the method also returns n_iter, the actual number of\niteration performed by the solver.\n\nAdded in version 0.17.\n\n"
                                    },
                                    "return_intercept": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If True and if X is sparse, the method also returns the intercept,\nand the solver is automatically changed to \u2018sag\u2019. This is only a\ntemporary fix for fitting the intercept with sparse data. For dense\ndata, use sklearn.linear_model._preprocess_data before your regression.\n\nAdded in version 0.17.\n\n"
                                    },
                                    "check_input": {
                                        "type": "boolean",
                                        "description": "bool, default=True. If False, the input arrays X and y will not be checked.\n\nAdded in version 0.21.\n\n"
                                    }
                                },
                                "required": [
                                    "X",
                                    "y",
                                    "alpha"
                                ]
                            }
                        }
                    }
                ]
            }
        ],
        "name": "sklearn.linear_model",
        "url": "https://scikit-learn.org/stable/api/sklearn.linear_model.html"
    },
    "sklearn.manifold.html": {
        "functions": [
            {
                "defaults": [
                    {
                        "func_name": "Isomap",
                        "func_desc": "Isomap Embedding.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.manifold.Isomap.html#sklearn.manifold.Isomap",
                        "function_definitions": {
                            "function_name": "Isomap",
                            "full_function": "class sklearn.manifold.Isomap(*, n_neighbors=5, radius=None, n_components=2, eigen_solver='auto', tol=0, max_iter=None, path_method='auto', neighbors_algorithm='auto', n_jobs=None, metric='minkowski', p=2, metric_params=None)",
                            "function_text": "Isomap Embedding. Non-linear dimensionality reduction through Isometric Mapping Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/manifold.html#isomap",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix}, shape (n_queries, n_features)",
                                    "param_desc": "If neighbors_algorithm=\u2019precomputed\u2019, X is assumed to be a\ndistance matrix or a sparse graph of shape\n(n_queries, n_samples_fit).\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "Isomap",
                            "descriptions": "Isomap Embedding. Non-linear dimensionality reduction through Isometric Mapping Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix}, shape (n_queries, n_features). If neighbors_algorithm=\u2019precomputed\u2019, X is assumed to be a\ndistance matrix or a sparse graph of shape\n(n_queries, n_samples_fit).\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "MDS",
                        "func_desc": "Multidimensional scaling.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.manifold.MDS.html#sklearn.manifold.MDS",
                        "function_definitions": {
                            "function_name": "MDS",
                            "full_function": "class sklearn.manifold.MDS(n_components=2, *, metric=True, n_init=4, max_iter=300, verbose=0, eps=0.001, n_jobs=None, random_state=None, dissimilarity='euclidean', normalized_stress='auto')",
                            "function_text": "Multidimensional scaling. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/manifold.html#multidimensional-scaling",
                            "parameter_names_desc": [
                                {
                                    "param_name": "**params",
                                    "param_type": "dict",
                                    "param_desc": "Estimator parameters.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "MDS",
                            "descriptions": "Multidimensional scaling. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "**params": {
                                        "type": "dict",
                                        "description": "dict. Estimator parameters.\n"
                                    }
                                },
                                "required": [
                                    "n_components=2"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "TSNE",
                        "func_desc": "T-distributed Stochastic Neighbor Embedding.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.manifold.TSNE.html#sklearn.manifold.TSNE",
                        "function_definitions": {
                            "function_name": "TSNE",
                            "full_function": "class sklearn.manifold.TSNE(n_components=2, *, perplexity=30.0, early_exaggeration=12.0, learning_rate='auto', max_iter=None, n_iter_without_progress=300, min_grad_norm=1e-07, metric='euclidean', metric_params=None, init='pca', verbose=0, random_state=None, method='barnes_hut', angle=0.5, n_jobs=None, n_iter='deprecated')",
                            "function_text": "T-distributed Stochastic Neighbor Embedding. t-SNE [1] is a tool to visualize high-dimensional data. It converts\nsimilarities between data points to joint probabilities and tries\nto minimize the Kullback-Leibler divergence between the joint\nprobabilities of the low-dimensional embedding and the\nhigh-dimensional data. t-SNE has a cost function that is not convex,\ni.e. with different initializations we can get different results. It is highly recommended to use another dimensionality reduction\nmethod (e.g. PCA for dense data or TruncatedSVD for sparse data)\nto reduce the number of dimensions to a reasonable amount (e.g. 50)\nif the number of features is very high. This will suppress some\nnoise and speed up the computation of pairwise distances between\nsamples. For more tips see Laurens van der Maaten\u2019s FAQ [2]. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/manifold.html#t-sne",
                            "parameter_names_desc": [
                                {
                                    "param_name": "**params",
                                    "param_type": "dict",
                                    "param_desc": "Estimator parameters.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "TSNE",
                            "descriptions": "T-distributed Stochastic Neighbor Embedding. t-SNE [1] is a tool to visualize high-dimensional data. It converts\nsimilarities between data points to joint probabilities and tries\nto minimize the Kullback-Leibler divergence between the joint\nprobabilities of the low-dimensional embedding and the\nhigh-dimensional data. t-SNE has a cost function that is not convex,\ni.e. with different initializations we can get different results. It is highly recommended to use another dimensionality reduction\nmethod (e.g. PCA for dense data or TruncatedSVD for sparse data)\nto reduce the number of dimensions to a reasonable amount (e.g. 50)\nif the number of features is very high. This will suppress some\nnoise and speed up the computation of pairwise distances between\nsamples. For more tips see Laurens van der Maaten\u2019s FAQ [2]. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "**params": {
                                        "type": "dict",
                                        "description": "dict. Estimator parameters.\n"
                                    }
                                },
                                "required": [
                                    "n_components=2"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "smacof",
                        "func_desc": "Compute multidimensional scaling using the SMACOF algorithm.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.manifold.smacof.html#sklearn.manifold.smacof",
                        "function_definitions": {
                            "function_name": "smacof",
                            "full_function": "sklearn.manifold.smacof(dissimilarities, *, metric=True, n_components=2, init=None, n_init=8, n_jobs=None, max_iter=300, verbose=0, eps=0.001, random_state=None, return_n_iter=False, normalized_stress='auto')",
                            "function_text": "Compute multidimensional scaling using the SMACOF algorithm. The SMACOF (Scaling by MAjorizing a COmplicated Function) algorithm is a\nmultidimensional scaling algorithm which minimizes an objective function\n(the stress) using a majorization technique. Stress majorization, also\nknown as the Guttman Transform, guarantees a monotone convergence of\nstress, and is more powerful than traditional techniques such as gradient\ndescent. The SMACOF algorithm for metric MDS can be summarized by the following\nsteps: Set an initial start configuration, randomly or not. Compute the stress Compute the Guttman Transform Iterate 2 and 3 until convergence. The nonmetric algorithm adds a monotonic regression step before computing\nthe stress.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/glossary.html#term-n_jobs",
                            "parameter_names_desc": [
                                {
                                    "param_name": "dissimilarities",
                                    "param_type": "array-like of shape (n_samples, n_samples)",
                                    "param_desc": "Pairwise dissimilarities between the points. Must be symmetric.\n"
                                },
                                {
                                    "param_name": "metric",
                                    "param_type": "bool, default=True",
                                    "param_desc": "Compute metric or nonmetric SMACOF algorithm.\nWhen False (i.e. non-metric MDS), dissimilarities with 0 are considered as\nmissing values.\n"
                                },
                                {
                                    "param_name": "n_components",
                                    "param_type": "int, default=2",
                                    "param_desc": "Number of dimensions in which to immerse the dissimilarities. If an\ninit array is provided, this option is overridden and the shape of\ninit is used to determine the dimensionality of the embedding\nspace.\n"
                                },
                                {
                                    "param_name": "init",
                                    "param_type": "array-like of shape (n_samples, n_components), default=None",
                                    "param_desc": "Starting configuration of the embedding to initialize the algorithm. By\ndefault, the algorithm is initialized with a randomly chosen array.\n"
                                },
                                {
                                    "param_name": "n_init",
                                    "param_type": "int, default=8",
                                    "param_desc": "Number of times the SMACOF algorithm will be run with different\ninitializations. The final results will be the best output of the runs,\ndetermined by the run with the smallest final stress. If init is\nprovided, this option is overridden and a single run is performed.\n"
                                },
                                {
                                    "param_name": "n_jobs",
                                    "param_type": "int, default=None",
                                    "param_desc": "The number of jobs to use for the computation. If multiple\ninitializations are used (n_init), each run of the algorithm is\ncomputed in parallel.\nNone means 1 unless in a joblib.parallel_backend context.\n-1 means using all processors. See Glossary\nfor more details.\n"
                                },
                                {
                                    "param_name": "max_iter",
                                    "param_type": "int, default=300",
                                    "param_desc": "Maximum number of iterations of the SMACOF algorithm for a single run.\n"
                                },
                                {
                                    "param_name": "verbose",
                                    "param_type": "int, default=0",
                                    "param_desc": "Level of verbosity.\n"
                                },
                                {
                                    "param_name": "eps",
                                    "param_type": "float, default=1e-3",
                                    "param_desc": "Relative tolerance with respect to stress at which to declare\nconvergence. The value of eps should be tuned separately depending\non whether or not normalized_stress is being used.\n"
                                },
                                {
                                    "param_name": "random_state",
                                    "param_type": "int, RandomState instance or None, default=None",
                                    "param_desc": "Determines the random number generator used to initialize the centers.\nPass an int for reproducible results across multiple function calls.\nSee Glossary.\n"
                                },
                                {
                                    "param_name": "return_n_iter",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Whether or not to return the number of iterations.\n"
                                },
                                {
                                    "param_name": "normalized_stress",
                                    "param_type": "bool or \u201cauto\u201d default=\u201dauto\u201d",
                                    "param_desc": "Whether use and return normed stress value (Stress-1) instead of raw\nstress calculated by default. Only supported in non-metric MDS.\n\nAdded in version 1.2.\n\n\nChanged in version 1.4: The default value changed from False to \"auto\" in version 1.4.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "smacof",
                            "descriptions": "Compute multidimensional scaling using the SMACOF algorithm. The SMACOF (Scaling by MAjorizing a COmplicated Function) algorithm is a\nmultidimensional scaling algorithm which minimizes an objective function\n(the stress) using a majorization technique. Stress majorization, also\nknown as the Guttman Transform, guarantees a monotone convergence of\nstress, and is more powerful than traditional techniques such as gradient\ndescent. The SMACOF algorithm for metric MDS can be summarized by the following\nsteps: Set an initial start configuration, randomly or not. Compute the stress Compute the Guttman Transform Iterate 2 and 3 until convergence. The nonmetric algorithm adds a monotonic regression step before computing\nthe stress.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "dissimilarities": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_samples). Pairwise dissimilarities between the points. Must be symmetric.\n"
                                    },
                                    "metric": {
                                        "type": "boolean",
                                        "description": "bool, default=True. Compute metric or nonmetric SMACOF algorithm.\nWhen False (i.e. non-metric MDS), dissimilarities with 0 are considered as\nmissing values.\n"
                                    },
                                    "n_components": {
                                        "type": "integer",
                                        "description": "int, default=2. Number of dimensions in which to immerse the dissimilarities. If an\ninit array is provided, this option is overridden and the shape of\ninit is used to determine the dimensionality of the embedding\nspace.\n"
                                    },
                                    "init": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_components), default=None. Starting configuration of the embedding to initialize the algorithm. By\ndefault, the algorithm is initialized with a randomly chosen array.\n"
                                    },
                                    "n_init": {
                                        "type": "integer",
                                        "description": "int, default=8. Number of times the SMACOF algorithm will be run with different\ninitializations. The final results will be the best output of the runs,\ndetermined by the run with the smallest final stress. If init is\nprovided, this option is overridden and a single run is performed.\n"
                                    },
                                    "n_jobs": {
                                        "type": "integer",
                                        "description": "int, default=None. The number of jobs to use for the computation. If multiple\ninitializations are used (n_init), each run of the algorithm is\ncomputed in parallel.\nNone means 1 unless in a joblib.parallel_backend context.\n-1 means using all processors. See Glossary\nfor more details.\n"
                                    },
                                    "max_iter": {
                                        "type": "integer",
                                        "description": "int, default=300. Maximum number of iterations of the SMACOF algorithm for a single run.\n"
                                    },
                                    "verbose": {
                                        "type": "integer",
                                        "description": "int, default=0. Level of verbosity.\n"
                                    },
                                    "eps": {
                                        "type": "float",
                                        "description": "float, default=1e-3. Relative tolerance with respect to stress at which to declare\nconvergence. The value of eps should be tuned separately depending\non whether or not normalized_stress is being used.\n"
                                    },
                                    "random_state": {
                                        "type": "integer",
                                        "description": "int, RandomState instance or None, default=None. Determines the random number generator used to initialize the centers.\nPass an int for reproducible results across multiple function calls.\nSee Glossary.\n"
                                    },
                                    "return_n_iter": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Whether or not to return the number of iterations.\n"
                                    },
                                    "normalized_stress": {
                                        "type": "boolean",
                                        "description": "bool or \u201cauto\u201d default=\u201dauto\u201d. Whether use and return normed stress value (Stress-1) instead of raw\nstress calculated by default. Only supported in non-metric MDS.\n\nAdded in version 1.2.\n\n\nChanged in version 1.4: The default value changed from False to \"auto\" in version 1.4.\n\n"
                                    }
                                },
                                "required": [
                                    "dissimilarities"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "trustworthiness",
                        "func_desc": "Indicate to what extent the local structure is retained.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.manifold.trustworthiness.html#sklearn.manifold.trustworthiness",
                        "function_definitions": {
                            "function_name": "trustworthiness",
                            "full_function": "sklearn.manifold.trustworthiness(X, X_embedded, *, n_neighbors=5, metric='euclidean')",
                            "function_text": "Indicate to what extent the local structure is retained. The trustworthiness is within [0, 1]. It is defined as where for each sample i, \\(\\mathcal{N}_{i}^{k}\\) are its k nearest\nneighbors in the output space, and every sample j is its \\(r(i, j)\\)-th\nnearest neighbor in the input space. In other words, any unexpected nearest\nneighbors in the output space are penalised in proportion to their rank in\nthe input space.",
                            "func_text_user_guide": "#r5831441d8a57-1",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features) or ",
                                    "param_desc": "(n_samples, n_samples)\nIf the metric is \u2018precomputed\u2019 X must be a square distance\nmatrix. Otherwise it contains a sample per row.\n"
                                },
                                {
                                    "param_name": "X_embedded",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_components)",
                                    "param_desc": "Embedding of the training data in low-dimensional space.\n"
                                },
                                {
                                    "param_name": "n_neighbors",
                                    "param_type": "int, default=5",
                                    "param_desc": "The number of neighbors that will be considered. Should be fewer than\nn_samples / 2 to ensure the trustworthiness to lies within [0, 1], as\nmentioned in [1]. An error will be raised otherwise.\n"
                                },
                                {
                                    "param_name": "metric",
                                    "param_type": "str or callable, default=\u2019euclidean\u2019",
                                    "param_desc": "Which metric to use for computing pairwise distances between samples\nfrom the original input space. If metric is \u2018precomputed\u2019, X must be a\nmatrix of pairwise distances or squared distances. Otherwise, for a list\nof available metrics, see the documentation of argument metric in\nsklearn.pairwise.pairwise_distances and metrics listed in\nsklearn.metrics.pairwise.PAIRWISE_DISTANCE_FUNCTIONS. Note that the\n\u201ccosine\u201d metric uses cosine_distances.\n\nAdded in version 0.20.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "trustworthiness",
                            "descriptions": "Indicate to what extent the local structure is retained. The trustworthiness is within [0, 1]. It is defined as where for each sample i, \\(\\mathcal{N}_{i}^{k}\\) are its k nearest\nneighbors in the output space, and every sample j is its \\(r(i, j)\\)-th\nnearest neighbor in the input space. In other words, any unexpected nearest\nneighbors in the output space are penalised in proportion to their rank in\nthe input space.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features) or . (n_samples, n_samples)\nIf the metric is \u2018precomputed\u2019 X must be a square distance\nmatrix. Otherwise it contains a sample per row.\n"
                                    },
                                    "X_embedded": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_components). Embedding of the training data in low-dimensional space.\n"
                                    },
                                    "n_neighbors": {
                                        "type": "integer",
                                        "description": "int, default=5. The number of neighbors that will be considered. Should be fewer than\nn_samples / 2 to ensure the trustworthiness to lies within [0, 1], as\nmentioned in [1]. An error will be raised otherwise.\n"
                                    },
                                    "metric": {
                                        "type": "string",
                                        "description": "str or callable, default=\u2019euclidean\u2019. Which metric to use for computing pairwise distances between samples\nfrom the original input space. If metric is \u2018precomputed\u2019, X must be a\nmatrix of pairwise distances or squared distances. Otherwise, for a list\nof available metrics, see the documentation of argument metric in\nsklearn.pairwise.pairwise_distances and metrics listed in\nsklearn.metrics.pairwise.PAIRWISE_DISTANCE_FUNCTIONS. Note that the\n\u201ccosine\u201d metric uses cosine_distances.\n\nAdded in version 0.20.\n\n"
                                    }
                                },
                                "required": [
                                    "X",
                                    "X_embedded"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "LocallyLinearEmbedding",
                        "func_desc": "Locally Linear Embedding.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.manifold.LocallyLinearEmbedding.html#sklearn.manifold.LocallyLinearEmbedding",
                        "function_definitions": {
                            "function_name": "LocallyLinearEmbedding",
                            "full_function": "class sklearn.manifold.LocallyLinearEmbedding(*, n_neighbors=5, n_components=2, reg=0.001, eigen_solver='auto', tol=1e-06, max_iter=100, method='standard', hessian_tol=0.0001, modified_tol=1e-12, neighbors_algorithm='auto', random_state=None, n_jobs=None)",
                            "function_text": "Locally Linear Embedding. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/manifold.html#locally-linear-embedding",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples, n_features)",
                                    "param_desc": "Training set.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "LocallyLinearEmbedding",
                            "descriptions": "Locally Linear Embedding. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_features). Training set.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "SpectralEmbedding",
                        "func_desc": "Spectral embedding for non-linear dimensionality reduction.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.manifold.SpectralEmbedding.html#sklearn.manifold.SpectralEmbedding",
                        "function_definitions": {
                            "function_name": "SpectralEmbedding",
                            "full_function": "class sklearn.manifold.SpectralEmbedding(n_components=2, *, affinity='nearest_neighbors', gamma=None, random_state=None, eigen_solver=None, eigen_tol='auto', n_neighbors=None, n_jobs=None)",
                            "function_text": "Spectral embedding for non-linear dimensionality reduction. Forms an affinity matrix given by the specified function and\napplies spectral decomposition to the corresponding graph laplacian.\nThe resulting transformation is given by the value of the\neigenvectors for each data point. Note : Laplacian Eigenmaps is the actual algorithm implemented here. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/manifold.html#spectral-embedding",
                            "parameter_names_desc": [
                                {
                                    "param_name": "**params",
                                    "param_type": "dict",
                                    "param_desc": "Estimator parameters.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "SpectralEmbedding",
                            "descriptions": "Spectral embedding for non-linear dimensionality reduction. Forms an affinity matrix given by the specified function and\napplies spectral decomposition to the corresponding graph laplacian.\nThe resulting transformation is given by the value of the\neigenvectors for each data point. Note : Laplacian Eigenmaps is the actual algorithm implemented here. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "**params": {
                                        "type": "dict",
                                        "description": "dict. Estimator parameters.\n"
                                    }
                                },
                                "required": [
                                    "n_components=2"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "locally_linear_embedding",
                        "func_desc": "Perform a Locally Linear Embedding analysis on the data.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.manifold.locally_linear_embedding.html#sklearn.manifold.locally_linear_embedding",
                        "function_definitions": {
                            "function_name": "locally_linear_embedding",
                            "full_function": "sklearn.manifold.locally_linear_embedding(X, *, n_neighbors, n_components, reg=0.001, eigen_solver='auto', tol=1e-06, max_iter=100, method='standard', hessian_tol=0.0001, modified_tol=1e-12, random_state=None, n_jobs=None)",
                            "function_text": "Perform a Locally Linear Embedding analysis on the data. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/manifold.html#locally-linear-embedding",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, NearestNeighbors}",
                                    "param_desc": "Sample data, shape = (n_samples, n_features), in the form of a\nnumpy array or a NearestNeighbors object.\n"
                                },
                                {
                                    "param_name": "n_neighbors",
                                    "param_type": "int",
                                    "param_desc": "Number of neighbors to consider for each point.\n"
                                },
                                {
                                    "param_name": "n_components",
                                    "param_type": "int",
                                    "param_desc": "Number of coordinates for the manifold.\n"
                                },
                                {
                                    "param_name": "reg",
                                    "param_type": "float, default=1e-3",
                                    "param_desc": "Regularization constant, multiplies the trace of the local covariance\nmatrix of the distances.\n"
                                },
                                {
                                    "param_name": "eigen_solver",
                                    "param_type": "{\u2018auto\u2019, \u2018arpack\u2019, \u2018dense\u2019}, default=\u2019auto\u2019",
                                    "param_desc": "auto : algorithm will attempt to choose the best method for input data\n\narpackuse arnoldi iteration in shift-invert mode.For this method, M may be a dense matrix, sparse matrix,\nor general linear operator.\nWarning: ARPACK can be unstable for some problems.  It is\nbest to try several random seeds in order to check results.\n\ndenseuse standard dense matrix operations for the eigenvaluedecomposition.  For this method, M must be an array\nor matrix type.  This method should be avoided for\nlarge problems.\n\n\n"
                                },
                                {
                                    "param_name": "tol",
                                    "param_type": "float, default=1e-6",
                                    "param_desc": "Tolerance for \u2018arpack\u2019 method\nNot used if eigen_solver==\u2019dense\u2019.\n"
                                },
                                {
                                    "param_name": "max_iter",
                                    "param_type": "int, default=100",
                                    "param_desc": "Maximum number of iterations for the arpack solver.\n"
                                },
                                {
                                    "param_name": "method",
                                    "param_type": "{\u2018standard\u2019, \u2018hessian\u2019, \u2018modified\u2019, \u2018ltsa\u2019}, default=\u2019standard\u2019",
                                    "param_desc": "\nstandarduse the standard locally linear embedding algorithm.see reference [1]\n\nhessianuse the Hessian eigenmap method.  This method requiresn_neighbors > n_components * (1 + (n_components + 1) / 2.\nsee reference [2]\n\nmodifieduse the modified locally linear embedding algorithm.see reference [3]\n\nltsause local tangent space alignment algorithmsee reference [4]\n\n\n"
                                },
                                {
                                    "param_name": "hessian_tol",
                                    "param_type": "float, default=1e-4",
                                    "param_desc": "Tolerance for Hessian eigenmapping method.\nOnly used if method == \u2018hessian\u2019.\n"
                                },
                                {
                                    "param_name": "modified_tol",
                                    "param_type": "float, default=1e-12",
                                    "param_desc": "Tolerance for modified LLE method.\nOnly used if method == \u2018modified\u2019.\n"
                                },
                                {
                                    "param_name": "random_state",
                                    "param_type": "int, RandomState instance, default=None",
                                    "param_desc": "Determines the random number generator when solver == \u2018arpack\u2019.\nPass an int for reproducible results across multiple function calls.\nSee Glossary.\n"
                                },
                                {
                                    "param_name": "n_jobs",
                                    "param_type": "int or None, default=None",
                                    "param_desc": "The number of parallel jobs to run for neighbors search.\nNone means 1 unless in a joblib.parallel_backend context.\n-1 means using all processors. See Glossary\nfor more details.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "locally_linear_embedding",
                            "descriptions": "Perform a Locally Linear Embedding analysis on the data. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, NearestNeighbors}. Sample data, shape = (n_samples, n_features), in the form of a\nnumpy array or a NearestNeighbors object.\n"
                                    },
                                    "n_neighbors": {
                                        "type": "integer",
                                        "description": "int. Number of neighbors to consider for each point.\n"
                                    },
                                    "n_components": {
                                        "type": "integer",
                                        "description": "int. Number of coordinates for the manifold.\n"
                                    },
                                    "reg": {
                                        "type": "float",
                                        "description": "float, default=1e-3. Regularization constant, multiplies the trace of the local covariance\nmatrix of the distances.\n"
                                    },
                                    "eigen_solver": {
                                        "type": "string",
                                        "enum": [
                                            "auto",
                                            " arpack",
                                            " dense"
                                        ],
                                        "description": "{\u2018auto\u2019, \u2018arpack\u2019, \u2018dense\u2019}, default=\u2019auto\u2019. auto : algorithm will attempt to choose the best method for input data\n\narpackuse arnoldi iteration in shift-invert mode.For this method, M may be a dense matrix, sparse matrix,\nor general linear operator.\nWarning: ARPACK can be unstable for some problems.  It is\nbest to try several random seeds in order to check results.\n\ndenseuse standard dense matrix operations for the eigenvaluedecomposition.  For this method, M must be an array\nor matrix type.  This method should be avoided for\nlarge problems.\n\n\n"
                                    },
                                    "tol": {
                                        "type": "float",
                                        "description": "float, default=1e-6. Tolerance for \u2018arpack\u2019 method\nNot used if eigen_solver==\u2019dense\u2019.\n"
                                    },
                                    "max_iter": {
                                        "type": "integer",
                                        "description": "int, default=100. Maximum number of iterations for the arpack solver.\n"
                                    },
                                    "method": {
                                        "type": "string",
                                        "enum": [
                                            "standard",
                                            " hessian",
                                            " modified",
                                            " ltsa"
                                        ],
                                        "description": "{\u2018standard\u2019, \u2018hessian\u2019, \u2018modified\u2019, \u2018ltsa\u2019}, default=\u2019standard\u2019. \nstandarduse the standard locally linear embedding algorithm.see reference [1]\n\nhessianuse the Hessian eigenmap method.  This method requiresn_neighbors > n_components * (1 + (n_components + 1) / 2.\nsee reference [2]\n\nmodifieduse the modified locally linear embedding algorithm.see reference [3]\n\nltsause local tangent space alignment algorithmsee reference [4]\n\n\n"
                                    },
                                    "hessian_tol": {
                                        "type": "float",
                                        "description": "float, default=1e-4. Tolerance for Hessian eigenmapping method.\nOnly used if method == \u2018hessian\u2019.\n"
                                    },
                                    "modified_tol": {
                                        "type": "float",
                                        "description": "float, default=1e-12. Tolerance for modified LLE method.\nOnly used if method == \u2018modified\u2019.\n"
                                    },
                                    "random_state": {
                                        "type": "integer",
                                        "description": "int, RandomState instance, default=None. Determines the random number generator when solver == \u2018arpack\u2019.\nPass an int for reproducible results across multiple function calls.\nSee Glossary.\n"
                                    },
                                    "n_jobs": {
                                        "type": "integer",
                                        "description": "int or None, default=None. The number of parallel jobs to run for neighbors search.\nNone means 1 unless in a joblib.parallel_backend context.\n-1 means using all processors. See Glossary\nfor more details.\n"
                                    }
                                },
                                "required": [
                                    "X"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "spectral_embedding",
                        "func_desc": "Project the sample on the first eigenvectors of the graph Laplacian.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.manifold.spectral_embedding.html#sklearn.manifold.spectral_embedding",
                        "function_definitions": {
                            "function_name": "spectral_embedding",
                            "full_function": "sklearn.manifold.spectral_embedding(adjacency, *, n_components=8, eigen_solver=None, random_state=None, eigen_tol='auto', norm_laplacian=True, drop_first=True)",
                            "function_text": "Project the sample on the first eigenvectors of the graph Laplacian. The adjacency matrix is used to compute a normalized graph Laplacian\nwhose spectrum (especially the eigenvectors associated to the\nsmallest eigenvalues) has an interpretation in terms of minimal\nnumber of cuts necessary to split the graph into comparably sized\ncomponents. This embedding can also \u2018work\u2019 even if the adjacency variable is\nnot strictly the adjacency matrix of a graph but more generally\nan affinity or similarity matrix between samples (for instance the\nheat kernel of a euclidean distance matrix or a k-NN matrix). However care must taken to always make the affinity matrix symmetric\nso that the eigenvector decomposition works as expected. Note : Laplacian Eigenmaps is the actual algorithm implemented here. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/manifold.html#spectral-embedding",
                            "parameter_names_desc": [
                                {
                                    "param_name": "adjacency",
                                    "param_type": "{array-like, sparse graph} of shape (n_samples, n_samples)",
                                    "param_desc": "The adjacency matrix of the graph to embed.\n"
                                },
                                {
                                    "param_name": "n_components",
                                    "param_type": "int, default=8",
                                    "param_desc": "The dimension of the projection subspace.\n"
                                },
                                {
                                    "param_name": "eigen_solver",
                                    "param_type": "{\u2018arpack\u2019, \u2018lobpcg\u2019, \u2018amg\u2019}, default=None",
                                    "param_desc": "The eigenvalue decomposition strategy to use. AMG requires pyamg\nto be installed. It can be faster on very large, sparse problems,\nbut may also lead to instabilities. If None, then 'arpack' is\nused.\n"
                                },
                                {
                                    "param_name": "random_state",
                                    "param_type": "int, RandomState instance or None, default=None",
                                    "param_desc": "A pseudo random number generator used for the initialization\nof the lobpcg eigen vectors decomposition when eigen_solver ==\n'amg', and for the K-Means initialization. Use an int to make\nthe results deterministic across calls (See\nGlossary).\n\nNote\nWhen using eigen_solver == 'amg',\nit is necessary to also fix the global numpy seed with\nnp.random.seed(int) to get deterministic results. See\npyamg/pyamg#139 for further\ninformation.\n\n"
                                },
                                {
                                    "param_name": "eigen_tol",
                                    "param_type": "float, default=\u201dauto\u201d",
                                    "param_desc": "Stopping criterion for eigendecomposition of the Laplacian matrix.\nIf eigen_tol=\"auto\" then the passed tolerance will depend on the\neigen_solver:\n\nIf eigen_solver=\"arpack\", then eigen_tol=0.0;\nIf eigen_solver=\"lobpcg\" or eigen_solver=\"amg\", then\neigen_tol=None which configures the underlying lobpcg solver to\nautomatically resolve the value according to their heuristics. See,\nscipy.sparse.linalg.lobpcg for details.\n\nNote that when using eigen_solver=\"amg\" values of tol<1e-5 may lead\nto convergence issues and should be avoided.\n\nAdded in version 1.2: Added \u2018auto\u2019 option.\n\n"
                                },
                                {
                                    "param_name": "norm_laplacian",
                                    "param_type": "bool, default=True",
                                    "param_desc": "If True, then compute symmetric normalized Laplacian.\n"
                                },
                                {
                                    "param_name": "drop_first",
                                    "param_type": "bool, default=True",
                                    "param_desc": "Whether to drop the first eigenvector. For spectral embedding, this\nshould be True as the first eigenvector should be constant vector for\nconnected graph, but for spectral clustering, this should be kept as\nFalse to retain the first eigenvector.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "spectral_embedding",
                            "descriptions": "Project the sample on the first eigenvectors of the graph Laplacian. The adjacency matrix is used to compute a normalized graph Laplacian\nwhose spectrum (especially the eigenvectors associated to the\nsmallest eigenvalues) has an interpretation in terms of minimal\nnumber of cuts necessary to split the graph into comparably sized\ncomponents. This embedding can also \u2018work\u2019 even if the adjacency variable is\nnot strictly the adjacency matrix of a graph but more generally\nan affinity or similarity matrix between samples (for instance the\nheat kernel of a euclidean distance matrix or a k-NN matrix). However care must taken to always make the affinity matrix symmetric\nso that the eigenvector decomposition works as expected. Note : Laplacian Eigenmaps is the actual algorithm implemented here. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "adjacency": {
                                        "type": "array",
                                        "description": "{array-like, sparse graph} of shape (n_samples, n_samples). The adjacency matrix of the graph to embed.\n"
                                    },
                                    "n_components": {
                                        "type": "integer",
                                        "description": "int, default=8. The dimension of the projection subspace.\n"
                                    },
                                    "eigen_solver": {
                                        "type": "string",
                                        "enum": [
                                            "arpack",
                                            " lobpcg",
                                            " amg"
                                        ],
                                        "description": "{\u2018arpack\u2019, \u2018lobpcg\u2019, \u2018amg\u2019}, default=None. The eigenvalue decomposition strategy to use. AMG requires pyamg\nto be installed. It can be faster on very large, sparse problems,\nbut may also lead to instabilities. If None, then 'arpack' is\nused.\n"
                                    },
                                    "random_state": {
                                        "type": "integer",
                                        "description": "int, RandomState instance or None, default=None. A pseudo random number generator used for the initialization\nof the lobpcg eigen vectors decomposition when eigen_solver ==\n'amg', and for the K-Means initialization. Use an int to make\nthe results deterministic across calls (See\nGlossary).\n\nNote\nWhen using eigen_solver == 'amg',\nit is necessary to also fix the global numpy seed with\nnp.random.seed(int) to get deterministic results. See\npyamg/pyamg#139 for further\ninformation.\n\n"
                                    },
                                    "eigen_tol": {
                                        "type": "float",
                                        "description": "float, default=\u201dauto\u201d. Stopping criterion for eigendecomposition of the Laplacian matrix.\nIf eigen_tol=\"auto\" then the passed tolerance will depend on the\neigen_solver:\n\nIf eigen_solver=\"arpack\", then eigen_tol=0.0;\nIf eigen_solver=\"lobpcg\" or eigen_solver=\"amg\", then\neigen_tol=None which configures the underlying lobpcg solver to\nautomatically resolve the value according to their heuristics. See,\nscipy.sparse.linalg.lobpcg for details.\n\nNote that when using eigen_solver=\"amg\" values of tol<1e-5 may lead\nto convergence issues and should be avoided.\n\nAdded in version 1.2: Added \u2018auto\u2019 option.\n\n"
                                    },
                                    "norm_laplacian": {
                                        "type": "boolean",
                                        "description": "bool, default=True. If True, then compute symmetric normalized Laplacian.\n"
                                    },
                                    "drop_first": {
                                        "type": "boolean",
                                        "description": "bool, default=True. Whether to drop the first eigenvector. For spectral embedding, this\nshould be True as the first eigenvector should be constant vector for\nconnected graph, but for spectral clustering, this should be kept as\nFalse to retain the first eigenvector.\n"
                                    }
                                },
                                "required": [
                                    "adjacency"
                                ]
                            }
                        }
                    }
                ]
            }
        ],
        "name": "sklearn.manifold",
        "url": "https://scikit-learn.org/stable/api/sklearn.manifold.html"
    },
    "sklearn.metrics.html": {
        "functions": [
            {
                "Model selection interface": [
                    {
                        "func_name": "check_scoring",
                        "func_desc": "Determine scorer from user options.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.check_scoring.html#sklearn.metrics.check_scoring",
                        "function_definitions": {
                            "function_name": "check_scoring",
                            "full_function": "sklearn.metrics.check_scoring(estimator=None, scoring=None, *, allow_none=False)",
                            "function_text": "Determine scorer from user options. A TypeError will be thrown if the estimator cannot be scored.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/model_evaluation.html#scoring-parameter",
                            "parameter_names_desc": [
                                {
                                    "param_name": "estimator",
                                    "param_type": "estimator object implementing \u2018fit\u2019 or None, default=None",
                                    "param_desc": "The object to use to fit the data. If None, then this function may error\ndepending on allow_none.\n"
                                },
                                {
                                    "param_name": "scoring",
                                    "param_type": "str, callable, list, tuple, or dict, default=None",
                                    "param_desc": "Scorer to use. If scoring represents a single score, one can use:\n\na single string (see The scoring parameter: defining model evaluation rules);\na callable (see Defining your scoring strategy from metric functions) that returns a single value.\n\nIf scoring represents multiple scores, one can use:\n\na list or tuple of unique strings;\na callable returning a dictionary where the keys are the metric\nnames and the values are the metric scorers;\na dictionary with metric names as keys and callables a values.\n\nIf None, the provided estimator object\u2019s score method is used.\n"
                                },
                                {
                                    "param_name": "allow_none",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If no scoring is specified and the estimator has no score function, we\ncan either return None or raise an exception.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "check_scoring",
                            "descriptions": "Determine scorer from user options. A TypeError will be thrown if the estimator cannot be scored.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "estimator": {
                                        "type": "object",
                                        "description": "estimator object implementing \u2018fit\u2019 or None, default=None. The object to use to fit the data. If None, then this function may error\ndepending on allow_none.\n"
                                    },
                                    "scoring": {
                                        "type": "string",
                                        "description": "str, callable, list, tuple, or dict, default=None. Scorer to use. If scoring represents a single score, one can use:\n\na single string (see The scoring parameter: defining model evaluation rules);\na callable (see Defining your scoring strategy from metric functions) that returns a single value.\n\nIf scoring represents multiple scores, one can use:\n\na list or tuple of unique strings;\na callable returning a dictionary where the keys are the metric\nnames and the values are the metric scorers;\na dictionary with metric names as keys and callables a values.\n\nIf None, the provided estimator object\u2019s score method is used.\n"
                                    },
                                    "allow_none": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If no scoring is specified and the estimator has no score function, we\ncan either return None or raise an exception.\n"
                                    }
                                },
                                "required": [
                                    "estimator=None",
                                    "scoring=None"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "get_scorer_names",
                        "func_desc": "Get the names of all available scorers.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.get_scorer_names.html#sklearn.metrics.get_scorer_names",
                        "function_definitions": {
                            "function_name": "get_scorer_names",
                            "full_function": "sklearn.metrics.get_scorer_names()",
                            "function_text": "Get the names of all available scorers. These names can be passed to get_scorer to\nretrieve the scorer object.",
                            "func_text_user_guide": "sklearn.metrics.get_scorer.html#sklearn.metrics.get_scorer",
                            "parameter_names_desc": []
                        },
                        "function_calling": {}
                    },
                    {
                        "func_name": "get_scorer",
                        "func_desc": "Get a scorer from string.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.get_scorer.html#sklearn.metrics.get_scorer",
                        "function_definitions": {
                            "function_name": "get_scorer",
                            "full_function": "sklearn.metrics.get_scorer(scoring)",
                            "function_text": "Get a scorer from string. Read more in the User Guide.\nget_scorer_names can be used to retrieve the names\nof all available scorers.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/model_evaluation.html#scoring-parameter",
                            "parameter_names_desc": [
                                {
                                    "param_name": "scoring",
                                    "param_type": "str, callable or None",
                                    "param_desc": "Scoring method as string. If callable it is returned as is.\nIf None, returns None.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "get_scorer",
                            "descriptions": "Get a scorer from string. Read more in the User Guide.\nget_scorer_names can be used to retrieve the names\nof all available scorers.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "scoring": {
                                        "type": "string",
                                        "description": "str, callable or None. Scoring method as string. If callable it is returned as is.\nIf None, returns None.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "make_scorer",
                        "func_desc": "Make a scorer from a performance metric or loss function.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.make_scorer.html#sklearn.metrics.make_scorer",
                        "function_definitions": {
                            "function_name": "make_scorer",
                            "full_function": "sklearn.metrics.make_scorer(score_func, *, response_method=None, greater_is_better=True, needs_proba='deprecated', needs_threshold='deprecated', **kwargs)",
                            "function_text": "Make a scorer from a performance metric or loss function. A scorer is a wrapper around an arbitrary metric or loss function that is called\nwith the signature scorer(estimator, X, y_true, **kwargs). It is accepted in all scikit-learn estimators or functions allowing a scoring\nparameter. The parameter response_method allows to specify which method of the estimator\nshould be used to feed the scoring/loss function. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/model_evaluation.html#scoring",
                            "parameter_names_desc": [
                                {
                                    "param_name": "score_func",
                                    "param_type": "callable",
                                    "param_desc": "Score function (or loss function) with signature\nscore_func(y, y_pred, **kwargs).\n"
                                },
                                {
                                    "param_name": "response_method",
                                    "param_type": "{\u201cpredict_proba\u201d, \u201cdecision_function\u201d, \u201cpredict\u201d} or             list/tuple of such str, default=None",
                                    "param_desc": "Specifies the response method to use get prediction from an estimator\n(i.e. predict_proba, decision_function or\npredict). Possible choices are:\n\nif str, it corresponds to the name to the method to return;\nif a list or tuple of str, it provides the method names in order of\npreference. The method returned corresponds to the first method in\nthe list and which is implemented by estimator.\nif None, it is equivalent to \"predict\".\n\n\nAdded in version 1.4.\n\n"
                                },
                                {
                                    "param_name": "greater_is_better",
                                    "param_type": "bool, default=True",
                                    "param_desc": "Whether score_func is a score function (default), meaning high is\ngood, or a loss function, meaning low is good. In the latter case, the\nscorer object will sign-flip the outcome of the score_func.\n"
                                },
                                {
                                    "param_name": "needs_proba",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Whether score_func requires predict_proba to get probability\nestimates out of a classifier.\nIf True, for binary y_true, the score function is supposed to accept\na 1D y_pred (i.e., probability of the positive class, shape\n(n_samples,)).\n\nDeprecated since version 1.4: needs_proba is deprecated in version 1.4 and will be removed in\n1.6. Use response_method=\"predict_proba\" instead.\n\n"
                                },
                                {
                                    "param_name": "needs_threshold",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Whether score_func takes a continuous decision certainty.\nThis only works for binary classification using estimators that\nhave either a decision_function or predict_proba method.\nIf True, for binary y_true, the score function is supposed to accept\na 1D y_pred (i.e., probability of the positive class or the decision\nfunction, shape (n_samples,)).\nFor example average_precision or the area under the roc curve\ncan not be computed using discrete predictions alone.\n\nDeprecated since version 1.4: needs_threshold is deprecated in version 1.4 and will be removed\nin 1.6. Use response_method=(\"decision_function\", \"predict_proba\")\ninstead to preserve the same behaviour.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "make_scorer",
                            "descriptions": "Make a scorer from a performance metric or loss function. A scorer is a wrapper around an arbitrary metric or loss function that is called\nwith the signature scorer(estimator, X, y_true, **kwargs). It is accepted in all scikit-learn estimators or functions allowing a scoring\nparameter. The parameter response_method allows to specify which method of the estimator\nshould be used to feed the scoring/loss function. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "score_func": {
                                        "type": "object",
                                        "description": "callable. Score function (or loss function) with signature\nscore_func(y, y_pred, **kwargs).\n"
                                    },
                                    "response_method": {
                                        "type": "string",
                                        "description": "{\u201cpredict_proba\u201d, \u201cdecision_function\u201d, \u201cpredict\u201d} or             list/tuple of such str, default=None. Specifies the response method to use get prediction from an estimator\n(i.e. predict_proba, decision_function or\npredict). Possible choices are:\n\nif str, it corresponds to the name to the method to return;\nif a list or tuple of str, it provides the method names in order of\npreference. The method returned corresponds to the first method in\nthe list and which is implemented by estimator.\nif None, it is equivalent to \"predict\".\n\n\nAdded in version 1.4.\n\n"
                                    },
                                    "greater_is_better": {
                                        "type": "boolean",
                                        "description": "bool, default=True. Whether score_func is a score function (default), meaning high is\ngood, or a loss function, meaning low is good. In the latter case, the\nscorer object will sign-flip the outcome of the score_func.\n"
                                    },
                                    "needs_proba": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Whether score_func requires predict_proba to get probability\nestimates out of a classifier.\nIf True, for binary y_true, the score function is supposed to accept\na 1D y_pred (i.e., probability of the positive class, shape\n(n_samples,)).\n\nDeprecated since version 1.4: needs_proba is deprecated in version 1.4 and will be removed in\n1.6. Use response_method=\"predict_proba\" instead.\n\n"
                                    },
                                    "needs_threshold": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Whether score_func takes a continuous decision certainty.\nThis only works for binary classification using estimators that\nhave either a decision_function or predict_proba method.\nIf True, for binary y_true, the score function is supposed to accept\na 1D y_pred (i.e., probability of the positive class or the decision\nfunction, shape (n_samples,)).\nFor example average_precision or the area under the roc curve\ncan not be computed using discrete predictions alone.\n\nDeprecated since version 1.4: needs_threshold is deprecated in version 1.4 and will be removed\nin 1.6. Use response_method=(\"decision_function\", \"predict_proba\")\ninstead to preserve the same behaviour.\n\n"
                                    }
                                },
                                "required": [
                                    "score_func"
                                ]
                            }
                        }
                    }
                ]
            },
            {
                "Classification metrics": [
                    {
                        "func_name": "accuracy_score",
                        "func_desc": "Accuracy classification score.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.accuracy_score.html#sklearn.metrics.accuracy_score",
                        "function_definitions": {
                            "function_name": "accuracy_score",
                            "full_function": "sklearn.metrics.accuracy_score(y_true, y_pred, *, normalize=True, sample_weight=None)",
                            "function_text": "Accuracy classification score. In multilabel classification, this function computes subset accuracy:\nthe set of labels predicted for a sample must exactly match the\ncorresponding set of labels in y_true. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/model_evaluation.html#accuracy-score",
                            "parameter_names_desc": [
                                {
                                    "param_name": "y_true",
                                    "param_type": "1d array-like, or label indicator array / sparse matrix",
                                    "param_desc": "Ground truth (correct) labels.\n"
                                },
                                {
                                    "param_name": "y_pred",
                                    "param_type": "1d array-like, or label indicator array / sparse matrix",
                                    "param_desc": "Predicted labels, as returned by a classifier.\n"
                                },
                                {
                                    "param_name": "normalize",
                                    "param_type": "bool, default=True",
                                    "param_desc": "If False, return the number of correctly classified samples.\nOtherwise, return the fraction of correctly classified samples.\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Sample weights.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "accuracy_score",
                            "descriptions": "Accuracy classification score. In multilabel classification, this function computes subset accuracy:\nthe set of labels predicted for a sample must exactly match the\ncorresponding set of labels in y_true. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "y_true": {
                                        "type": "array",
                                        "description": "1d array-like, or label indicator array / sparse matrix. Ground truth (correct) labels.\n"
                                    },
                                    "y_pred": {
                                        "type": "array",
                                        "description": "1d array-like, or label indicator array / sparse matrix. Predicted labels, as returned by a classifier.\n"
                                    },
                                    "normalize": {
                                        "type": "boolean",
                                        "description": "bool, default=True. If False, return the number of correctly classified samples.\nOtherwise, return the fraction of correctly classified samples.\n"
                                    },
                                    "sample_weight": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Sample weights.\n"
                                    }
                                },
                                "required": [
                                    "y_true",
                                    "y_pred"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "average_precision_score",
                        "func_desc": "Compute average precision (AP) from prediction scores.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.average_precision_score.html#sklearn.metrics.average_precision_score",
                        "function_definitions": {
                            "function_name": "average_precision_score",
                            "full_function": "sklearn.metrics.average_precision_score(y_true, y_score, *, average='macro', pos_label=1, sample_weight=None)",
                            "function_text": "Compute average precision (AP) from prediction scores. AP summarizes a precision-recall curve as the weighted mean of precisions\nachieved at each threshold, with the increase in recall from the previous\nthreshold used as the weight: where \\(P_n\\) and \\(R_n\\) are the precision and recall at the nth\nthreshold [1]. This implementation is not interpolated and is different\nfrom computing the area under the precision-recall curve with the\ntrapezoidal rule, which uses linear interpolation and can be too\noptimistic. Read more in the User Guide.",
                            "func_text_user_guide": "#rcdf8f32d7f9d-1",
                            "parameter_names_desc": [
                                {
                                    "param_name": "y_true",
                                    "param_type": "array-like of shape (n_samples,) or (n_samples, n_classes)",
                                    "param_desc": "True binary labels or binary label indicators.\n"
                                },
                                {
                                    "param_name": "y_score",
                                    "param_type": "array-like of shape (n_samples,) or (n_samples, n_classes)",
                                    "param_desc": "Target scores, can either be probability estimates of the positive\nclass, confidence values, or non-thresholded measure of decisions\n(as returned by decision_function on some classifiers).\n"
                                },
                                {
                                    "param_name": "average",
                                    "param_type": "{\u2018micro\u2019, \u2018samples\u2019, \u2018weighted\u2019, \u2018macro\u2019} or None,             default=\u2019macro\u2019",
                                    "param_desc": "If None, the scores for each class are returned. Otherwise,\nthis determines the type of averaging performed on the data:\n\n'micro':Calculate metrics globally by considering each element of the label\nindicator matrix as a label.\n\n'macro':Calculate metrics for each label, and find their unweighted\nmean.  This does not take label imbalance into account.\n\n'weighted':Calculate metrics for each label, and find their average, weighted\nby support (the number of true instances for each label).\n\n'samples':Calculate metrics for each instance, and find their average.\n\n\nWill be ignored when y_true is binary.\n"
                                },
                                {
                                    "param_name": "pos_label",
                                    "param_type": "int, float, bool or str, default=1",
                                    "param_desc": "The label of the positive class. Only applied to binary y_true.\nFor multilabel-indicator y_true, pos_label is fixed to 1.\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Sample weights.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "average_precision_score",
                            "descriptions": "Compute average precision (AP) from prediction scores. AP summarizes a precision-recall curve as the weighted mean of precisions\nachieved at each threshold, with the increase in recall from the previous\nthreshold used as the weight: where \\(P_n\\) and \\(R_n\\) are the precision and recall at the nth\nthreshold [1]. This implementation is not interpolated and is different\nfrom computing the area under the precision-recall curve with the\ntrapezoidal rule, which uses linear interpolation and can be too\noptimistic. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "y_true": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,) or (n_samples, n_classes). True binary labels or binary label indicators.\n"
                                    },
                                    "y_score": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,) or (n_samples, n_classes). Target scores, can either be probability estimates of the positive\nclass, confidence values, or non-thresholded measure of decisions\n(as returned by decision_function on some classifiers).\n"
                                    },
                                    "average": {
                                        "type": "string",
                                        "enum": [
                                            "micro",
                                            " samples",
                                            " weighted",
                                            " macro"
                                        ],
                                        "description": "{\u2018micro\u2019, \u2018samples\u2019, \u2018weighted\u2019, \u2018macro\u2019} or None,             default=\u2019macro\u2019. If None, the scores for each class are returned. Otherwise,\nthis determines the type of averaging performed on the data:\n\n'micro':Calculate metrics globally by considering each element of the label\nindicator matrix as a label.\n\n'macro':Calculate metrics for each label, and find their unweighted\nmean.  This does not take label imbalance into account.\n\n'weighted':Calculate metrics for each label, and find their average, weighted\nby support (the number of true instances for each label).\n\n'samples':Calculate metrics for each instance, and find their average.\n\n\nWill be ignored when y_true is binary.\n"
                                    },
                                    "pos_label": {
                                        "type": "integer",
                                        "description": "int, float, bool or str, default=1. The label of the positive class. Only applied to binary y_true.\nFor multilabel-indicator y_true, pos_label is fixed to 1.\n"
                                    },
                                    "sample_weight": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Sample weights.\n"
                                    }
                                },
                                "required": [
                                    "y_true",
                                    "y_score"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "brier_score_loss",
                        "func_desc": "Compute the Brier score loss.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.brier_score_loss.html#sklearn.metrics.brier_score_loss",
                        "function_definitions": {
                            "function_name": "brier_score_loss",
                            "full_function": "sklearn.metrics.brier_score_loss(y_true, y_proba=None, *, sample_weight=None, pos_label=None, y_prob='deprecated')",
                            "function_text": "Compute the Brier score loss. The smaller the Brier score loss, the better, hence the naming with \u201closs\u201d.\nThe Brier score measures the mean squared difference between the predicted\nprobability and the actual outcome. The Brier score always\ntakes on a value between zero and one, since this is the largest\npossible difference between a predicted probability (which must be\nbetween zero and one) and the actual outcome (which can take on values\nof only 0 and 1). It can be decomposed as the sum of refinement loss and\ncalibration loss. The Brier score is appropriate for binary and categorical outcomes that\ncan be structured as true or false, but is inappropriate for ordinal\nvariables which can take on three or more values (this is because the\nBrier score assumes that all possible outcomes are equivalently\n\u201cdistant\u201d from one another). Which label is considered to be the positive\nlabel is controlled via the parameter pos_label, which defaults to\nthe greater label unless y_true is all 0 or all -1, in which case\npos_label defaults to 1. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/model_evaluation.html#brier-score-loss",
                            "parameter_names_desc": [
                                {
                                    "param_name": "y_true",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "True targets.\n"
                                },
                                {
                                    "param_name": "y_proba",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "Probabilities of the positive class.\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Sample weights.\n"
                                },
                                {
                                    "param_name": "pos_label",
                                    "param_type": "int, float, bool or str, default=None",
                                    "param_desc": "Label of the positive class. pos_label will be inferred in the\nfollowing manner:\n\nif y_true in {-1, 1} or {0, 1}, pos_label defaults to 1;\nelse if y_true contains string, an error will be raised and\npos_label should be explicitly specified;\notherwise, pos_label defaults to the greater label,\ni.e. np.unique(y_true)[-1].\n\n"
                                },
                                {
                                    "param_name": "y_prob",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "Probabilities of the positive class.\n\nDeprecated since version 1.5: y_prob is deprecated and will be removed in 1.7. Use\ny_proba instead.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "brier_score_loss",
                            "descriptions": "Compute the Brier score loss. The smaller the Brier score loss, the better, hence the naming with \u201closs\u201d.\nThe Brier score measures the mean squared difference between the predicted\nprobability and the actual outcome. The Brier score always\ntakes on a value between zero and one, since this is the largest\npossible difference between a predicted probability (which must be\nbetween zero and one) and the actual outcome (which can take on values\nof only 0 and 1). It can be decomposed as the sum of refinement loss and\ncalibration loss. The Brier score is appropriate for binary and categorical outcomes that\ncan be structured as true or false, but is inappropriate for ordinal\nvariables which can take on three or more values (this is because the\nBrier score assumes that all possible outcomes are equivalently\n\u201cdistant\u201d from one another). Which label is considered to be the positive\nlabel is controlled via the parameter pos_label, which defaults to\nthe greater label unless y_true is all 0 or all -1, in which case\npos_label defaults to 1. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "y_true": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). True targets.\n"
                                    },
                                    "y_proba": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). Probabilities of the positive class.\n"
                                    },
                                    "sample_weight": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Sample weights.\n"
                                    },
                                    "pos_label": {
                                        "type": "integer",
                                        "description": "int, float, bool or str, default=None. Label of the positive class. pos_label will be inferred in the\nfollowing manner:\n\nif y_true in {-1, 1} or {0, 1}, pos_label defaults to 1;\nelse if y_true contains string, an error will be raised and\npos_label should be explicitly specified;\notherwise, pos_label defaults to the greater label,\ni.e. np.unique(y_true)[-1].\n\n"
                                    },
                                    "y_prob": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). Probabilities of the positive class.\n\nDeprecated since version 1.5: y_prob is deprecated and will be removed in 1.7. Use\ny_proba instead.\n\n"
                                    }
                                },
                                "required": [
                                    "y_true",
                                    "y_proba=None"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "classification_report",
                        "func_desc": "Build a text report showing the main classification metrics.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.classification_report.html#sklearn.metrics.classification_report",
                        "function_definitions": {
                            "function_name": "classification_report",
                            "full_function": "sklearn.metrics.classification_report(y_true, y_pred, *, labels=None, target_names=None, sample_weight=None, digits=2, output_dict=False, zero_division='warn')",
                            "function_text": "Build a text report showing the main classification metrics. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/model_evaluation.html#classification-report",
                            "parameter_names_desc": [
                                {
                                    "param_name": "y_true",
                                    "param_type": "1d array-like, or label indicator array / sparse matrix",
                                    "param_desc": "Ground truth (correct) target values.\n"
                                },
                                {
                                    "param_name": "y_pred",
                                    "param_type": "1d array-like, or label indicator array / sparse matrix",
                                    "param_desc": "Estimated targets as returned by a classifier.\n"
                                },
                                {
                                    "param_name": "labels",
                                    "param_type": "array-like of shape (n_labels,), default=None",
                                    "param_desc": "Optional list of label indices to include in the report.\n"
                                },
                                {
                                    "param_name": "target_names",
                                    "param_type": "array-like of shape (n_labels,), default=None",
                                    "param_desc": "Optional display names matching the labels (same order).\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Sample weights.\n"
                                },
                                {
                                    "param_name": "digits",
                                    "param_type": "int, default=2",
                                    "param_desc": "Number of digits for formatting output floating point values.\nWhen output_dict is True, this will be ignored and the\nreturned values will not be rounded.\n"
                                },
                                {
                                    "param_name": "output_dict",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If True, return output as dict.\n\nAdded in version 0.20.\n\n"
                                },
                                {
                                    "param_name": "zero_division",
                                    "param_type": "{\u201cwarn\u201d, 0.0, 1.0, np.nan}, default=\u201dwarn\u201d",
                                    "param_desc": "Sets the value to return when there is a zero division. If set to\n\u201cwarn\u201d, this acts as 0, but warnings are also raised.\n\nAdded in version 1.3: np.nan option was added.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "classification_report",
                            "descriptions": "Build a text report showing the main classification metrics. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "y_true": {
                                        "type": "array",
                                        "description": "1d array-like, or label indicator array / sparse matrix. Ground truth (correct) target values.\n"
                                    },
                                    "y_pred": {
                                        "type": "array",
                                        "description": "1d array-like, or label indicator array / sparse matrix. Estimated targets as returned by a classifier.\n"
                                    },
                                    "labels": {
                                        "type": "array",
                                        "description": "array-like of shape (n_labels,), default=None. Optional list of label indices to include in the report.\n"
                                    },
                                    "target_names": {
                                        "type": "array",
                                        "description": "array-like of shape (n_labels,), default=None. Optional display names matching the labels (same order).\n"
                                    },
                                    "sample_weight": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Sample weights.\n"
                                    },
                                    "digits": {
                                        "type": "integer",
                                        "description": "int, default=2. Number of digits for formatting output floating point values.\nWhen output_dict is True, this will be ignored and the\nreturned values will not be rounded.\n"
                                    },
                                    "output_dict": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If True, return output as dict.\n\nAdded in version 0.20.\n\n"
                                    },
                                    "zero_division": {
                                        "type": "{\u201cwarn\u201d, 0.0, 1.0, np.nan}, default=\u201dwarn\u201d",
                                        "description": "{\u201cwarn\u201d, 0.0, 1.0, np.nan}, default=\u201dwarn\u201d. Sets the value to return when there is a zero division. If set to\n\u201cwarn\u201d, this acts as 0, but warnings are also raised.\n\nAdded in version 1.3: np.nan option was added.\n\n"
                                    }
                                },
                                "required": [
                                    "y_true",
                                    "y_pred"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "confusion_matrix",
                        "func_desc": "Compute confusion matrix to evaluate the accuracy of a classification.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.confusion_matrix.html#sklearn.metrics.confusion_matrix",
                        "function_definitions": {
                            "function_name": "confusion_matrix",
                            "full_function": "sklearn.metrics.confusion_matrix(y_true, y_pred, *, labels=None, sample_weight=None, normalize=None)",
                            "function_text": "Compute confusion matrix to evaluate the accuracy of a classification. By definition a confusion matrix \\(C\\) is such that \\(C_{i, j}\\)\nis equal to the number of observations known to be in group \\(i\\) and\npredicted to be in group \\(j\\). Thus in binary classification, the count of true negatives is\n\\(C_{0,0}\\), false negatives is \\(C_{1,0}\\), true positives is\n\\(C_{1,1}\\) and false positives is \\(C_{0,1}\\). Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/model_evaluation.html#confusion-matrix",
                            "parameter_names_desc": [
                                {
                                    "param_name": "y_true",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "Ground truth (correct) target values.\n"
                                },
                                {
                                    "param_name": "y_pred",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "Estimated targets as returned by a classifier.\n"
                                },
                                {
                                    "param_name": "labels",
                                    "param_type": "array-like of shape (n_classes), default=None",
                                    "param_desc": "List of labels to index the matrix. This may be used to reorder\nor select a subset of labels.\nIf None is given, those that appear at least once\nin y_true or y_pred are used in sorted order.\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Sample weights.\n\nAdded in version 0.18.\n\n"
                                },
                                {
                                    "param_name": "normalize",
                                    "param_type": "{\u2018true\u2019, \u2018pred\u2019, \u2018all\u2019}, default=None",
                                    "param_desc": "Normalizes confusion matrix over the true (rows), predicted (columns)\nconditions or all the population. If None, confusion matrix will not be\nnormalized.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "confusion_matrix",
                            "descriptions": "Compute confusion matrix to evaluate the accuracy of a classification. By definition a confusion matrix \\(C\\) is such that \\(C_{i, j}\\)\nis equal to the number of observations known to be in group \\(i\\) and\npredicted to be in group \\(j\\). Thus in binary classification, the count of true negatives is\n\\(C_{0,0}\\), false negatives is \\(C_{1,0}\\), true positives is\n\\(C_{1,1}\\) and false positives is \\(C_{0,1}\\). Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "y_true": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). Ground truth (correct) target values.\n"
                                    },
                                    "y_pred": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). Estimated targets as returned by a classifier.\n"
                                    },
                                    "labels": {
                                        "type": "array",
                                        "description": "array-like of shape (n_classes), default=None. List of labels to index the matrix. This may be used to reorder\nor select a subset of labels.\nIf None is given, those that appear at least once\nin y_true or y_pred are used in sorted order.\n"
                                    },
                                    "sample_weight": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Sample weights.\n\nAdded in version 0.18.\n\n"
                                    },
                                    "normalize": {
                                        "type": "string",
                                        "enum": [
                                            "true",
                                            " pred",
                                            " all"
                                        ],
                                        "description": "{\u2018true\u2019, \u2018pred\u2019, \u2018all\u2019}, default=None. Normalizes confusion matrix over the true (rows), predicted (columns)\nconditions or all the population. If None, confusion matrix will not be\nnormalized.\n"
                                    }
                                },
                                "required": [
                                    "y_true",
                                    "y_pred"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "dcg_score",
                        "func_desc": "Compute Discounted Cumulative Gain.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.dcg_score.html#sklearn.metrics.dcg_score",
                        "function_definitions": {
                            "function_name": "dcg_score",
                            "full_function": "sklearn.metrics.dcg_score(y_true, y_score, *, k=None, log_base=2, sample_weight=None, ignore_ties=False)",
                            "function_text": "Compute Discounted Cumulative Gain. Sum the true scores ranked in the order induced by the predicted scores,\nafter applying a logarithmic discount. This ranking metric yields a high value if true labels are ranked high by\ny_score. Usually the Normalized Discounted Cumulative Gain (NDCG, computed by\nndcg_score) is preferred.",
                            "func_text_user_guide": "sklearn.metrics.ndcg_score.html#sklearn.metrics.ndcg_score",
                            "parameter_names_desc": [
                                {
                                    "param_name": "y_true",
                                    "param_type": "array-like of shape (n_samples, n_labels)",
                                    "param_desc": "True targets of multilabel classification, or true scores of entities\nto be ranked.\n"
                                },
                                {
                                    "param_name": "y_score",
                                    "param_type": "array-like of shape (n_samples, n_labels)",
                                    "param_desc": "Target scores, can either be probability estimates, confidence values,\nor non-thresholded measure of decisions (as returned by\n\u201cdecision_function\u201d on some classifiers).\n"
                                },
                                {
                                    "param_name": "k",
                                    "param_type": "int, default=None",
                                    "param_desc": "Only consider the highest k scores in the ranking. If None, use all\noutputs.\n"
                                },
                                {
                                    "param_name": "log_base",
                                    "param_type": "float, default=2",
                                    "param_desc": "Base of the logarithm used for the discount. A low value means a\nsharper discount (top results are more important).\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Sample weights. If None, all samples are given the same weight.\n"
                                },
                                {
                                    "param_name": "ignore_ties",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Assume that there are no ties in y_score (which is likely to be the\ncase if y_score is continuous) for efficiency gains.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "dcg_score",
                            "descriptions": "Compute Discounted Cumulative Gain. Sum the true scores ranked in the order induced by the predicted scores,\nafter applying a logarithmic discount. This ranking metric yields a high value if true labels are ranked high by\ny_score. Usually the Normalized Discounted Cumulative Gain (NDCG, computed by\nndcg_score) is preferred.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "y_true": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_labels). True targets of multilabel classification, or true scores of entities\nto be ranked.\n"
                                    },
                                    "y_score": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_labels). Target scores, can either be probability estimates, confidence values,\nor non-thresholded measure of decisions (as returned by\n\u201cdecision_function\u201d on some classifiers).\n"
                                    },
                                    "k": {
                                        "type": "integer",
                                        "description": "int, default=None. Only consider the highest k scores in the ranking. If None, use all\noutputs.\n"
                                    },
                                    "log_base": {
                                        "type": "float",
                                        "description": "float, default=2. Base of the logarithm used for the discount. A low value means a\nsharper discount (top results are more important).\n"
                                    },
                                    "sample_weight": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Sample weights. If None, all samples are given the same weight.\n"
                                    },
                                    "ignore_ties": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Assume that there are no ties in y_score (which is likely to be the\ncase if y_score is continuous) for efficiency gains.\n"
                                    }
                                },
                                "required": [
                                    "y_true",
                                    "y_score"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "f1_score",
                        "func_desc": "Compute the F1 score, also known as balanced F-score or F-measure.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.f1_score.html#sklearn.metrics.f1_score",
                        "function_definitions": {
                            "function_name": "f1_score",
                            "full_function": "sklearn.metrics.f1_score(y_true, y_pred, *, labels=None, pos_label=1, average='binary', sample_weight=None, zero_division='warn')",
                            "function_text": "Compute the F1 score, also known as balanced F-score or F-measure. The F1 score can be interpreted as a harmonic mean of the precision and\nrecall, where an F1 score reaches its best value at 1 and worst score at 0.\nThe relative contribution of precision and recall to the F1 score are\nequal. The formula for the F1 score is: Where \\(\\text{TP}\\) is the number of true positives, \\(\\text{FN}\\) is the\nnumber of false negatives, and \\(\\text{FP}\\) is the number of false positives.\nF1 is by default\ncalculated as 0.0 when there are no true positives, false negatives, or\nfalse positives. Support beyond binary targets is achieved by treating multiclass\nand multilabel data as a collection of binary problems, one for each\nlabel. For the binary case, setting average='binary' will return\nF1 score for pos_label. If average is not 'binary', pos_label is ignored\nand F1 score for both classes are computed, then averaged or both returned (when\naverage=None). Similarly, for multiclass and multilabel targets,\nF1 score for all labels are either returned or averaged depending on the\naverage parameter. Use labels specify the set of labels to calculate F1 score\nfor. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/glossary.html#term-binary",
                            "parameter_names_desc": [
                                {
                                    "param_name": "y_true",
                                    "param_type": "1d array-like, or label indicator array / sparse matrix",
                                    "param_desc": "Ground truth (correct) target values.\n"
                                },
                                {
                                    "param_name": "y_pred",
                                    "param_type": "1d array-like, or label indicator array / sparse matrix",
                                    "param_desc": "Estimated targets as returned by a classifier.\n"
                                },
                                {
                                    "param_name": "labels",
                                    "param_type": "array-like, default=None",
                                    "param_desc": "The set of labels to include when average != 'binary', and their\norder if average is None. Labels present in the data can be\nexcluded, for example in multiclass classification to exclude a \u201cnegative\nclass\u201d. Labels not present in the data can be included and will be\n\u201cassigned\u201d 0 samples. For multilabel targets, labels are column indices.\nBy default, all labels in y_true and y_pred are used in sorted order.\n\nChanged in version 0.17: Parameter labels improved for multiclass problem.\n\n"
                                },
                                {
                                    "param_name": "pos_label",
                                    "param_type": "int, float, bool or str, default=1",
                                    "param_desc": "The class to report if average='binary' and the data is binary,\notherwise this parameter is ignored.\nFor multiclass or multilabel targets, set labels=[pos_label] and\naverage != 'binary' to report metrics for one label only.\n"
                                },
                                {
                                    "param_name": "average",
                                    "param_type": "{\u2018micro\u2019, \u2018macro\u2019, \u2018samples\u2019, \u2018weighted\u2019, \u2018binary\u2019} or None,             default=\u2019binary\u2019",
                                    "param_desc": "This parameter is required for multiclass/multilabel targets.\nIf None, the scores for each class are returned. Otherwise, this\ndetermines the type of averaging performed on the data:\n\n'binary':Only report results for the class specified by pos_label.\nThis is applicable only if targets (y_{true,pred}) are binary.\n\n'micro':Calculate metrics globally by counting the total true positives,\nfalse negatives and false positives.\n\n'macro':Calculate metrics for each label, and find their unweighted\nmean.  This does not take label imbalance into account.\n\n'weighted':Calculate metrics for each label, and find their average weighted\nby support (the number of true instances for each label). This\nalters \u2018macro\u2019 to account for label imbalance; it can result in an\nF-score that is not between precision and recall.\n\n'samples':Calculate metrics for each instance, and find their average (only\nmeaningful for multilabel classification where this differs from\naccuracy_score).\n\n\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Sample weights.\n"
                                },
                                {
                                    "param_name": "zero_division",
                                    "param_type": "{\u201cwarn\u201d, 0.0, 1.0, np.nan}, default=\u201dwarn\u201d",
                                    "param_desc": "Sets the value to return when there is a zero division, i.e. when all\npredictions and labels are negative.\nNotes:\n- If set to \u201cwarn\u201d, this acts like 0, but a warning is also raised.\n- If set to np.nan, such values will be excluded from the average.\n\nAdded in version 1.3: np.nan option was added.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "f1_score",
                            "descriptions": "Compute the F1 score, also known as balanced F-score or F-measure. The F1 score can be interpreted as a harmonic mean of the precision and\nrecall, where an F1 score reaches its best value at 1 and worst score at 0.\nThe relative contribution of precision and recall to the F1 score are\nequal. The formula for the F1 score is: Where \\(\\text{TP}\\) is the number of true positives, \\(\\text{FN}\\) is the\nnumber of false negatives, and \\(\\text{FP}\\) is the number of false positives.\nF1 is by default\ncalculated as 0.0 when there are no true positives, false negatives, or\nfalse positives. Support beyond binary targets is achieved by treating multiclass\nand multilabel data as a collection of binary problems, one for each\nlabel. For the binary case, setting average='binary' will return\nF1 score for pos_label. If average is not 'binary', pos_label is ignored\nand F1 score for both classes are computed, then averaged or both returned (when\naverage=None). Similarly, for multiclass and multilabel targets,\nF1 score for all labels are either returned or averaged depending on the\naverage parameter. Use labels specify the set of labels to calculate F1 score\nfor. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "y_true": {
                                        "type": "array",
                                        "description": "1d array-like, or label indicator array / sparse matrix. Ground truth (correct) target values.\n"
                                    },
                                    "y_pred": {
                                        "type": "array",
                                        "description": "1d array-like, or label indicator array / sparse matrix. Estimated targets as returned by a classifier.\n"
                                    },
                                    "labels": {
                                        "type": "array",
                                        "description": "array-like, default=None. The set of labels to include when average != 'binary', and their\norder if average is None. Labels present in the data can be\nexcluded, for example in multiclass classification to exclude a \u201cnegative\nclass\u201d. Labels not present in the data can be included and will be\n\u201cassigned\u201d 0 samples. For multilabel targets, labels are column indices.\nBy default, all labels in y_true and y_pred are used in sorted order.\n\nChanged in version 0.17: Parameter labels improved for multiclass problem.\n\n"
                                    },
                                    "pos_label": {
                                        "type": "integer",
                                        "description": "int, float, bool or str, default=1. The class to report if average='binary' and the data is binary,\notherwise this parameter is ignored.\nFor multiclass or multilabel targets, set labels=[pos_label] and\naverage != 'binary' to report metrics for one label only.\n"
                                    },
                                    "average": {
                                        "type": "string",
                                        "enum": [
                                            "micro",
                                            " macro",
                                            " samples",
                                            " weighted",
                                            " binary"
                                        ],
                                        "description": "{\u2018micro\u2019, \u2018macro\u2019, \u2018samples\u2019, \u2018weighted\u2019, \u2018binary\u2019} or None,             default=\u2019binary\u2019. This parameter is required for multiclass/multilabel targets.\nIf None, the scores for each class are returned. Otherwise, this\ndetermines the type of averaging performed on the data:\n\n'binary':Only report results for the class specified by pos_label.\nThis is applicable only if targets (y_{true,pred}) are binary.\n\n'micro':Calculate metrics globally by counting the total true positives,\nfalse negatives and false positives.\n\n'macro':Calculate metrics for each label, and find their unweighted\nmean.  This does not take label imbalance into account.\n\n'weighted':Calculate metrics for each label, and find their average weighted\nby support (the number of true instances for each label). This\nalters \u2018macro\u2019 to account for label imbalance; it can result in an\nF-score that is not between precision and recall.\n\n'samples':Calculate metrics for each instance, and find their average (only\nmeaningful for multilabel classification where this differs from\naccuracy_score).\n\n\n"
                                    },
                                    "sample_weight": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Sample weights.\n"
                                    },
                                    "zero_division": {
                                        "type": "{\u201cwarn\u201d, 0.0, 1.0, np.nan}, default=\u201dwarn\u201d",
                                        "description": "{\u201cwarn\u201d, 0.0, 1.0, np.nan}, default=\u201dwarn\u201d. Sets the value to return when there is a zero division, i.e. when all\npredictions and labels are negative.\nNotes:\n- If set to \u201cwarn\u201d, this acts like 0, but a warning is also raised.\n- If set to np.nan, such values will be excluded from the average.\n\nAdded in version 1.3: np.nan option was added.\n\n"
                                    }
                                },
                                "required": [
                                    "y_true",
                                    "y_pred"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "hamming_loss",
                        "func_desc": "Compute the average Hamming loss.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.hamming_loss.html#sklearn.metrics.hamming_loss",
                        "function_definitions": {
                            "function_name": "hamming_loss",
                            "full_function": "sklearn.metrics.hamming_loss(y_true, y_pred, *, sample_weight=None)",
                            "function_text": "Compute the average Hamming loss. The Hamming loss is the fraction of labels that are incorrectly predicted. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/model_evaluation.html#hamming-loss",
                            "parameter_names_desc": [
                                {
                                    "param_name": "y_true",
                                    "param_type": "1d array-like, or label indicator array / sparse matrix",
                                    "param_desc": "Ground truth (correct) labels.\n"
                                },
                                {
                                    "param_name": "y_pred",
                                    "param_type": "1d array-like, or label indicator array / sparse matrix",
                                    "param_desc": "Predicted labels, as returned by a classifier.\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Sample weights.\n\nAdded in version 0.18.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "hamming_loss",
                            "descriptions": "Compute the average Hamming loss. The Hamming loss is the fraction of labels that are incorrectly predicted. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "y_true": {
                                        "type": "array",
                                        "description": "1d array-like, or label indicator array / sparse matrix. Ground truth (correct) labels.\n"
                                    },
                                    "y_pred": {
                                        "type": "array",
                                        "description": "1d array-like, or label indicator array / sparse matrix. Predicted labels, as returned by a classifier.\n"
                                    },
                                    "sample_weight": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Sample weights.\n\nAdded in version 0.18.\n\n"
                                    }
                                },
                                "required": [
                                    "y_true",
                                    "y_pred"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "jaccard_score",
                        "func_desc": "Jaccard similarity coefficient score.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.jaccard_score.html#sklearn.metrics.jaccard_score",
                        "function_definitions": {
                            "function_name": "jaccard_score",
                            "full_function": "sklearn.metrics.jaccard_score(y_true, y_pred, *, labels=None, pos_label=1, average='binary', sample_weight=None, zero_division='warn')",
                            "function_text": "Jaccard similarity coefficient score. The Jaccard index [1], or Jaccard similarity coefficient, defined as\nthe size of the intersection divided by the size of the union of two label\nsets, is used to compare set of predicted labels for a sample to the\ncorresponding set of labels in y_true. Support beyond term:binary targets is achieved by treating multiclass\nand multilabel data as a collection of binary problems, one for each\nlabel. For the binary case, setting average='binary' will return the\nJaccard similarity coefficient for pos_label. If average is not 'binary',\npos_label is ignored and scores for both classes are computed, then averaged or\nboth returned (when average=None). Similarly, for multiclass and\nmultilabel targets, scores for all labels are either returned or\naveraged depending on the average parameter. Use labels specify the set of\nlabels to calculate the score for. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/glossary.html#term-multiclass",
                            "parameter_names_desc": [
                                {
                                    "param_name": "y_true",
                                    "param_type": "1d array-like, or label indicator array / sparse matrix",
                                    "param_desc": "Ground truth (correct) labels.\n"
                                },
                                {
                                    "param_name": "y_pred",
                                    "param_type": "1d array-like, or label indicator array / sparse matrix",
                                    "param_desc": "Predicted labels, as returned by a classifier.\n"
                                },
                                {
                                    "param_name": "labels",
                                    "param_type": "array-like of shape (n_classes,), default=None",
                                    "param_desc": "The set of labels to include when average != 'binary', and their\norder if average is None. Labels present in the data can be\nexcluded, for example in multiclass classification to exclude a \u201cnegative\nclass\u201d. Labels not present in the data can be included and will be\n\u201cassigned\u201d 0 samples. For multilabel targets, labels are column indices.\nBy default, all labels in y_true and y_pred are used in sorted order.\n"
                                },
                                {
                                    "param_name": "pos_label",
                                    "param_type": "int, float, bool or str, default=1",
                                    "param_desc": "The class to report if average='binary' and the data is binary,\notherwise this parameter is ignored.\nFor multiclass or multilabel targets, set labels=[pos_label] and\naverage != 'binary' to report metrics for one label only.\n"
                                },
                                {
                                    "param_name": "average",
                                    "param_type": "{\u2018micro\u2019, \u2018macro\u2019, \u2018samples\u2019, \u2018weighted\u2019,             \u2018binary\u2019} or None, default=\u2019binary\u2019",
                                    "param_desc": "If None, the scores for each class are returned. Otherwise, this\ndetermines the type of averaging performed on the data:\n\n'binary':Only report results for the class specified by pos_label.\nThis is applicable only if targets (y_{true,pred}) are binary.\n\n'micro':Calculate metrics globally by counting the total true positives,\nfalse negatives and false positives.\n\n'macro':Calculate metrics for each label, and find their unweighted\nmean.  This does not take label imbalance into account.\n\n'weighted':Calculate metrics for each label, and find their average, weighted\nby support (the number of true instances for each label). This\nalters \u2018macro\u2019 to account for label imbalance.\n\n'samples':Calculate metrics for each instance, and find their average (only\nmeaningful for multilabel classification).\n\n\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Sample weights.\n"
                                },
                                {
                                    "param_name": "zero_division",
                                    "param_type": "\u201cwarn\u201d, {0.0, 1.0}, default=\u201dwarn\u201d",
                                    "param_desc": "Sets the value to return when there is a zero division, i.e. when there\nthere are no negative values in predictions and labels. If set to\n\u201cwarn\u201d, this acts like 0, but a warning is also raised.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "jaccard_score",
                            "descriptions": "Jaccard similarity coefficient score. The Jaccard index [1], or Jaccard similarity coefficient, defined as\nthe size of the intersection divided by the size of the union of two label\nsets, is used to compare set of predicted labels for a sample to the\ncorresponding set of labels in y_true. Support beyond term:binary targets is achieved by treating multiclass\nand multilabel data as a collection of binary problems, one for each\nlabel. For the binary case, setting average='binary' will return the\nJaccard similarity coefficient for pos_label. If average is not 'binary',\npos_label is ignored and scores for both classes are computed, then averaged or\nboth returned (when average=None). Similarly, for multiclass and\nmultilabel targets, scores for all labels are either returned or\naveraged depending on the average parameter. Use labels specify the set of\nlabels to calculate the score for. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "y_true": {
                                        "type": "array",
                                        "description": "1d array-like, or label indicator array / sparse matrix. Ground truth (correct) labels.\n"
                                    },
                                    "y_pred": {
                                        "type": "array",
                                        "description": "1d array-like, or label indicator array / sparse matrix. Predicted labels, as returned by a classifier.\n"
                                    },
                                    "labels": {
                                        "type": "array",
                                        "description": "array-like of shape (n_classes,), default=None. The set of labels to include when average != 'binary', and their\norder if average is None. Labels present in the data can be\nexcluded, for example in multiclass classification to exclude a \u201cnegative\nclass\u201d. Labels not present in the data can be included and will be\n\u201cassigned\u201d 0 samples. For multilabel targets, labels are column indices.\nBy default, all labels in y_true and y_pred are used in sorted order.\n"
                                    },
                                    "pos_label": {
                                        "type": "integer",
                                        "description": "int, float, bool or str, default=1. The class to report if average='binary' and the data is binary,\notherwise this parameter is ignored.\nFor multiclass or multilabel targets, set labels=[pos_label] and\naverage != 'binary' to report metrics for one label only.\n"
                                    },
                                    "average": {
                                        "type": "string",
                                        "enum": [
                                            "micro",
                                            " macro",
                                            " samples",
                                            " weighted",
                                            "             binary"
                                        ],
                                        "description": "{\u2018micro\u2019, \u2018macro\u2019, \u2018samples\u2019, \u2018weighted\u2019,             \u2018binary\u2019} or None, default=\u2019binary\u2019. If None, the scores for each class are returned. Otherwise, this\ndetermines the type of averaging performed on the data:\n\n'binary':Only report results for the class specified by pos_label.\nThis is applicable only if targets (y_{true,pred}) are binary.\n\n'micro':Calculate metrics globally by counting the total true positives,\nfalse negatives and false positives.\n\n'macro':Calculate metrics for each label, and find their unweighted\nmean.  This does not take label imbalance into account.\n\n'weighted':Calculate metrics for each label, and find their average, weighted\nby support (the number of true instances for each label). This\nalters \u2018macro\u2019 to account for label imbalance.\n\n'samples':Calculate metrics for each instance, and find their average (only\nmeaningful for multilabel classification).\n\n\n"
                                    },
                                    "sample_weight": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Sample weights.\n"
                                    },
                                    "zero_division": {
                                        "type": "\u201cwarn\u201d, {0.0, 1.0}, default=\u201dwarn\u201d",
                                        "description": "\u201cwarn\u201d, {0.0, 1.0}, default=\u201dwarn\u201d. Sets the value to return when there is a zero division, i.e. when there\nthere are no negative values in predictions and labels. If set to\n\u201cwarn\u201d, this acts like 0, but a warning is also raised.\n"
                                    }
                                },
                                "required": [
                                    "y_true",
                                    "y_pred"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "matthews_corrcoef",
                        "func_desc": "Compute the Matthews correlation coefficient (MCC).",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.matthews_corrcoef.html#sklearn.metrics.matthews_corrcoef",
                        "function_definitions": {
                            "function_name": "matthews_corrcoef",
                            "full_function": "sklearn.metrics.matthews_corrcoef(y_true, y_pred, *, sample_weight=None)",
                            "function_text": "Compute the Matthews correlation coefficient (MCC). The Matthews correlation coefficient is used in machine learning as a\nmeasure of the quality of binary and multiclass classifications. It takes\ninto account true and false positives and negatives and is generally\nregarded as a balanced measure which can be used even if the classes are of\nvery different sizes. The MCC is in essence a correlation coefficient value\nbetween -1 and +1. A coefficient of +1 represents a perfect prediction, 0\nan average random prediction and -1 an inverse prediction.  The statistic\nis also known as the phi coefficient. [source: Wikipedia] Binary and multiclass labels are supported.  Only in the binary case does\nthis relate to information about true and false positives and negatives.\nSee references below. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/model_evaluation.html#matthews-corrcoef",
                            "parameter_names_desc": [
                                {
                                    "param_name": "y_true",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "Ground truth (correct) target values.\n"
                                },
                                {
                                    "param_name": "y_pred",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "Estimated targets as returned by a classifier.\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Sample weights.\n\nAdded in version 0.18.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "matthews_corrcoef",
                            "descriptions": "Compute the Matthews correlation coefficient (MCC). The Matthews correlation coefficient is used in machine learning as a\nmeasure of the quality of binary and multiclass classifications. It takes\ninto account true and false positives and negatives and is generally\nregarded as a balanced measure which can be used even if the classes are of\nvery different sizes. The MCC is in essence a correlation coefficient value\nbetween -1 and +1. A coefficient of +1 represents a perfect prediction, 0\nan average random prediction and -1 an inverse prediction.  The statistic\nis also known as the phi coefficient. [source: Wikipedia] Binary and multiclass labels are supported.  Only in the binary case does\nthis relate to information about true and false positives and negatives.\nSee references below. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "y_true": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). Ground truth (correct) target values.\n"
                                    },
                                    "y_pred": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). Estimated targets as returned by a classifier.\n"
                                    },
                                    "sample_weight": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Sample weights.\n\nAdded in version 0.18.\n\n"
                                    }
                                },
                                "required": [
                                    "y_true",
                                    "y_pred"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "ndcg_score",
                        "func_desc": "Compute Normalized Discounted Cumulative Gain.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.ndcg_score.html#sklearn.metrics.ndcg_score",
                        "function_definitions": {
                            "function_name": "ndcg_score",
                            "full_function": "sklearn.metrics.ndcg_score(y_true, y_score, *, k=None, sample_weight=None, ignore_ties=False)",
                            "function_text": "Compute Normalized Discounted Cumulative Gain. Sum the true scores ranked in the order induced by the predicted scores,\nafter applying a logarithmic discount. Then divide by the best possible\nscore (Ideal DCG, obtained for a perfect ranking) to obtain a score between\n0 and 1. This ranking metric returns a high value if true labels are ranked high by\ny_score.",
                            "func_text_user_guide": "sklearn.metrics.dcg_score.html#sklearn.metrics.dcg_score",
                            "parameter_names_desc": [
                                {
                                    "param_name": "y_true",
                                    "param_type": "array-like of shape (n_samples, n_labels)",
                                    "param_desc": "True targets of multilabel classification, or true scores of entities\nto be ranked. Negative values in y_true may result in an output\nthat is not between 0 and 1.\n"
                                },
                                {
                                    "param_name": "y_score",
                                    "param_type": "array-like of shape (n_samples, n_labels)",
                                    "param_desc": "Target scores, can either be probability estimates, confidence values,\nor non-thresholded measure of decisions (as returned by\n\u201cdecision_function\u201d on some classifiers).\n"
                                },
                                {
                                    "param_name": "k",
                                    "param_type": "int, default=None",
                                    "param_desc": "Only consider the highest k scores in the ranking. If None, use all\noutputs.\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Sample weights. If None, all samples are given the same weight.\n"
                                },
                                {
                                    "param_name": "ignore_ties",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Assume that there are no ties in y_score (which is likely to be the\ncase if y_score is continuous) for efficiency gains.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "ndcg_score",
                            "descriptions": "Compute Normalized Discounted Cumulative Gain. Sum the true scores ranked in the order induced by the predicted scores,\nafter applying a logarithmic discount. Then divide by the best possible\nscore (Ideal DCG, obtained for a perfect ranking) to obtain a score between\n0 and 1. This ranking metric returns a high value if true labels are ranked high by\ny_score.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "y_true": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_labels). True targets of multilabel classification, or true scores of entities\nto be ranked. Negative values in y_true may result in an output\nthat is not between 0 and 1.\n"
                                    },
                                    "y_score": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_labels). Target scores, can either be probability estimates, confidence values,\nor non-thresholded measure of decisions (as returned by\n\u201cdecision_function\u201d on some classifiers).\n"
                                    },
                                    "k": {
                                        "type": "integer",
                                        "description": "int, default=None. Only consider the highest k scores in the ranking. If None, use all\noutputs.\n"
                                    },
                                    "sample_weight": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Sample weights. If None, all samples are given the same weight.\n"
                                    },
                                    "ignore_ties": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Assume that there are no ties in y_score (which is likely to be the\ncase if y_score is continuous) for efficiency gains.\n"
                                    }
                                },
                                "required": [
                                    "y_true",
                                    "y_score"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "precision_recall_fscore_support",
                        "func_desc": "Compute precision, recall, F-measure and support for each class.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.precision_recall_fscore_support.html#sklearn.metrics.precision_recall_fscore_support",
                        "function_definitions": {
                            "function_name": "precision_recall_fscore_support",
                            "full_function": "sklearn.metrics.precision_recall_fscore_support(y_true, y_pred, *, beta=1.0, labels=None, pos_label=1, average=None, warn_for=('precision', 'recall', 'f-score'), sample_weight=None, zero_division='warn')",
                            "function_text": "Compute precision, recall, F-measure and support for each class. The precision is the ratio tp / (tp + fp) where tp is the number of\ntrue positives and fp the number of false positives. The precision is\nintuitively the ability of the classifier not to label a negative sample as\npositive. The recall is the ratio tp / (tp + fn) where tp is the number of\ntrue positives and fn the number of false negatives. The recall is\nintuitively the ability of the classifier to find all the positive samples. The F-beta score can be interpreted as a weighted harmonic mean of\nthe precision and recall, where an F-beta score reaches its best\nvalue at 1 and worst score at 0. The F-beta score weights recall more than precision by a factor of\nbeta. beta == 1.0 means recall and precision are equally important. The support is the number of occurrences of each class in y_true. Support beyond term:binary targets is achieved by treating multiclass\nand multilabel data as a collection of binary problems, one for each\nlabel. For the binary case, setting average='binary' will return\nmetrics for pos_label. If average is not 'binary', pos_label is ignored\nand metrics for both classes are computed, then averaged or both returned (when\naverage=None). Similarly, for multiclass and multilabel targets,\nmetrics for all labels are either returned or averaged depending on the average\nparameter. Use labels specify the set of labels to calculate metrics for. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/glossary.html#term-multiclass",
                            "parameter_names_desc": [
                                {
                                    "param_name": "y_true",
                                    "param_type": "1d array-like, or label indicator array / sparse matrix",
                                    "param_desc": "Ground truth (correct) target values.\n"
                                },
                                {
                                    "param_name": "y_pred",
                                    "param_type": "1d array-like, or label indicator array / sparse matrix",
                                    "param_desc": "Estimated targets as returned by a classifier.\n"
                                },
                                {
                                    "param_name": "beta",
                                    "param_type": "float, default=1.0",
                                    "param_desc": "The strength of recall versus precision in the F-score.\n"
                                },
                                {
                                    "param_name": "labels",
                                    "param_type": "array-like, default=None",
                                    "param_desc": "The set of labels to include when average != 'binary', and their\norder if average is None. Labels present in the data can be\nexcluded, for example in multiclass classification to exclude a \u201cnegative\nclass\u201d. Labels not present in the data can be included and will be\n\u201cassigned\u201d 0 samples. For multilabel targets, labels are column indices.\nBy default, all labels in y_true and y_pred are used in sorted order.\n"
                                },
                                {
                                    "param_name": "pos_label",
                                    "param_type": "int, float, bool or str, default=1",
                                    "param_desc": "The class to report if average='binary' and the data is binary,\notherwise this parameter is ignored.\nFor multiclass or multilabel targets, set labels=[pos_label] and\naverage != 'binary' to report metrics for one label only.\n"
                                },
                                {
                                    "param_name": "average",
                                    "param_type": "{\u2018binary\u2019, \u2018micro\u2019, \u2018macro\u2019, \u2018samples\u2019, \u2018weighted\u2019},             default=None",
                                    "param_desc": "If None, the metrics for each class are returned. Otherwise, this\ndetermines the type of averaging performed on the data:\n\n'binary':Only report results for the class specified by pos_label.\nThis is applicable only if targets (y_{true,pred}) are binary.\n\n'micro':Calculate metrics globally by counting the total true positives,\nfalse negatives and false positives.\n\n'macro':Calculate metrics for each label, and find their unweighted\nmean.  This does not take label imbalance into account.\n\n'weighted':Calculate metrics for each label, and find their average weighted\nby support (the number of true instances for each label). This\nalters \u2018macro\u2019 to account for label imbalance; it can result in an\nF-score that is not between precision and recall.\n\n'samples':Calculate metrics for each instance, and find their average (only\nmeaningful for multilabel classification where this differs from\naccuracy_score).\n\n\n"
                                },
                                {
                                    "param_name": "warn_for",
                                    "param_type": "list, tuple or set, for internal use",
                                    "param_desc": "This determines which warnings will be made in the case that this\nfunction is being used to return only one of its metrics.\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Sample weights.\n"
                                },
                                {
                                    "param_name": "zero_division",
                                    "param_type": "{\u201cwarn\u201d, 0.0, 1.0, np.nan}, default=\u201dwarn\u201d",
                                    "param_desc": "\nSets the value to return when there is a zero division:\nrecall: when there are no positive labels\nprecision: when there are no positive predictions\nf-score: both\n\n\n\nNotes:\n- If set to \u201cwarn\u201d, this acts like 0, but a warning is also raised.\n- If set to np.nan, such values will be excluded from the average.\n\nAdded in version 1.3: np.nan option was added.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "precision_recall_fscore_support",
                            "descriptions": "Compute precision, recall, F-measure and support for each class. The precision is the ratio tp / (tp + fp) where tp is the number of\ntrue positives and fp the number of false positives. The precision is\nintuitively the ability of the classifier not to label a negative sample as\npositive. The recall is the ratio tp / (tp + fn) where tp is the number of\ntrue positives and fn the number of false negatives. The recall is\nintuitively the ability of the classifier to find all the positive samples. The F-beta score can be interpreted as a weighted harmonic mean of\nthe precision and recall, where an F-beta score reaches its best\nvalue at 1 and worst score at 0. The F-beta score weights recall more than precision by a factor of\nbeta. beta == 1.0 means recall and precision are equally important. The support is the number of occurrences of each class in y_true. Support beyond term:binary targets is achieved by treating multiclass\nand multilabel data as a collection of binary problems, one for each\nlabel. For the binary case, setting average='binary' will return\nmetrics for pos_label. If average is not 'binary', pos_label is ignored\nand metrics for both classes are computed, then averaged or both returned (when\naverage=None). Similarly, for multiclass and multilabel targets,\nmetrics for all labels are either returned or averaged depending on the average\nparameter. Use labels specify the set of labels to calculate metrics for. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "y_true": {
                                        "type": "array",
                                        "description": "1d array-like, or label indicator array / sparse matrix. Ground truth (correct) target values.\n"
                                    },
                                    "y_pred": {
                                        "type": "array",
                                        "description": "1d array-like, or label indicator array / sparse matrix. Estimated targets as returned by a classifier.\n"
                                    },
                                    "beta": {
                                        "type": "float",
                                        "description": "float, default=1.0. The strength of recall versus precision in the F-score.\n"
                                    },
                                    "labels": {
                                        "type": "array",
                                        "description": "array-like, default=None. The set of labels to include when average != 'binary', and their\norder if average is None. Labels present in the data can be\nexcluded, for example in multiclass classification to exclude a \u201cnegative\nclass\u201d. Labels not present in the data can be included and will be\n\u201cassigned\u201d 0 samples. For multilabel targets, labels are column indices.\nBy default, all labels in y_true and y_pred are used in sorted order.\n"
                                    },
                                    "pos_label": {
                                        "type": "integer",
                                        "description": "int, float, bool or str, default=1. The class to report if average='binary' and the data is binary,\notherwise this parameter is ignored.\nFor multiclass or multilabel targets, set labels=[pos_label] and\naverage != 'binary' to report metrics for one label only.\n"
                                    },
                                    "average": {
                                        "type": "string",
                                        "enum": [
                                            "binary",
                                            " micro",
                                            " macro",
                                            " samples",
                                            " weighted"
                                        ],
                                        "description": "{\u2018binary\u2019, \u2018micro\u2019, \u2018macro\u2019, \u2018samples\u2019, \u2018weighted\u2019},             default=None. If None, the metrics for each class are returned. Otherwise, this\ndetermines the type of averaging performed on the data:\n\n'binary':Only report results for the class specified by pos_label.\nThis is applicable only if targets (y_{true,pred}) are binary.\n\n'micro':Calculate metrics globally by counting the total true positives,\nfalse negatives and false positives.\n\n'macro':Calculate metrics for each label, and find their unweighted\nmean.  This does not take label imbalance into account.\n\n'weighted':Calculate metrics for each label, and find their average weighted\nby support (the number of true instances for each label). This\nalters \u2018macro\u2019 to account for label imbalance; it can result in an\nF-score that is not between precision and recall.\n\n'samples':Calculate metrics for each instance, and find their average (only\nmeaningful for multilabel classification where this differs from\naccuracy_score).\n\n\n"
                                    },
                                    "warn_for": {
                                        "type": "integer",
                                        "description": "list, tuple or set, for internal use. This determines which warnings will be made in the case that this\nfunction is being used to return only one of its metrics.\n"
                                    },
                                    "sample_weight": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Sample weights.\n"
                                    },
                                    "zero_division": {
                                        "type": "{\u201cwarn\u201d, 0.0, 1.0, np.nan}, default=\u201dwarn\u201d",
                                        "description": "{\u201cwarn\u201d, 0.0, 1.0, np.nan}, default=\u201dwarn\u201d. \nSets the value to return when there is a zero division:\nrecall: when there are no positive labels\nprecision: when there are no positive predictions\nf-score: both\n\n\n\nNotes:\n- If set to \u201cwarn\u201d, this acts like 0, but a warning is also raised.\n- If set to np.nan, such values will be excluded from the average.\n\nAdded in version 1.3: np.nan option was added.\n\n"
                                    }
                                },
                                "required": [
                                    "y_true",
                                    "y_pred"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "recall_score",
                        "func_desc": "Compute the recall.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.recall_score.html#sklearn.metrics.recall_score",
                        "function_definitions": {
                            "function_name": "recall_score",
                            "full_function": "sklearn.metrics.recall_score(y_true, y_pred, *, labels=None, pos_label=1, average='binary', sample_weight=None, zero_division='warn')",
                            "function_text": "Compute the recall. The recall is the ratio tp / (tp + fn) where tp is the number of\ntrue positives and fn the number of false negatives. The recall is\nintuitively the ability of the classifier to find all the positive samples. The best value is 1 and the worst value is 0. Support beyond term:binary targets is achieved by treating multiclass\nand multilabel data as a collection of binary problems, one for each\nlabel. For the binary case, setting average='binary' will return\nrecall for pos_label. If average is not 'binary', pos_label is ignored\nand recall for both classes are computed then averaged or both returned (when\naverage=None). Similarly, for multiclass and multilabel targets,\nrecall for all labels are either returned or averaged depending on the average\nparameter. Use labels specify the set of labels to calculate recall for. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/glossary.html#term-multiclass",
                            "parameter_names_desc": [
                                {
                                    "param_name": "y_true",
                                    "param_type": "1d array-like, or label indicator array / sparse matrix",
                                    "param_desc": "Ground truth (correct) target values.\n"
                                },
                                {
                                    "param_name": "y_pred",
                                    "param_type": "1d array-like, or label indicator array / sparse matrix",
                                    "param_desc": "Estimated targets as returned by a classifier.\n"
                                },
                                {
                                    "param_name": "labels",
                                    "param_type": "array-like, default=None",
                                    "param_desc": "The set of labels to include when average != 'binary', and their\norder if average is None. Labels present in the data can be\nexcluded, for example in multiclass classification to exclude a \u201cnegative\nclass\u201d. Labels not present in the data can be included and will be\n\u201cassigned\u201d 0 samples. For multilabel targets, labels are column indices.\nBy default, all labels in y_true and y_pred are used in sorted order.\n\nChanged in version 0.17: Parameter labels improved for multiclass problem.\n\n"
                                },
                                {
                                    "param_name": "pos_label",
                                    "param_type": "int, float, bool or str, default=1",
                                    "param_desc": "The class to report if average='binary' and the data is binary,\notherwise this parameter is ignored.\nFor multiclass or multilabel targets, set labels=[pos_label] and\naverage != 'binary' to report metrics for one label only.\n"
                                },
                                {
                                    "param_name": "average",
                                    "param_type": "{\u2018micro\u2019, \u2018macro\u2019, \u2018samples\u2019, \u2018weighted\u2019, \u2018binary\u2019} or None,             default=\u2019binary\u2019",
                                    "param_desc": "This parameter is required for multiclass/multilabel targets.\nIf None, the scores for each class are returned. Otherwise, this\ndetermines the type of averaging performed on the data:\n\n'binary':Only report results for the class specified by pos_label.\nThis is applicable only if targets (y_{true,pred}) are binary.\n\n'micro':Calculate metrics globally by counting the total true positives,\nfalse negatives and false positives.\n\n'macro':Calculate metrics for each label, and find their unweighted\nmean.  This does not take label imbalance into account.\n\n'weighted':Calculate metrics for each label, and find their average weighted\nby support (the number of true instances for each label). This\nalters \u2018macro\u2019 to account for label imbalance; it can result in an\nF-score that is not between precision and recall. Weighted recall\nis equal to accuracy.\n\n'samples':Calculate metrics for each instance, and find their average (only\nmeaningful for multilabel classification where this differs from\naccuracy_score).\n\n\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Sample weights.\n"
                                },
                                {
                                    "param_name": "zero_division",
                                    "param_type": "{\u201cwarn\u201d, 0.0, 1.0, np.nan}, default=\u201dwarn\u201d",
                                    "param_desc": "Sets the value to return when there is a zero division.\nNotes:\n- If set to \u201cwarn\u201d, this acts like 0, but a warning is also raised.\n- If set to np.nan, such values will be excluded from the average.\n\nAdded in version 1.3: np.nan option was added.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "recall_score",
                            "descriptions": "Compute the recall. The recall is the ratio tp / (tp + fn) where tp is the number of\ntrue positives and fn the number of false negatives. The recall is\nintuitively the ability of the classifier to find all the positive samples. The best value is 1 and the worst value is 0. Support beyond term:binary targets is achieved by treating multiclass\nand multilabel data as a collection of binary problems, one for each\nlabel. For the binary case, setting average='binary' will return\nrecall for pos_label. If average is not 'binary', pos_label is ignored\nand recall for both classes are computed then averaged or both returned (when\naverage=None). Similarly, for multiclass and multilabel targets,\nrecall for all labels are either returned or averaged depending on the average\nparameter. Use labels specify the set of labels to calculate recall for. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "y_true": {
                                        "type": "array",
                                        "description": "1d array-like, or label indicator array / sparse matrix. Ground truth (correct) target values.\n"
                                    },
                                    "y_pred": {
                                        "type": "array",
                                        "description": "1d array-like, or label indicator array / sparse matrix. Estimated targets as returned by a classifier.\n"
                                    },
                                    "labels": {
                                        "type": "array",
                                        "description": "array-like, default=None. The set of labels to include when average != 'binary', and their\norder if average is None. Labels present in the data can be\nexcluded, for example in multiclass classification to exclude a \u201cnegative\nclass\u201d. Labels not present in the data can be included and will be\n\u201cassigned\u201d 0 samples. For multilabel targets, labels are column indices.\nBy default, all labels in y_true and y_pred are used in sorted order.\n\nChanged in version 0.17: Parameter labels improved for multiclass problem.\n\n"
                                    },
                                    "pos_label": {
                                        "type": "integer",
                                        "description": "int, float, bool or str, default=1. The class to report if average='binary' and the data is binary,\notherwise this parameter is ignored.\nFor multiclass or multilabel targets, set labels=[pos_label] and\naverage != 'binary' to report metrics for one label only.\n"
                                    },
                                    "average": {
                                        "type": "string",
                                        "enum": [
                                            "micro",
                                            " macro",
                                            " samples",
                                            " weighted",
                                            " binary"
                                        ],
                                        "description": "{\u2018micro\u2019, \u2018macro\u2019, \u2018samples\u2019, \u2018weighted\u2019, \u2018binary\u2019} or None,             default=\u2019binary\u2019. This parameter is required for multiclass/multilabel targets.\nIf None, the scores for each class are returned. Otherwise, this\ndetermines the type of averaging performed on the data:\n\n'binary':Only report results for the class specified by pos_label.\nThis is applicable only if targets (y_{true,pred}) are binary.\n\n'micro':Calculate metrics globally by counting the total true positives,\nfalse negatives and false positives.\n\n'macro':Calculate metrics for each label, and find their unweighted\nmean.  This does not take label imbalance into account.\n\n'weighted':Calculate metrics for each label, and find their average weighted\nby support (the number of true instances for each label). This\nalters \u2018macro\u2019 to account for label imbalance; it can result in an\nF-score that is not between precision and recall. Weighted recall\nis equal to accuracy.\n\n'samples':Calculate metrics for each instance, and find their average (only\nmeaningful for multilabel classification where this differs from\naccuracy_score).\n\n\n"
                                    },
                                    "sample_weight": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Sample weights.\n"
                                    },
                                    "zero_division": {
                                        "type": "{\u201cwarn\u201d, 0.0, 1.0, np.nan}, default=\u201dwarn\u201d",
                                        "description": "{\u201cwarn\u201d, 0.0, 1.0, np.nan}, default=\u201dwarn\u201d. Sets the value to return when there is a zero division.\nNotes:\n- If set to \u201cwarn\u201d, this acts like 0, but a warning is also raised.\n- If set to np.nan, such values will be excluded from the average.\n\nAdded in version 1.3: np.nan option was added.\n\n"
                                    }
                                },
                                "required": [
                                    "y_true",
                                    "y_pred"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "roc_curve",
                        "func_desc": "Compute Receiver operating characteristic (ROC).",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.roc_curve.html#sklearn.metrics.roc_curve",
                        "function_definitions": {
                            "function_name": "roc_curve",
                            "full_function": "sklearn.metrics.roc_curve(y_true, y_score, *, pos_label=None, sample_weight=None, drop_intermediate=True)",
                            "function_text": "Compute Receiver operating characteristic (ROC). Note: this implementation is restricted to the binary classification task. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/model_evaluation.html#roc-metrics",
                            "parameter_names_desc": [
                                {
                                    "param_name": "y_true",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "True binary labels. If labels are not either {-1, 1} or {0, 1}, then\npos_label should be explicitly given.\n"
                                },
                                {
                                    "param_name": "y_score",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "Target scores, can either be probability estimates of the positive\nclass, confidence values, or non-thresholded measure of decisions\n(as returned by \u201cdecision_function\u201d on some classifiers).\n"
                                },
                                {
                                    "param_name": "pos_label",
                                    "param_type": "int, float, bool or str, default=None",
                                    "param_desc": "The label of the positive class.\nWhen pos_label=None, if y_true is in {-1, 1} or {0, 1},\npos_label is set to 1, otherwise an error will be raised.\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Sample weights.\n"
                                },
                                {
                                    "param_name": "drop_intermediate",
                                    "param_type": "bool, default=True",
                                    "param_desc": "Whether to drop some suboptimal thresholds which would not appear\non a plotted ROC curve. This is useful in order to create lighter\nROC curves.\n\nAdded in version 0.17: parameter drop_intermediate.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "roc_curve",
                            "descriptions": "Compute Receiver operating characteristic (ROC). Note: this implementation is restricted to the binary classification task. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "y_true": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). True binary labels. If labels are not either {-1, 1} or {0, 1}, then\npos_label should be explicitly given.\n"
                                    },
                                    "y_score": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). Target scores, can either be probability estimates of the positive\nclass, confidence values, or non-thresholded measure of decisions\n(as returned by \u201cdecision_function\u201d on some classifiers).\n"
                                    },
                                    "pos_label": {
                                        "type": "integer",
                                        "description": "int, float, bool or str, default=None. The label of the positive class.\nWhen pos_label=None, if y_true is in {-1, 1} or {0, 1},\npos_label is set to 1, otherwise an error will be raised.\n"
                                    },
                                    "sample_weight": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Sample weights.\n"
                                    },
                                    "drop_intermediate": {
                                        "type": "boolean",
                                        "description": "bool, default=True. Whether to drop some suboptimal thresholds which would not appear\non a plotted ROC curve. This is useful in order to create lighter\nROC curves.\n\nAdded in version 0.17: parameter drop_intermediate.\n\n"
                                    }
                                },
                                "required": [
                                    "y_true",
                                    "y_score"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "zero_one_loss",
                        "func_desc": "Zero-one classification loss.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.zero_one_loss.html#sklearn.metrics.zero_one_loss",
                        "function_definitions": {
                            "function_name": "zero_one_loss",
                            "full_function": "sklearn.metrics.zero_one_loss(y_true, y_pred, *, normalize=True, sample_weight=None)",
                            "function_text": "Zero-one classification loss. If normalize is True, return the fraction of misclassifications\n(float), else it returns the number of misclassifications (int). The best\nperformance is 0. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/model_evaluation.html#zero-one-loss",
                            "parameter_names_desc": [
                                {
                                    "param_name": "y_true",
                                    "param_type": "1d array-like, or label indicator array / sparse matrix",
                                    "param_desc": "Ground truth (correct) labels.\n"
                                },
                                {
                                    "param_name": "y_pred",
                                    "param_type": "1d array-like, or label indicator array / sparse matrix",
                                    "param_desc": "Predicted labels, as returned by a classifier.\n"
                                },
                                {
                                    "param_name": "normalize",
                                    "param_type": "bool, default=True",
                                    "param_desc": "If False, return the number of misclassifications.\nOtherwise, return the fraction of misclassifications.\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Sample weights.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "zero_one_loss",
                            "descriptions": "Zero-one classification loss. If normalize is True, return the fraction of misclassifications\n(float), else it returns the number of misclassifications (int). The best\nperformance is 0. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "y_true": {
                                        "type": "array",
                                        "description": "1d array-like, or label indicator array / sparse matrix. Ground truth (correct) labels.\n"
                                    },
                                    "y_pred": {
                                        "type": "array",
                                        "description": "1d array-like, or label indicator array / sparse matrix. Predicted labels, as returned by a classifier.\n"
                                    },
                                    "normalize": {
                                        "type": "boolean",
                                        "description": "bool, default=True. If False, return the number of misclassifications.\nOtherwise, return the fraction of misclassifications.\n"
                                    },
                                    "sample_weight": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Sample weights.\n"
                                    }
                                },
                                "required": [
                                    "y_true",
                                    "y_pred"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "auc",
                        "func_desc": "Compute Area Under the Curve (AUC) using the trapezoidal rule.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.auc.html#sklearn.metrics.auc",
                        "function_definitions": {
                            "function_name": "auc",
                            "full_function": "sklearn.metrics.auc(x, y)",
                            "function_text": "Compute Area Under the Curve (AUC) using the trapezoidal rule. This is a general function, given points on a curve.  For computing the\narea under the ROC-curve, see roc_auc_score.  For an alternative\nway to summarize a precision-recall curve, see\naverage_precision_score.",
                            "func_text_user_guide": "sklearn.metrics.roc_auc_score.html#sklearn.metrics.roc_auc_score",
                            "parameter_names_desc": [
                                {
                                    "param_name": "x",
                                    "param_type": "array-like of shape (n,)",
                                    "param_desc": "X coordinates. These must be either monotonic increasing or monotonic\ndecreasing.\n"
                                },
                                {
                                    "param_name": "y",
                                    "param_type": "array-like of shape (n,)",
                                    "param_desc": "Y coordinates.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "auc",
                            "descriptions": "Compute Area Under the Curve (AUC) using the trapezoidal rule. This is a general function, given points on a curve.  For computing the\narea under the ROC-curve, see roc_auc_score.  For an alternative\nway to summarize a precision-recall curve, see\naverage_precision_score.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "x": {
                                        "type": "array",
                                        "description": "array-like of shape (n,). X coordinates. These must be either monotonic increasing or monotonic\ndecreasing.\n"
                                    },
                                    "y": {
                                        "type": "array",
                                        "description": "array-like of shape (n,). Y coordinates.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "balanced_accuracy_score",
                        "func_desc": "Compute the balanced accuracy.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.balanced_accuracy_score.html#sklearn.metrics.balanced_accuracy_score",
                        "function_definitions": {
                            "function_name": "balanced_accuracy_score",
                            "full_function": "sklearn.metrics.balanced_accuracy_score(y_true, y_pred, *, sample_weight=None, adjusted=False)",
                            "function_text": "Compute the balanced accuracy. The balanced accuracy in binary and multiclass classification problems to\ndeal with imbalanced datasets. It is defined as the average of recall\nobtained on each class. The best value is 1 and the worst value is 0 when adjusted=False. Read more in the User Guide. Added in version 0.20.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/model_evaluation.html#balanced-accuracy-score",
                            "parameter_names_desc": [
                                {
                                    "param_name": "y_true",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "Ground truth (correct) target values.\n"
                                },
                                {
                                    "param_name": "y_pred",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "Estimated targets as returned by a classifier.\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Sample weights.\n"
                                },
                                {
                                    "param_name": "adjusted",
                                    "param_type": "bool, default=False",
                                    "param_desc": "When true, the result is adjusted for chance, so that random\nperformance would score 0, while keeping perfect performance at a score\nof 1.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "balanced_accuracy_score",
                            "descriptions": "Compute the balanced accuracy. The balanced accuracy in binary and multiclass classification problems to\ndeal with imbalanced datasets. It is defined as the average of recall\nobtained on each class. The best value is 1 and the worst value is 0 when adjusted=False. Read more in the User Guide. Added in version 0.20.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "y_true": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). Ground truth (correct) target values.\n"
                                    },
                                    "y_pred": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). Estimated targets as returned by a classifier.\n"
                                    },
                                    "sample_weight": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Sample weights.\n"
                                    },
                                    "adjusted": {
                                        "type": "boolean",
                                        "description": "bool, default=False. When true, the result is adjusted for chance, so that random\nperformance would score 0, while keeping perfect performance at a score\nof 1.\n"
                                    }
                                },
                                "required": [
                                    "y_true",
                                    "y_pred"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "class_likelihood_ratios",
                        "func_desc": "Compute binary classification positive and negative likelihood ratios.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.class_likelihood_ratios.html#sklearn.metrics.class_likelihood_ratios",
                        "function_definitions": {
                            "function_name": "class_likelihood_ratios",
                            "full_function": "sklearn.metrics.class_likelihood_ratios(y_true, y_pred, *, labels=None, sample_weight=None, raise_warning=True)",
                            "function_text": "Compute binary classification positive and negative likelihood ratios. The positive likelihood ratio is LR+ = sensitivity / (1 - specificity)\nwhere the sensitivity or recall is the ratio tp / (tp + fn) and the\nspecificity is tn / (tn + fp). The negative likelihood ratio is LR- = (1\n- sensitivity) / specificity. Here tp is the number of true positives,\nfp the number of false positives, tn is the number of true negatives and\nfn the number of false negatives. Both class likelihood ratios can be used\nto obtain post-test probabilities given a pre-test probability. LR+ ranges from 1 to infinity. A LR+ of 1 indicates that the probability\nof predicting the positive class is the same for samples belonging to either\nclass; therefore, the test is useless. The greater LR+ is, the more a\npositive prediction is likely to be a true positive when compared with the\npre-test probability. A value of LR+ lower than 1 is invalid as it would\nindicate that the odds of a sample being a true positive decrease with\nrespect to the pre-test odds. LR- ranges from 0 to 1. The closer it is to 0, the lower the probability\nof a given sample to be a false negative. A LR- of 1 means the test is\nuseless because the odds of having the condition did not change after the\ntest. A value of LR- greater than 1 invalidates the classifier as it\nindicates an increase in the odds of a sample belonging to the positive\nclass after being classified as negative. This is the case when the\nclassifier systematically predicts the opposite of the true label. A typical application in medicine is to identify the positive/negative class\nto the presence/absence of a disease, respectively; the classifier being a\ndiagnostic test; the pre-test probability of an individual having the\ndisease can be the prevalence of such disease (proportion of a particular\npopulation found to be affected by a medical condition); and the post-test\nprobabilities would be the probability that the condition is truly present\ngiven a positive test result. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/model_evaluation.html#class-likelihood-ratios",
                            "parameter_names_desc": []
                        },
                        "function_calling": {}
                    },
                    {
                        "func_name": "cohen_kappa_score",
                        "func_desc": "Compute Cohen's kappa: a statistic that measures inter-annotator agreement.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.cohen_kappa_score.html#sklearn.metrics.cohen_kappa_score",
                        "function_definitions": {
                            "function_name": "cohen_kappa_score",
                            "full_function": "sklearn.metrics.cohen_kappa_score(y1, y2, *, labels=None, weights=None, sample_weight=None)",
                            "function_text": "Compute Cohen\u2019s kappa: a statistic that measures inter-annotator agreement. This function computes Cohen\u2019s kappa [1], a score that expresses the level\nof agreement between two annotators on a classification problem. It is\ndefined as where \\(p_o\\) is the empirical probability of agreement on the label\nassigned to any sample (the observed agreement ratio), and \\(p_e\\) is\nthe expected agreement when both annotators assign labels randomly.\n\\(p_e\\) is estimated using a per-annotator empirical prior over the\nclass labels [2]. Read more in the User Guide.",
                            "func_text_user_guide": "#r219a3b9132e1-1",
                            "parameter_names_desc": [
                                {
                                    "param_name": "y1",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "Labels assigned by the first annotator.\n"
                                },
                                {
                                    "param_name": "y2",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "Labels assigned by the second annotator. The kappa statistic is\nsymmetric, so swapping y1 and y2 doesn\u2019t change the value.\n"
                                },
                                {
                                    "param_name": "labels",
                                    "param_type": "array-like of shape (n_classes,), default=None",
                                    "param_desc": "List of labels to index the matrix. This may be used to select a\nsubset of labels. If None, all labels that appear at least once in\ny1 or y2 are used.\n"
                                },
                                {
                                    "param_name": "weights",
                                    "param_type": "{\u2018linear\u2019, \u2018quadratic\u2019}, default=None",
                                    "param_desc": "Weighting type to calculate the score. None means no weighted;\n\u201clinear\u201d means linear weighted; \u201cquadratic\u201d means quadratic weighted.\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Sample weights.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "cohen_kappa_score",
                            "descriptions": "Compute Cohen\u2019s kappa: a statistic that measures inter-annotator agreement. This function computes Cohen\u2019s kappa [1], a score that expresses the level\nof agreement between two annotators on a classification problem. It is\ndefined as where \\(p_o\\) is the empirical probability of agreement on the label\nassigned to any sample (the observed agreement ratio), and \\(p_e\\) is\nthe expected agreement when both annotators assign labels randomly.\n\\(p_e\\) is estimated using a per-annotator empirical prior over the\nclass labels [2]. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "y1": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). Labels assigned by the first annotator.\n"
                                    },
                                    "y2": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). Labels assigned by the second annotator. The kappa statistic is\nsymmetric, so swapping y1 and y2 doesn\u2019t change the value.\n"
                                    },
                                    "labels": {
                                        "type": "array",
                                        "description": "array-like of shape (n_classes,), default=None. List of labels to index the matrix. This may be used to select a\nsubset of labels. If None, all labels that appear at least once in\ny1 or y2 are used.\n"
                                    },
                                    "weights": {
                                        "type": "string",
                                        "enum": [
                                            "linear",
                                            " quadratic"
                                        ],
                                        "description": "{\u2018linear\u2019, \u2018quadratic\u2019}, default=None. Weighting type to calculate the score. None means no weighted;\n\u201clinear\u201d means linear weighted; \u201cquadratic\u201d means quadratic weighted.\n"
                                    },
                                    "sample_weight": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Sample weights.\n"
                                    }
                                },
                                "required": [
                                    "y1",
                                    "y2"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "d2_log_loss_score",
                        "func_desc": "\\(D^2\\) score function, fraction of log loss explained.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.d2_log_loss_score.html#sklearn.metrics.d2_log_loss_score",
                        "function_definitions": {
                            "function_name": "d2_log_loss_score",
                            "full_function": "sklearn.metrics.d2_log_loss_score(y_true, y_pred, *, sample_weight=None, labels=None)",
                            "function_text": "\\(D^2\\) score function, fraction of log loss explained. Best possible score is 1.0 and it can be negative (because the model can be\narbitrarily worse). A model that always predicts the per-class proportions\nof y_true, disregarding the input features, gets a D^2 score of 0.0. Read more in the User Guide. Added in version 1.5.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/model_evaluation.html#d2-score-classification",
                            "parameter_names_desc": [
                                {
                                    "param_name": "y_true",
                                    "param_type": "array-like or label indicator matrix",
                                    "param_desc": "The actuals labels for the n_samples samples.\n"
                                },
                                {
                                    "param_name": "y_pred",
                                    "param_type": "array-like of shape (n_samples, n_classes) or (n_samples,)",
                                    "param_desc": "Predicted probabilities, as returned by a classifier\u2019s\npredict_proba method. If y_pred.shape = (n_samples,)\nthe probabilities provided are assumed to be that of the\npositive class. The labels in y_pred are assumed to be\nordered alphabetically, as done by\nLabelBinarizer.\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Sample weights.\n"
                                },
                                {
                                    "param_name": "labels",
                                    "param_type": "array-like, default=None",
                                    "param_desc": "If not provided, labels will be inferred from y_true. If labels\nis None and y_pred has shape (n_samples,) the labels are\nassumed to be binary and are inferred from y_true.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "d2_log_loss_score",
                            "descriptions": "\\(D^2\\) score function, fraction of log loss explained. Best possible score is 1.0 and it can be negative (because the model can be\narbitrarily worse). A model that always predicts the per-class proportions\nof y_true, disregarding the input features, gets a D^2 score of 0.0. Read more in the User Guide. Added in version 1.5.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "y_true": {
                                        "type": "array",
                                        "description": "array-like or label indicator matrix. The actuals labels for the n_samples samples.\n"
                                    },
                                    "y_pred": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_classes) or (n_samples,). Predicted probabilities, as returned by a classifier\u2019s\npredict_proba method. If y_pred.shape = (n_samples,)\nthe probabilities provided are assumed to be that of the\npositive class. The labels in y_pred are assumed to be\nordered alphabetically, as done by\nLabelBinarizer.\n"
                                    },
                                    "sample_weight": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Sample weights.\n"
                                    },
                                    "labels": {
                                        "type": "array",
                                        "description": "array-like, default=None. If not provided, labels will be inferred from y_true. If labels\nis None and y_pred has shape (n_samples,) the labels are\nassumed to be binary and are inferred from y_true.\n"
                                    }
                                },
                                "required": [
                                    "y_true",
                                    "y_pred"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "det_curve",
                        "func_desc": "Compute error rates for different probability thresholds.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.det_curve.html#sklearn.metrics.det_curve",
                        "function_definitions": {
                            "function_name": "det_curve",
                            "full_function": "sklearn.metrics.det_curve(y_true, y_score, pos_label=None, sample_weight=None)",
                            "function_text": "Compute error rates for different probability thresholds. Note This metric is used for evaluation of ranking and error tradeoffs of\na binary classification task. Read more in the User Guide. Added in version 0.24.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/model_evaluation.html#det-curve",
                            "parameter_names_desc": [
                                {
                                    "param_name": "y_true",
                                    "param_type": "ndarray of shape (n_samples,)",
                                    "param_desc": "True binary labels. If labels are not either {-1, 1} or {0, 1}, then\npos_label should be explicitly given.\n"
                                },
                                {
                                    "param_name": "y_score",
                                    "param_type": "ndarray of shape of (n_samples,)",
                                    "param_desc": "Target scores, can either be probability estimates of the positive\nclass, confidence values, or non-thresholded measure of decisions\n(as returned by \u201cdecision_function\u201d on some classifiers).\n"
                                },
                                {
                                    "param_name": "pos_label",
                                    "param_type": "int, float, bool or str, default=None",
                                    "param_desc": "The label of the positive class.\nWhen pos_label=None, if y_true is in {-1, 1} or {0, 1},\npos_label is set to 1, otherwise an error will be raised.\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Sample weights.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "det_curve",
                            "descriptions": "Compute error rates for different probability thresholds. Note This metric is used for evaluation of ranking and error tradeoffs of\na binary classification task. Read more in the User Guide. Added in version 0.24.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "y_true": {
                                        "type": "array",
                                        "description": "ndarray of shape (n_samples,). True binary labels. If labels are not either {-1, 1} or {0, 1}, then\npos_label should be explicitly given.\n"
                                    },
                                    "y_score": {
                                        "type": "array",
                                        "description": "ndarray of shape of (n_samples,). Target scores, can either be probability estimates of the positive\nclass, confidence values, or non-thresholded measure of decisions\n(as returned by \u201cdecision_function\u201d on some classifiers).\n"
                                    },
                                    "pos_label": {
                                        "type": "integer",
                                        "description": "int, float, bool or str, default=None. The label of the positive class.\nWhen pos_label=None, if y_true is in {-1, 1} or {0, 1},\npos_label is set to 1, otherwise an error will be raised.\n"
                                    },
                                    "sample_weight": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Sample weights.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "fbeta_score",
                        "func_desc": "Compute the F-beta score.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.fbeta_score.html#sklearn.metrics.fbeta_score",
                        "function_definitions": {
                            "function_name": "fbeta_score",
                            "full_function": "sklearn.metrics.fbeta_score(y_true, y_pred, *, beta, labels=None, pos_label=1, average='binary', sample_weight=None, zero_division='warn')",
                            "function_text": "Compute the F-beta score. The F-beta score is the weighted harmonic mean of precision and recall,\nreaching its optimal value at 1 and its worst value at 0. The beta parameter represents the ratio of recall importance to\nprecision importance. beta > 1 gives more weight to recall, while\nbeta < 1 favors precision. For example, beta = 2 makes recall twice\nas important as precision, while beta = 0.5 does the opposite.\nAsymptotically, beta -> +inf considers only recall, and beta -> 0\nonly precision. The formula for F-beta score is: Where \\(\\text{tp}\\) is the number of true positives, \\(\\text{fp}\\) is the\nnumber of false positives, and \\(\\text{fn}\\) is the number of false negatives. Support beyond term:binary targets is achieved by treating multiclass\nand multilabel data as a collection of binary problems, one for each\nlabel. For the binary case, setting average='binary' will return\nF-beta score for pos_label. If average is not 'binary', pos_label is\nignored and F-beta score for both classes are computed, then averaged or both\nreturned (when average=None). Similarly, for multiclass and\nmultilabel targets, F-beta score for all labels are either returned or\naveraged depending on the average parameter. Use labels specify the set of\nlabels to calculate F-beta score for. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/glossary.html#term-multiclass",
                            "parameter_names_desc": [
                                {
                                    "param_name": "y_true",
                                    "param_type": "1d array-like, or label indicator array / sparse matrix",
                                    "param_desc": "Ground truth (correct) target values.\n"
                                },
                                {
                                    "param_name": "y_pred",
                                    "param_type": "1d array-like, or label indicator array / sparse matrix",
                                    "param_desc": "Estimated targets as returned by a classifier.\n"
                                },
                                {
                                    "param_name": "beta",
                                    "param_type": "float",
                                    "param_desc": "Determines the weight of recall in the combined score.\n"
                                },
                                {
                                    "param_name": "labels",
                                    "param_type": "array-like, default=None",
                                    "param_desc": "The set of labels to include when average != 'binary', and their\norder if average is None. Labels present in the data can be\nexcluded, for example in multiclass classification to exclude a \u201cnegative\nclass\u201d. Labels not present in the data can be included and will be\n\u201cassigned\u201d 0 samples. For multilabel targets, labels are column indices.\nBy default, all labels in y_true and y_pred are used in sorted order.\n\nChanged in version 0.17: Parameter labels improved for multiclass problem.\n\n"
                                },
                                {
                                    "param_name": "pos_label",
                                    "param_type": "int, float, bool or str, default=1",
                                    "param_desc": "The class to report if average='binary' and the data is binary,\notherwise this parameter is ignored.\nFor multiclass or multilabel targets, set labels=[pos_label] and\naverage != 'binary' to report metrics for one label only.\n"
                                },
                                {
                                    "param_name": "average",
                                    "param_type": "{\u2018micro\u2019, \u2018macro\u2019, \u2018samples\u2019, \u2018weighted\u2019, \u2018binary\u2019} or None,             default=\u2019binary\u2019",
                                    "param_desc": "This parameter is required for multiclass/multilabel targets.\nIf None, the scores for each class are returned. Otherwise, this\ndetermines the type of averaging performed on the data:\n\n'binary':Only report results for the class specified by pos_label.\nThis is applicable only if targets (y_{true,pred}) are binary.\n\n'micro':Calculate metrics globally by counting the total true positives,\nfalse negatives and false positives.\n\n'macro':Calculate metrics for each label, and find their unweighted\nmean.  This does not take label imbalance into account.\n\n'weighted':Calculate metrics for each label, and find their average weighted\nby support (the number of true instances for each label). This\nalters \u2018macro\u2019 to account for label imbalance; it can result in an\nF-score that is not between precision and recall.\n\n'samples':Calculate metrics for each instance, and find their average (only\nmeaningful for multilabel classification where this differs from\naccuracy_score).\n\n\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Sample weights.\n"
                                },
                                {
                                    "param_name": "zero_division",
                                    "param_type": "{\u201cwarn\u201d, 0.0, 1.0, np.nan}, default=\u201dwarn\u201d",
                                    "param_desc": "Sets the value to return when there is a zero division, i.e. when all\npredictions and labels are negative.\nNotes:\n- If set to \u201cwarn\u201d, this acts like 0, but a warning is also raised.\n- If set to np.nan, such values will be excluded from the average.\n\nAdded in version 1.3: np.nan option was added.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "fbeta_score",
                            "descriptions": "Compute the F-beta score. The F-beta score is the weighted harmonic mean of precision and recall,\nreaching its optimal value at 1 and its worst value at 0. The beta parameter represents the ratio of recall importance to\nprecision importance. beta > 1 gives more weight to recall, while\nbeta < 1 favors precision. For example, beta = 2 makes recall twice\nas important as precision, while beta = 0.5 does the opposite.\nAsymptotically, beta -> +inf considers only recall, and beta -> 0\nonly precision. The formula for F-beta score is: Where \\(\\text{tp}\\) is the number of true positives, \\(\\text{fp}\\) is the\nnumber of false positives, and \\(\\text{fn}\\) is the number of false negatives. Support beyond term:binary targets is achieved by treating multiclass\nand multilabel data as a collection of binary problems, one for each\nlabel. For the binary case, setting average='binary' will return\nF-beta score for pos_label. If average is not 'binary', pos_label is\nignored and F-beta score for both classes are computed, then averaged or both\nreturned (when average=None). Similarly, for multiclass and\nmultilabel targets, F-beta score for all labels are either returned or\naveraged depending on the average parameter. Use labels specify the set of\nlabels to calculate F-beta score for. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "y_true": {
                                        "type": "array",
                                        "description": "1d array-like, or label indicator array / sparse matrix. Ground truth (correct) target values.\n"
                                    },
                                    "y_pred": {
                                        "type": "array",
                                        "description": "1d array-like, or label indicator array / sparse matrix. Estimated targets as returned by a classifier.\n"
                                    },
                                    "beta": {
                                        "type": "float",
                                        "description": "float. Determines the weight of recall in the combined score.\n"
                                    },
                                    "labels": {
                                        "type": "array",
                                        "description": "array-like, default=None. The set of labels to include when average != 'binary', and their\norder if average is None. Labels present in the data can be\nexcluded, for example in multiclass classification to exclude a \u201cnegative\nclass\u201d. Labels not present in the data can be included and will be\n\u201cassigned\u201d 0 samples. For multilabel targets, labels are column indices.\nBy default, all labels in y_true and y_pred are used in sorted order.\n\nChanged in version 0.17: Parameter labels improved for multiclass problem.\n\n"
                                    },
                                    "pos_label": {
                                        "type": "integer",
                                        "description": "int, float, bool or str, default=1. The class to report if average='binary' and the data is binary,\notherwise this parameter is ignored.\nFor multiclass or multilabel targets, set labels=[pos_label] and\naverage != 'binary' to report metrics for one label only.\n"
                                    },
                                    "average": {
                                        "type": "string",
                                        "enum": [
                                            "micro",
                                            " macro",
                                            " samples",
                                            " weighted",
                                            " binary"
                                        ],
                                        "description": "{\u2018micro\u2019, \u2018macro\u2019, \u2018samples\u2019, \u2018weighted\u2019, \u2018binary\u2019} or None,             default=\u2019binary\u2019. This parameter is required for multiclass/multilabel targets.\nIf None, the scores for each class are returned. Otherwise, this\ndetermines the type of averaging performed on the data:\n\n'binary':Only report results for the class specified by pos_label.\nThis is applicable only if targets (y_{true,pred}) are binary.\n\n'micro':Calculate metrics globally by counting the total true positives,\nfalse negatives and false positives.\n\n'macro':Calculate metrics for each label, and find their unweighted\nmean.  This does not take label imbalance into account.\n\n'weighted':Calculate metrics for each label, and find their average weighted\nby support (the number of true instances for each label). This\nalters \u2018macro\u2019 to account for label imbalance; it can result in an\nF-score that is not between precision and recall.\n\n'samples':Calculate metrics for each instance, and find their average (only\nmeaningful for multilabel classification where this differs from\naccuracy_score).\n\n\n"
                                    },
                                    "sample_weight": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Sample weights.\n"
                                    },
                                    "zero_division": {
                                        "type": "{\u201cwarn\u201d, 0.0, 1.0, np.nan}, default=\u201dwarn\u201d",
                                        "description": "{\u201cwarn\u201d, 0.0, 1.0, np.nan}, default=\u201dwarn\u201d. Sets the value to return when there is a zero division, i.e. when all\npredictions and labels are negative.\nNotes:\n- If set to \u201cwarn\u201d, this acts like 0, but a warning is also raised.\n- If set to np.nan, such values will be excluded from the average.\n\nAdded in version 1.3: np.nan option was added.\n\n"
                                    }
                                },
                                "required": [
                                    "y_true",
                                    "y_pred"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "hinge_loss",
                        "func_desc": "Average hinge loss (non-regularized).",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.hinge_loss.html#sklearn.metrics.hinge_loss",
                        "function_definitions": {
                            "function_name": "hinge_loss",
                            "full_function": "sklearn.metrics.hinge_loss(y_true, pred_decision, *, labels=None, sample_weight=None)",
                            "function_text": "Average hinge loss (non-regularized). In binary class case, assuming labels in y_true are encoded with +1 and -1,\nwhen a prediction mistake is made, margin = y_true * pred_decision is\nalways negative (since the signs disagree), implying 1 - margin is\nalways greater than 1.  The cumulated hinge loss is therefore an upper\nbound of the number of mistakes made by the classifier. In multiclass case, the function expects that either all the labels are\nincluded in y_true or an optional labels argument is provided which\ncontains all the labels. The multilabel margin is calculated according\nto Crammer-Singer\u2019s method. As in the binary case, the cumulated hinge loss\nis an upper bound of the number of mistakes made by the classifier. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/model_evaluation.html#hinge-loss",
                            "parameter_names_desc": [
                                {
                                    "param_name": "y_true",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "True target, consisting of integers of two values. The positive label\nmust be greater than the negative label.\n"
                                },
                                {
                                    "param_name": "pred_decision",
                                    "param_type": "array-like of shape (n_samples,) or (n_samples, n_classes)",
                                    "param_desc": "Predicted decisions, as output by decision_function (floats).\n"
                                },
                                {
                                    "param_name": "labels",
                                    "param_type": "array-like, default=None",
                                    "param_desc": "Contains all the labels for the problem. Used in multiclass hinge loss.\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Sample weights.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "hinge_loss",
                            "descriptions": "Average hinge loss (non-regularized). In binary class case, assuming labels in y_true are encoded with +1 and -1,\nwhen a prediction mistake is made, margin = y_true * pred_decision is\nalways negative (since the signs disagree), implying 1 - margin is\nalways greater than 1.  The cumulated hinge loss is therefore an upper\nbound of the number of mistakes made by the classifier. In multiclass case, the function expects that either all the labels are\nincluded in y_true or an optional labels argument is provided which\ncontains all the labels. The multilabel margin is calculated according\nto Crammer-Singer\u2019s method. As in the binary case, the cumulated hinge loss\nis an upper bound of the number of mistakes made by the classifier. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "y_true": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). True target, consisting of integers of two values. The positive label\nmust be greater than the negative label.\n"
                                    },
                                    "pred_decision": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,) or (n_samples, n_classes). Predicted decisions, as output by decision_function (floats).\n"
                                    },
                                    "labels": {
                                        "type": "array",
                                        "description": "array-like, default=None. Contains all the labels for the problem. Used in multiclass hinge loss.\n"
                                    },
                                    "sample_weight": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Sample weights.\n"
                                    }
                                },
                                "required": [
                                    "y_true",
                                    "pred_decision"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "log_loss",
                        "func_desc": "Log loss, aka logistic loss or cross-entropy loss.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.log_loss.html#sklearn.metrics.log_loss",
                        "function_definitions": {
                            "function_name": "log_loss",
                            "full_function": "sklearn.metrics.log_loss(y_true, y_pred, *, normalize=True, sample_weight=None, labels=None)",
                            "function_text": "Log loss, aka logistic loss or cross-entropy loss. This is the loss function used in (multinomial) logistic regression\nand extensions of it such as neural networks, defined as the negative\nlog-likelihood of a logistic model that returns y_pred probabilities\nfor its training data y_true.\nThe log loss is only defined for two or more labels.\nFor a single sample with true label \\(y \\in \\{0,1\\}\\) and\na probability estimate \\(p = \\operatorname{Pr}(y = 1)\\), the log\nloss is: Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/model_evaluation.html#log-loss",
                            "parameter_names_desc": [
                                {
                                    "param_name": "y_true",
                                    "param_type": "array-like or label indicator matrix",
                                    "param_desc": "Ground truth (correct) labels for n_samples samples.\n"
                                },
                                {
                                    "param_name": "y_pred",
                                    "param_type": "array-like of float, shape = (n_samples, n_classes) or (n_samples,)",
                                    "param_desc": "Predicted probabilities, as returned by a classifier\u2019s\npredict_proba method. If y_pred.shape = (n_samples,)\nthe probabilities provided are assumed to be that of the\npositive class. The labels in y_pred are assumed to be\nordered alphabetically, as done by\nLabelBinarizer.\ny_pred values are clipped to [eps, 1-eps] where eps is the machine\nprecision for y_pred\u2019s dtype.\n"
                                },
                                {
                                    "param_name": "normalize",
                                    "param_type": "bool, default=True",
                                    "param_desc": "If true, return the mean loss per sample.\nOtherwise, return the sum of the per-sample losses.\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Sample weights.\n"
                                },
                                {
                                    "param_name": "labels",
                                    "param_type": "array-like, default=None",
                                    "param_desc": "If not provided, labels will be inferred from y_true. If labels\nis None and y_pred has shape (n_samples,) the labels are\nassumed to be binary and are inferred from y_true.\n\nAdded in version 0.18.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "log_loss",
                            "descriptions": "Log loss, aka logistic loss or cross-entropy loss. This is the loss function used in (multinomial) logistic regression\nand extensions of it such as neural networks, defined as the negative\nlog-likelihood of a logistic model that returns y_pred probabilities\nfor its training data y_true.\nThe log loss is only defined for two or more labels.\nFor a single sample with true label \\(y \\in \\{0,1\\}\\) and\na probability estimate \\(p = \\operatorname{Pr}(y = 1)\\), the log\nloss is: Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "y_true": {
                                        "type": "array",
                                        "description": "array-like or label indicator matrix. Ground truth (correct) labels for n_samples samples.\n"
                                    },
                                    "y_pred": {
                                        "type": "float",
                                        "description": "array-like of float, shape = (n_samples, n_classes) or (n_samples,). Predicted probabilities, as returned by a classifier\u2019s\npredict_proba method. If y_pred.shape = (n_samples,)\nthe probabilities provided are assumed to be that of the\npositive class. The labels in y_pred are assumed to be\nordered alphabetically, as done by\nLabelBinarizer.\ny_pred values are clipped to [eps, 1-eps] where eps is the machine\nprecision for y_pred\u2019s dtype.\n"
                                    },
                                    "normalize": {
                                        "type": "boolean",
                                        "description": "bool, default=True. If true, return the mean loss per sample.\nOtherwise, return the sum of the per-sample losses.\n"
                                    },
                                    "sample_weight": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Sample weights.\n"
                                    },
                                    "labels": {
                                        "type": "array",
                                        "description": "array-like, default=None. If not provided, labels will be inferred from y_true. If labels\nis None and y_pred has shape (n_samples,) the labels are\nassumed to be binary and are inferred from y_true.\n\nAdded in version 0.18.\n\n"
                                    }
                                },
                                "required": [
                                    "y_true",
                                    "y_pred"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "multilabel_confusion_matrix",
                        "func_desc": "Compute a confusion matrix for each class or sample.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.multilabel_confusion_matrix.html#sklearn.metrics.multilabel_confusion_matrix",
                        "function_definitions": {
                            "function_name": "multilabel_confusion_matrix",
                            "full_function": "sklearn.metrics.multilabel_confusion_matrix(y_true, y_pred, *, sample_weight=None, labels=None, samplewise=False)",
                            "function_text": "Compute a confusion matrix for each class or sample. Added in version 0.21. Compute class-wise (default) or sample-wise (samplewise=True) multilabel\nconfusion matrix to evaluate the accuracy of a classification, and output\nconfusion matrices for each class or sample. In multilabel confusion matrix \\(MCM\\), the count of true negatives\nis \\(MCM_{:,0,0}\\), false negatives is \\(MCM_{:,1,0}\\),\ntrue positives is \\(MCM_{:,1,1}\\) and false positives is\n\\(MCM_{:,0,1}\\). Multiclass data will be treated as if binarized under a one-vs-rest\ntransformation. Returned confusion matrices will be in the order of\nsorted unique labels in the union of (y_true, y_pred). Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/model_evaluation.html#multilabel-confusion-matrix",
                            "parameter_names_desc": [
                                {
                                    "param_name": "y_true",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_outputs) or             (n_samples,)",
                                    "param_desc": "Ground truth (correct) target values.\n"
                                },
                                {
                                    "param_name": "y_pred",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_outputs) or             (n_samples,)",
                                    "param_desc": "Estimated targets as returned by a classifier.\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Sample weights.\n"
                                },
                                {
                                    "param_name": "labels",
                                    "param_type": "array-like of shape (n_classes,), default=None",
                                    "param_desc": "A list of classes or column indices to select some (or to force\ninclusion of classes absent from the data).\n"
                                },
                                {
                                    "param_name": "samplewise",
                                    "param_type": "bool, default=False",
                                    "param_desc": "In the multilabel case, this calculates a confusion matrix per sample.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "multilabel_confusion_matrix",
                            "descriptions": "Compute a confusion matrix for each class or sample. Added in version 0.21. Compute class-wise (default) or sample-wise (samplewise=True) multilabel\nconfusion matrix to evaluate the accuracy of a classification, and output\nconfusion matrices for each class or sample. In multilabel confusion matrix \\(MCM\\), the count of true negatives\nis \\(MCM_{:,0,0}\\), false negatives is \\(MCM_{:,1,0}\\),\ntrue positives is \\(MCM_{:,1,1}\\) and false positives is\n\\(MCM_{:,0,1}\\). Multiclass data will be treated as if binarized under a one-vs-rest\ntransformation. Returned confusion matrices will be in the order of\nsorted unique labels in the union of (y_true, y_pred). Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "y_true": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_outputs) or             (n_samples,). Ground truth (correct) target values.\n"
                                    },
                                    "y_pred": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_outputs) or             (n_samples,). Estimated targets as returned by a classifier.\n"
                                    },
                                    "sample_weight": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Sample weights.\n"
                                    },
                                    "labels": {
                                        "type": "array",
                                        "description": "array-like of shape (n_classes,), default=None. A list of classes or column indices to select some (or to force\ninclusion of classes absent from the data).\n"
                                    },
                                    "samplewise": {
                                        "type": "boolean",
                                        "description": "bool, default=False. In the multilabel case, this calculates a confusion matrix per sample.\n"
                                    }
                                },
                                "required": [
                                    "y_true",
                                    "y_pred"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "precision_recall_curve",
                        "func_desc": "Compute precision-recall pairs for different probability thresholds.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.precision_recall_curve.html#sklearn.metrics.precision_recall_curve",
                        "function_definitions": {
                            "function_name": "precision_recall_curve",
                            "full_function": "sklearn.metrics.precision_recall_curve(y_true, y_score=None, *, pos_label=None, sample_weight=None, drop_intermediate=False, probas_pred='deprecated')",
                            "function_text": "Compute precision-recall pairs for different probability thresholds. Note: this implementation is restricted to the binary classification task. The precision is the ratio tp / (tp + fp) where tp is the number of\ntrue positives and fp the number of false positives. The precision is\nintuitively the ability of the classifier not to label as positive a sample\nthat is negative. The recall is the ratio tp / (tp + fn) where tp is the number of\ntrue positives and fn the number of false negatives. The recall is\nintuitively the ability of the classifier to find all the positive samples. The last precision and recall values are 1. and 0. respectively and do not\nhave a corresponding threshold. This ensures that the graph starts on the\ny axis. The first precision and recall values are precision=class balance and recall=1.0\nwhich corresponds to a classifier that always predicts the positive class. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/model_evaluation.html#precision-recall-f-measure-metrics",
                            "parameter_names_desc": [
                                {
                                    "param_name": "y_true",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "True binary labels. If labels are not either {-1, 1} or {0, 1}, then\npos_label should be explicitly given.\n"
                                },
                                {
                                    "param_name": "y_score",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "Target scores, can either be probability estimates of the positive\nclass, or non-thresholded measure of decisions (as returned by\ndecision_function on some classifiers).\n"
                                },
                                {
                                    "param_name": "pos_label",
                                    "param_type": "int, float, bool or str, default=None",
                                    "param_desc": "The label of the positive class.\nWhen pos_label=None, if y_true is in {-1, 1} or {0, 1},\npos_label is set to 1, otherwise an error will be raised.\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Sample weights.\n"
                                },
                                {
                                    "param_name": "drop_intermediate",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Whether to drop some suboptimal thresholds which would not appear\non a plotted precision-recall curve. This is useful in order to create\nlighter precision-recall curves.\n\nAdded in version 1.3.\n\n"
                                },
                                {
                                    "param_name": "probas_pred",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "Target scores, can either be probability estimates of the positive\nclass, or non-thresholded measure of decisions (as returned by\ndecision_function on some classifiers).\n\nDeprecated since version 1.5: probas_pred is deprecated and will be removed in 1.7. Use\ny_score instead.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "precision_recall_curve",
                            "descriptions": "Compute precision-recall pairs for different probability thresholds. Note: this implementation is restricted to the binary classification task. The precision is the ratio tp / (tp + fp) where tp is the number of\ntrue positives and fp the number of false positives. The precision is\nintuitively the ability of the classifier not to label as positive a sample\nthat is negative. The recall is the ratio tp / (tp + fn) where tp is the number of\ntrue positives and fn the number of false negatives. The recall is\nintuitively the ability of the classifier to find all the positive samples. The last precision and recall values are 1. and 0. respectively and do not\nhave a corresponding threshold. This ensures that the graph starts on the\ny axis. The first precision and recall values are precision=class balance and recall=1.0\nwhich corresponds to a classifier that always predicts the positive class. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "y_true": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). True binary labels. If labels are not either {-1, 1} or {0, 1}, then\npos_label should be explicitly given.\n"
                                    },
                                    "y_score": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). Target scores, can either be probability estimates of the positive\nclass, or non-thresholded measure of decisions (as returned by\ndecision_function on some classifiers).\n"
                                    },
                                    "pos_label": {
                                        "type": "integer",
                                        "description": "int, float, bool or str, default=None. The label of the positive class.\nWhen pos_label=None, if y_true is in {-1, 1} or {0, 1},\npos_label is set to 1, otherwise an error will be raised.\n"
                                    },
                                    "sample_weight": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Sample weights.\n"
                                    },
                                    "drop_intermediate": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Whether to drop some suboptimal thresholds which would not appear\non a plotted precision-recall curve. This is useful in order to create\nlighter precision-recall curves.\n\nAdded in version 1.3.\n\n"
                                    },
                                    "probas_pred": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). Target scores, can either be probability estimates of the positive\nclass, or non-thresholded measure of decisions (as returned by\ndecision_function on some classifiers).\n\nDeprecated since version 1.5: probas_pred is deprecated and will be removed in 1.7. Use\ny_score instead.\n\n"
                                    }
                                },
                                "required": [
                                    "y_true",
                                    "y_score=None"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "precision_score",
                        "func_desc": "Compute the precision.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.precision_score.html#sklearn.metrics.precision_score",
                        "function_definitions": {
                            "function_name": "precision_score",
                            "full_function": "sklearn.metrics.precision_score(y_true, y_pred, *, labels=None, pos_label=1, average='binary', sample_weight=None, zero_division='warn')",
                            "function_text": "Compute the precision. The precision is the ratio tp / (tp + fp) where tp is the number of\ntrue positives and fp the number of false positives. The precision is\nintuitively the ability of the classifier not to label as positive a sample\nthat is negative. The best value is 1 and the worst value is 0. Support beyond term:binary targets is achieved by treating multiclass\nand multilabel data as a collection of binary problems, one for each\nlabel. For the binary case, setting average='binary' will return\nprecision for pos_label. If average is not 'binary', pos_label is ignored\nand precision for both classes are computed, then averaged or both returned (when\naverage=None). Similarly, for multiclass and multilabel targets,\nprecision for all labels are either returned or averaged depending on the\naverage parameter. Use labels specify the set of labels to calculate precision\nfor. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/glossary.html#term-multiclass",
                            "parameter_names_desc": [
                                {
                                    "param_name": "y_true",
                                    "param_type": "1d array-like, or label indicator array / sparse matrix",
                                    "param_desc": "Ground truth (correct) target values.\n"
                                },
                                {
                                    "param_name": "y_pred",
                                    "param_type": "1d array-like, or label indicator array / sparse matrix",
                                    "param_desc": "Estimated targets as returned by a classifier.\n"
                                },
                                {
                                    "param_name": "labels",
                                    "param_type": "array-like, default=None",
                                    "param_desc": "The set of labels to include when average != 'binary', and their\norder if average is None. Labels present in the data can be\nexcluded, for example in multiclass classification to exclude a \u201cnegative\nclass\u201d. Labels not present in the data can be included and will be\n\u201cassigned\u201d 0 samples. For multilabel targets, labels are column indices.\nBy default, all labels in y_true and y_pred are used in sorted order.\n\nChanged in version 0.17: Parameter labels improved for multiclass problem.\n\n"
                                },
                                {
                                    "param_name": "pos_label",
                                    "param_type": "int, float, bool or str, default=1",
                                    "param_desc": "The class to report if average='binary' and the data is binary,\notherwise this parameter is ignored.\nFor multiclass or multilabel targets, set labels=[pos_label] and\naverage != 'binary' to report metrics for one label only.\n"
                                },
                                {
                                    "param_name": "average",
                                    "param_type": "{\u2018micro\u2019, \u2018macro\u2019, \u2018samples\u2019, \u2018weighted\u2019, \u2018binary\u2019} or None,             default=\u2019binary\u2019",
                                    "param_desc": "This parameter is required for multiclass/multilabel targets.\nIf None, the scores for each class are returned. Otherwise, this\ndetermines the type of averaging performed on the data:\n\n'binary':Only report results for the class specified by pos_label.\nThis is applicable only if targets (y_{true,pred}) are binary.\n\n'micro':Calculate metrics globally by counting the total true positives,\nfalse negatives and false positives.\n\n'macro':Calculate metrics for each label, and find their unweighted\nmean.  This does not take label imbalance into account.\n\n'weighted':Calculate metrics for each label, and find their average weighted\nby support (the number of true instances for each label). This\nalters \u2018macro\u2019 to account for label imbalance; it can result in an\nF-score that is not between precision and recall.\n\n'samples':Calculate metrics for each instance, and find their average (only\nmeaningful for multilabel classification where this differs from\naccuracy_score).\n\n\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Sample weights.\n"
                                },
                                {
                                    "param_name": "zero_division",
                                    "param_type": "{\u201cwarn\u201d, 0.0, 1.0, np.nan}, default=\u201dwarn\u201d",
                                    "param_desc": "Sets the value to return when there is a zero division.\nNotes:\n- If set to \u201cwarn\u201d, this acts like 0, but a warning is also raised.\n- If set to np.nan, such values will be excluded from the average.\n\nAdded in version 1.3: np.nan option was added.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "precision_score",
                            "descriptions": "Compute the precision. The precision is the ratio tp / (tp + fp) where tp is the number of\ntrue positives and fp the number of false positives. The precision is\nintuitively the ability of the classifier not to label as positive a sample\nthat is negative. The best value is 1 and the worst value is 0. Support beyond term:binary targets is achieved by treating multiclass\nand multilabel data as a collection of binary problems, one for each\nlabel. For the binary case, setting average='binary' will return\nprecision for pos_label. If average is not 'binary', pos_label is ignored\nand precision for both classes are computed, then averaged or both returned (when\naverage=None). Similarly, for multiclass and multilabel targets,\nprecision for all labels are either returned or averaged depending on the\naverage parameter. Use labels specify the set of labels to calculate precision\nfor. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "y_true": {
                                        "type": "array",
                                        "description": "1d array-like, or label indicator array / sparse matrix. Ground truth (correct) target values.\n"
                                    },
                                    "y_pred": {
                                        "type": "array",
                                        "description": "1d array-like, or label indicator array / sparse matrix. Estimated targets as returned by a classifier.\n"
                                    },
                                    "labels": {
                                        "type": "array",
                                        "description": "array-like, default=None. The set of labels to include when average != 'binary', and their\norder if average is None. Labels present in the data can be\nexcluded, for example in multiclass classification to exclude a \u201cnegative\nclass\u201d. Labels not present in the data can be included and will be\n\u201cassigned\u201d 0 samples. For multilabel targets, labels are column indices.\nBy default, all labels in y_true and y_pred are used in sorted order.\n\nChanged in version 0.17: Parameter labels improved for multiclass problem.\n\n"
                                    },
                                    "pos_label": {
                                        "type": "integer",
                                        "description": "int, float, bool or str, default=1. The class to report if average='binary' and the data is binary,\notherwise this parameter is ignored.\nFor multiclass or multilabel targets, set labels=[pos_label] and\naverage != 'binary' to report metrics for one label only.\n"
                                    },
                                    "average": {
                                        "type": "string",
                                        "enum": [
                                            "micro",
                                            " macro",
                                            " samples",
                                            " weighted",
                                            " binary"
                                        ],
                                        "description": "{\u2018micro\u2019, \u2018macro\u2019, \u2018samples\u2019, \u2018weighted\u2019, \u2018binary\u2019} or None,             default=\u2019binary\u2019. This parameter is required for multiclass/multilabel targets.\nIf None, the scores for each class are returned. Otherwise, this\ndetermines the type of averaging performed on the data:\n\n'binary':Only report results for the class specified by pos_label.\nThis is applicable only if targets (y_{true,pred}) are binary.\n\n'micro':Calculate metrics globally by counting the total true positives,\nfalse negatives and false positives.\n\n'macro':Calculate metrics for each label, and find their unweighted\nmean.  This does not take label imbalance into account.\n\n'weighted':Calculate metrics for each label, and find their average weighted\nby support (the number of true instances for each label). This\nalters \u2018macro\u2019 to account for label imbalance; it can result in an\nF-score that is not between precision and recall.\n\n'samples':Calculate metrics for each instance, and find their average (only\nmeaningful for multilabel classification where this differs from\naccuracy_score).\n\n\n"
                                    },
                                    "sample_weight": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Sample weights.\n"
                                    },
                                    "zero_division": {
                                        "type": "{\u201cwarn\u201d, 0.0, 1.0, np.nan}, default=\u201dwarn\u201d",
                                        "description": "{\u201cwarn\u201d, 0.0, 1.0, np.nan}, default=\u201dwarn\u201d. Sets the value to return when there is a zero division.\nNotes:\n- If set to \u201cwarn\u201d, this acts like 0, but a warning is also raised.\n- If set to np.nan, such values will be excluded from the average.\n\nAdded in version 1.3: np.nan option was added.\n\n"
                                    }
                                },
                                "required": [
                                    "y_true",
                                    "y_pred"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "roc_auc_score",
                        "func_desc": "Compute Area Under the Receiver Operating Characteristic Curve (ROC AUC)     from prediction scores.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.roc_auc_score.html#sklearn.metrics.roc_auc_score",
                        "function_definitions": {
                            "function_name": "roc_auc_score",
                            "full_function": "sklearn.metrics.roc_auc_score(y_true, y_score, *, average='macro', sample_weight=None, max_fpr=None, multi_class='raise', labels=None)",
                            "function_text": "Compute Area Under the Receiver Operating Characteristic Curve (ROC AUC)     from prediction scores. Note: this implementation can be used with binary, multiclass and\nmultilabel classification, but some restrictions apply (see Parameters). Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/model_evaluation.html#roc-metrics",
                            "parameter_names_desc": [
                                {
                                    "param_name": "y_true",
                                    "param_type": "array-like of shape (n_samples,) or (n_samples, n_classes)",
                                    "param_desc": "True labels or binary label indicators. The binary and multiclass cases\nexpect labels with shape (n_samples,) while the multilabel case expects\nbinary label indicators with shape (n_samples, n_classes).\n"
                                },
                                {
                                    "param_name": "y_score",
                                    "param_type": "array-like of shape (n_samples,) or (n_samples, n_classes)",
                                    "param_desc": "Target scores.\n\nIn the binary case, it corresponds to an array of shape\n(n_samples,). Both probability estimates and non-thresholded\ndecision values can be provided. The probability estimates correspond\nto the probability of the class with the greater label,\ni.e. estimator.classes_[1] and thus\nestimator.predict_proba(X, y)[:, 1]. The decision values\ncorresponds to the output of estimator.decision_function(X, y).\nSee more information in the User guide;\nIn the multiclass case, it corresponds to an array of shape\n(n_samples, n_classes) of probability estimates provided by the\npredict_proba method. The probability estimates must\nsum to 1 across the possible classes. In addition, the order of the\nclass scores must correspond to the order of labels,\nif provided, or else to the numerical or lexicographical order of\nthe labels in y_true. See more information in the\nUser guide;\nIn the multilabel case, it corresponds to an array of shape\n(n_samples, n_classes). Probability estimates are provided by the\npredict_proba method and the non-thresholded decision values by\nthe decision_function method. The probability estimates correspond\nto the probability of the class with the greater label for each\noutput of the classifier. See more information in the\nUser guide.\n\n"
                                },
                                {
                                    "param_name": "average",
                                    "param_type": "{\u2018micro\u2019, \u2018macro\u2019, \u2018samples\u2019, \u2018weighted\u2019} or None,             default=\u2019macro\u2019",
                                    "param_desc": "If None, the scores for each class are returned.\nOtherwise, this determines the type of averaging performed on the data.\nNote: multiclass ROC AUC currently only handles the \u2018macro\u2019 and\n\u2018weighted\u2019 averages. For multiclass targets, average=None is only\nimplemented for multi_class='ovr' and average='micro' is only\nimplemented for multi_class='ovr'.\n\n'micro':Calculate metrics globally by considering each element of the label\nindicator matrix as a label.\n\n'macro':Calculate metrics for each label, and find their unweighted\nmean.  This does not take label imbalance into account.\n\n'weighted':Calculate metrics for each label, and find their average, weighted\nby support (the number of true instances for each label).\n\n'samples':Calculate metrics for each instance, and find their average.\n\n\nWill be ignored when y_true is binary.\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Sample weights.\n"
                                },
                                {
                                    "param_name": "max_fpr",
                                    "param_type": "float > 0 and <= 1, default=None",
                                    "param_desc": "If not None, the standardized partial AUC [2] over the range\n[0, max_fpr] is returned. For the multiclass case, max_fpr,\nshould be either equal to None or 1.0 as AUC ROC partial\ncomputation currently is not supported for multiclass.\n"
                                },
                                {
                                    "param_name": "multi_class",
                                    "param_type": "{\u2018raise\u2019, \u2018ovr\u2019, \u2018ovo\u2019}, default=\u2019raise\u2019",
                                    "param_desc": "Only used for multiclass targets. Determines the type of configuration\nto use. The default value raises an error, so either\n'ovr' or 'ovo' must be passed explicitly.\n\n'ovr':Stands for One-vs-rest. Computes the AUC of each class\nagainst the rest [3] [4]. This\ntreats the multiclass case in the same way as the multilabel case.\nSensitive to class imbalance even when average == 'macro',\nbecause class imbalance affects the composition of each of the\n\u2018rest\u2019 groupings.\n\n'ovo':Stands for One-vs-one. Computes the average AUC of all\npossible pairwise combinations of classes [5].\nInsensitive to class imbalance when\naverage == 'macro'.\n\n\n"
                                },
                                {
                                    "param_name": "labels",
                                    "param_type": "array-like of shape (n_classes,), default=None",
                                    "param_desc": "Only used for multiclass targets. List of labels that index the\nclasses in y_score. If None, the numerical or lexicographical\norder of the labels in y_true is used.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "roc_auc_score",
                            "descriptions": "Compute Area Under the Receiver Operating Characteristic Curve (ROC AUC)     from prediction scores. Note: this implementation can be used with binary, multiclass and\nmultilabel classification, but some restrictions apply (see Parameters). Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "y_true": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,) or (n_samples, n_classes). True labels or binary label indicators. The binary and multiclass cases\nexpect labels with shape (n_samples,) while the multilabel case expects\nbinary label indicators with shape (n_samples, n_classes).\n"
                                    },
                                    "y_score": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,) or (n_samples, n_classes). Target scores.\n\nIn the binary case, it corresponds to an array of shape\n(n_samples,). Both probability estimates and non-thresholded\ndecision values can be provided. The probability estimates correspond\nto the probability of the class with the greater label,\ni.e. estimator.classes_[1] and thus\nestimator.predict_proba(X, y)[:, 1]. The decision values\ncorresponds to the output of estimator.decision_function(X, y).\nSee more information in the User guide;\nIn the multiclass case, it corresponds to an array of shape\n(n_samples, n_classes) of probability estimates provided by the\npredict_proba method. The probability estimates must\nsum to 1 across the possible classes. In addition, the order of the\nclass scores must correspond to the order of labels,\nif provided, or else to the numerical or lexicographical order of\nthe labels in y_true. See more information in the\nUser guide;\nIn the multilabel case, it corresponds to an array of shape\n(n_samples, n_classes). Probability estimates are provided by the\npredict_proba method and the non-thresholded decision values by\nthe decision_function method. The probability estimates correspond\nto the probability of the class with the greater label for each\noutput of the classifier. See more information in the\nUser guide.\n\n"
                                    },
                                    "average": {
                                        "type": "string",
                                        "enum": [
                                            "micro",
                                            " macro",
                                            " samples",
                                            " weighted"
                                        ],
                                        "description": "{\u2018micro\u2019, \u2018macro\u2019, \u2018samples\u2019, \u2018weighted\u2019} or None,             default=\u2019macro\u2019. If None, the scores for each class are returned.\nOtherwise, this determines the type of averaging performed on the data.\nNote: multiclass ROC AUC currently only handles the \u2018macro\u2019 and\n\u2018weighted\u2019 averages. For multiclass targets, average=None is only\nimplemented for multi_class='ovr' and average='micro' is only\nimplemented for multi_class='ovr'.\n\n'micro':Calculate metrics globally by considering each element of the label\nindicator matrix as a label.\n\n'macro':Calculate metrics for each label, and find their unweighted\nmean.  This does not take label imbalance into account.\n\n'weighted':Calculate metrics for each label, and find their average, weighted\nby support (the number of true instances for each label).\n\n'samples':Calculate metrics for each instance, and find their average.\n\n\nWill be ignored when y_true is binary.\n"
                                    },
                                    "sample_weight": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Sample weights.\n"
                                    },
                                    "max_fpr": {
                                        "type": "float",
                                        "description": "float > 0 and <= 1, default=None. If not None, the standardized partial AUC [2] over the range\n[0, max_fpr] is returned. For the multiclass case, max_fpr,\nshould be either equal to None or 1.0 as AUC ROC partial\ncomputation currently is not supported for multiclass.\n"
                                    },
                                    "multi_class": {
                                        "type": "string",
                                        "enum": [
                                            "raise",
                                            " ovr",
                                            " ovo"
                                        ],
                                        "description": "{\u2018raise\u2019, \u2018ovr\u2019, \u2018ovo\u2019}, default=\u2019raise\u2019. Only used for multiclass targets. Determines the type of configuration\nto use. The default value raises an error, so either\n'ovr' or 'ovo' must be passed explicitly.\n\n'ovr':Stands for One-vs-rest. Computes the AUC of each class\nagainst the rest [3] [4]. This\ntreats the multiclass case in the same way as the multilabel case.\nSensitive to class imbalance even when average == 'macro',\nbecause class imbalance affects the composition of each of the\n\u2018rest\u2019 groupings.\n\n'ovo':Stands for One-vs-one. Computes the average AUC of all\npossible pairwise combinations of classes [5].\nInsensitive to class imbalance when\naverage == 'macro'.\n\n\n"
                                    },
                                    "labels": {
                                        "type": "array",
                                        "description": "array-like of shape (n_classes,), default=None. Only used for multiclass targets. List of labels that index the\nclasses in y_score. If None, the numerical or lexicographical\norder of the labels in y_true is used.\n"
                                    }
                                },
                                "required": [
                                    "y_true",
                                    "y_score"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "top_k_accuracy_score",
                        "func_desc": "Top-k Accuracy classification score.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.top_k_accuracy_score.html#sklearn.metrics.top_k_accuracy_score",
                        "function_definitions": {
                            "function_name": "top_k_accuracy_score",
                            "full_function": "sklearn.metrics.top_k_accuracy_score(y_true, y_score, *, k=2, normalize=True, sample_weight=None, labels=None)",
                            "function_text": "Top-k Accuracy classification score. This metric computes the number of times where the correct label is among\nthe top k labels predicted (ranked by predicted scores). Note that the\nmultilabel case isn\u2019t covered here. Read more in the User Guide",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/model_evaluation.html#top-k-accuracy-score",
                            "parameter_names_desc": [
                                {
                                    "param_name": "y_true",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "True labels.\n"
                                },
                                {
                                    "param_name": "y_score",
                                    "param_type": "array-like of shape (n_samples,) or (n_samples, n_classes)",
                                    "param_desc": "Target scores. These can be either probability estimates or\nnon-thresholded decision values (as returned by\ndecision_function on some classifiers).\nThe binary case expects scores with shape (n_samples,) while the\nmulticlass case expects scores with shape (n_samples, n_classes).\nIn the multiclass case, the order of the class scores must\ncorrespond to the order of labels, if provided, or else to\nthe numerical or lexicographical order of the labels in y_true.\nIf y_true does not contain all the labels, labels must be\nprovided.\n"
                                },
                                {
                                    "param_name": "k",
                                    "param_type": "int, default=2",
                                    "param_desc": "Number of most likely outcomes considered to find the correct label.\n"
                                },
                                {
                                    "param_name": "normalize",
                                    "param_type": "bool, default=True",
                                    "param_desc": "If True, return the fraction of correctly classified samples.\nOtherwise, return the number of correctly classified samples.\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Sample weights. If None, all samples are given the same weight.\n"
                                },
                                {
                                    "param_name": "labels",
                                    "param_type": "array-like of shape (n_classes,), default=None",
                                    "param_desc": "Multiclass only. List of labels that index the classes in y_score.\nIf None, the numerical or lexicographical order of the labels in\ny_true is used. If y_true does not contain all the labels,\nlabels must be provided.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "top_k_accuracy_score",
                            "descriptions": "Top-k Accuracy classification score. This metric computes the number of times where the correct label is among\nthe top k labels predicted (ranked by predicted scores). Note that the\nmultilabel case isn\u2019t covered here. Read more in the User Guide",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "y_true": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). True labels.\n"
                                    },
                                    "y_score": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,) or (n_samples, n_classes). Target scores. These can be either probability estimates or\nnon-thresholded decision values (as returned by\ndecision_function on some classifiers).\nThe binary case expects scores with shape (n_samples,) while the\nmulticlass case expects scores with shape (n_samples, n_classes).\nIn the multiclass case, the order of the class scores must\ncorrespond to the order of labels, if provided, or else to\nthe numerical or lexicographical order of the labels in y_true.\nIf y_true does not contain all the labels, labels must be\nprovided.\n"
                                    },
                                    "k": {
                                        "type": "integer",
                                        "description": "int, default=2. Number of most likely outcomes considered to find the correct label.\n"
                                    },
                                    "normalize": {
                                        "type": "boolean",
                                        "description": "bool, default=True. If True, return the fraction of correctly classified samples.\nOtherwise, return the number of correctly classified samples.\n"
                                    },
                                    "sample_weight": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Sample weights. If None, all samples are given the same weight.\n"
                                    },
                                    "labels": {
                                        "type": "array",
                                        "description": "array-like of shape (n_classes,), default=None. Multiclass only. List of labels that index the classes in y_score.\nIf None, the numerical or lexicographical order of the labels in\ny_true is used. If y_true does not contain all the labels,\nlabels must be provided.\n"
                                    }
                                },
                                "required": [
                                    "y_true",
                                    "y_score"
                                ]
                            }
                        }
                    }
                ]
            },
            {
                "Regression metrics": [
                    {
                        "func_name": "d2_absolute_error_score",
                        "func_desc": "\\(D^2\\) regression score function, fraction of absolute error explained.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.d2_absolute_error_score.html#sklearn.metrics.d2_absolute_error_score",
                        "function_definitions": {
                            "function_name": "d2_absolute_error_score",
                            "full_function": "sklearn.metrics.d2_absolute_error_score(y_true, y_pred, *, sample_weight=None, multioutput='uniform_average')",
                            "function_text": "\\(D^2\\) regression score function, fraction of absolute error explained. Best possible score is 1.0 and it can be negative (because the model can be\narbitrarily worse). A model that always uses the empirical median of y_true\nas constant prediction, disregarding the input features,\ngets a \\(D^2\\) score of 0.0. Read more in the User Guide. Added in version 1.1.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/model_evaluation.html#d2-score",
                            "parameter_names_desc": [
                                {
                                    "param_name": "y_true",
                                    "param_type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                                    "param_desc": "Ground truth (correct) target values.\n"
                                },
                                {
                                    "param_name": "y_pred",
                                    "param_type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                                    "param_desc": "Estimated target values.\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Sample weights.\n"
                                },
                                {
                                    "param_name": "multioutput",
                                    "param_type": "{\u2018raw_values\u2019, \u2018uniform_average\u2019} or array-like of shape             (n_outputs,), default=\u2019uniform_average\u2019",
                                    "param_desc": "Defines aggregating of multiple output values.\nArray-like value defines weights used to average scores.\n\n\u2018raw_values\u2019 :Returns a full set of errors in case of multioutput input.\n\n\u2018uniform_average\u2019 :Scores of all outputs are averaged with uniform weight.\n\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "d2_absolute_error_score",
                            "descriptions": "\\(D^2\\) regression score function, fraction of absolute error explained. Best possible score is 1.0 and it can be negative (because the model can be\narbitrarily worse). A model that always uses the empirical median of y_true\nas constant prediction, disregarding the input features,\ngets a \\(D^2\\) score of 0.0. Read more in the User Guide. Added in version 1.1.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "y_true": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,) or (n_samples, n_outputs). Ground truth (correct) target values.\n"
                                    },
                                    "y_pred": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,) or (n_samples, n_outputs). Estimated target values.\n"
                                    },
                                    "sample_weight": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Sample weights.\n"
                                    },
                                    "multioutput": {
                                        "type": "array",
                                        "description": "{\u2018raw_values\u2019, \u2018uniform_average\u2019} or array-like of shape             (n_outputs,), default=\u2019uniform_average\u2019. Defines aggregating of multiple output values.\nArray-like value defines weights used to average scores.\n\n\u2018raw_values\u2019 :Returns a full set of errors in case of multioutput input.\n\n\u2018uniform_average\u2019 :Scores of all outputs are averaged with uniform weight.\n\n\n"
                                    }
                                },
                                "required": [
                                    "y_true",
                                    "y_pred"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "d2_tweedie_score",
                        "func_desc": "\\(D^2\\) regression score function, fraction of Tweedie deviance explained.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.d2_tweedie_score.html#sklearn.metrics.d2_tweedie_score",
                        "function_definitions": {
                            "function_name": "d2_tweedie_score",
                            "full_function": "sklearn.metrics.d2_tweedie_score(y_true, y_pred, *, sample_weight=None, power=0)",
                            "function_text": "\\(D^2\\) regression score function, fraction of Tweedie deviance explained. Best possible score is 1.0 and it can be negative (because the model can be\narbitrarily worse). A model that always uses the empirical mean of y_true as\nconstant prediction, disregarding the input features, gets a D^2 score of 0.0. Read more in the User Guide. Added in version 1.0.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/model_evaluation.html#d2-score",
                            "parameter_names_desc": [
                                {
                                    "param_name": "y_true",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "Ground truth (correct) target values.\n"
                                },
                                {
                                    "param_name": "y_pred",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "Estimated target values.\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Sample weights.\n"
                                },
                                {
                                    "param_name": "power",
                                    "param_type": "float, default=0",
                                    "param_desc": "Tweedie power parameter. Either power <= 0 or power >= 1.\nThe higher p the less weight is given to extreme\ndeviations between true and predicted targets.\n\npower < 0: Extreme stable distribution. Requires: y_pred > 0.\npower = 0 : Normal distribution, output corresponds to r2_score.\ny_true and y_pred can be any real numbers.\npower = 1 : Poisson distribution. Requires: y_true >= 0 and\ny_pred > 0.\n1 < p < 2 : Compound Poisson distribution. Requires: y_true >= 0\nand y_pred > 0.\npower = 2 : Gamma distribution. Requires: y_true > 0 and y_pred > 0.\npower = 3 : Inverse Gaussian distribution. Requires: y_true > 0\nand y_pred > 0.\notherwise : Positive stable distribution. Requires: y_true > 0\nand y_pred > 0.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "d2_tweedie_score",
                            "descriptions": "\\(D^2\\) regression score function, fraction of Tweedie deviance explained. Best possible score is 1.0 and it can be negative (because the model can be\narbitrarily worse). A model that always uses the empirical mean of y_true as\nconstant prediction, disregarding the input features, gets a D^2 score of 0.0. Read more in the User Guide. Added in version 1.0.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "y_true": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). Ground truth (correct) target values.\n"
                                    },
                                    "y_pred": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). Estimated target values.\n"
                                    },
                                    "sample_weight": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Sample weights.\n"
                                    },
                                    "power": {
                                        "type": "float",
                                        "description": "float, default=0. Tweedie power parameter. Either power <= 0 or power >= 1.\nThe higher p the less weight is given to extreme\ndeviations between true and predicted targets.\n\npower < 0: Extreme stable distribution. Requires: y_pred > 0.\npower = 0 : Normal distribution, output corresponds to r2_score.\ny_true and y_pred can be any real numbers.\npower = 1 : Poisson distribution. Requires: y_true >= 0 and\ny_pred > 0.\n1 < p < 2 : Compound Poisson distribution. Requires: y_true >= 0\nand y_pred > 0.\npower = 2 : Gamma distribution. Requires: y_true > 0 and y_pred > 0.\npower = 3 : Inverse Gaussian distribution. Requires: y_true > 0\nand y_pred > 0.\notherwise : Positive stable distribution. Requires: y_true > 0\nand y_pred > 0.\n\n"
                                    }
                                },
                                "required": [
                                    "y_true",
                                    "y_pred"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "max_error",
                        "func_desc": "The max_error metric calculates the maximum residual error.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.max_error.html#sklearn.metrics.max_error",
                        "function_definitions": {
                            "function_name": "max_error",
                            "full_function": "sklearn.metrics.max_error(y_true, y_pred)",
                            "function_text": "The max_error metric calculates the maximum residual error. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/model_evaluation.html#max-error",
                            "parameter_names_desc": [
                                {
                                    "param_name": "y_true",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "Ground truth (correct) target values.\n"
                                },
                                {
                                    "param_name": "y_pred",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "Estimated target values.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "max_error",
                            "descriptions": "The max_error metric calculates the maximum residual error. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "y_true": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). Ground truth (correct) target values.\n"
                                    },
                                    "y_pred": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). Estimated target values.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "mean_absolute_percentage_error",
                        "func_desc": "Mean absolute percentage error (MAPE) regression loss.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.mean_absolute_percentage_error.html#sklearn.metrics.mean_absolute_percentage_error",
                        "function_definitions": {
                            "function_name": "mean_absolute_percentage_error",
                            "full_function": "sklearn.metrics.mean_absolute_percentage_error(y_true, y_pred, *, sample_weight=None, multioutput='uniform_average')",
                            "function_text": "Mean absolute percentage error (MAPE) regression loss. Note here that the output is not a percentage in the range [0, 100]\nand a value of 100 does not mean 100% but 1e2. Furthermore, the output\ncan be arbitrarily high when y_true is small (which is specific to the\nmetric) or when abs(y_true - y_pred) is large (which is common for most\nregression metrics). Read more in the\nUser Guide. Added in version 0.24.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/model_evaluation.html#mean-absolute-percentage-error",
                            "parameter_names_desc": [
                                {
                                    "param_name": "y_true",
                                    "param_type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                                    "param_desc": "Ground truth (correct) target values.\n"
                                },
                                {
                                    "param_name": "y_pred",
                                    "param_type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                                    "param_desc": "Estimated target values.\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Sample weights.\n"
                                },
                                {
                                    "param_name": "multioutput",
                                    "param_type": "{\u2018raw_values\u2019, \u2018uniform_average\u2019} or array-like",
                                    "param_desc": "Defines aggregating of multiple output values.\nArray-like value defines weights used to average errors.\nIf input is list then the shape must be (n_outputs,).\n\n\u2018raw_values\u2019 :Returns a full set of errors in case of multioutput input.\n\n\u2018uniform_average\u2019 :Errors of all outputs are averaged with uniform weight.\n\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "mean_absolute_percentage_error",
                            "descriptions": "Mean absolute percentage error (MAPE) regression loss. Note here that the output is not a percentage in the range [0, 100]\nand a value of 100 does not mean 100% but 1e2. Furthermore, the output\ncan be arbitrarily high when y_true is small (which is specific to the\nmetric) or when abs(y_true - y_pred) is large (which is common for most\nregression metrics). Read more in the\nUser Guide. Added in version 0.24.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "y_true": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,) or (n_samples, n_outputs). Ground truth (correct) target values.\n"
                                    },
                                    "y_pred": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,) or (n_samples, n_outputs). Estimated target values.\n"
                                    },
                                    "sample_weight": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Sample weights.\n"
                                    },
                                    "multioutput": {
                                        "type": "array",
                                        "description": "{\u2018raw_values\u2019, \u2018uniform_average\u2019} or array-like. Defines aggregating of multiple output values.\nArray-like value defines weights used to average errors.\nIf input is list then the shape must be (n_outputs,).\n\n\u2018raw_values\u2019 :Returns a full set of errors in case of multioutput input.\n\n\u2018uniform_average\u2019 :Errors of all outputs are averaged with uniform weight.\n\n\n"
                                    }
                                },
                                "required": [
                                    "y_true",
                                    "y_pred"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "mean_pinball_loss",
                        "func_desc": "Pinball loss for quantile regression.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.mean_pinball_loss.html#sklearn.metrics.mean_pinball_loss",
                        "function_definitions": {
                            "function_name": "mean_pinball_loss",
                            "full_function": "sklearn.metrics.mean_pinball_loss(y_true, y_pred, *, sample_weight=None, alpha=0.5, multioutput='uniform_average')",
                            "function_text": "Pinball loss for quantile regression. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/model_evaluation.html#pinball-loss",
                            "parameter_names_desc": [
                                {
                                    "param_name": "y_true",
                                    "param_type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                                    "param_desc": "Ground truth (correct) target values.\n"
                                },
                                {
                                    "param_name": "y_pred",
                                    "param_type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                                    "param_desc": "Estimated target values.\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Sample weights.\n"
                                },
                                {
                                    "param_name": "alpha",
                                    "param_type": "float, slope of the pinball loss, default=0.5,",
                                    "param_desc": "This loss is equivalent to Mean absolute error when alpha=0.5,\nalpha=0.95 is minimized by estimators of the 95th percentile.\n"
                                },
                                {
                                    "param_name": "multioutput",
                                    "param_type": "{\u2018raw_values\u2019, \u2018uniform_average\u2019}  or array-like of shape             (n_outputs,), default=\u2019uniform_average\u2019",
                                    "param_desc": "Defines aggregating of multiple output values.\nArray-like value defines weights used to average errors.\n\n\u2018raw_values\u2019 :Returns a full set of errors in case of multioutput input.\n\n\u2018uniform_average\u2019 :Errors of all outputs are averaged with uniform weight.\n\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "mean_pinball_loss",
                            "descriptions": "Pinball loss for quantile regression. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "y_true": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,) or (n_samples, n_outputs). Ground truth (correct) target values.\n"
                                    },
                                    "y_pred": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,) or (n_samples, n_outputs). Estimated target values.\n"
                                    },
                                    "sample_weight": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Sample weights.\n"
                                    },
                                    "alpha": {
                                        "type": "float",
                                        "description": "float, slope of the pinball loss, default=0.5,. This loss is equivalent to Mean absolute error when alpha=0.5,\nalpha=0.95 is minimized by estimators of the 95th percentile.\n"
                                    },
                                    "multioutput": {
                                        "type": "array",
                                        "description": "{\u2018raw_values\u2019, \u2018uniform_average\u2019}  or array-like of shape             (n_outputs,), default=\u2019uniform_average\u2019. Defines aggregating of multiple output values.\nArray-like value defines weights used to average errors.\n\n\u2018raw_values\u2019 :Returns a full set of errors in case of multioutput input.\n\n\u2018uniform_average\u2019 :Errors of all outputs are averaged with uniform weight.\n\n\n"
                                    }
                                },
                                "required": [
                                    "y_true",
                                    "y_pred"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "mean_squared_error",
                        "func_desc": "Mean squared error regression loss.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.mean_squared_error.html#sklearn.metrics.mean_squared_error",
                        "function_definitions": {
                            "function_name": "mean_squared_error",
                            "full_function": "sklearn.metrics.mean_squared_error(y_true, y_pred, *, sample_weight=None, multioutput='uniform_average', squared='deprecated')",
                            "function_text": "Mean squared error regression loss. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/model_evaluation.html#mean-squared-error",
                            "parameter_names_desc": [
                                {
                                    "param_name": "y_true",
                                    "param_type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                                    "param_desc": "Ground truth (correct) target values.\n"
                                },
                                {
                                    "param_name": "y_pred",
                                    "param_type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                                    "param_desc": "Estimated target values.\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Sample weights.\n"
                                },
                                {
                                    "param_name": "multioutput",
                                    "param_type": "{\u2018raw_values\u2019, \u2018uniform_average\u2019} or array-like of shape             (n_outputs,), default=\u2019uniform_average\u2019",
                                    "param_desc": "Defines aggregating of multiple output values.\nArray-like value defines weights used to average errors.\n\n\u2018raw_values\u2019 :Returns a full set of errors in case of multioutput input.\n\n\u2018uniform_average\u2019 :Errors of all outputs are averaged with uniform weight.\n\n\n"
                                },
                                {
                                    "param_name": "squared",
                                    "param_type": "bool, default=True",
                                    "param_desc": "If True returns MSE value, if False returns RMSE value.\n\nDeprecated since version 1.4: squared is deprecated in 1.4 and will be removed in 1.6.\nUse root_mean_squared_error\ninstead to calculate the root mean squared error.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "mean_squared_error",
                            "descriptions": "Mean squared error regression loss. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "y_true": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,) or (n_samples, n_outputs). Ground truth (correct) target values.\n"
                                    },
                                    "y_pred": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,) or (n_samples, n_outputs). Estimated target values.\n"
                                    },
                                    "sample_weight": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Sample weights.\n"
                                    },
                                    "multioutput": {
                                        "type": "array",
                                        "description": "{\u2018raw_values\u2019, \u2018uniform_average\u2019} or array-like of shape             (n_outputs,), default=\u2019uniform_average\u2019. Defines aggregating of multiple output values.\nArray-like value defines weights used to average errors.\n\n\u2018raw_values\u2019 :Returns a full set of errors in case of multioutput input.\n\n\u2018uniform_average\u2019 :Errors of all outputs are averaged with uniform weight.\n\n\n"
                                    },
                                    "squared": {
                                        "type": "boolean",
                                        "description": "bool, default=True. If True returns MSE value, if False returns RMSE value.\n\nDeprecated since version 1.4: squared is deprecated in 1.4 and will be removed in 1.6.\nUse root_mean_squared_error\ninstead to calculate the root mean squared error.\n\n"
                                    }
                                },
                                "required": [
                                    "y_true",
                                    "y_pred"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "mean_tweedie_deviance",
                        "func_desc": "Mean Tweedie deviance regression loss.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.mean_tweedie_deviance.html#sklearn.metrics.mean_tweedie_deviance",
                        "function_definitions": {
                            "function_name": "mean_tweedie_deviance",
                            "full_function": "sklearn.metrics.mean_tweedie_deviance(y_true, y_pred, *, sample_weight=None, power=0)",
                            "function_text": "Mean Tweedie deviance regression loss. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/model_evaluation.html#mean-tweedie-deviance",
                            "parameter_names_desc": [
                                {
                                    "param_name": "y_true",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "Ground truth (correct) target values.\n"
                                },
                                {
                                    "param_name": "y_pred",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "Estimated target values.\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Sample weights.\n"
                                },
                                {
                                    "param_name": "power",
                                    "param_type": "float, default=0",
                                    "param_desc": "Tweedie power parameter. Either power <= 0 or power >= 1.\nThe higher p the less weight is given to extreme\ndeviations between true and predicted targets.\n\npower < 0: Extreme stable distribution. Requires: y_pred > 0.\npower = 0 : Normal distribution, output corresponds to\nmean_squared_error. y_true and y_pred can be any real numbers.\npower = 1 : Poisson distribution. Requires: y_true >= 0 and\ny_pred > 0.\n1 < p < 2 : Compound Poisson distribution. Requires: y_true >= 0\nand y_pred > 0.\npower = 2 : Gamma distribution. Requires: y_true > 0 and y_pred > 0.\npower = 3 : Inverse Gaussian distribution. Requires: y_true > 0\nand y_pred > 0.\notherwise : Positive stable distribution. Requires: y_true > 0\nand y_pred > 0.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "mean_tweedie_deviance",
                            "descriptions": "Mean Tweedie deviance regression loss. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "y_true": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). Ground truth (correct) target values.\n"
                                    },
                                    "y_pred": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). Estimated target values.\n"
                                    },
                                    "sample_weight": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Sample weights.\n"
                                    },
                                    "power": {
                                        "type": "float",
                                        "description": "float, default=0. Tweedie power parameter. Either power <= 0 or power >= 1.\nThe higher p the less weight is given to extreme\ndeviations between true and predicted targets.\n\npower < 0: Extreme stable distribution. Requires: y_pred > 0.\npower = 0 : Normal distribution, output corresponds to\nmean_squared_error. y_true and y_pred can be any real numbers.\npower = 1 : Poisson distribution. Requires: y_true >= 0 and\ny_pred > 0.\n1 < p < 2 : Compound Poisson distribution. Requires: y_true >= 0\nand y_pred > 0.\npower = 2 : Gamma distribution. Requires: y_true > 0 and y_pred > 0.\npower = 3 : Inverse Gaussian distribution. Requires: y_true > 0\nand y_pred > 0.\notherwise : Positive stable distribution. Requires: y_true > 0\nand y_pred > 0.\n\n"
                                    }
                                },
                                "required": [
                                    "y_true",
                                    "y_pred"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "r2_score",
                        "func_desc": "\\(R^2\\) (coefficient of determination) regression score function.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.r2_score.html#sklearn.metrics.r2_score",
                        "function_definitions": {
                            "function_name": "r2_score",
                            "full_function": "sklearn.metrics.r2_score(y_true, y_pred, *, sample_weight=None, multioutput='uniform_average', force_finite=True)",
                            "function_text": "\\(R^2\\) (coefficient of determination) regression score function. Best possible score is 1.0 and it can be negative (because the\nmodel can be arbitrarily worse). In the general case when the true y is\nnon-constant, a constant model that always predicts the average y\ndisregarding the input features would get a \\(R^2\\) score of 0.0. In the particular case when y_true is constant, the \\(R^2\\) score\nis not finite: it is either NaN (perfect predictions) or -Inf\n(imperfect predictions). To prevent such non-finite numbers to pollute\nhigher-level experiments such as a grid search cross-validation, by default\nthese cases are replaced with 1.0 (perfect predictions) or 0.0 (imperfect\npredictions) respectively. You can set force_finite to False to\nprevent this fix from happening. Note: when the prediction residuals have zero mean, the \\(R^2\\) score\nis identical to the\nExplained Variance score. Read more in the User Guide.",
                            "func_text_user_guide": "sklearn.metrics.explained_variance_score.html#sklearn.metrics.explained_variance_score",
                            "parameter_names_desc": [
                                {
                                    "param_name": "y_true",
                                    "param_type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                                    "param_desc": "Ground truth (correct) target values.\n"
                                },
                                {
                                    "param_name": "y_pred",
                                    "param_type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                                    "param_desc": "Estimated target values.\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Sample weights.\n"
                                },
                                {
                                    "param_name": "multioutput",
                                    "param_type": "{\u2018raw_values\u2019, \u2018uniform_average\u2019, \u2018variance_weighted\u2019},             array-like of shape (n_outputs,) or None, default=\u2019uniform_average\u2019",
                                    "param_desc": "Defines aggregating of multiple output scores.\nArray-like value defines weights used to average scores.\nDefault is \u201cuniform_average\u201d.\n\n\u2018raw_values\u2019 :Returns a full set of scores in case of multioutput input.\n\n\u2018uniform_average\u2019 :Scores of all outputs are averaged with uniform weight.\n\n\u2018variance_weighted\u2019 :Scores of all outputs are averaged, weighted by the variances\nof each individual output.\n\n\n\nChanged in version 0.19: Default value of multioutput is \u2018uniform_average\u2019.\n\n"
                                },
                                {
                                    "param_name": "force_finite",
                                    "param_type": "bool, default=True",
                                    "param_desc": "Flag indicating if NaN and -Inf scores resulting from constant\ndata should be replaced with real numbers (1.0 if prediction is\nperfect, 0.0 otherwise). Default is True, a convenient setting\nfor hyperparameters\u2019 search procedures (e.g. grid search\ncross-validation).\n\nAdded in version 1.1.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "r2_score",
                            "descriptions": "\\(R^2\\) (coefficient of determination) regression score function. Best possible score is 1.0 and it can be negative (because the\nmodel can be arbitrarily worse). In the general case when the true y is\nnon-constant, a constant model that always predicts the average y\ndisregarding the input features would get a \\(R^2\\) score of 0.0. In the particular case when y_true is constant, the \\(R^2\\) score\nis not finite: it is either NaN (perfect predictions) or -Inf\n(imperfect predictions). To prevent such non-finite numbers to pollute\nhigher-level experiments such as a grid search cross-validation, by default\nthese cases are replaced with 1.0 (perfect predictions) or 0.0 (imperfect\npredictions) respectively. You can set force_finite to False to\nprevent this fix from happening. Note: when the prediction residuals have zero mean, the \\(R^2\\) score\nis identical to the\nExplained Variance score. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "y_true": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,) or (n_samples, n_outputs). Ground truth (correct) target values.\n"
                                    },
                                    "y_pred": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,) or (n_samples, n_outputs). Estimated target values.\n"
                                    },
                                    "sample_weight": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Sample weights.\n"
                                    },
                                    "multioutput": {
                                        "type": "array",
                                        "description": "{\u2018raw_values\u2019, \u2018uniform_average\u2019, \u2018variance_weighted\u2019},             array-like of shape (n_outputs,) or None, default=\u2019uniform_average\u2019. Defines aggregating of multiple output scores.\nArray-like value defines weights used to average scores.\nDefault is \u201cuniform_average\u201d.\n\n\u2018raw_values\u2019 :Returns a full set of scores in case of multioutput input.\n\n\u2018uniform_average\u2019 :Scores of all outputs are averaged with uniform weight.\n\n\u2018variance_weighted\u2019 :Scores of all outputs are averaged, weighted by the variances\nof each individual output.\n\n\n\nChanged in version 0.19: Default value of multioutput is \u2018uniform_average\u2019.\n\n"
                                    },
                                    "force_finite": {
                                        "type": "boolean",
                                        "description": "bool, default=True. Flag indicating if NaN and -Inf scores resulting from constant\ndata should be replaced with real numbers (1.0 if prediction is\nperfect, 0.0 otherwise). Default is True, a convenient setting\nfor hyperparameters\u2019 search procedures (e.g. grid search\ncross-validation).\n\nAdded in version 1.1.\n\n"
                                    }
                                },
                                "required": [
                                    "y_true",
                                    "y_pred"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "root_mean_squared_log_error",
                        "func_desc": "Root mean squared logarithmic error regression loss.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.root_mean_squared_log_error.html#sklearn.metrics.root_mean_squared_log_error",
                        "function_definitions": {
                            "function_name": "root_mean_squared_log_error",
                            "full_function": "sklearn.metrics.root_mean_squared_log_error(y_true, y_pred, *, sample_weight=None, multioutput='uniform_average')",
                            "function_text": "Root mean squared logarithmic error regression loss. Read more in the User Guide. Added in version 1.4.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/model_evaluation.html#mean-squared-log-error",
                            "parameter_names_desc": [
                                {
                                    "param_name": "y_true",
                                    "param_type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                                    "param_desc": "Ground truth (correct) target values.\n"
                                },
                                {
                                    "param_name": "y_pred",
                                    "param_type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                                    "param_desc": "Estimated target values.\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Sample weights.\n"
                                },
                                {
                                    "param_name": "multioutput",
                                    "param_type": "{\u2018raw_values\u2019, \u2018uniform_average\u2019} or array-like of shape             (n_outputs,), default=\u2019uniform_average\u2019",
                                    "param_desc": "Defines aggregating of multiple output values.\nArray-like value defines weights used to average errors.\n\n\u2018raw_values\u2019 :Returns a full set of errors when the input is of multioutput\nformat.\n\n\u2018uniform_average\u2019 :Errors of all outputs are averaged with uniform weight.\n\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "root_mean_squared_log_error",
                            "descriptions": "Root mean squared logarithmic error regression loss. Read more in the User Guide. Added in version 1.4.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "y_true": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,) or (n_samples, n_outputs). Ground truth (correct) target values.\n"
                                    },
                                    "y_pred": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,) or (n_samples, n_outputs). Estimated target values.\n"
                                    },
                                    "sample_weight": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Sample weights.\n"
                                    },
                                    "multioutput": {
                                        "type": "array",
                                        "description": "{\u2018raw_values\u2019, \u2018uniform_average\u2019} or array-like of shape             (n_outputs,), default=\u2019uniform_average\u2019. Defines aggregating of multiple output values.\nArray-like value defines weights used to average errors.\n\n\u2018raw_values\u2019 :Returns a full set of errors when the input is of multioutput\nformat.\n\n\u2018uniform_average\u2019 :Errors of all outputs are averaged with uniform weight.\n\n\n"
                                    }
                                },
                                "required": [
                                    "y_true",
                                    "y_pred"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "d2_pinball_score",
                        "func_desc": "\\(D^2\\) regression score function, fraction of pinball loss explained.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.d2_pinball_score.html#sklearn.metrics.d2_pinball_score",
                        "function_definitions": {
                            "function_name": "d2_pinball_score",
                            "full_function": "sklearn.metrics.d2_pinball_score(y_true, y_pred, *, sample_weight=None, alpha=0.5, multioutput='uniform_average')",
                            "function_text": "\\(D^2\\) regression score function, fraction of pinball loss explained. Best possible score is 1.0 and it can be negative (because the model can be\narbitrarily worse). A model that always uses the empirical alpha-quantile of\ny_true as constant prediction, disregarding the input features,\ngets a \\(D^2\\) score of 0.0. Read more in the User Guide. Added in version 1.1.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/model_evaluation.html#d2-score",
                            "parameter_names_desc": [
                                {
                                    "param_name": "y_true",
                                    "param_type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                                    "param_desc": "Ground truth (correct) target values.\n"
                                },
                                {
                                    "param_name": "y_pred",
                                    "param_type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                                    "param_desc": "Estimated target values.\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Sample weights.\n"
                                },
                                {
                                    "param_name": "alpha",
                                    "param_type": "float, default=0.5",
                                    "param_desc": "Slope of the pinball deviance. It determines the quantile level alpha\nfor which the pinball deviance and also D2 are optimal.\nThe default alpha=0.5 is equivalent to d2_absolute_error_score.\n"
                                },
                                {
                                    "param_name": "multioutput",
                                    "param_type": "{\u2018raw_values\u2019, \u2018uniform_average\u2019} or array-like of shape             (n_outputs,), default=\u2019uniform_average\u2019",
                                    "param_desc": "Defines aggregating of multiple output values.\nArray-like value defines weights used to average scores.\n\n\u2018raw_values\u2019 :Returns a full set of errors in case of multioutput input.\n\n\u2018uniform_average\u2019 :Scores of all outputs are averaged with uniform weight.\n\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "d2_pinball_score",
                            "descriptions": "\\(D^2\\) regression score function, fraction of pinball loss explained. Best possible score is 1.0 and it can be negative (because the model can be\narbitrarily worse). A model that always uses the empirical alpha-quantile of\ny_true as constant prediction, disregarding the input features,\ngets a \\(D^2\\) score of 0.0. Read more in the User Guide. Added in version 1.1.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "y_true": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,) or (n_samples, n_outputs). Ground truth (correct) target values.\n"
                                    },
                                    "y_pred": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,) or (n_samples, n_outputs). Estimated target values.\n"
                                    },
                                    "sample_weight": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Sample weights.\n"
                                    },
                                    "alpha": {
                                        "type": "float",
                                        "description": "float, default=0.5. Slope of the pinball deviance. It determines the quantile level alpha\nfor which the pinball deviance and also D2 are optimal.\nThe default alpha=0.5 is equivalent to d2_absolute_error_score.\n"
                                    },
                                    "multioutput": {
                                        "type": "array",
                                        "description": "{\u2018raw_values\u2019, \u2018uniform_average\u2019} or array-like of shape             (n_outputs,), default=\u2019uniform_average\u2019. Defines aggregating of multiple output values.\nArray-like value defines weights used to average scores.\n\n\u2018raw_values\u2019 :Returns a full set of errors in case of multioutput input.\n\n\u2018uniform_average\u2019 :Scores of all outputs are averaged with uniform weight.\n\n\n"
                                    }
                                },
                                "required": [
                                    "y_true",
                                    "y_pred"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "explained_variance_score",
                        "func_desc": "Explained variance regression score function.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.explained_variance_score.html#sklearn.metrics.explained_variance_score",
                        "function_definitions": {
                            "function_name": "explained_variance_score",
                            "full_function": "sklearn.metrics.explained_variance_score(y_true, y_pred, *, sample_weight=None, multioutput='uniform_average', force_finite=True)",
                            "function_text": "Explained variance regression score function. Best possible score is 1.0, lower values are worse. In the particular case when y_true is constant, the explained variance\nscore is not finite: it is either NaN (perfect predictions) or\n-Inf (imperfect predictions). To prevent such non-finite numbers to\npollute higher-level experiments such as a grid search cross-validation,\nby default these cases are replaced with 1.0 (perfect predictions) or 0.0\n(imperfect predictions) respectively. If force_finite\nis set to False, this score falls back on the original \\(R^2\\)\ndefinition. Note The Explained Variance score is similar to the\nR^2 score, with the notable difference that it\ndoes not account for systematic offsets in the prediction. Most often\nthe R^2 score should be preferred. Read more in the User Guide.",
                            "func_text_user_guide": "sklearn.metrics.r2_score.html#sklearn.metrics.r2_score",
                            "parameter_names_desc": [
                                {
                                    "param_name": "y_true",
                                    "param_type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                                    "param_desc": "Ground truth (correct) target values.\n"
                                },
                                {
                                    "param_name": "y_pred",
                                    "param_type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                                    "param_desc": "Estimated target values.\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Sample weights.\n"
                                },
                                {
                                    "param_name": "multioutput",
                                    "param_type": "{\u2018raw_values\u2019, \u2018uniform_average\u2019, \u2018variance_weighted\u2019} or             array-like of shape (n_outputs,), default=\u2019uniform_average\u2019",
                                    "param_desc": "Defines aggregating of multiple output scores.\nArray-like value defines weights used to average scores.\n\n\u2018raw_values\u2019 :Returns a full set of scores in case of multioutput input.\n\n\u2018uniform_average\u2019 :Scores of all outputs are averaged with uniform weight.\n\n\u2018variance_weighted\u2019 :Scores of all outputs are averaged, weighted by the variances\nof each individual output.\n\n\n"
                                },
                                {
                                    "param_name": "force_finite",
                                    "param_type": "bool, default=True",
                                    "param_desc": "Flag indicating if NaN and -Inf scores resulting from constant\ndata should be replaced with real numbers (1.0 if prediction is\nperfect, 0.0 otherwise). Default is True, a convenient setting\nfor hyperparameters\u2019 search procedures (e.g. grid search\ncross-validation).\n\nAdded in version 1.1.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "explained_variance_score",
                            "descriptions": "Explained variance regression score function. Best possible score is 1.0, lower values are worse. In the particular case when y_true is constant, the explained variance\nscore is not finite: it is either NaN (perfect predictions) or\n-Inf (imperfect predictions). To prevent such non-finite numbers to\npollute higher-level experiments such as a grid search cross-validation,\nby default these cases are replaced with 1.0 (perfect predictions) or 0.0\n(imperfect predictions) respectively. If force_finite\nis set to False, this score falls back on the original \\(R^2\\)\ndefinition. Note The Explained Variance score is similar to the\nR^2 score, with the notable difference that it\ndoes not account for systematic offsets in the prediction. Most often\nthe R^2 score should be preferred. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "y_true": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,) or (n_samples, n_outputs). Ground truth (correct) target values.\n"
                                    },
                                    "y_pred": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,) or (n_samples, n_outputs). Estimated target values.\n"
                                    },
                                    "sample_weight": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Sample weights.\n"
                                    },
                                    "multioutput": {
                                        "type": "array",
                                        "description": "{\u2018raw_values\u2019, \u2018uniform_average\u2019, \u2018variance_weighted\u2019} or             array-like of shape (n_outputs,), default=\u2019uniform_average\u2019. Defines aggregating of multiple output scores.\nArray-like value defines weights used to average scores.\n\n\u2018raw_values\u2019 :Returns a full set of scores in case of multioutput input.\n\n\u2018uniform_average\u2019 :Scores of all outputs are averaged with uniform weight.\n\n\u2018variance_weighted\u2019 :Scores of all outputs are averaged, weighted by the variances\nof each individual output.\n\n\n"
                                    },
                                    "force_finite": {
                                        "type": "boolean",
                                        "description": "bool, default=True. Flag indicating if NaN and -Inf scores resulting from constant\ndata should be replaced with real numbers (1.0 if prediction is\nperfect, 0.0 otherwise). Default is True, a convenient setting\nfor hyperparameters\u2019 search procedures (e.g. grid search\ncross-validation).\n\nAdded in version 1.1.\n\n"
                                    }
                                },
                                "required": [
                                    "y_true",
                                    "y_pred"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "mean_absolute_error",
                        "func_desc": "Mean absolute error regression loss.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.mean_absolute_error.html#sklearn.metrics.mean_absolute_error",
                        "function_definitions": {
                            "function_name": "mean_absolute_error",
                            "full_function": "sklearn.metrics.mean_absolute_error(y_true, y_pred, *, sample_weight=None, multioutput='uniform_average')",
                            "function_text": "Mean absolute error regression loss. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/model_evaluation.html#mean-absolute-error",
                            "parameter_names_desc": [
                                {
                                    "param_name": "y_true",
                                    "param_type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                                    "param_desc": "Ground truth (correct) target values.\n"
                                },
                                {
                                    "param_name": "y_pred",
                                    "param_type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                                    "param_desc": "Estimated target values.\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Sample weights.\n"
                                },
                                {
                                    "param_name": "multioutput",
                                    "param_type": "{\u2018raw_values\u2019, \u2018uniform_average\u2019}  or array-like of shape             (n_outputs,), default=\u2019uniform_average\u2019",
                                    "param_desc": "Defines aggregating of multiple output values.\nArray-like value defines weights used to average errors.\n\n\u2018raw_values\u2019 :Returns a full set of errors in case of multioutput input.\n\n\u2018uniform_average\u2019 :Errors of all outputs are averaged with uniform weight.\n\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "mean_absolute_error",
                            "descriptions": "Mean absolute error regression loss. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "y_true": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,) or (n_samples, n_outputs). Ground truth (correct) target values.\n"
                                    },
                                    "y_pred": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,) or (n_samples, n_outputs). Estimated target values.\n"
                                    },
                                    "sample_weight": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Sample weights.\n"
                                    },
                                    "multioutput": {
                                        "type": "array",
                                        "description": "{\u2018raw_values\u2019, \u2018uniform_average\u2019}  or array-like of shape             (n_outputs,), default=\u2019uniform_average\u2019. Defines aggregating of multiple output values.\nArray-like value defines weights used to average errors.\n\n\u2018raw_values\u2019 :Returns a full set of errors in case of multioutput input.\n\n\u2018uniform_average\u2019 :Errors of all outputs are averaged with uniform weight.\n\n\n"
                                    }
                                },
                                "required": [
                                    "y_true",
                                    "y_pred"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "mean_gamma_deviance",
                        "func_desc": "Mean Gamma deviance regression loss.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.mean_gamma_deviance.html#sklearn.metrics.mean_gamma_deviance",
                        "function_definitions": {
                            "function_name": "mean_gamma_deviance",
                            "full_function": "sklearn.metrics.mean_gamma_deviance(y_true, y_pred, *, sample_weight=None)",
                            "function_text": "Mean Gamma deviance regression loss. Gamma deviance is equivalent to the Tweedie deviance with\nthe power parameter power=2. It is invariant to scaling of\nthe target variable, and measures relative errors. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/model_evaluation.html#mean-tweedie-deviance",
                            "parameter_names_desc": [
                                {
                                    "param_name": "y_true",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "Ground truth (correct) target values. Requires y_true > 0.\n"
                                },
                                {
                                    "param_name": "y_pred",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "Estimated target values. Requires y_pred > 0.\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Sample weights.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "mean_gamma_deviance",
                            "descriptions": "Mean Gamma deviance regression loss. Gamma deviance is equivalent to the Tweedie deviance with\nthe power parameter power=2. It is invariant to scaling of\nthe target variable, and measures relative errors. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "y_true": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). Ground truth (correct) target values. Requires y_true > 0.\n"
                                    },
                                    "y_pred": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). Estimated target values. Requires y_pred > 0.\n"
                                    },
                                    "sample_weight": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Sample weights.\n"
                                    }
                                },
                                "required": [
                                    "y_true",
                                    "y_pred"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "mean_poisson_deviance",
                        "func_desc": "Mean Poisson deviance regression loss.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.mean_poisson_deviance.html#sklearn.metrics.mean_poisson_deviance",
                        "function_definitions": {
                            "function_name": "mean_poisson_deviance",
                            "full_function": "sklearn.metrics.mean_poisson_deviance(y_true, y_pred, *, sample_weight=None)",
                            "function_text": "Mean Poisson deviance regression loss. Poisson deviance is equivalent to the Tweedie deviance with\nthe power parameter power=1. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/model_evaluation.html#mean-tweedie-deviance",
                            "parameter_names_desc": [
                                {
                                    "param_name": "y_true",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "Ground truth (correct) target values. Requires y_true >= 0.\n"
                                },
                                {
                                    "param_name": "y_pred",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "Estimated target values. Requires y_pred > 0.\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Sample weights.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "mean_poisson_deviance",
                            "descriptions": "Mean Poisson deviance regression loss. Poisson deviance is equivalent to the Tweedie deviance with\nthe power parameter power=1. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "y_true": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). Ground truth (correct) target values. Requires y_true >= 0.\n"
                                    },
                                    "y_pred": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). Estimated target values. Requires y_pred > 0.\n"
                                    },
                                    "sample_weight": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Sample weights.\n"
                                    }
                                },
                                "required": [
                                    "y_true",
                                    "y_pred"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "mean_squared_log_error",
                        "func_desc": "Mean squared logarithmic error regression loss.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.mean_squared_log_error.html#sklearn.metrics.mean_squared_log_error",
                        "function_definitions": {
                            "function_name": "mean_squared_log_error",
                            "full_function": "sklearn.metrics.mean_squared_log_error(y_true, y_pred, *, sample_weight=None, multioutput='uniform_average', squared='deprecated')",
                            "function_text": "Mean squared logarithmic error regression loss. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/model_evaluation.html#mean-squared-log-error",
                            "parameter_names_desc": [
                                {
                                    "param_name": "y_true",
                                    "param_type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                                    "param_desc": "Ground truth (correct) target values.\n"
                                },
                                {
                                    "param_name": "y_pred",
                                    "param_type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                                    "param_desc": "Estimated target values.\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Sample weights.\n"
                                },
                                {
                                    "param_name": "multioutput",
                                    "param_type": "{\u2018raw_values\u2019, \u2018uniform_average\u2019} or array-like of shape             (n_outputs,), default=\u2019uniform_average\u2019",
                                    "param_desc": "Defines aggregating of multiple output values.\nArray-like value defines weights used to average errors.\n\n\u2018raw_values\u2019 :Returns a full set of errors when the input is of multioutput\nformat.\n\n\u2018uniform_average\u2019 :Errors of all outputs are averaged with uniform weight.\n\n\n"
                                },
                                {
                                    "param_name": "squared",
                                    "param_type": "bool, default=True",
                                    "param_desc": "If True returns MSLE (mean squared log error) value.\nIf False returns RMSLE (root mean squared log error) value.\n\nDeprecated since version 1.4: squared is deprecated in 1.4 and will be removed in 1.6.\nUse root_mean_squared_log_error\ninstead to calculate the root mean squared logarithmic error.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "mean_squared_log_error",
                            "descriptions": "Mean squared logarithmic error regression loss. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "y_true": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,) or (n_samples, n_outputs). Ground truth (correct) target values.\n"
                                    },
                                    "y_pred": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,) or (n_samples, n_outputs). Estimated target values.\n"
                                    },
                                    "sample_weight": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Sample weights.\n"
                                    },
                                    "multioutput": {
                                        "type": "array",
                                        "description": "{\u2018raw_values\u2019, \u2018uniform_average\u2019} or array-like of shape             (n_outputs,), default=\u2019uniform_average\u2019. Defines aggregating of multiple output values.\nArray-like value defines weights used to average errors.\n\n\u2018raw_values\u2019 :Returns a full set of errors when the input is of multioutput\nformat.\n\n\u2018uniform_average\u2019 :Errors of all outputs are averaged with uniform weight.\n\n\n"
                                    },
                                    "squared": {
                                        "type": "boolean",
                                        "description": "bool, default=True. If True returns MSLE (mean squared log error) value.\nIf False returns RMSLE (root mean squared log error) value.\n\nDeprecated since version 1.4: squared is deprecated in 1.4 and will be removed in 1.6.\nUse root_mean_squared_log_error\ninstead to calculate the root mean squared logarithmic error.\n\n"
                                    }
                                },
                                "required": [
                                    "y_true",
                                    "y_pred"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "median_absolute_error",
                        "func_desc": "Median absolute error regression loss.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.median_absolute_error.html#sklearn.metrics.median_absolute_error",
                        "function_definitions": {
                            "function_name": "median_absolute_error",
                            "full_function": "sklearn.metrics.median_absolute_error(y_true, y_pred, *, multioutput='uniform_average', sample_weight=None)",
                            "function_text": "Median absolute error regression loss. Median absolute error output is non-negative floating point. The best value\nis 0.0. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/model_evaluation.html#median-absolute-error",
                            "parameter_names_desc": [
                                {
                                    "param_name": "y_true",
                                    "param_type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                                    "param_desc": "Ground truth (correct) target values.\n"
                                },
                                {
                                    "param_name": "y_pred",
                                    "param_type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                                    "param_desc": "Estimated target values.\n"
                                },
                                {
                                    "param_name": "multioutput",
                                    "param_type": "{\u2018raw_values\u2019, \u2018uniform_average\u2019} or array-like of shape             (n_outputs,), default=\u2019uniform_average\u2019",
                                    "param_desc": "Defines aggregating of multiple output values. Array-like value defines\nweights used to average errors.\n\n\u2018raw_values\u2019 :Returns a full set of errors in case of multioutput input.\n\n\u2018uniform_average\u2019 :Errors of all outputs are averaged with uniform weight.\n\n\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Sample weights.\n\nAdded in version 0.24.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "median_absolute_error",
                            "descriptions": "Median absolute error regression loss. Median absolute error output is non-negative floating point. The best value\nis 0.0. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "y_true": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,) or (n_samples, n_outputs). Ground truth (correct) target values.\n"
                                    },
                                    "y_pred": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,) or (n_samples, n_outputs). Estimated target values.\n"
                                    },
                                    "multioutput": {
                                        "type": "array",
                                        "description": "{\u2018raw_values\u2019, \u2018uniform_average\u2019} or array-like of shape             (n_outputs,), default=\u2019uniform_average\u2019. Defines aggregating of multiple output values. Array-like value defines\nweights used to average errors.\n\n\u2018raw_values\u2019 :Returns a full set of errors in case of multioutput input.\n\n\u2018uniform_average\u2019 :Errors of all outputs are averaged with uniform weight.\n\n\n"
                                    },
                                    "sample_weight": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Sample weights.\n\nAdded in version 0.24.\n\n"
                                    }
                                },
                                "required": [
                                    "y_true",
                                    "y_pred"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "root_mean_squared_error",
                        "func_desc": "Root mean squared error regression loss.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.root_mean_squared_error.html#sklearn.metrics.root_mean_squared_error",
                        "function_definitions": {
                            "function_name": "root_mean_squared_error",
                            "full_function": "sklearn.metrics.root_mean_squared_error(y_true, y_pred, *, sample_weight=None, multioutput='uniform_average')",
                            "function_text": "Root mean squared error regression loss. Read more in the User Guide. Added in version 1.4.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/model_evaluation.html#mean-squared-error",
                            "parameter_names_desc": [
                                {
                                    "param_name": "y_true",
                                    "param_type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                                    "param_desc": "Ground truth (correct) target values.\n"
                                },
                                {
                                    "param_name": "y_pred",
                                    "param_type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                                    "param_desc": "Estimated target values.\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Sample weights.\n"
                                },
                                {
                                    "param_name": "multioutput",
                                    "param_type": "{\u2018raw_values\u2019, \u2018uniform_average\u2019} or array-like of shape             (n_outputs,), default=\u2019uniform_average\u2019",
                                    "param_desc": "Defines aggregating of multiple output values.\nArray-like value defines weights used to average errors.\n\n\u2018raw_values\u2019 :Returns a full set of errors in case of multioutput input.\n\n\u2018uniform_average\u2019 :Errors of all outputs are averaged with uniform weight.\n\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "root_mean_squared_error",
                            "descriptions": "Root mean squared error regression loss. Read more in the User Guide. Added in version 1.4.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "y_true": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,) or (n_samples, n_outputs). Ground truth (correct) target values.\n"
                                    },
                                    "y_pred": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,) or (n_samples, n_outputs). Estimated target values.\n"
                                    },
                                    "sample_weight": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Sample weights.\n"
                                    },
                                    "multioutput": {
                                        "type": "array",
                                        "description": "{\u2018raw_values\u2019, \u2018uniform_average\u2019} or array-like of shape             (n_outputs,), default=\u2019uniform_average\u2019. Defines aggregating of multiple output values.\nArray-like value defines weights used to average errors.\n\n\u2018raw_values\u2019 :Returns a full set of errors in case of multioutput input.\n\n\u2018uniform_average\u2019 :Errors of all outputs are averaged with uniform weight.\n\n\n"
                                    }
                                },
                                "required": [
                                    "y_true",
                                    "y_pred"
                                ]
                            }
                        }
                    }
                ]
            },
            {
                "Multilabel ranking metrics": [
                    {
                        "func_name": "coverage_error",
                        "func_desc": "Coverage error measure.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.coverage_error.html#sklearn.metrics.coverage_error",
                        "function_definitions": {
                            "function_name": "coverage_error",
                            "full_function": "sklearn.metrics.coverage_error(y_true, y_score, *, sample_weight=None)",
                            "function_text": "Coverage error measure. Compute how far we need to go through the ranked scores to cover all\ntrue labels. The best value is equal to the average number\nof labels in y_true per sample. Ties in y_scores are broken by giving maximal rank that would have\nbeen assigned to all tied values. Note: Our implementation\u2019s score is 1 greater than the one given in\nTsoumakas et al., 2010. This extends it to handle the degenerate case\nin which an instance has 0 true labels. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/model_evaluation.html#coverage-error",
                            "parameter_names_desc": [
                                {
                                    "param_name": "y_true",
                                    "param_type": "array-like of shape (n_samples, n_labels)",
                                    "param_desc": "True binary labels in binary indicator format.\n"
                                },
                                {
                                    "param_name": "y_score",
                                    "param_type": "array-like of shape (n_samples, n_labels)",
                                    "param_desc": "Target scores, can either be probability estimates of the positive\nclass, confidence values, or non-thresholded measure of decisions\n(as returned by \u201cdecision_function\u201d on some classifiers).\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Sample weights.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "coverage_error",
                            "descriptions": "Coverage error measure. Compute how far we need to go through the ranked scores to cover all\ntrue labels. The best value is equal to the average number\nof labels in y_true per sample. Ties in y_scores are broken by giving maximal rank that would have\nbeen assigned to all tied values. Note: Our implementation\u2019s score is 1 greater than the one given in\nTsoumakas et al., 2010. This extends it to handle the degenerate case\nin which an instance has 0 true labels. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "y_true": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_labels). True binary labels in binary indicator format.\n"
                                    },
                                    "y_score": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_labels). Target scores, can either be probability estimates of the positive\nclass, confidence values, or non-thresholded measure of decisions\n(as returned by \u201cdecision_function\u201d on some classifiers).\n"
                                    },
                                    "sample_weight": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Sample weights.\n"
                                    }
                                },
                                "required": [
                                    "y_true",
                                    "y_score"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "label_ranking_loss",
                        "func_desc": "Compute Ranking loss measure.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.label_ranking_loss.html#sklearn.metrics.label_ranking_loss",
                        "function_definitions": {
                            "function_name": "label_ranking_loss",
                            "full_function": "sklearn.metrics.label_ranking_loss(y_true, y_score, *, sample_weight=None)",
                            "function_text": "Compute Ranking loss measure. Compute the average number of label pairs that are incorrectly ordered\ngiven y_score weighted by the size of the label set and the number of\nlabels not in the label set. This is similar to the error set size, but weighted by the number of\nrelevant and irrelevant labels. The best performance is achieved with\na ranking loss of zero. Read more in the User Guide. Added in version 0.17: A function label_ranking_loss",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/model_evaluation.html#label-ranking-loss",
                            "parameter_names_desc": [
                                {
                                    "param_name": "y_true",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_labels)",
                                    "param_desc": "True binary labels in binary indicator format.\n"
                                },
                                {
                                    "param_name": "y_score",
                                    "param_type": "array-like of shape (n_samples, n_labels)",
                                    "param_desc": "Target scores, can either be probability estimates of the positive\nclass, confidence values, or non-thresholded measure of decisions\n(as returned by \u201cdecision_function\u201d on some classifiers).\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Sample weights.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "label_ranking_loss",
                            "descriptions": "Compute Ranking loss measure. Compute the average number of label pairs that are incorrectly ordered\ngiven y_score weighted by the size of the label set and the number of\nlabels not in the label set. This is similar to the error set size, but weighted by the number of\nrelevant and irrelevant labels. The best performance is achieved with\na ranking loss of zero. Read more in the User Guide. Added in version 0.17: A function label_ranking_loss",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "y_true": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_labels). True binary labels in binary indicator format.\n"
                                    },
                                    "y_score": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_labels). Target scores, can either be probability estimates of the positive\nclass, confidence values, or non-thresholded measure of decisions\n(as returned by \u201cdecision_function\u201d on some classifiers).\n"
                                    },
                                    "sample_weight": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Sample weights.\n"
                                    }
                                },
                                "required": [
                                    "y_true",
                                    "y_score"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "label_ranking_average_precision_score",
                        "func_desc": "Compute ranking-based average precision.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.label_ranking_average_precision_score.html#sklearn.metrics.label_ranking_average_precision_score",
                        "function_definitions": {
                            "function_name": "label_ranking_average_precision_score",
                            "full_function": "sklearn.metrics.label_ranking_average_precision_score(y_true, y_score, *, sample_weight=None)",
                            "function_text": "Compute ranking-based average precision. Label ranking average precision (LRAP) is the average over each ground\ntruth label assigned to each sample, of the ratio of true vs. total\nlabels with lower score. This metric is used in multilabel ranking problem, where the goal\nis to give better rank to the labels associated to each sample. The obtained score is always strictly greater than 0 and\nthe best value is 1. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/model_evaluation.html#label-ranking-average-precision",
                            "parameter_names_desc": [
                                {
                                    "param_name": "y_true",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_labels)",
                                    "param_desc": "True binary labels in binary indicator format.\n"
                                },
                                {
                                    "param_name": "y_score",
                                    "param_type": "array-like of shape (n_samples, n_labels)",
                                    "param_desc": "Target scores, can either be probability estimates of the positive\nclass, confidence values, or non-thresholded measure of decisions\n(as returned by \u201cdecision_function\u201d on some classifiers).\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Sample weights.\n\nAdded in version 0.20.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "label_ranking_average_precision_score",
                            "descriptions": "Compute ranking-based average precision. Label ranking average precision (LRAP) is the average over each ground\ntruth label assigned to each sample, of the ratio of true vs. total\nlabels with lower score. This metric is used in multilabel ranking problem, where the goal\nis to give better rank to the labels associated to each sample. The obtained score is always strictly greater than 0 and\nthe best value is 1. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "y_true": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_labels). True binary labels in binary indicator format.\n"
                                    },
                                    "y_score": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_labels). Target scores, can either be probability estimates of the positive\nclass, confidence values, or non-thresholded measure of decisions\n(as returned by \u201cdecision_function\u201d on some classifiers).\n"
                                    },
                                    "sample_weight": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Sample weights.\n\nAdded in version 0.20.\n\n"
                                    }
                                },
                                "required": [
                                    "y_true",
                                    "y_score"
                                ]
                            }
                        }
                    }
                ]
            },
            {
                "Clustering metrics": [
                    {
                        "func_name": "adjusted_mutual_info_score",
                        "func_desc": "Adjusted Mutual Information between two clusterings.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.adjusted_mutual_info_score.html#sklearn.metrics.adjusted_mutual_info_score",
                        "function_definitions": {
                            "function_name": "adjusted_mutual_info_score",
                            "full_function": "sklearn.metrics.adjusted_mutual_info_score(labels_true, labels_pred, *, average_method='arithmetic')",
                            "function_text": "Adjusted Mutual Information between two clusterings. Adjusted Mutual Information (AMI) is an adjustment of the Mutual\nInformation (MI) score to account for chance. It accounts for the fact that\nthe MI is generally higher for two clusterings with a larger number of\nclusters, regardless of whether there is actually more information shared.\nFor two clusterings \\(U\\) and \\(V\\), the AMI is given as: This metric is independent of the absolute values of the labels:\na permutation of the class or cluster label values won\u2019t change the\nscore value in any way. This metric is furthermore symmetric: switching \\(U\\) (label_true)\nwith \\(V\\) (labels_pred) will return the same score value. This can\nbe useful to measure the agreement of two independent label assignments\nstrategies on the same dataset when the real ground truth is not known. Be mindful that this function is an order of magnitude slower than other\nmetrics, such as the Adjusted Rand Index. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/clustering.html#mutual-info-score",
                            "parameter_names_desc": [
                                {
                                    "param_name": "labels_true",
                                    "param_type": "int array-like of shape (n_samples,)",
                                    "param_desc": "A clustering of the data into disjoint subsets, called \\(U\\) in\nthe above formula.\n"
                                },
                                {
                                    "param_name": "labels_pred",
                                    "param_type": "int array-like of shape (n_samples,)",
                                    "param_desc": "A clustering of the data into disjoint subsets, called \\(V\\) in\nthe above formula.\n"
                                },
                                {
                                    "param_name": "average_method",
                                    "param_type": "{\u2018min\u2019, \u2018geometric\u2019, \u2018arithmetic\u2019, \u2018max\u2019}, default=\u2019arithmetic\u2019",
                                    "param_desc": "How to compute the normalizer in the denominator.\n\nAdded in version 0.20.\n\n\nChanged in version 0.22: The default value of average_method changed from \u2018max\u2019 to\n\u2018arithmetic\u2019.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "adjusted_mutual_info_score",
                            "descriptions": "Adjusted Mutual Information between two clusterings. Adjusted Mutual Information (AMI) is an adjustment of the Mutual\nInformation (MI) score to account for chance. It accounts for the fact that\nthe MI is generally higher for two clusterings with a larger number of\nclusters, regardless of whether there is actually more information shared.\nFor two clusterings \\(U\\) and \\(V\\), the AMI is given as: This metric is independent of the absolute values of the labels:\na permutation of the class or cluster label values won\u2019t change the\nscore value in any way. This metric is furthermore symmetric: switching \\(U\\) (label_true)\nwith \\(V\\) (labels_pred) will return the same score value. This can\nbe useful to measure the agreement of two independent label assignments\nstrategies on the same dataset when the real ground truth is not known. Be mindful that this function is an order of magnitude slower than other\nmetrics, such as the Adjusted Rand Index. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "labels_true": {
                                        "type": "integer",
                                        "description": "int array-like of shape (n_samples,). A clustering of the data into disjoint subsets, called \\(U\\) in\nthe above formula.\n"
                                    },
                                    "labels_pred": {
                                        "type": "integer",
                                        "description": "int array-like of shape (n_samples,). A clustering of the data into disjoint subsets, called \\(V\\) in\nthe above formula.\n"
                                    },
                                    "average_method": {
                                        "type": "string",
                                        "enum": [
                                            "min",
                                            " geometric",
                                            " arithmetic",
                                            " max"
                                        ],
                                        "description": "{\u2018min\u2019, \u2018geometric\u2019, \u2018arithmetic\u2019, \u2018max\u2019}, default=\u2019arithmetic\u2019. How to compute the normalizer in the denominator.\n\nAdded in version 0.20.\n\n\nChanged in version 0.22: The default value of average_method changed from \u2018max\u2019 to\n\u2018arithmetic\u2019.\n\n"
                                    }
                                },
                                "required": [
                                    "labels_true",
                                    "labels_pred"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "calinski_harabasz_score",
                        "func_desc": "Compute the Calinski and Harabasz score.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.calinski_harabasz_score.html#sklearn.metrics.calinski_harabasz_score",
                        "function_definitions": {
                            "function_name": "calinski_harabasz_score",
                            "full_function": "sklearn.metrics.calinski_harabasz_score(X, labels)",
                            "function_text": "Compute the Calinski and Harabasz score. It is also known as the Variance Ratio Criterion. The score is defined as ratio of the sum of between-cluster dispersion and\nof within-cluster dispersion. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/clustering.html#calinski-harabasz-index",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples, n_features)",
                                    "param_desc": "A list of n_features-dimensional data points. Each row corresponds\nto a single data point.\n"
                                },
                                {
                                    "param_name": "labels",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "Predicted labels for each sample.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "calinski_harabasz_score",
                            "descriptions": "Compute the Calinski and Harabasz score. It is also known as the Variance Ratio Criterion. The score is defined as ratio of the sum of between-cluster dispersion and\nof within-cluster dispersion. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_features). A list of n_features-dimensional data points. Each row corresponds\nto a single data point.\n"
                                    },
                                    "labels": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). Predicted labels for each sample.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "cluster.pair_confusion_matrix",
                        "func_desc": "Pair confusion matrix arising from two clusterings.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.cluster.pair_confusion_matrix.html#sklearn.metrics.cluster.pair_confusion_matrix",
                        "function_definitions": {
                            "function_name": "pair_confusion_matrix",
                            "full_function": "sklearn.metrics.cluster.pair_confusion_matrix(labels_true, labels_pred)",
                            "function_text": "Pair confusion matrix arising from two clusterings. The pair confusion matrix \\(C\\) computes a 2 by 2 similarity matrix\nbetween two clusterings by considering all pairs of samples and counting\npairs that are assigned into the same or into different clusters under\nthe true and predicted clusterings [1]. Considering a pair of samples that is clustered together a positive pair,\nthen as in binary classification the count of true negatives is\n\\(C_{00}\\), false negatives is \\(C_{10}\\), true positives is\n\\(C_{11}\\) and false positives is \\(C_{01}\\). Read more in the User Guide.",
                            "func_text_user_guide": "#r9ca8fd06d29a-1",
                            "parameter_names_desc": [
                                {
                                    "param_name": "labels_true",
                                    "param_type": "array-like of shape (n_samples,), dtype=integral",
                                    "param_desc": "Ground truth class labels to be used as a reference.\n"
                                },
                                {
                                    "param_name": "labels_pred",
                                    "param_type": "array-like of shape (n_samples,), dtype=integral",
                                    "param_desc": "Cluster labels to evaluate.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "pair_confusion_matrix",
                            "descriptions": "Pair confusion matrix arising from two clusterings. The pair confusion matrix \\(C\\) computes a 2 by 2 similarity matrix\nbetween two clusterings by considering all pairs of samples and counting\npairs that are assigned into the same or into different clusters under\nthe true and predicted clusterings [1]. Considering a pair of samples that is clustered together a positive pair,\nthen as in binary classification the count of true negatives is\n\\(C_{00}\\), false negatives is \\(C_{10}\\), true positives is\n\\(C_{11}\\) and false positives is \\(C_{01}\\). Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "labels_true": {
                                        "type": "integer",
                                        "description": "array-like of shape (n_samples,), dtype=integral. Ground truth class labels to be used as a reference.\n"
                                    },
                                    "labels_pred": {
                                        "type": "integer",
                                        "description": "array-like of shape (n_samples,), dtype=integral. Cluster labels to evaluate.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "davies_bouldin_score",
                        "func_desc": "Compute the Davies-Bouldin score.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.davies_bouldin_score.html#sklearn.metrics.davies_bouldin_score",
                        "function_definitions": {
                            "function_name": "davies_bouldin_score",
                            "full_function": "sklearn.metrics.davies_bouldin_score(X, labels)",
                            "function_text": "Compute the Davies-Bouldin score. The score is defined as the average similarity measure of each cluster with\nits most similar cluster, where similarity is the ratio of within-cluster\ndistances to between-cluster distances. Thus, clusters which are farther\napart and less dispersed will result in a better score. The minimum score is zero, with lower values indicating better clustering. Read more in the User Guide. Added in version 0.20.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/clustering.html#davies-bouldin-index",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples, n_features)",
                                    "param_desc": "A list of n_features-dimensional data points. Each row corresponds\nto a single data point.\n"
                                },
                                {
                                    "param_name": "labels",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "Predicted labels for each sample.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "davies_bouldin_score",
                            "descriptions": "Compute the Davies-Bouldin score. The score is defined as the average similarity measure of each cluster with\nits most similar cluster, where similarity is the ratio of within-cluster\ndistances to between-cluster distances. Thus, clusters which are farther\napart and less dispersed will result in a better score. The minimum score is zero, with lower values indicating better clustering. Read more in the User Guide. Added in version 0.20.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_features). A list of n_features-dimensional data points. Each row corresponds\nto a single data point.\n"
                                    },
                                    "labels": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). Predicted labels for each sample.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "homogeneity_completeness_v_measure",
                        "func_desc": "Compute the homogeneity and completeness and V-Measure scores at once.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.homogeneity_completeness_v_measure.html#sklearn.metrics.homogeneity_completeness_v_measure",
                        "function_definitions": {
                            "function_name": "homogeneity_completeness_v_measure",
                            "full_function": "sklearn.metrics.homogeneity_completeness_v_measure(labels_true, labels_pred, *, beta=1.0)",
                            "function_text": "Compute the homogeneity and completeness and V-Measure scores at once. Those metrics are based on normalized conditional entropy measures of\nthe clustering labeling to evaluate given the knowledge of a Ground\nTruth class labels of the same samples. A clustering result satisfies homogeneity if all of its clusters\ncontain only data points which are members of a single class. A clustering result satisfies completeness if all the data points\nthat are members of a given class are elements of the same cluster. Both scores have positive values between 0.0 and 1.0, larger values\nbeing desirable. Those 3 metrics are independent of the absolute values of the labels:\na permutation of the class or cluster label values won\u2019t change the\nscore values in any way. V-Measure is furthermore symmetric: swapping labels_true and\nlabel_pred will give the same score. This does not hold for\nhomogeneity and completeness. V-Measure is identical to\nnormalized_mutual_info_score with the arithmetic averaging\nmethod. Read more in the User Guide.",
                            "func_text_user_guide": "sklearn.metrics.normalized_mutual_info_score.html#sklearn.metrics.normalized_mutual_info_score",
                            "parameter_names_desc": [
                                {
                                    "param_name": "labels_true",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "Ground truth class labels to be used as a reference.\n"
                                },
                                {
                                    "param_name": "labels_pred",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "Cluster labels to evaluate.\n"
                                },
                                {
                                    "param_name": "beta",
                                    "param_type": "float, default=1.0",
                                    "param_desc": "Ratio of weight attributed to homogeneity vs completeness.\nIf beta is greater than 1, completeness is weighted more\nstrongly in the calculation. If beta is less than 1,\nhomogeneity is weighted more strongly.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "homogeneity_completeness_v_measure",
                            "descriptions": "Compute the homogeneity and completeness and V-Measure scores at once. Those metrics are based on normalized conditional entropy measures of\nthe clustering labeling to evaluate given the knowledge of a Ground\nTruth class labels of the same samples. A clustering result satisfies homogeneity if all of its clusters\ncontain only data points which are members of a single class. A clustering result satisfies completeness if all the data points\nthat are members of a given class are elements of the same cluster. Both scores have positive values between 0.0 and 1.0, larger values\nbeing desirable. Those 3 metrics are independent of the absolute values of the labels:\na permutation of the class or cluster label values won\u2019t change the\nscore values in any way. V-Measure is furthermore symmetric: swapping labels_true and\nlabel_pred will give the same score. This does not hold for\nhomogeneity and completeness. V-Measure is identical to\nnormalized_mutual_info_score with the arithmetic averaging\nmethod. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "labels_true": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). Ground truth class labels to be used as a reference.\n"
                                    },
                                    "labels_pred": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). Cluster labels to evaluate.\n"
                                    },
                                    "beta": {
                                        "type": "float",
                                        "description": "float, default=1.0. Ratio of weight attributed to homogeneity vs completeness.\nIf beta is greater than 1, completeness is weighted more\nstrongly in the calculation. If beta is less than 1,\nhomogeneity is weighted more strongly.\n"
                                    }
                                },
                                "required": [
                                    "labels_true",
                                    "labels_pred"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "mutual_info_score",
                        "func_desc": "Mutual Information between two clusterings.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.mutual_info_score.html#sklearn.metrics.mutual_info_score",
                        "function_definitions": {
                            "function_name": "mutual_info_score",
                            "full_function": "sklearn.metrics.mutual_info_score(labels_true, labels_pred, *, contingency=None)",
                            "function_text": "Mutual Information between two clusterings. The Mutual Information is a measure of the similarity between two labels\nof the same data. Where \\(|U_i|\\) is the number of the samples\nin cluster \\(U_i\\) and \\(|V_j|\\) is the number of the\nsamples in cluster \\(V_j\\), the Mutual Information\nbetween clusterings \\(U\\) and \\(V\\) is given as: This metric is independent of the absolute values of the labels:\na permutation of the class or cluster label values won\u2019t change the\nscore value in any way. This metric is furthermore symmetric: switching \\(U\\) (i.e\nlabel_true) with \\(V\\) (i.e. label_pred) will return the\nsame score value. This can be useful to measure the agreement of two\nindependent label assignments strategies on the same dataset when the\nreal ground truth is not known. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/clustering.html#mutual-info-score",
                            "parameter_names_desc": [
                                {
                                    "param_name": "labels_true",
                                    "param_type": "array-like of shape (n_samples,), dtype=integral",
                                    "param_desc": "A clustering of the data into disjoint subsets, called \\(U\\) in\nthe above formula.\n"
                                },
                                {
                                    "param_name": "labels_pred",
                                    "param_type": "array-like of shape (n_samples,), dtype=integral",
                                    "param_desc": "A clustering of the data into disjoint subsets, called \\(V\\) in\nthe above formula.\n"
                                },
                                {
                                    "param_name": "contingency",
                                    "param_type": "{array-like, sparse matrix} of shape             (n_classes_true, n_classes_pred), default=None",
                                    "param_desc": "A contingency matrix given by the\ncontingency_matrix function. If value\nis None, it will be computed, otherwise the given value is used,\nwith labels_true and labels_pred ignored.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "mutual_info_score",
                            "descriptions": "Mutual Information between two clusterings. The Mutual Information is a measure of the similarity between two labels\nof the same data. Where \\(|U_i|\\) is the number of the samples\nin cluster \\(U_i\\) and \\(|V_j|\\) is the number of the\nsamples in cluster \\(V_j\\), the Mutual Information\nbetween clusterings \\(U\\) and \\(V\\) is given as: This metric is independent of the absolute values of the labels:\na permutation of the class or cluster label values won\u2019t change the\nscore value in any way. This metric is furthermore symmetric: switching \\(U\\) (i.e\nlabel_true) with \\(V\\) (i.e. label_pred) will return the\nsame score value. This can be useful to measure the agreement of two\nindependent label assignments strategies on the same dataset when the\nreal ground truth is not known. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "labels_true": {
                                        "type": "integer",
                                        "description": "array-like of shape (n_samples,), dtype=integral. A clustering of the data into disjoint subsets, called \\(U\\) in\nthe above formula.\n"
                                    },
                                    "labels_pred": {
                                        "type": "integer",
                                        "description": "array-like of shape (n_samples,), dtype=integral. A clustering of the data into disjoint subsets, called \\(V\\) in\nthe above formula.\n"
                                    },
                                    "contingency": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape             (n_classes_true, n_classes_pred), default=None. A contingency matrix given by the\ncontingency_matrix function. If value\nis None, it will be computed, otherwise the given value is used,\nwith labels_true and labels_pred ignored.\n"
                                    }
                                },
                                "required": [
                                    "labels_true",
                                    "labels_pred"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "rand_score",
                        "func_desc": "Rand index.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.rand_score.html#sklearn.metrics.rand_score",
                        "function_definitions": {
                            "function_name": "rand_score",
                            "full_function": "sklearn.metrics.rand_score(labels_true, labels_pred)",
                            "function_text": "Rand index. The Rand Index computes a similarity measure between two clusterings\nby considering all pairs of samples and counting pairs that are\nassigned in the same or different clusters in the predicted and\ntrue clusterings [1] [2]. The raw RI score [3] is: RI = (number of agreeing pairs) / (number of pairs) Read more in the User Guide.",
                            "func_text_user_guide": "#rbedd61930922-1",
                            "parameter_names_desc": [
                                {
                                    "param_name": "labels_true",
                                    "param_type": "array-like of shape (n_samples,), dtype=integral",
                                    "param_desc": "Ground truth class labels to be used as a reference.\n"
                                },
                                {
                                    "param_name": "labels_pred",
                                    "param_type": "array-like of shape (n_samples,), dtype=integral",
                                    "param_desc": "Cluster labels to evaluate.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "rand_score",
                            "descriptions": "Rand index. The Rand Index computes a similarity measure between two clusterings\nby considering all pairs of samples and counting pairs that are\nassigned in the same or different clusters in the predicted and\ntrue clusterings [1] [2]. The raw RI score [3] is: RI = (number of agreeing pairs) / (number of pairs) Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "labels_true": {
                                        "type": "integer",
                                        "description": "array-like of shape (n_samples,), dtype=integral. Ground truth class labels to be used as a reference.\n"
                                    },
                                    "labels_pred": {
                                        "type": "integer",
                                        "description": "array-like of shape (n_samples,), dtype=integral. Cluster labels to evaluate.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "silhouette_score",
                        "func_desc": "Compute the mean Silhouette Coefficient of all samples.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.silhouette_score.html#sklearn.metrics.silhouette_score",
                        "function_definitions": {
                            "function_name": "silhouette_score",
                            "full_function": "sklearn.metrics.silhouette_score(X, labels, *, metric='euclidean', sample_size=None, random_state=None, **kwds)",
                            "function_text": "Compute the mean Silhouette Coefficient of all samples. The Silhouette Coefficient is calculated using the mean intra-cluster\ndistance (a) and the mean nearest-cluster distance (b) for each\nsample.  The Silhouette Coefficient for a sample is (b - a) / max(a,\nb).  To clarify, b is the distance between a sample and the nearest\ncluster that the sample is not a part of.\nNote that Silhouette Coefficient is only defined if number of labels\nis 2 <= n_labels <= n_samples - 1. This function returns the mean Silhouette Coefficient over all samples.\nTo obtain the values for each sample, use silhouette_samples. The best value is 1 and the worst value is -1. Values near 0 indicate\noverlapping clusters. Negative values generally indicate that a sample has\nbeen assigned to the wrong cluster, as a different cluster is more similar. Read more in the User Guide.",
                            "func_text_user_guide": "sklearn.metrics.silhouette_samples.html#sklearn.metrics.silhouette_samples",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples_a, n_samples_a) if metric ==             \u201cprecomputed\u201d or (n_samples_a, n_features) otherwise",
                                    "param_desc": "An array of pairwise distances between samples, or a feature array.\n"
                                },
                                {
                                    "param_name": "labels",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "Predicted labels for each sample.\n"
                                },
                                {
                                    "param_name": "metric",
                                    "param_type": "str or callable, default=\u2019euclidean\u2019",
                                    "param_desc": "The metric to use when calculating distance between instances in a\nfeature array. If metric is a string, it must be one of the options\nallowed by pairwise_distances. If X is\nthe distance array itself, use metric=\"precomputed\".\n"
                                },
                                {
                                    "param_name": "sample_size",
                                    "param_type": "int, default=None",
                                    "param_desc": "The size of the sample to use when computing the Silhouette Coefficient\non a random subset of the data.\nIf sample_size is None, no sampling is used.\n"
                                },
                                {
                                    "param_name": "random_state",
                                    "param_type": "int, RandomState instance or None, default=None",
                                    "param_desc": "Determines random number generation for selecting a subset of samples.\nUsed when sample_size is not None.\nPass an int for reproducible results across multiple function calls.\nSee Glossary.\n"
                                },
                                {
                                    "param_name": "**kwds",
                                    "param_type": "optional keyword parameters",
                                    "param_desc": "Any further parameters are passed directly to the distance function.\nIf using a scipy.spatial.distance metric, the parameters are still\nmetric dependent. See the scipy docs for usage examples.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "silhouette_score",
                            "descriptions": "Compute the mean Silhouette Coefficient of all samples. The Silhouette Coefficient is calculated using the mean intra-cluster\ndistance (a) and the mean nearest-cluster distance (b) for each\nsample.  The Silhouette Coefficient for a sample is (b - a) / max(a,\nb).  To clarify, b is the distance between a sample and the nearest\ncluster that the sample is not a part of.\nNote that Silhouette Coefficient is only defined if number of labels\nis 2 <= n_labels <= n_samples - 1. This function returns the mean Silhouette Coefficient over all samples.\nTo obtain the values for each sample, use silhouette_samples. The best value is 1 and the worst value is -1. Values near 0 indicate\noverlapping clusters. Negative values generally indicate that a sample has\nbeen assigned to the wrong cluster, as a different cluster is more similar. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples_a, n_samples_a) if metric ==             \u201cprecomputed\u201d or (n_samples_a, n_features) otherwise. An array of pairwise distances between samples, or a feature array.\n"
                                    },
                                    "labels": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). Predicted labels for each sample.\n"
                                    },
                                    "metric": {
                                        "type": "string",
                                        "description": "str or callable, default=\u2019euclidean\u2019. The metric to use when calculating distance between instances in a\nfeature array. If metric is a string, it must be one of the options\nallowed by pairwise_distances. If X is\nthe distance array itself, use metric=\"precomputed\".\n"
                                    },
                                    "sample_size": {
                                        "type": "integer",
                                        "description": "int, default=None. The size of the sample to use when computing the Silhouette Coefficient\non a random subset of the data.\nIf sample_size is None, no sampling is used.\n"
                                    },
                                    "random_state": {
                                        "type": "integer",
                                        "description": "int, RandomState instance or None, default=None. Determines random number generation for selecting a subset of samples.\nUsed when sample_size is not None.\nPass an int for reproducible results across multiple function calls.\nSee Glossary.\n"
                                    },
                                    "**kwds": {
                                        "type": "optional keyword parameters",
                                        "description": "optional keyword parameters. Any further parameters are passed directly to the distance function.\nIf using a scipy.spatial.distance metric, the parameters are still\nmetric dependent. See the scipy docs for usage examples.\n"
                                    }
                                },
                                "required": [
                                    "X",
                                    "labels"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "adjusted_rand_score",
                        "func_desc": "Rand index adjusted for chance.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.adjusted_rand_score.html#sklearn.metrics.adjusted_rand_score",
                        "function_definitions": {
                            "function_name": "adjusted_rand_score",
                            "full_function": "sklearn.metrics.adjusted_rand_score(labels_true, labels_pred)",
                            "function_text": "Rand index adjusted for chance. The Rand Index computes a similarity measure between two clusterings\nby considering all pairs of samples and counting pairs that are\nassigned in the same or different clusters in the predicted and\ntrue clusterings. The raw RI score is then \u201cadjusted for chance\u201d into the ARI score\nusing the following scheme: The adjusted Rand index is thus ensured to have a value close to\n0.0 for random labeling independently of the number of clusters and\nsamples and exactly 1.0 when the clusterings are identical (up to\na permutation). The adjusted Rand index is bounded below by -0.5 for\nespecially discordant clusterings. ARI is a symmetric measure: Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/clustering.html#adjusted-rand-score",
                            "parameter_names_desc": [
                                {
                                    "param_name": "labels_true",
                                    "param_type": "array-like of shape (n_samples,), dtype=int",
                                    "param_desc": "Ground truth class labels to be used as a reference.\n"
                                },
                                {
                                    "param_name": "labels_pred",
                                    "param_type": "array-like of shape (n_samples,), dtype=int",
                                    "param_desc": "Cluster labels to evaluate.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "adjusted_rand_score",
                            "descriptions": "Rand index adjusted for chance. The Rand Index computes a similarity measure between two clusterings\nby considering all pairs of samples and counting pairs that are\nassigned in the same or different clusters in the predicted and\ntrue clusterings. The raw RI score is then \u201cadjusted for chance\u201d into the ARI score\nusing the following scheme: The adjusted Rand index is thus ensured to have a value close to\n0.0 for random labeling independently of the number of clusters and\nsamples and exactly 1.0 when the clusterings are identical (up to\na permutation). The adjusted Rand index is bounded below by -0.5 for\nespecially discordant clusterings. ARI is a symmetric measure: Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "labels_true": {
                                        "type": "integer",
                                        "description": "array-like of shape (n_samples,), dtype=int. Ground truth class labels to be used as a reference.\n"
                                    },
                                    "labels_pred": {
                                        "type": "integer",
                                        "description": "array-like of shape (n_samples,), dtype=int. Cluster labels to evaluate.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "cluster.contingency_matrix",
                        "func_desc": "Build a contingency matrix describing the relationship between labels.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.cluster.contingency_matrix.html#sklearn.metrics.cluster.contingency_matrix",
                        "function_definitions": {
                            "function_name": "contingency_matrix",
                            "full_function": "sklearn.metrics.cluster.contingency_matrix(labels_true, labels_pred, *, eps=None, sparse=False, dtype=<class 'numpy.int64'>)",
                            "function_text": "Build a contingency matrix describing the relationship between labels.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "labels_true",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "Ground truth class labels to be used as a reference.\n"
                                },
                                {
                                    "param_name": "labels_pred",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "Cluster labels to evaluate.\n"
                                },
                                {
                                    "param_name": "eps",
                                    "param_type": "float, default=None",
                                    "param_desc": "If a float, that value is added to all values in the contingency\nmatrix. This helps to stop NaN propagation.\nIf None, nothing is adjusted.\n"
                                },
                                {
                                    "param_name": "sparse",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If True, return a sparse CSR continency matrix. If eps is not\nNone and sparse is True will raise ValueError.\n\nAdded in version 0.18.\n\n"
                                },
                                {
                                    "param_name": "dtype",
                                    "param_type": "numeric type, default=np.int64",
                                    "param_desc": "Output dtype. Ignored if eps is not None.\n\nAdded in version 0.24.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "contingency_matrix",
                            "descriptions": "Build a contingency matrix describing the relationship between labels.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "labels_true": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). Ground truth class labels to be used as a reference.\n"
                                    },
                                    "labels_pred": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). Cluster labels to evaluate.\n"
                                    },
                                    "eps": {
                                        "type": "float",
                                        "description": "float, default=None. If a float, that value is added to all values in the contingency\nmatrix. This helps to stop NaN propagation.\nIf None, nothing is adjusted.\n"
                                    },
                                    "sparse": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If True, return a sparse CSR continency matrix. If eps is not\nNone and sparse is True will raise ValueError.\n\nAdded in version 0.18.\n\n"
                                    },
                                    "dtype": {
                                        "type": "integer",
                                        "description": "numeric type, default=np.int64. Output dtype. Ignored if eps is not None.\n\nAdded in version 0.24.\n\n"
                                    }
                                },
                                "required": [
                                    "labels_true",
                                    "labels_pred"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "completeness_score",
                        "func_desc": "Compute completeness metric of a cluster labeling given a ground truth.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.completeness_score.html#sklearn.metrics.completeness_score",
                        "function_definitions": {
                            "function_name": "completeness_score",
                            "full_function": "sklearn.metrics.completeness_score(labels_true, labels_pred)",
                            "function_text": "Compute completeness metric of a cluster labeling given a ground truth. A clustering result satisfies completeness if all the data points\nthat are members of a given class are elements of the same cluster. This metric is independent of the absolute values of the labels:\na permutation of the class or cluster label values won\u2019t change the\nscore value in any way. This metric is not symmetric: switching label_true with label_pred\nwill return the homogeneity_score which will be different in\ngeneral. Read more in the User Guide.",
                            "func_text_user_guide": "sklearn.metrics.homogeneity_score.html#sklearn.metrics.homogeneity_score",
                            "parameter_names_desc": [
                                {
                                    "param_name": "labels_true",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "Ground truth class labels to be used as a reference.\n"
                                },
                                {
                                    "param_name": "labels_pred",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "Cluster labels to evaluate.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "completeness_score",
                            "descriptions": "Compute completeness metric of a cluster labeling given a ground truth. A clustering result satisfies completeness if all the data points\nthat are members of a given class are elements of the same cluster. This metric is independent of the absolute values of the labels:\na permutation of the class or cluster label values won\u2019t change the\nscore value in any way. This metric is not symmetric: switching label_true with label_pred\nwill return the homogeneity_score which will be different in\ngeneral. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "labels_true": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). Ground truth class labels to be used as a reference.\n"
                                    },
                                    "labels_pred": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). Cluster labels to evaluate.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "fowlkes_mallows_score",
                        "func_desc": "Measure the similarity of two clusterings of a set of points.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.fowlkes_mallows_score.html#sklearn.metrics.fowlkes_mallows_score",
                        "function_definitions": {
                            "function_name": "fowlkes_mallows_score",
                            "full_function": "sklearn.metrics.fowlkes_mallows_score(labels_true, labels_pred, *, sparse=False)",
                            "function_text": "Measure the similarity of two clusterings of a set of points. Added in version 0.18. The Fowlkes-Mallows index (FMI) is defined as the geometric mean between of\nthe precision and recall: Where TP is the number of True Positive (i.e. the number of pair of\npoints that belongs in the same clusters in both labels_true and\nlabels_pred), FP is the number of False Positive (i.e. the\nnumber of pair of points that belongs in the same clusters in\nlabels_true and not in labels_pred) and FN is the number of\nFalse Negative (i.e. the number of pair of points that belongs in the\nsame clusters in labels_pred and not in labels_True). The score ranges from 0 to 1. A high value indicates a good similarity\nbetween two clusters. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/clustering.html#fowlkes-mallows-scores",
                            "parameter_names_desc": [
                                {
                                    "param_name": "labels_true",
                                    "param_type": "array-like of shape (n_samples,), dtype=int",
                                    "param_desc": "A clustering of the data into disjoint subsets.\n"
                                },
                                {
                                    "param_name": "labels_pred",
                                    "param_type": "array-like of shape (n_samples,), dtype=int",
                                    "param_desc": "A clustering of the data into disjoint subsets.\n"
                                },
                                {
                                    "param_name": "sparse",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Compute contingency matrix internally with sparse matrix.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "fowlkes_mallows_score",
                            "descriptions": "Measure the similarity of two clusterings of a set of points. Added in version 0.18. The Fowlkes-Mallows index (FMI) is defined as the geometric mean between of\nthe precision and recall: Where TP is the number of True Positive (i.e. the number of pair of\npoints that belongs in the same clusters in both labels_true and\nlabels_pred), FP is the number of False Positive (i.e. the\nnumber of pair of points that belongs in the same clusters in\nlabels_true and not in labels_pred) and FN is the number of\nFalse Negative (i.e. the number of pair of points that belongs in the\nsame clusters in labels_pred and not in labels_True). The score ranges from 0 to 1. A high value indicates a good similarity\nbetween two clusters. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "labels_true": {
                                        "type": "integer",
                                        "description": "array-like of shape (n_samples,), dtype=int. A clustering of the data into disjoint subsets.\n"
                                    },
                                    "labels_pred": {
                                        "type": "integer",
                                        "description": "array-like of shape (n_samples,), dtype=int. A clustering of the data into disjoint subsets.\n"
                                    },
                                    "sparse": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Compute contingency matrix internally with sparse matrix.\n"
                                    }
                                },
                                "required": [
                                    "labels_true",
                                    "labels_pred"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "homogeneity_score",
                        "func_desc": "Homogeneity metric of a cluster labeling given a ground truth.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.homogeneity_score.html#sklearn.metrics.homogeneity_score",
                        "function_definitions": {
                            "function_name": "homogeneity_score",
                            "full_function": "sklearn.metrics.homogeneity_score(labels_true, labels_pred)",
                            "function_text": "Homogeneity metric of a cluster labeling given a ground truth. A clustering result satisfies homogeneity if all of its clusters\ncontain only data points which are members of a single class. This metric is independent of the absolute values of the labels:\na permutation of the class or cluster label values won\u2019t change the\nscore value in any way. This metric is not symmetric: switching label_true with label_pred\nwill return the completeness_score which will be different in\ngeneral. Read more in the User Guide.",
                            "func_text_user_guide": "sklearn.metrics.completeness_score.html#sklearn.metrics.completeness_score",
                            "parameter_names_desc": [
                                {
                                    "param_name": "labels_true",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "Ground truth class labels to be used as a reference.\n"
                                },
                                {
                                    "param_name": "labels_pred",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "Cluster labels to evaluate.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "homogeneity_score",
                            "descriptions": "Homogeneity metric of a cluster labeling given a ground truth. A clustering result satisfies homogeneity if all of its clusters\ncontain only data points which are members of a single class. This metric is independent of the absolute values of the labels:\na permutation of the class or cluster label values won\u2019t change the\nscore value in any way. This metric is not symmetric: switching label_true with label_pred\nwill return the completeness_score which will be different in\ngeneral. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "labels_true": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). Ground truth class labels to be used as a reference.\n"
                                    },
                                    "labels_pred": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). Cluster labels to evaluate.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "normalized_mutual_info_score",
                        "func_desc": "Normalized Mutual Information between two clusterings.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.normalized_mutual_info_score.html#sklearn.metrics.normalized_mutual_info_score",
                        "function_definitions": {
                            "function_name": "normalized_mutual_info_score",
                            "full_function": "sklearn.metrics.normalized_mutual_info_score(labels_true, labels_pred, *, average_method='arithmetic')",
                            "function_text": "Normalized Mutual Information between two clusterings. Normalized Mutual Information (NMI) is a normalization of the Mutual\nInformation (MI) score to scale the results between 0 (no mutual\ninformation) and 1 (perfect correlation). In this function, mutual\ninformation is normalized by some generalized mean of H(labels_true)\nand H(labels_pred)), defined by the average_method. This measure is not adjusted for chance. Therefore\nadjusted_mutual_info_score might be preferred. This metric is independent of the absolute values of the labels:\na permutation of the class or cluster label values won\u2019t change the\nscore value in any way. This metric is furthermore symmetric: switching label_true with\nlabel_pred will return the same score value. This can be useful to\nmeasure the agreement of two independent label assignments strategies\non the same dataset when the real ground truth is not known. Read more in the User Guide.",
                            "func_text_user_guide": "sklearn.metrics.adjusted_mutual_info_score.html#sklearn.metrics.adjusted_mutual_info_score",
                            "parameter_names_desc": [
                                {
                                    "param_name": "labels_true",
                                    "param_type": "int array-like of shape (n_samples,)",
                                    "param_desc": "A clustering of the data into disjoint subsets.\n"
                                },
                                {
                                    "param_name": "labels_pred",
                                    "param_type": "int array-like of shape (n_samples,)",
                                    "param_desc": "A clustering of the data into disjoint subsets.\n"
                                },
                                {
                                    "param_name": "average_method",
                                    "param_type": "{\u2018min\u2019, \u2018geometric\u2019, \u2018arithmetic\u2019, \u2018max\u2019}, default=\u2019arithmetic\u2019",
                                    "param_desc": "How to compute the normalizer in the denominator.\n\nAdded in version 0.20.\n\n\nChanged in version 0.22: The default value of average_method changed from \u2018geometric\u2019 to\n\u2018arithmetic\u2019.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "normalized_mutual_info_score",
                            "descriptions": "Normalized Mutual Information between two clusterings. Normalized Mutual Information (NMI) is a normalization of the Mutual\nInformation (MI) score to scale the results between 0 (no mutual\ninformation) and 1 (perfect correlation). In this function, mutual\ninformation is normalized by some generalized mean of H(labels_true)\nand H(labels_pred)), defined by the average_method. This measure is not adjusted for chance. Therefore\nadjusted_mutual_info_score might be preferred. This metric is independent of the absolute values of the labels:\na permutation of the class or cluster label values won\u2019t change the\nscore value in any way. This metric is furthermore symmetric: switching label_true with\nlabel_pred will return the same score value. This can be useful to\nmeasure the agreement of two independent label assignments strategies\non the same dataset when the real ground truth is not known. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "labels_true": {
                                        "type": "integer",
                                        "description": "int array-like of shape (n_samples,). A clustering of the data into disjoint subsets.\n"
                                    },
                                    "labels_pred": {
                                        "type": "integer",
                                        "description": "int array-like of shape (n_samples,). A clustering of the data into disjoint subsets.\n"
                                    },
                                    "average_method": {
                                        "type": "string",
                                        "enum": [
                                            "min",
                                            " geometric",
                                            " arithmetic",
                                            " max"
                                        ],
                                        "description": "{\u2018min\u2019, \u2018geometric\u2019, \u2018arithmetic\u2019, \u2018max\u2019}, default=\u2019arithmetic\u2019. How to compute the normalizer in the denominator.\n\nAdded in version 0.20.\n\n\nChanged in version 0.22: The default value of average_method changed from \u2018geometric\u2019 to\n\u2018arithmetic\u2019.\n\n"
                                    }
                                },
                                "required": [
                                    "labels_true",
                                    "labels_pred"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "silhouette_samples",
                        "func_desc": "Compute the Silhouette Coefficient for each sample.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.silhouette_samples.html#sklearn.metrics.silhouette_samples",
                        "function_definitions": {
                            "function_name": "silhouette_samples",
                            "full_function": "sklearn.metrics.silhouette_samples(X, labels, *, metric='euclidean', **kwds)",
                            "function_text": "Compute the Silhouette Coefficient for each sample. The Silhouette Coefficient is a measure of how well samples are clustered\nwith samples that are similar to themselves. Clustering models with a high\nSilhouette Coefficient are said to be dense, where samples in the same\ncluster are similar to each other, and well separated, where samples in\ndifferent clusters are not very similar to each other. The Silhouette Coefficient is calculated using the mean intra-cluster\ndistance (a) and the mean nearest-cluster distance (b) for each\nsample.  The Silhouette Coefficient for a sample is (b - a) / max(a,\nb).\nNote that Silhouette Coefficient is only defined if number of labels\nis 2 <= n_labels <= n_samples - 1. This function returns the Silhouette Coefficient for each sample. The best value is 1 and the worst value is -1. Values near 0 indicate\noverlapping clusters. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/clustering.html#silhouette-coefficient",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples_a, n_samples_a) if metric ==             \u201cprecomputed\u201d or (n_samples_a, n_features) otherwise",
                                    "param_desc": "An array of pairwise distances between samples, or a feature array. If\na sparse matrix is provided, CSR format should be favoured avoiding\nan additional copy.\n"
                                },
                                {
                                    "param_name": "labels",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "Label values for each sample.\n"
                                },
                                {
                                    "param_name": "metric",
                                    "param_type": "str or callable, default=\u2019euclidean\u2019",
                                    "param_desc": "The metric to use when calculating distance between instances in a\nfeature array. If metric is a string, it must be one of the options\nallowed by pairwise_distances.\nIf X is the distance array itself, use \u201cprecomputed\u201d as the metric.\nPrecomputed distance matrices must have 0 along the diagonal.\n"
                                },
                                {
                                    "param_name": "**kwds",
                                    "param_type": "optional keyword parameters",
                                    "param_desc": "Any further parameters are passed directly to the distance function.\nIf using a scipy.spatial.distance metric, the parameters are still\nmetric dependent. See the scipy docs for usage examples.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "silhouette_samples",
                            "descriptions": "Compute the Silhouette Coefficient for each sample. The Silhouette Coefficient is a measure of how well samples are clustered\nwith samples that are similar to themselves. Clustering models with a high\nSilhouette Coefficient are said to be dense, where samples in the same\ncluster are similar to each other, and well separated, where samples in\ndifferent clusters are not very similar to each other. The Silhouette Coefficient is calculated using the mean intra-cluster\ndistance (a) and the mean nearest-cluster distance (b) for each\nsample.  The Silhouette Coefficient for a sample is (b - a) / max(a,\nb).\nNote that Silhouette Coefficient is only defined if number of labels\nis 2 <= n_labels <= n_samples - 1. This function returns the Silhouette Coefficient for each sample. The best value is 1 and the worst value is -1. Values near 0 indicate\noverlapping clusters. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples_a, n_samples_a) if metric ==             \u201cprecomputed\u201d or (n_samples_a, n_features) otherwise. An array of pairwise distances between samples, or a feature array. If\na sparse matrix is provided, CSR format should be favoured avoiding\nan additional copy.\n"
                                    },
                                    "labels": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). Label values for each sample.\n"
                                    },
                                    "metric": {
                                        "type": "string",
                                        "description": "str or callable, default=\u2019euclidean\u2019. The metric to use when calculating distance between instances in a\nfeature array. If metric is a string, it must be one of the options\nallowed by pairwise_distances.\nIf X is the distance array itself, use \u201cprecomputed\u201d as the metric.\nPrecomputed distance matrices must have 0 along the diagonal.\n"
                                    },
                                    "**kwds": {
                                        "type": "optional keyword parameters",
                                        "description": "optional keyword parameters. Any further parameters are passed directly to the distance function.\nIf using a scipy.spatial.distance metric, the parameters are still\nmetric dependent. See the scipy docs for usage examples.\n"
                                    }
                                },
                                "required": [
                                    "X",
                                    "labels"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "v_measure_score",
                        "func_desc": "V-measure cluster labeling given a ground truth.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.v_measure_score.html#sklearn.metrics.v_measure_score",
                        "function_definitions": {
                            "function_name": "v_measure_score",
                            "full_function": "sklearn.metrics.v_measure_score(labels_true, labels_pred, *, beta=1.0)",
                            "function_text": "V-measure cluster labeling given a ground truth. This score is identical to normalized_mutual_info_score with\nthe 'arithmetic' option for averaging. The V-measure is the harmonic mean between homogeneity and completeness: This metric is independent of the absolute values of the labels:\na permutation of the class or cluster label values won\u2019t change the\nscore value in any way. This metric is furthermore symmetric: switching label_true with\nlabel_pred will return the same score value. This can be useful to\nmeasure the agreement of two independent label assignments strategies\non the same dataset when the real ground truth is not known. Read more in the User Guide.",
                            "func_text_user_guide": "sklearn.metrics.normalized_mutual_info_score.html#sklearn.metrics.normalized_mutual_info_score",
                            "parameter_names_desc": [
                                {
                                    "param_name": "labels_true",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "Ground truth class labels to be used as a reference.\n"
                                },
                                {
                                    "param_name": "labels_pred",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "Cluster labels to evaluate.\n"
                                },
                                {
                                    "param_name": "beta",
                                    "param_type": "float, default=1.0",
                                    "param_desc": "Ratio of weight attributed to homogeneity vs completeness.\nIf beta is greater than 1, completeness is weighted more\nstrongly in the calculation. If beta is less than 1,\nhomogeneity is weighted more strongly.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "v_measure_score",
                            "descriptions": "V-measure cluster labeling given a ground truth. This score is identical to normalized_mutual_info_score with\nthe 'arithmetic' option for averaging. The V-measure is the harmonic mean between homogeneity and completeness: This metric is independent of the absolute values of the labels:\na permutation of the class or cluster label values won\u2019t change the\nscore value in any way. This metric is furthermore symmetric: switching label_true with\nlabel_pred will return the same score value. This can be useful to\nmeasure the agreement of two independent label assignments strategies\non the same dataset when the real ground truth is not known. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "labels_true": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). Ground truth class labels to be used as a reference.\n"
                                    },
                                    "labels_pred": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). Cluster labels to evaluate.\n"
                                    },
                                    "beta": {
                                        "type": "float",
                                        "description": "float, default=1.0. Ratio of weight attributed to homogeneity vs completeness.\nIf beta is greater than 1, completeness is weighted more\nstrongly in the calculation. If beta is less than 1,\nhomogeneity is weighted more strongly.\n"
                                    }
                                },
                                "required": [
                                    "labels_true",
                                    "labels_pred"
                                ]
                            }
                        }
                    }
                ]
            },
            {
                "Biclustering metrics": [
                    {
                        "func_name": "consensus_score",
                        "func_desc": "The similarity of two sets of biclusters.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.consensus_score.html#sklearn.metrics.consensus_score",
                        "function_definitions": {
                            "function_name": "consensus_score",
                            "full_function": "sklearn.metrics.consensus_score(a, b, *, similarity='jaccard')",
                            "function_text": "The similarity of two sets of biclusters. Similarity between individual biclusters is computed. Then the\nbest matching between sets is found using the Hungarian algorithm.\nThe final score is the sum of similarities divided by the size of\nthe larger set. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/biclustering.html#biclustering",
                            "parameter_names_desc": [
                                {
                                    "param_name": "a",
                                    "param_type": "tuple (rows, columns)",
                                    "param_desc": "Tuple of row and column indicators for a set of biclusters.\n"
                                },
                                {
                                    "param_name": "b",
                                    "param_type": "tuple (rows, columns)",
                                    "param_desc": "Another set of biclusters like a.\n"
                                },
                                {
                                    "param_name": "similarity",
                                    "param_type": "\u2018jaccard\u2019 or callable, default=\u2019jaccard\u2019",
                                    "param_desc": "May be the string \u201cjaccard\u201d to use the Jaccard coefficient, or\nany function that takes four arguments, each of which is a 1d\nindicator vector: (a_rows, a_columns, b_rows, b_columns).\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "consensus_score",
                            "descriptions": "The similarity of two sets of biclusters. Similarity between individual biclusters is computed. Then the\nbest matching between sets is found using the Hungarian algorithm.\nThe final score is the sum of similarities divided by the size of\nthe larger set. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "a": {
                                        "type": "tuple (rows, columns)",
                                        "description": "tuple (rows, columns). Tuple of row and column indicators for a set of biclusters.\n"
                                    },
                                    "b": {
                                        "type": "tuple (rows, columns)",
                                        "description": "tuple (rows, columns). Another set of biclusters like a.\n"
                                    },
                                    "similarity": {
                                        "type": "object",
                                        "description": "\u2018jaccard\u2019 or callable, default=\u2019jaccard\u2019. May be the string \u201cjaccard\u201d to use the Jaccard coefficient, or\nany function that takes four arguments, each of which is a 1d\nindicator vector: (a_rows, a_columns, b_rows, b_columns).\n"
                                    }
                                },
                                "required": [
                                    "a",
                                    "b"
                                ]
                            }
                        }
                    }
                ]
            },
            {
                "Distance metrics": [
                    {
                        "func_name": "DistanceMetric",
                        "func_desc": "Uniform interface for fast distance metric functions.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.DistanceMetric.html#sklearn.metrics.DistanceMetric",
                        "function_definitions": {
                            "function_name": "DistanceMetric",
                            "full_function": "class sklearn.metrics.DistanceMetric#",
                            "function_text": "Uniform interface for fast distance metric functions. The DistanceMetric class provides a convenient way to compute pairwise distances\nbetween samples. It supports various distance metrics, such as Euclidean distance,\nManhattan distance, and more. The pairwise method can be used to compute pairwise distances between samples in\nthe input arrays. It returns a distance matrix representing the distances between\nall pairs of samples. The get_metric method allows you to retrieve a specific metric using its\nstring identifier. Examples Available Metrics The following lists the string metric identifiers and the associated\ndistance metric classes: Metrics intended for real-valued vector spaces: identifier class name args distance function \u201ceuclidean\u201d EuclideanDistance sqrt(sum((x - y)^2)) \u201cmanhattan\u201d ManhattanDistance sum(|x - y|) \u201cchebyshev\u201d ChebyshevDistance max(|x - y|) \u201cminkowski\u201d MinkowskiDistance p, w sum(w * |x - y|^p)^(1/p) \u201cseuclidean\u201d SEuclideanDistance V sqrt(sum((x - y)^2 / V)) \u201cmahalanobis\u201d MahalanobisDistance V or VI sqrt((x - y)' V^-1 (x - y)) Metrics intended for two-dimensional vector spaces:  Note that the haversine\ndistance metric requires data in the form of [latitude, longitude] and both\ninputs and outputs are in units of radians. identifier class name distance function \u201chaversine\u201d HaversineDistance 2 arcsin(sqrt(sin^2(0.5*dx) + cos(x1)cos(x2)sin^2(0.5*dy))) Metrics intended for integer-valued vector spaces:  Though intended\nfor integer-valued vectors, these are also valid metrics in the case of\nreal-valued vectors. identifier class name distance function \u201chamming\u201d HammingDistance N_unequal(x, y) / N_tot \u201ccanberra\u201d CanberraDistance sum(|x - y| / (|x| + |y|)) \u201cbraycurtis\u201d BrayCurtisDistance sum(|x - y|) / (sum(|x|) + sum(|y|)) Metrics intended for boolean-valued vector spaces:  Any nonzero entry\nis evaluated to \u201cTrue\u201d.  In the listings below, the following\nabbreviations are used: N  : number of dimensions NTT : number of dims in which both values are True NTF : number of dims in which the first value is True, second is False NFT : number of dims in which the first value is False, second is True NFF : number of dims in which both values are False NNEQ : number of non-equal dimensions, NNEQ = NTF + NFT NNZ : number of nonzero dimensions, NNZ = NTF + NFT + NTT identifier class name distance function \u201cjaccard\u201d JaccardDistance NNEQ / NNZ \u201cmatching\u201d MatchingDistance NNEQ / N \u201cdice\u201d DiceDistance NNEQ / (NTT + NNZ) \u201ckulsinski\u201d KulsinskiDistance (NNEQ + N - NTT) / (NNEQ + N) \u201crogerstanimoto\u201d RogersTanimotoDistance 2 * NNEQ / (N + NNEQ) \u201crussellrao\u201d RussellRaoDistance (N - NTT) / N \u201csokalmichener\u201d SokalMichenerDistance 2 * NNEQ / (N + NNEQ) \u201csokalsneath\u201d SokalSneathDistance NNEQ / (NNEQ + 0.5 * NTT) User-defined distance: identifier class name args \u201cpyfunc\u201d PyFuncDistance func Here func is a function which takes two one-dimensional numpy\narrays, and returns a distance.  Note that in order to be used within\nthe BallTree, the distance must be a true metric:\ni.e. it must satisfy the following properties Non-negativity: d(x, y) >= 0 Identity: d(x, y) = 0 if and only if x == y Symmetry: d(x, y) = d(y, x) Triangle Inequality: d(x, y) + d(y, z) >= d(x, z) Because of the Python object overhead involved in calling the python\nfunction, this will be fairly slow, but it will have the same\nscaling as other distances. Get the given distance metric from the string identifier. See the docstring of DistanceMetric for a list of available metrics.",
                            "func_text_user_guide": "#sklearn.metrics.DistanceMetric.get_metric",
                            "parameter_names_desc": [
                                {
                                    "param_name": "metric",
                                    "param_type": "str or class name",
                                    "param_desc": "The string identifier or class name of the desired distance metric.\nSee the documentation of the DistanceMetric class for a list of\navailable metrics.\n"
                                },
                                {
                                    "param_name": "dtype",
                                    "param_type": "{np.float32, np.float64}, default=np.float64",
                                    "param_desc": "The data type of the input on which the metric will be applied.\nThis affects the precision of the computed distances.\nBy default, it is set to np.float64.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "DistanceMetric",
                            "descriptions": "Uniform interface for fast distance metric functions. The DistanceMetric class provides a convenient way to compute pairwise distances\nbetween samples. It supports various distance metrics, such as Euclidean distance,\nManhattan distance, and more. The pairwise method can be used to compute pairwise distances between samples in\nthe input arrays. It returns a distance matrix representing the distances between\nall pairs of samples. The get_metric method allows you to retrieve a specific metric using its\nstring identifier. Examples Available Metrics The following lists the string metric identifiers and the associated\ndistance metric classes: Metrics intended for real-valued vector spaces: identifier class name args distance function \u201ceuclidean\u201d EuclideanDistance sqrt(sum((x - y)^2)) \u201cmanhattan\u201d ManhattanDistance sum(|x - y|) \u201cchebyshev\u201d ChebyshevDistance max(|x - y|) \u201cminkowski\u201d MinkowskiDistance p, w sum(w * |x - y|^p)^(1/p) \u201cseuclidean\u201d SEuclideanDistance V sqrt(sum((x - y)^2 / V)) \u201cmahalanobis\u201d MahalanobisDistance V or VI sqrt((x - y)' V^-1 (x - y)) Metrics intended for two-dimensional vector spaces:  Note that the haversine\ndistance metric requires data in the form of [latitude, longitude] and both\ninputs and outputs are in units of radians. identifier class name distance function \u201chaversine\u201d HaversineDistance 2 arcsin(sqrt(sin^2(0.5*dx) + cos(x1)cos(x2)sin^2(0.5*dy))) Metrics intended for integer-valued vector spaces:  Though intended\nfor integer-valued vectors, these are also valid metrics in the case of\nreal-valued vectors. identifier class name distance function \u201chamming\u201d HammingDistance N_unequal(x, y) / N_tot \u201ccanberra\u201d CanberraDistance sum(|x - y| / (|x| + |y|)) \u201cbraycurtis\u201d BrayCurtisDistance sum(|x - y|) / (sum(|x|) + sum(|y|)) Metrics intended for boolean-valued vector spaces:  Any nonzero entry\nis evaluated to \u201cTrue\u201d.  In the listings below, the following\nabbreviations are used: N  : number of dimensions NTT : number of dims in which both values are True NTF : number of dims in which the first value is True, second is False NFT : number of dims in which the first value is False, second is True NFF : number of dims in which both values are False NNEQ : number of non-equal dimensions, NNEQ = NTF + NFT NNZ : number of nonzero dimensions, NNZ = NTF + NFT + NTT identifier class name distance function \u201cjaccard\u201d JaccardDistance NNEQ / NNZ \u201cmatching\u201d MatchingDistance NNEQ / N \u201cdice\u201d DiceDistance NNEQ / (NTT + NNZ) \u201ckulsinski\u201d KulsinskiDistance (NNEQ + N - NTT) / (NNEQ + N) \u201crogerstanimoto\u201d RogersTanimotoDistance 2 * NNEQ / (N + NNEQ) \u201crussellrao\u201d RussellRaoDistance (N - NTT) / N \u201csokalmichener\u201d SokalMichenerDistance 2 * NNEQ / (N + NNEQ) \u201csokalsneath\u201d SokalSneathDistance NNEQ / (NNEQ + 0.5 * NTT) User-defined distance: identifier class name args \u201cpyfunc\u201d PyFuncDistance func Here func is a function which takes two one-dimensional numpy\narrays, and returns a distance.  Note that in order to be used within\nthe BallTree, the distance must be a true metric:\ni.e. it must satisfy the following properties Non-negativity: d(x, y) >= 0 Identity: d(x, y) = 0 if and only if x == y Symmetry: d(x, y) = d(y, x) Triangle Inequality: d(x, y) + d(y, z) >= d(x, z) Because of the Python object overhead involved in calling the python\nfunction, this will be fairly slow, but it will have the same\nscaling as other distances. Get the given distance metric from the string identifier. See the docstring of DistanceMetric for a list of available metrics.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "metric": {
                                        "type": "string",
                                        "description": "str or class name. The string identifier or class name of the desired distance metric.\nSee the documentation of the DistanceMetric class for a list of\navailable metrics.\n"
                                    },
                                    "dtype": {
                                        "type": "float",
                                        "description": "{np.float32, np.float64}, default=np.float64. The data type of the input on which the metric will be applied.\nThis affects the precision of the computed distances.\nBy default, it is set to np.float64.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    }
                ]
            },
            {
                "Pairwise metrics": [
                    {
                        "func_name": "pairwise.additive_chi2_kernel",
                        "func_desc": "Compute the additive chi-squared kernel between observations in X and Y.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel.html#sklearn.metrics.pairwise.additive_chi2_kernel",
                        "function_definitions": {
                            "function_name": "additive_chi2_kernel",
                            "full_function": "sklearn.metrics.pairwise.additive_chi2_kernel(X, Y=None)",
                            "function_text": "Compute the additive chi-squared kernel between observations in X and Y. The chi-squared kernel is computed between each pair of rows in X and Y.  X\nand Y have to be non-negative. This kernel is most commonly applied to\nhistograms. The chi-squared kernel is given by: It can be interpreted as a weighted difference per entry. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/metrics.html#chi2-kernel",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples_X, n_features)",
                                    "param_desc": "A feature array.\n"
                                },
                                {
                                    "param_name": "Y",
                                    "param_type": "array-like of shape (n_samples_Y, n_features), default=None",
                                    "param_desc": "An optional second feature array. If None, uses Y=X.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "additive_chi2_kernel",
                            "descriptions": "Compute the additive chi-squared kernel between observations in X and Y. The chi-squared kernel is computed between each pair of rows in X and Y.  X\nand Y have to be non-negative. This kernel is most commonly applied to\nhistograms. The chi-squared kernel is given by: It can be interpreted as a weighted difference per entry. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples_X, n_features). A feature array.\n"
                                    },
                                    "Y": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples_Y, n_features), default=None. An optional second feature array. If None, uses Y=X.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "pairwise.cosine_distances",
                        "func_desc": "Compute cosine distance between samples in X and Y.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.pairwise.cosine_distances.html#sklearn.metrics.pairwise.cosine_distances",
                        "function_definitions": {
                            "function_name": "cosine_distances",
                            "full_function": "sklearn.metrics.pairwise.cosine_distances(X, Y=None)",
                            "function_text": "Compute cosine distance between samples in X and Y. Cosine distance is defined as 1.0 minus the cosine similarity. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/metrics.html#metrics",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples_X, n_features)",
                                    "param_desc": "Matrix X.\n"
                                },
                                {
                                    "param_name": "Y",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples_Y, n_features),             default=None",
                                    "param_desc": "Matrix Y.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "cosine_distances",
                            "descriptions": "Compute cosine distance between samples in X and Y. Cosine distance is defined as 1.0 minus the cosine similarity. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples_X, n_features). Matrix X.\n"
                                    },
                                    "Y": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples_Y, n_features),             default=None. Matrix Y.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "pairwise.distance_metrics",
                        "func_desc": "Valid metrics for pairwise_distances.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.pairwise.distance_metrics.html#sklearn.metrics.pairwise.distance_metrics",
                        "function_definitions": {
                            "function_name": "distance_metrics",
                            "full_function": "sklearn.metrics.pairwise.distance_metrics()",
                            "function_text": "Valid metrics for pairwise_distances. This function simply returns the valid pairwise distance metrics.\nIt exists to allow for a description of the mapping for\neach of the valid strings. The valid distance metrics, and the function they map to, are: metric Function \u2018cityblock\u2019 metrics.pairwise.manhattan_distances \u2018cosine\u2019 metrics.pairwise.cosine_distances \u2018euclidean\u2019 metrics.pairwise.euclidean_distances \u2018haversine\u2019 metrics.pairwise.haversine_distances \u2018l1\u2019 metrics.pairwise.manhattan_distances \u2018l2\u2019 metrics.pairwise.euclidean_distances \u2018manhattan\u2019 metrics.pairwise.manhattan_distances \u2018nan_euclidean\u2019 metrics.pairwise.nan_euclidean_distances Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/metrics.html#metrics",
                            "parameter_names_desc": []
                        },
                        "function_calling": {}
                    },
                    {
                        "func_name": "pairwise.haversine_distances",
                        "func_desc": "Compute the Haversine distance between samples in X and Y.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.pairwise.haversine_distances.html#sklearn.metrics.pairwise.haversine_distances",
                        "function_definitions": {
                            "function_name": "haversine_distances",
                            "full_function": "sklearn.metrics.pairwise.haversine_distances(X, Y=None)",
                            "function_text": "Compute the Haversine distance between samples in X and Y. The Haversine (or great circle) distance is the angular distance between\ntwo points on the surface of a sphere. The first coordinate of each point\nis assumed to be the latitude, the second is the longitude, given\nin radians. The dimension of the data must be 2.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples_X, 2)",
                                    "param_desc": "A feature array.\n"
                                },
                                {
                                    "param_name": "Y",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples_Y, 2), default=None",
                                    "param_desc": "An optional second feature array. If None, uses Y=X.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "haversine_distances",
                            "descriptions": "Compute the Haversine distance between samples in X and Y. The Haversine (or great circle) distance is the angular distance between\ntwo points on the surface of a sphere. The first coordinate of each point\nis assumed to be the latitude, the second is the longitude, given\nin radians. The dimension of the data must be 2.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples_X, 2). A feature array.\n"
                                    },
                                    "Y": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples_Y, 2), default=None. An optional second feature array. If None, uses Y=X.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "pairwise.laplacian_kernel",
                        "func_desc": "Compute the laplacian kernel between X and Y.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.pairwise.laplacian_kernel.html#sklearn.metrics.pairwise.laplacian_kernel",
                        "function_definitions": {
                            "function_name": "laplacian_kernel",
                            "full_function": "sklearn.metrics.pairwise.laplacian_kernel(X, Y=None, gamma=None)",
                            "function_text": "Compute the laplacian kernel between X and Y. The laplacian kernel is defined as: for each pair of rows x in X and y in Y.\nRead more in the User Guide. Added in version 0.17.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/metrics.html#laplacian-kernel",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples_X, n_features)",
                                    "param_desc": "A feature array.\n"
                                },
                                {
                                    "param_name": "Y",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples_Y, n_features), default=None",
                                    "param_desc": "An optional second feature array. If None, uses Y=X.\n"
                                },
                                {
                                    "param_name": "gamma",
                                    "param_type": "float, default=None",
                                    "param_desc": "If None, defaults to 1.0 / n_features. Otherwise it should be strictly positive.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "laplacian_kernel",
                            "descriptions": "Compute the laplacian kernel between X and Y. The laplacian kernel is defined as: for each pair of rows x in X and y in Y.\nRead more in the User Guide. Added in version 0.17.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples_X, n_features). A feature array.\n"
                                    },
                                    "Y": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples_Y, n_features), default=None. An optional second feature array. If None, uses Y=X.\n"
                                    },
                                    "gamma": {
                                        "type": "float",
                                        "description": "float, default=None. If None, defaults to 1.0 / n_features. Otherwise it should be strictly positive.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "pairwise.manhattan_distances",
                        "func_desc": "Compute the L1 distances between the vectors in X and Y.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.pairwise.manhattan_distances.html#sklearn.metrics.pairwise.manhattan_distances",
                        "function_definitions": {
                            "function_name": "manhattan_distances",
                            "full_function": "sklearn.metrics.pairwise.manhattan_distances(X, Y=None)",
                            "function_text": "Compute the L1 distances between the vectors in X and Y. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/metrics.html#metrics",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples_X, n_features)",
                                    "param_desc": "An array where each row is a sample and each column is a feature.\n"
                                },
                                {
                                    "param_name": "Y",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples_Y, n_features), default=None",
                                    "param_desc": "An array where each row is a sample and each column is a feature.\nIf None, method uses Y=X.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "manhattan_distances",
                            "descriptions": "Compute the L1 distances between the vectors in X and Y. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples_X, n_features). An array where each row is a sample and each column is a feature.\n"
                                    },
                                    "Y": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples_Y, n_features), default=None. An array where each row is a sample and each column is a feature.\nIf None, method uses Y=X.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "pairwise.paired_cosine_distances",
                        "func_desc": "Compute the paired cosine distances between X and Y.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.pairwise.paired_cosine_distances.html#sklearn.metrics.pairwise.paired_cosine_distances",
                        "function_definitions": {
                            "function_name": "paired_cosine_distances",
                            "full_function": "sklearn.metrics.pairwise.paired_cosine_distances(X, Y)",
                            "function_text": "Compute the paired cosine distances between X and Y. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/metrics.html#metrics",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "An array where each row is a sample and each column is a feature.\n"
                                },
                                {
                                    "param_name": "Y",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "An array where each row is a sample and each column is a feature.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "paired_cosine_distances",
                            "descriptions": "Compute the paired cosine distances between X and Y. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). An array where each row is a sample and each column is a feature.\n"
                                    },
                                    "Y": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). An array where each row is a sample and each column is a feature.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "pairwise.paired_euclidean_distances",
                        "func_desc": "Compute the paired euclidean distances between X and Y.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances.html#sklearn.metrics.pairwise.paired_euclidean_distances",
                        "function_definitions": {
                            "function_name": "paired_euclidean_distances",
                            "full_function": "sklearn.metrics.pairwise.paired_euclidean_distances(X, Y)",
                            "function_text": "Compute the paired euclidean distances between X and Y. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/metrics.html#metrics",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "Input array/matrix X.\n"
                                },
                                {
                                    "param_name": "Y",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "Input array/matrix Y.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "paired_euclidean_distances",
                            "descriptions": "Compute the paired euclidean distances between X and Y. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). Input array/matrix X.\n"
                                    },
                                    "Y": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). Input array/matrix Y.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "pairwise.pairwise_kernels",
                        "func_desc": "Compute the kernel between arrays X and optional array Y.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.pairwise.pairwise_kernels.html#sklearn.metrics.pairwise.pairwise_kernels",
                        "function_definitions": {
                            "function_name": "pairwise_kernels",
                            "full_function": "sklearn.metrics.pairwise.pairwise_kernels(X, Y=None, metric='linear', *, filter_params=False, n_jobs=None, **kwds)",
                            "function_text": "Compute the kernel between arrays X and optional array Y. This method takes either a vector array or a kernel matrix, and returns\na kernel matrix. If the input is a vector array, the kernels are\ncomputed. If the input is a kernel matrix, it is returned instead. This method provides a safe way to take a kernel matrix as input, while\npreserving compatibility with many other algorithms that take a vector\narray. If Y is given (default is None), then the returned matrix is the pairwise\nkernel between the arrays from both X and Y. [\u2018additive_chi2\u2019, \u2018chi2\u2019, \u2018linear\u2019, \u2018poly\u2019, \u2018polynomial\u2019, \u2018rbf\u2019,\n\u2018laplacian\u2019, \u2018sigmoid\u2019, \u2018cosine\u2019] Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/metrics.html#metrics",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix}  of shape (n_samples_X, n_samples_X) or             (n_samples_X, n_features)",
                                    "param_desc": "Array of pairwise kernels between samples, or a feature array.\nThe shape of the array should be (n_samples_X, n_samples_X) if\nmetric == \u201cprecomputed\u201d and (n_samples_X, n_features) otherwise.\n"
                                },
                                {
                                    "param_name": "Y",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples_Y, n_features), default=None",
                                    "param_desc": "A second feature array only if X has shape (n_samples_X, n_features).\n"
                                },
                                {
                                    "param_name": "metric",
                                    "param_type": "str or callable, default=\u201dlinear\u201d",
                                    "param_desc": "The metric to use when calculating kernel between instances in a\nfeature array. If metric is a string, it must be one of the metrics\nin pairwise.PAIRWISE_KERNEL_FUNCTIONS.\nIf metric is \u201cprecomputed\u201d, X is assumed to be a kernel matrix.\nAlternatively, if metric is a callable function, it is called on each\npair of instances (rows) and the resulting value recorded. The callable\nshould take two rows from X as input and return the corresponding\nkernel value as a single number. This means that callables from\nsklearn.metrics.pairwise are not allowed, as they operate on\nmatrices, not single samples. Use the string identifying the kernel\ninstead.\n"
                                },
                                {
                                    "param_name": "filter_params",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Whether to filter invalid parameters or not.\n"
                                },
                                {
                                    "param_name": "n_jobs",
                                    "param_type": "int, default=None",
                                    "param_desc": "The number of jobs to use for the computation. This works by breaking\ndown the pairwise matrix into n_jobs even slices and computing them in\nparallel.\nNone means 1 unless in a joblib.parallel_backend context.\n-1 means using all processors. See Glossary\nfor more details.\n"
                                },
                                {
                                    "param_name": "**kwds",
                                    "param_type": "optional keyword parameters",
                                    "param_desc": "Any further parameters are passed directly to the kernel function.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "pairwise_kernels",
                            "descriptions": "Compute the kernel between arrays X and optional array Y. This method takes either a vector array or a kernel matrix, and returns\na kernel matrix. If the input is a vector array, the kernels are\ncomputed. If the input is a kernel matrix, it is returned instead. This method provides a safe way to take a kernel matrix as input, while\npreserving compatibility with many other algorithms that take a vector\narray. If Y is given (default is None), then the returned matrix is the pairwise\nkernel between the arrays from both X and Y. [\u2018additive_chi2\u2019, \u2018chi2\u2019, \u2018linear\u2019, \u2018poly\u2019, \u2018polynomial\u2019, \u2018rbf\u2019,\n\u2018laplacian\u2019, \u2018sigmoid\u2019, \u2018cosine\u2019] Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix}  of shape (n_samples_X, n_samples_X) or             (n_samples_X, n_features). Array of pairwise kernels between samples, or a feature array.\nThe shape of the array should be (n_samples_X, n_samples_X) if\nmetric == \u201cprecomputed\u201d and (n_samples_X, n_features) otherwise.\n"
                                    },
                                    "Y": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples_Y, n_features), default=None. A second feature array only if X has shape (n_samples_X, n_features).\n"
                                    },
                                    "metric": {
                                        "type": "string",
                                        "description": "str or callable, default=\u201dlinear\u201d. The metric to use when calculating kernel between instances in a\nfeature array. If metric is a string, it must be one of the metrics\nin pairwise.PAIRWISE_KERNEL_FUNCTIONS.\nIf metric is \u201cprecomputed\u201d, X is assumed to be a kernel matrix.\nAlternatively, if metric is a callable function, it is called on each\npair of instances (rows) and the resulting value recorded. The callable\nshould take two rows from X as input and return the corresponding\nkernel value as a single number. This means that callables from\nsklearn.metrics.pairwise are not allowed, as they operate on\nmatrices, not single samples. Use the string identifying the kernel\ninstead.\n"
                                    },
                                    "filter_params": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Whether to filter invalid parameters or not.\n"
                                    },
                                    "n_jobs": {
                                        "type": "integer",
                                        "description": "int, default=None. The number of jobs to use for the computation. This works by breaking\ndown the pairwise matrix into n_jobs even slices and computing them in\nparallel.\nNone means 1 unless in a joblib.parallel_backend context.\n-1 means using all processors. See Glossary\nfor more details.\n"
                                    },
                                    "**kwds": {
                                        "type": "optional keyword parameters",
                                        "description": "optional keyword parameters. Any further parameters are passed directly to the kernel function.\n"
                                    }
                                },
                                "required": [
                                    "X",
                                    "Y=None",
                                    "metric='linear'"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "pairwise.rbf_kernel",
                        "func_desc": "Compute the rbf (gaussian) kernel between X and Y.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.pairwise.rbf_kernel.html#sklearn.metrics.pairwise.rbf_kernel",
                        "function_definitions": {
                            "function_name": "rbf_kernel",
                            "full_function": "sklearn.metrics.pairwise.rbf_kernel(X, Y=None, gamma=None)",
                            "function_text": "Compute the rbf (gaussian) kernel between X and Y. K(x, y) = exp(-gamma ||x-y||^2) for each pair of rows x in X and y in Y. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/metrics.html#rbf-kernel",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples_X, n_features)",
                                    "param_desc": "A feature array.\n"
                                },
                                {
                                    "param_name": "Y",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples_Y, n_features), default=None",
                                    "param_desc": "An optional second feature array. If None, uses Y=X.\n"
                                },
                                {
                                    "param_name": "gamma",
                                    "param_type": "float, default=None",
                                    "param_desc": "If None, defaults to 1.0 / n_features.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "rbf_kernel",
                            "descriptions": "Compute the rbf (gaussian) kernel between X and Y. K(x, y) = exp(-gamma ||x-y||^2) for each pair of rows x in X and y in Y. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples_X, n_features). A feature array.\n"
                                    },
                                    "Y": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples_Y, n_features), default=None. An optional second feature array. If None, uses Y=X.\n"
                                    },
                                    "gamma": {
                                        "type": "float",
                                        "description": "float, default=None. If None, defaults to 1.0 / n_features.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "pairwise_distances",
                        "func_desc": "Compute the distance matrix from a vector array X and optional Y.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.pairwise_distances.html#sklearn.metrics.pairwise_distances",
                        "function_definitions": {
                            "function_name": "pairwise_distances",
                            "full_function": "sklearn.metrics.pairwise_distances(X, Y=None, metric='euclidean', *, n_jobs=None, force_all_finite=True, **kwds)",
                            "function_text": "Compute the distance matrix from a vector array X and optional Y. This method takes either a vector array or a distance matrix, and returns\na distance matrix.\nIf the input is a vector array, the distances are computed.\nIf the input is a distances matrix, it is returned instead.\nIf the input is a collection of non-numeric data (e.g. a list of strings or a\nboolean array), a custom metric must be passed. This method provides a safe way to take a distance matrix as input, while\npreserving compatibility with many other algorithms that take a vector\narray. If Y is given (default is None), then the returned matrix is the pairwise\ndistance between the arrays from both X and Y. Valid values for metric are: From scikit-learn: [\u2018cityblock\u2019, \u2018cosine\u2019, \u2018euclidean\u2019, \u2018l1\u2019, \u2018l2\u2019,\n\u2018manhattan\u2019]. These metrics support sparse matrix\ninputs.\n[\u2018nan_euclidean\u2019] but it does not yet support sparse matrices. From scipy.spatial.distance: [\u2018braycurtis\u2019, \u2018canberra\u2019, \u2018chebyshev\u2019,\n\u2018correlation\u2019, \u2018dice\u2019, \u2018hamming\u2019, \u2018jaccard\u2019, \u2018kulsinski\u2019, \u2018mahalanobis\u2019,\n\u2018minkowski\u2019, \u2018rogerstanimoto\u2019, \u2018russellrao\u2019, \u2018seuclidean\u2019,\n\u2018sokalmichener\u2019, \u2018sokalsneath\u2019, \u2018sqeuclidean\u2019, \u2018yule\u2019]\nSee the documentation for scipy.spatial.distance for details on these\nmetrics. These metrics do not support sparse matrix inputs. Note 'kulsinski' is deprecated from SciPy 1.9 and will be removed in SciPy 1.11. Note 'matching' has been removed in SciPy 1.9 (use 'hamming' instead). Note that in the case of \u2018cityblock\u2019, \u2018cosine\u2019 and \u2018euclidean\u2019 (which are\nvalid scipy.spatial.distance metrics), the scikit-learn implementation\nwill be used, which is faster and has support for sparse matrices (except\nfor \u2018cityblock\u2019). For a verbose description of the metrics from\nscikit-learn, see sklearn.metrics.pairwise.distance_metrics\nfunction. Read more in the User Guide.",
                            "func_text_user_guide": "sklearn.metrics.pairwise.distance_metrics.html#sklearn.metrics.pairwise.distance_metrics",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples_X, n_samples_X) or             (n_samples_X, n_features)",
                                    "param_desc": "Array of pairwise distances between samples, or a feature array.\nThe shape of the array should be (n_samples_X, n_samples_X) if\nmetric == \u201cprecomputed\u201d and (n_samples_X, n_features) otherwise.\n"
                                },
                                {
                                    "param_name": "Y",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples_Y, n_features), default=None",
                                    "param_desc": "An optional second feature array. Only allowed if\nmetric != \u201cprecomputed\u201d.\n"
                                },
                                {
                                    "param_name": "metric",
                                    "param_type": "str or callable, default=\u2019euclidean\u2019",
                                    "param_desc": "The metric to use when calculating distance between instances in a\nfeature array. If metric is a string, it must be one of the options\nallowed by scipy.spatial.distance.pdist for its metric parameter, or\na metric listed in pairwise.PAIRWISE_DISTANCE_FUNCTIONS.\nIf metric is \u201cprecomputed\u201d, X is assumed to be a distance matrix.\nAlternatively, if metric is a callable function, it is called on each\npair of instances (rows) and the resulting value recorded. The callable\nshould take two arrays from X as input and return a value indicating\nthe distance between them.\n"
                                },
                                {
                                    "param_name": "n_jobs",
                                    "param_type": "int, default=None",
                                    "param_desc": "The number of jobs to use for the computation. This works by breaking\ndown the pairwise matrix into n_jobs even slices and computing them in\nparallel.\nNone means 1 unless in a joblib.parallel_backend context.\n-1 means using all processors. See Glossary\nfor more details.\nThe \u201ceuclidean\u201d and \u201ccosine\u201d metrics rely heavily on BLAS which is already\nmultithreaded. So, increasing n_jobs would likely cause oversubscription\nand quickly degrade performance.\n"
                                },
                                {
                                    "param_name": "force_all_finite",
                                    "param_type": "bool or \u2018allow-nan\u2019, default=True",
                                    "param_desc": "Whether to raise an error on np.inf, np.nan, pd.NA in array. Ignored\nfor a metric listed in pairwise.PAIRWISE_DISTANCE_FUNCTIONS. The\npossibilities are:\n\nTrue: Force all values of array to be finite.\nFalse: accepts np.inf, np.nan, pd.NA in array.\n\u2018allow-nan\u2019: accepts only np.nan and pd.NA values in array. Values\ncannot be infinite.\n\n\nAdded in version 0.22: force_all_finite accepts the string 'allow-nan'.\n\n\nChanged in version 0.23: Accepts pd.NA and converts it into np.nan.\n\n"
                                },
                                {
                                    "param_name": "**kwds",
                                    "param_type": "optional keyword parameters",
                                    "param_desc": "Any further parameters are passed directly to the distance function.\nIf using a scipy.spatial.distance metric, the parameters are still\nmetric dependent. See the scipy docs for usage examples.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "pairwise_distances",
                            "descriptions": "Compute the distance matrix from a vector array X and optional Y. This method takes either a vector array or a distance matrix, and returns\na distance matrix.\nIf the input is a vector array, the distances are computed.\nIf the input is a distances matrix, it is returned instead.\nIf the input is a collection of non-numeric data (e.g. a list of strings or a\nboolean array), a custom metric must be passed. This method provides a safe way to take a distance matrix as input, while\npreserving compatibility with many other algorithms that take a vector\narray. If Y is given (default is None), then the returned matrix is the pairwise\ndistance between the arrays from both X and Y. Valid values for metric are: From scikit-learn: [\u2018cityblock\u2019, \u2018cosine\u2019, \u2018euclidean\u2019, \u2018l1\u2019, \u2018l2\u2019,\n\u2018manhattan\u2019]. These metrics support sparse matrix\ninputs.\n[\u2018nan_euclidean\u2019] but it does not yet support sparse matrices. From scipy.spatial.distance: [\u2018braycurtis\u2019, \u2018canberra\u2019, \u2018chebyshev\u2019,\n\u2018correlation\u2019, \u2018dice\u2019, \u2018hamming\u2019, \u2018jaccard\u2019, \u2018kulsinski\u2019, \u2018mahalanobis\u2019,\n\u2018minkowski\u2019, \u2018rogerstanimoto\u2019, \u2018russellrao\u2019, \u2018seuclidean\u2019,\n\u2018sokalmichener\u2019, \u2018sokalsneath\u2019, \u2018sqeuclidean\u2019, \u2018yule\u2019]\nSee the documentation for scipy.spatial.distance for details on these\nmetrics. These metrics do not support sparse matrix inputs. Note 'kulsinski' is deprecated from SciPy 1.9 and will be removed in SciPy 1.11. Note 'matching' has been removed in SciPy 1.9 (use 'hamming' instead). Note that in the case of \u2018cityblock\u2019, \u2018cosine\u2019 and \u2018euclidean\u2019 (which are\nvalid scipy.spatial.distance metrics), the scikit-learn implementation\nwill be used, which is faster and has support for sparse matrices (except\nfor \u2018cityblock\u2019). For a verbose description of the metrics from\nscikit-learn, see sklearn.metrics.pairwise.distance_metrics\nfunction. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples_X, n_samples_X) or             (n_samples_X, n_features). Array of pairwise distances between samples, or a feature array.\nThe shape of the array should be (n_samples_X, n_samples_X) if\nmetric == \u201cprecomputed\u201d and (n_samples_X, n_features) otherwise.\n"
                                    },
                                    "Y": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples_Y, n_features), default=None. An optional second feature array. Only allowed if\nmetric != \u201cprecomputed\u201d.\n"
                                    },
                                    "metric": {
                                        "type": "string",
                                        "description": "str or callable, default=\u2019euclidean\u2019. The metric to use when calculating distance between instances in a\nfeature array. If metric is a string, it must be one of the options\nallowed by scipy.spatial.distance.pdist for its metric parameter, or\na metric listed in pairwise.PAIRWISE_DISTANCE_FUNCTIONS.\nIf metric is \u201cprecomputed\u201d, X is assumed to be a distance matrix.\nAlternatively, if metric is a callable function, it is called on each\npair of instances (rows) and the resulting value recorded. The callable\nshould take two arrays from X as input and return a value indicating\nthe distance between them.\n"
                                    },
                                    "n_jobs": {
                                        "type": "integer",
                                        "description": "int, default=None. The number of jobs to use for the computation. This works by breaking\ndown the pairwise matrix into n_jobs even slices and computing them in\nparallel.\nNone means 1 unless in a joblib.parallel_backend context.\n-1 means using all processors. See Glossary\nfor more details.\nThe \u201ceuclidean\u201d and \u201ccosine\u201d metrics rely heavily on BLAS which is already\nmultithreaded. So, increasing n_jobs would likely cause oversubscription\nand quickly degrade performance.\n"
                                    },
                                    "force_all_finite": {
                                        "type": "boolean",
                                        "description": "bool or \u2018allow-nan\u2019, default=True. Whether to raise an error on np.inf, np.nan, pd.NA in array. Ignored\nfor a metric listed in pairwise.PAIRWISE_DISTANCE_FUNCTIONS. The\npossibilities are:\n\nTrue: Force all values of array to be finite.\nFalse: accepts np.inf, np.nan, pd.NA in array.\n\u2018allow-nan\u2019: accepts only np.nan and pd.NA values in array. Values\ncannot be infinite.\n\n\nAdded in version 0.22: force_all_finite accepts the string 'allow-nan'.\n\n\nChanged in version 0.23: Accepts pd.NA and converts it into np.nan.\n\n"
                                    },
                                    "**kwds": {
                                        "type": "optional keyword parameters",
                                        "description": "optional keyword parameters. Any further parameters are passed directly to the distance function.\nIf using a scipy.spatial.distance metric, the parameters are still\nmetric dependent. See the scipy docs for usage examples.\n"
                                    }
                                },
                                "required": [
                                    "X",
                                    "Y=None",
                                    "metric='euclidean'"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "pairwise_distances_argmin_min",
                        "func_desc": "Compute minimum distances between one point and a set of points.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.pairwise_distances_argmin_min.html#sklearn.metrics.pairwise_distances_argmin_min",
                        "function_definitions": {
                            "function_name": "pairwise_distances_argmin_min",
                            "full_function": "sklearn.metrics.pairwise_distances_argmin_min(X, Y, *, axis=1, metric='euclidean', metric_kwargs=None)",
                            "function_text": "Compute minimum distances between one point and a set of points. This function computes for each row in X, the index of the row of Y which\nis closest (according to the specified distance). The minimal distances are\nalso returned. This is mostly equivalent to calling: pairwise_distances(X, Y=Y, metric=metric).min(axis=axis)) but uses much less memory, and is faster for large arrays.",
                            "func_text_user_guide": "sklearn.metrics.pairwise_distances.html#sklearn.metrics.pairwise_distances",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples_X, n_features)",
                                    "param_desc": "Array containing points.\n"
                                },
                                {
                                    "param_name": "Y",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples_Y, n_features)",
                                    "param_desc": "Array containing points.\n"
                                },
                                {
                                    "param_name": "axis",
                                    "param_type": "int, default=1",
                                    "param_desc": "Axis along which the argmin and distances are to be computed.\n"
                                },
                                {
                                    "param_name": "metric",
                                    "param_type": "str or callable, default=\u2019euclidean\u2019",
                                    "param_desc": "Metric to use for distance computation. Any metric from scikit-learn\nor scipy.spatial.distance can be used.\nIf metric is a callable function, it is called on each\npair of instances (rows) and the resulting value recorded. The callable\nshould take two arrays as input and return one value indicating the\ndistance between them. This works for Scipy\u2019s metrics, but is less\nefficient than passing the metric name as a string.\nDistance matrices are not supported.\nValid values for metric are:\n\nfrom scikit-learn: [\u2018cityblock\u2019, \u2018cosine\u2019, \u2018euclidean\u2019, \u2018l1\u2019, \u2018l2\u2019,\n\u2018manhattan\u2019]\nfrom scipy.spatial.distance: [\u2018braycurtis\u2019, \u2018canberra\u2019, \u2018chebyshev\u2019,\n\u2018correlation\u2019, \u2018dice\u2019, \u2018hamming\u2019, \u2018jaccard\u2019, \u2018kulsinski\u2019,\n\u2018mahalanobis\u2019, \u2018minkowski\u2019, \u2018rogerstanimoto\u2019, \u2018russellrao\u2019,\n\u2018seuclidean\u2019, \u2018sokalmichener\u2019, \u2018sokalsneath\u2019, \u2018sqeuclidean\u2019,\n\u2018yule\u2019]\n\nSee the documentation for scipy.spatial.distance for details on these\nmetrics.\n\nNote\n'kulsinski' is deprecated from SciPy 1.9 and will be removed in SciPy 1.11.\n\n\nNote\n'matching' has been removed in SciPy 1.9 (use 'hamming' instead).\n\n"
                                },
                                {
                                    "param_name": "metric_kwargs",
                                    "param_type": "dict, default=None",
                                    "param_desc": "Keyword arguments to pass to specified metric function.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "pairwise_distances_argmin_min",
                            "descriptions": "Compute minimum distances between one point and a set of points. This function computes for each row in X, the index of the row of Y which\nis closest (according to the specified distance). The minimal distances are\nalso returned. This is mostly equivalent to calling: pairwise_distances(X, Y=Y, metric=metric).min(axis=axis)) but uses much less memory, and is faster for large arrays.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples_X, n_features). Array containing points.\n"
                                    },
                                    "Y": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples_Y, n_features). Array containing points.\n"
                                    },
                                    "axis": {
                                        "type": "integer",
                                        "description": "int, default=1. Axis along which the argmin and distances are to be computed.\n"
                                    },
                                    "metric": {
                                        "type": "string",
                                        "description": "str or callable, default=\u2019euclidean\u2019. Metric to use for distance computation. Any metric from scikit-learn\nor scipy.spatial.distance can be used.\nIf metric is a callable function, it is called on each\npair of instances (rows) and the resulting value recorded. The callable\nshould take two arrays as input and return one value indicating the\ndistance between them. This works for Scipy\u2019s metrics, but is less\nefficient than passing the metric name as a string.\nDistance matrices are not supported.\nValid values for metric are:\n\nfrom scikit-learn: [\u2018cityblock\u2019, \u2018cosine\u2019, \u2018euclidean\u2019, \u2018l1\u2019, \u2018l2\u2019,\n\u2018manhattan\u2019]\nfrom scipy.spatial.distance: [\u2018braycurtis\u2019, \u2018canberra\u2019, \u2018chebyshev\u2019,\n\u2018correlation\u2019, \u2018dice\u2019, \u2018hamming\u2019, \u2018jaccard\u2019, \u2018kulsinski\u2019,\n\u2018mahalanobis\u2019, \u2018minkowski\u2019, \u2018rogerstanimoto\u2019, \u2018russellrao\u2019,\n\u2018seuclidean\u2019, \u2018sokalmichener\u2019, \u2018sokalsneath\u2019, \u2018sqeuclidean\u2019,\n\u2018yule\u2019]\n\nSee the documentation for scipy.spatial.distance for details on these\nmetrics.\n\nNote\n'kulsinski' is deprecated from SciPy 1.9 and will be removed in SciPy 1.11.\n\n\nNote\n'matching' has been removed in SciPy 1.9 (use 'hamming' instead).\n\n"
                                    },
                                    "metric_kwargs": {
                                        "type": "dict, default=None",
                                        "description": "dict, default=None. Keyword arguments to pass to specified metric function.\n"
                                    }
                                },
                                "required": [
                                    "X",
                                    "Y"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "pairwise.chi2_kernel",
                        "func_desc": "Compute the exponential chi-squared kernel between X and Y.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.pairwise.chi2_kernel.html#sklearn.metrics.pairwise.chi2_kernel",
                        "function_definitions": {
                            "function_name": "chi2_kernel",
                            "full_function": "sklearn.metrics.pairwise.chi2_kernel(X, Y=None, gamma=1.0)",
                            "function_text": "Compute the exponential chi-squared kernel between X and Y. The chi-squared kernel is computed between each pair of rows in X and Y.  X\nand Y have to be non-negative. This kernel is most commonly applied to\nhistograms. The chi-squared kernel is given by: It can be interpreted as a weighted difference per entry. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/metrics.html#chi2-kernel",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples_X, n_features)",
                                    "param_desc": "A feature array.\n"
                                },
                                {
                                    "param_name": "Y",
                                    "param_type": "array-like of shape (n_samples_Y, n_features), default=None",
                                    "param_desc": "An optional second feature array. If None, uses Y=X.\n"
                                },
                                {
                                    "param_name": "gamma",
                                    "param_type": "float, default=1",
                                    "param_desc": "Scaling parameter of the chi2 kernel.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "chi2_kernel",
                            "descriptions": "Compute the exponential chi-squared kernel between X and Y. The chi-squared kernel is computed between each pair of rows in X and Y.  X\nand Y have to be non-negative. This kernel is most commonly applied to\nhistograms. The chi-squared kernel is given by: It can be interpreted as a weighted difference per entry. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples_X, n_features). A feature array.\n"
                                    },
                                    "Y": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples_Y, n_features), default=None. An optional second feature array. If None, uses Y=X.\n"
                                    },
                                    "gamma": {
                                        "type": "float",
                                        "description": "float, default=1. Scaling parameter of the chi2 kernel.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "pairwise.cosine_similarity",
                        "func_desc": "Compute cosine similarity between samples in X and Y.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.pairwise.cosine_similarity.html#sklearn.metrics.pairwise.cosine_similarity",
                        "function_definitions": {
                            "function_name": "cosine_similarity",
                            "full_function": "sklearn.metrics.pairwise.cosine_similarity(X, Y=None, dense_output=True)",
                            "function_text": "Compute cosine similarity between samples in X and Y. Cosine similarity, or the cosine kernel, computes similarity as the\nnormalized dot product of X and Y: K(X, Y) = <X, Y> / (||X||*||Y||) On L2-normalized data, this function is equivalent to linear_kernel. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/metrics.html#cosine-similarity",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples_X, n_features)",
                                    "param_desc": "Input data.\n"
                                },
                                {
                                    "param_name": "Y",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples_Y, n_features),             default=None",
                                    "param_desc": "Input data. If None, the output will be the pairwise\nsimilarities between all samples in X.\n"
                                },
                                {
                                    "param_name": "dense_output",
                                    "param_type": "bool, default=True",
                                    "param_desc": "Whether to return dense output even when the input is sparse. If\nFalse, the output is sparse if both input arrays are sparse.\n\nAdded in version 0.17: parameter dense_output for dense output.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "cosine_similarity",
                            "descriptions": "Compute cosine similarity between samples in X and Y. Cosine similarity, or the cosine kernel, computes similarity as the\nnormalized dot product of X and Y: K(X, Y) = <X, Y> / (||X||*||Y||) On L2-normalized data, this function is equivalent to linear_kernel. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples_X, n_features). Input data.\n"
                                    },
                                    "Y": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples_Y, n_features),             default=None. Input data. If None, the output will be the pairwise\nsimilarities between all samples in X.\n"
                                    },
                                    "dense_output": {
                                        "type": "boolean",
                                        "description": "bool, default=True. Whether to return dense output even when the input is sparse. If\nFalse, the output is sparse if both input arrays are sparse.\n\nAdded in version 0.17: parameter dense_output for dense output.\n\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "pairwise.euclidean_distances",
                        "func_desc": "Compute the distance matrix between each pair from a vector array X and Y.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.pairwise.euclidean_distances.html#sklearn.metrics.pairwise.euclidean_distances",
                        "function_definitions": {
                            "function_name": "euclidean_distances",
                            "full_function": "sklearn.metrics.pairwise.euclidean_distances(X, Y=None, *, Y_norm_squared=None, squared=False, X_norm_squared=None)",
                            "function_text": "Compute the distance matrix between each pair from a vector array X and Y. For efficiency reasons, the euclidean distance between a pair of row\nvector x and y is computed as: This formulation has two advantages over other ways of computing distances.\nFirst, it is computationally efficient when dealing with sparse data.\nSecond, if one argument varies but the other remains unchanged, then\ndot(x, x) and/or dot(y, y) can be pre-computed. However, this is not the most precise way of doing this computation,\nbecause this equation potentially suffers from \u201ccatastrophic cancellation\u201d.\nAlso, the distance matrix returned by this function may not be exactly\nsymmetric as required by, e.g., scipy.spatial.distance functions. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/metrics.html#metrics",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples_X, n_features)",
                                    "param_desc": "An array where each row is a sample and each column is a feature.\n"
                                },
                                {
                                    "param_name": "Y",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples_Y, n_features),             default=None",
                                    "param_desc": "An array where each row is a sample and each column is a feature.\nIf None, method uses Y=X.\n"
                                },
                                {
                                    "param_name": "Y_norm_squared",
                                    "param_type": "array-like of shape (n_samples_Y,) or (n_samples_Y, 1)             or (1, n_samples_Y), default=None",
                                    "param_desc": "Pre-computed dot-products of vectors in Y (e.g.,\n(Y**2).sum(axis=1))\nMay be ignored in some cases, see the note below.\n"
                                },
                                {
                                    "param_name": "squared",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Return squared Euclidean distances.\n"
                                },
                                {
                                    "param_name": "X_norm_squared",
                                    "param_type": "array-like of shape (n_samples_X,) or (n_samples_X, 1)             or (1, n_samples_X), default=None",
                                    "param_desc": "Pre-computed dot-products of vectors in X (e.g.,\n(X**2).sum(axis=1))\nMay be ignored in some cases, see the note below.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "euclidean_distances",
                            "descriptions": "Compute the distance matrix between each pair from a vector array X and Y. For efficiency reasons, the euclidean distance between a pair of row\nvector x and y is computed as: This formulation has two advantages over other ways of computing distances.\nFirst, it is computationally efficient when dealing with sparse data.\nSecond, if one argument varies but the other remains unchanged, then\ndot(x, x) and/or dot(y, y) can be pre-computed. However, this is not the most precise way of doing this computation,\nbecause this equation potentially suffers from \u201ccatastrophic cancellation\u201d.\nAlso, the distance matrix returned by this function may not be exactly\nsymmetric as required by, e.g., scipy.spatial.distance functions. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples_X, n_features). An array where each row is a sample and each column is a feature.\n"
                                    },
                                    "Y": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples_Y, n_features),             default=None. An array where each row is a sample and each column is a feature.\nIf None, method uses Y=X.\n"
                                    },
                                    "Y_norm_squared": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples_Y,) or (n_samples_Y, 1)             or (1, n_samples_Y), default=None. Pre-computed dot-products of vectors in Y (e.g.,\n(Y**2).sum(axis=1))\nMay be ignored in some cases, see the note below.\n"
                                    },
                                    "squared": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Return squared Euclidean distances.\n"
                                    },
                                    "X_norm_squared": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples_X,) or (n_samples_X, 1)             or (1, n_samples_X), default=None. Pre-computed dot-products of vectors in X (e.g.,\n(X**2).sum(axis=1))\nMay be ignored in some cases, see the note below.\n"
                                    }
                                },
                                "required": [
                                    "X",
                                    "Y=None"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "pairwise.kernel_metrics",
                        "func_desc": "Valid metrics for pairwise_kernels.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.pairwise.kernel_metrics.html#sklearn.metrics.pairwise.kernel_metrics",
                        "function_definitions": {
                            "function_name": "kernel_metrics",
                            "full_function": "sklearn.metrics.pairwise.kernel_metrics()",
                            "function_text": "Valid metrics for pairwise_kernels. This function simply returns the valid pairwise distance metrics.\nIt exists, however, to allow for a verbose description of the mapping for\neach of the valid strings. metric Function \u2018additive_chi2\u2019 sklearn.pairwise.additive_chi2_kernel \u2018chi2\u2019 sklearn.pairwise.chi2_kernel \u2018linear\u2019 sklearn.pairwise.linear_kernel \u2018poly\u2019 sklearn.pairwise.polynomial_kernel \u2018polynomial\u2019 sklearn.pairwise.polynomial_kernel \u2018rbf\u2019 sklearn.pairwise.rbf_kernel \u2018laplacian\u2019 sklearn.pairwise.laplacian_kernel \u2018sigmoid\u2019 sklearn.pairwise.sigmoid_kernel \u2018cosine\u2019 sklearn.pairwise.cosine_similarity Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/metrics.html#metrics",
                            "parameter_names_desc": []
                        },
                        "function_calling": {}
                    },
                    {
                        "func_name": "pairwise.linear_kernel",
                        "func_desc": "Compute the linear kernel between X and Y.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.pairwise.linear_kernel.html#sklearn.metrics.pairwise.linear_kernel",
                        "function_definitions": {
                            "function_name": "linear_kernel",
                            "full_function": "sklearn.metrics.pairwise.linear_kernel(X, Y=None, dense_output=True)",
                            "function_text": "Compute the linear kernel between X and Y. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/metrics.html#linear-kernel",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples_X, n_features)",
                                    "param_desc": "A feature array.\n"
                                },
                                {
                                    "param_name": "Y",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples_Y, n_features), default=None",
                                    "param_desc": "An optional second feature array. If None, uses Y=X.\n"
                                },
                                {
                                    "param_name": "dense_output",
                                    "param_type": "bool, default=True",
                                    "param_desc": "Whether to return dense output even when the input is sparse. If\nFalse, the output is sparse if both input arrays are sparse.\n\nAdded in version 0.20.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "linear_kernel",
                            "descriptions": "Compute the linear kernel between X and Y. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples_X, n_features). A feature array.\n"
                                    },
                                    "Y": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples_Y, n_features), default=None. An optional second feature array. If None, uses Y=X.\n"
                                    },
                                    "dense_output": {
                                        "type": "boolean",
                                        "description": "bool, default=True. Whether to return dense output even when the input is sparse. If\nFalse, the output is sparse if both input arrays are sparse.\n\nAdded in version 0.20.\n\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "pairwise.nan_euclidean_distances",
                        "func_desc": "Calculate the euclidean distances in the presence of missing values.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances.html#sklearn.metrics.pairwise.nan_euclidean_distances",
                        "function_definitions": {
                            "function_name": "nan_euclidean_distances",
                            "full_function": "sklearn.metrics.pairwise.nan_euclidean_distances(X, Y=None, *, squared=False, missing_values=nan, copy=True)",
                            "function_text": "Calculate the euclidean distances in the presence of missing values. Compute the euclidean distance between each pair of samples in X and Y,\nwhere Y=X is assumed if Y=None. When calculating the distance between a\npair of samples, this formulation ignores feature coordinates with a\nmissing value in either sample and scales up the weight of the remaining\ncoordinates: dist(x,y) = sqrt(weight * sq. distance from present coordinates)\nwhere,\nweight = Total # of coordinates / # of present coordinates For example, the distance between [3, na, na, 6] and [1, na, 4, 5]\nis: If all the coordinates are missing or if there are no common present\ncoordinates then NaN is returned for that pair. Read more in the User Guide. Added in version 0.22.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/metrics.html#metrics",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples_X, n_features)",
                                    "param_desc": "An array where each row is a sample and each column is a feature.\n"
                                },
                                {
                                    "param_name": "Y",
                                    "param_type": "array-like of shape (n_samples_Y, n_features), default=None",
                                    "param_desc": "An array where each row is a sample and each column is a feature.\nIf None, method uses Y=X.\n"
                                },
                                {
                                    "param_name": "squared",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Return squared Euclidean distances.\n"
                                },
                                {
                                    "param_name": "missing_values",
                                    "param_type": "np.nan, float or int, default=np.nan",
                                    "param_desc": "Representation of missing value.\n"
                                },
                                {
                                    "param_name": "copy",
                                    "param_type": "bool, default=True",
                                    "param_desc": "Make and use a deep copy of X and Y (if Y exists).\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "nan_euclidean_distances",
                            "descriptions": "Calculate the euclidean distances in the presence of missing values. Compute the euclidean distance between each pair of samples in X and Y,\nwhere Y=X is assumed if Y=None. When calculating the distance between a\npair of samples, this formulation ignores feature coordinates with a\nmissing value in either sample and scales up the weight of the remaining\ncoordinates: dist(x,y) = sqrt(weight * sq. distance from present coordinates)\nwhere,\nweight = Total # of coordinates / # of present coordinates For example, the distance between [3, na, na, 6] and [1, na, 4, 5]\nis: If all the coordinates are missing or if there are no common present\ncoordinates then NaN is returned for that pair. Read more in the User Guide. Added in version 0.22.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples_X, n_features). An array where each row is a sample and each column is a feature.\n"
                                    },
                                    "Y": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples_Y, n_features), default=None. An array where each row is a sample and each column is a feature.\nIf None, method uses Y=X.\n"
                                    },
                                    "squared": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Return squared Euclidean distances.\n"
                                    },
                                    "missing_values": {
                                        "type": "integer",
                                        "description": "np.nan, float or int, default=np.nan. Representation of missing value.\n"
                                    },
                                    "copy": {
                                        "type": "boolean",
                                        "description": "bool, default=True. Make and use a deep copy of X and Y (if Y exists).\n"
                                    }
                                },
                                "required": [
                                    "X",
                                    "Y=None"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "pairwise.paired_distances",
                        "func_desc": "Compute the paired distances between X and Y.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.pairwise.paired_distances.html#sklearn.metrics.pairwise.paired_distances",
                        "function_definitions": {
                            "function_name": "paired_distances",
                            "full_function": "sklearn.metrics.pairwise.paired_distances(X, Y, *, metric='euclidean', **kwds)",
                            "function_text": "Compute the paired distances between X and Y. Compute the distances between (X[0], Y[0]), (X[1], Y[1]), etc\u2026 Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/metrics.html#metrics",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "ndarray of shape (n_samples, n_features)",
                                    "param_desc": "Array 1 for distance computation.\n"
                                },
                                {
                                    "param_name": "Y",
                                    "param_type": "ndarray of shape (n_samples, n_features)",
                                    "param_desc": "Array 2 for distance computation.\n"
                                },
                                {
                                    "param_name": "metric",
                                    "param_type": "str or callable, default=\u201deuclidean\u201d",
                                    "param_desc": "The metric to use when calculating distance between instances in a\nfeature array. If metric is a string, it must be one of the options\nspecified in PAIRED_DISTANCES, including \u201ceuclidean\u201d,\n\u201cmanhattan\u201d, or \u201ccosine\u201d.\nAlternatively, if metric is a callable function, it is called on each\npair of instances (rows) and the resulting value recorded. The callable\nshould take two arrays from X as input and return a value indicating\nthe distance between them.\n"
                                },
                                {
                                    "param_name": "**kwds",
                                    "param_type": "dict",
                                    "param_desc": "Unused parameters.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "paired_distances",
                            "descriptions": "Compute the paired distances between X and Y. Compute the distances between (X[0], Y[0]), (X[1], Y[1]), etc\u2026 Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "ndarray of shape (n_samples, n_features). Array 1 for distance computation.\n"
                                    },
                                    "Y": {
                                        "type": "array",
                                        "description": "ndarray of shape (n_samples, n_features). Array 2 for distance computation.\n"
                                    },
                                    "metric": {
                                        "type": "string",
                                        "description": "str or callable, default=\u201deuclidean\u201d. The metric to use when calculating distance between instances in a\nfeature array. If metric is a string, it must be one of the options\nspecified in PAIRED_DISTANCES, including \u201ceuclidean\u201d,\n\u201cmanhattan\u201d, or \u201ccosine\u201d.\nAlternatively, if metric is a callable function, it is called on each\npair of instances (rows) and the resulting value recorded. The callable\nshould take two arrays from X as input and return a value indicating\nthe distance between them.\n"
                                    },
                                    "**kwds": {
                                        "type": "dict",
                                        "description": "dict. Unused parameters.\n"
                                    }
                                },
                                "required": [
                                    "X",
                                    "Y"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "pairwise.paired_manhattan_distances",
                        "func_desc": "Compute the paired L1 distances between X and Y.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances.html#sklearn.metrics.pairwise.paired_manhattan_distances",
                        "function_definitions": {
                            "function_name": "paired_manhattan_distances",
                            "full_function": "sklearn.metrics.pairwise.paired_manhattan_distances(X, Y)",
                            "function_text": "Compute the paired L1 distances between X and Y. Distances are calculated between (X[0], Y[0]), (X[1], Y[1]), \u2026,\n(X[n_samples], Y[n_samples]). Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/metrics.html#metrics",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "An array-like where each row is a sample and each column is a feature.\n"
                                },
                                {
                                    "param_name": "Y",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "An array-like where each row is a sample and each column is a feature.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "paired_manhattan_distances",
                            "descriptions": "Compute the paired L1 distances between X and Y. Distances are calculated between (X[0], Y[0]), (X[1], Y[1]), \u2026,\n(X[n_samples], Y[n_samples]). Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). An array-like where each row is a sample and each column is a feature.\n"
                                    },
                                    "Y": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). An array-like where each row is a sample and each column is a feature.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "pairwise.polynomial_kernel",
                        "func_desc": "Compute the polynomial kernel between X and Y.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.pairwise.polynomial_kernel.html#sklearn.metrics.pairwise.polynomial_kernel",
                        "function_definitions": {
                            "function_name": "polynomial_kernel",
                            "full_function": "sklearn.metrics.pairwise.polynomial_kernel(X, Y=None, degree=3, gamma=None, coef0=1)",
                            "function_text": "Compute the polynomial kernel between X and Y. K(X, Y) = (gamma <X, Y> + coef0) ^ degree Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/metrics.html#polynomial-kernel",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples_X, n_features)",
                                    "param_desc": "A feature array.\n"
                                },
                                {
                                    "param_name": "Y",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples_Y, n_features), default=None",
                                    "param_desc": "An optional second feature array. If None, uses Y=X.\n"
                                },
                                {
                                    "param_name": "degree",
                                    "param_type": "float, default=3",
                                    "param_desc": "Kernel degree.\n"
                                },
                                {
                                    "param_name": "gamma",
                                    "param_type": "float, default=None",
                                    "param_desc": "Coefficient of the vector inner product. If None, defaults to 1.0 / n_features.\n"
                                },
                                {
                                    "param_name": "coef0",
                                    "param_type": "float, default=1",
                                    "param_desc": "Constant offset added to scaled inner product.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "polynomial_kernel",
                            "descriptions": "Compute the polynomial kernel between X and Y. K(X, Y) = (gamma <X, Y> + coef0) ^ degree Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples_X, n_features). A feature array.\n"
                                    },
                                    "Y": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples_Y, n_features), default=None. An optional second feature array. If None, uses Y=X.\n"
                                    },
                                    "degree": {
                                        "type": "float",
                                        "description": "float, default=3. Kernel degree.\n"
                                    },
                                    "gamma": {
                                        "type": "float",
                                        "description": "float, default=None. Coefficient of the vector inner product. If None, defaults to 1.0 / n_features.\n"
                                    },
                                    "coef0": {
                                        "type": "float",
                                        "description": "float, default=1. Constant offset added to scaled inner product.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "pairwise.sigmoid_kernel",
                        "func_desc": "Compute the sigmoid kernel between X and Y.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.pairwise.sigmoid_kernel.html#sklearn.metrics.pairwise.sigmoid_kernel",
                        "function_definitions": {
                            "function_name": "sigmoid_kernel",
                            "full_function": "sklearn.metrics.pairwise.sigmoid_kernel(X, Y=None, gamma=None, coef0=1)",
                            "function_text": "Compute the sigmoid kernel between X and Y. K(X, Y) = tanh(gamma <X, Y> + coef0) Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/metrics.html#sigmoid-kernel",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples_X, n_features)",
                                    "param_desc": "A feature array.\n"
                                },
                                {
                                    "param_name": "Y",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples_Y, n_features), default=None",
                                    "param_desc": "An optional second feature array. If None, uses Y=X.\n"
                                },
                                {
                                    "param_name": "gamma",
                                    "param_type": "float, default=None",
                                    "param_desc": "Coefficient of the vector inner product. If None, defaults to 1.0 / n_features.\n"
                                },
                                {
                                    "param_name": "coef0",
                                    "param_type": "float, default=1",
                                    "param_desc": "Constant offset added to scaled inner product.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "sigmoid_kernel",
                            "descriptions": "Compute the sigmoid kernel between X and Y. K(X, Y) = tanh(gamma <X, Y> + coef0) Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples_X, n_features). A feature array.\n"
                                    },
                                    "Y": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples_Y, n_features), default=None. An optional second feature array. If None, uses Y=X.\n"
                                    },
                                    "gamma": {
                                        "type": "float",
                                        "description": "float, default=None. Coefficient of the vector inner product. If None, defaults to 1.0 / n_features.\n"
                                    },
                                    "coef0": {
                                        "type": "float",
                                        "description": "float, default=1. Constant offset added to scaled inner product.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "pairwise_distances_argmin",
                        "func_desc": "Compute minimum distances between one point and a set of points.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.pairwise_distances_argmin.html#sklearn.metrics.pairwise_distances_argmin",
                        "function_definitions": {
                            "function_name": "pairwise_distances_argmin",
                            "full_function": "sklearn.metrics.pairwise_distances_argmin(X, Y, *, axis=1, metric='euclidean', metric_kwargs=None)",
                            "function_text": "Compute minimum distances between one point and a set of points. This function computes for each row in X, the index of the row of Y which\nis closest (according to the specified distance). This is mostly equivalent to calling: pairwise_distances(X, Y=Y, metric=metric).argmin(axis=axis) but uses much less memory, and is faster for large arrays. This function works with dense 2D arrays only.",
                            "func_text_user_guide": "sklearn.metrics.pairwise_distances.html#sklearn.metrics.pairwise_distances",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples_X, n_features)",
                                    "param_desc": "Array containing points.\n"
                                },
                                {
                                    "param_name": "Y",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples_Y, n_features)",
                                    "param_desc": "Arrays containing points.\n"
                                },
                                {
                                    "param_name": "axis",
                                    "param_type": "int, default=1",
                                    "param_desc": "Axis along which the argmin and distances are to be computed.\n"
                                },
                                {
                                    "param_name": "metric",
                                    "param_type": "str or callable, default=\u201deuclidean\u201d",
                                    "param_desc": "Metric to use for distance computation. Any metric from scikit-learn\nor scipy.spatial.distance can be used.\nIf metric is a callable function, it is called on each\npair of instances (rows) and the resulting value recorded. The callable\nshould take two arrays as input and return one value indicating the\ndistance between them. This works for Scipy\u2019s metrics, but is less\nefficient than passing the metric name as a string.\nDistance matrices are not supported.\nValid values for metric are:\n\nfrom scikit-learn: [\u2018cityblock\u2019, \u2018cosine\u2019, \u2018euclidean\u2019, \u2018l1\u2019, \u2018l2\u2019,\n\u2018manhattan\u2019]\nfrom scipy.spatial.distance: [\u2018braycurtis\u2019, \u2018canberra\u2019, \u2018chebyshev\u2019,\n\u2018correlation\u2019, \u2018dice\u2019, \u2018hamming\u2019, \u2018jaccard\u2019, \u2018kulsinski\u2019,\n\u2018mahalanobis\u2019, \u2018minkowski\u2019, \u2018rogerstanimoto\u2019, \u2018russellrao\u2019,\n\u2018seuclidean\u2019, \u2018sokalmichener\u2019, \u2018sokalsneath\u2019, \u2018sqeuclidean\u2019,\n\u2018yule\u2019]\n\nSee the documentation for scipy.spatial.distance for details on these\nmetrics.\n\nNote\n'kulsinski' is deprecated from SciPy 1.9 and will be removed in SciPy 1.11.\n\n\nNote\n'matching' has been removed in SciPy 1.9 (use 'hamming' instead).\n\n"
                                },
                                {
                                    "param_name": "metric_kwargs",
                                    "param_type": "dict, default=None",
                                    "param_desc": "Keyword arguments to pass to specified metric function.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "pairwise_distances_argmin",
                            "descriptions": "Compute minimum distances between one point and a set of points. This function computes for each row in X, the index of the row of Y which\nis closest (according to the specified distance). This is mostly equivalent to calling: pairwise_distances(X, Y=Y, metric=metric).argmin(axis=axis) but uses much less memory, and is faster for large arrays. This function works with dense 2D arrays only.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples_X, n_features). Array containing points.\n"
                                    },
                                    "Y": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples_Y, n_features). Arrays containing points.\n"
                                    },
                                    "axis": {
                                        "type": "integer",
                                        "description": "int, default=1. Axis along which the argmin and distances are to be computed.\n"
                                    },
                                    "metric": {
                                        "type": "string",
                                        "description": "str or callable, default=\u201deuclidean\u201d. Metric to use for distance computation. Any metric from scikit-learn\nor scipy.spatial.distance can be used.\nIf metric is a callable function, it is called on each\npair of instances (rows) and the resulting value recorded. The callable\nshould take two arrays as input and return one value indicating the\ndistance between them. This works for Scipy\u2019s metrics, but is less\nefficient than passing the metric name as a string.\nDistance matrices are not supported.\nValid values for metric are:\n\nfrom scikit-learn: [\u2018cityblock\u2019, \u2018cosine\u2019, \u2018euclidean\u2019, \u2018l1\u2019, \u2018l2\u2019,\n\u2018manhattan\u2019]\nfrom scipy.spatial.distance: [\u2018braycurtis\u2019, \u2018canberra\u2019, \u2018chebyshev\u2019,\n\u2018correlation\u2019, \u2018dice\u2019, \u2018hamming\u2019, \u2018jaccard\u2019, \u2018kulsinski\u2019,\n\u2018mahalanobis\u2019, \u2018minkowski\u2019, \u2018rogerstanimoto\u2019, \u2018russellrao\u2019,\n\u2018seuclidean\u2019, \u2018sokalmichener\u2019, \u2018sokalsneath\u2019, \u2018sqeuclidean\u2019,\n\u2018yule\u2019]\n\nSee the documentation for scipy.spatial.distance for details on these\nmetrics.\n\nNote\n'kulsinski' is deprecated from SciPy 1.9 and will be removed in SciPy 1.11.\n\n\nNote\n'matching' has been removed in SciPy 1.9 (use 'hamming' instead).\n\n"
                                    },
                                    "metric_kwargs": {
                                        "type": "dict, default=None",
                                        "description": "dict, default=None. Keyword arguments to pass to specified metric function.\n"
                                    }
                                },
                                "required": [
                                    "X",
                                    "Y"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "pairwise_distances_chunked",
                        "func_desc": "Generate a distance matrix chunk by chunk with optional reduction.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.pairwise_distances_chunked.html#sklearn.metrics.pairwise_distances_chunked",
                        "function_definitions": {
                            "function_name": "pairwise_distances_chunked",
                            "full_function": "sklearn.metrics.pairwise_distances_chunked(X, Y=None, *, reduce_func=None, metric='euclidean', n_jobs=None, working_memory=None, **kwds)",
                            "function_text": "Generate a distance matrix chunk by chunk with optional reduction. In cases where not all of a pairwise distance matrix needs to be\nstored at once, this is used to calculate pairwise distances in\nworking_memory-sized chunks.  If reduce_func is given, it is\nrun on each chunk and its return values are concatenated into lists,\narrays or sparse matrices.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/glossary.html#term-n_jobs",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples_X, n_samples_X) or             (n_samples_X, n_features)",
                                    "param_desc": "Array of pairwise distances between samples, or a feature array.\nThe shape the array should be (n_samples_X, n_samples_X) if\nmetric=\u2019precomputed\u2019 and (n_samples_X, n_features) otherwise.\n"
                                },
                                {
                                    "param_name": "Y",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples_Y, n_features), default=None",
                                    "param_desc": "An optional second feature array. Only allowed if\nmetric != \u201cprecomputed\u201d.\n"
                                },
                                {
                                    "param_name": "reduce_func",
                                    "param_type": "callable, default=None",
                                    "param_desc": "The function which is applied on each chunk of the distance matrix,\nreducing it to needed values.  reduce_func(D_chunk, start)\nis called repeatedly, where D_chunk is a contiguous vertical\nslice of the pairwise distance matrix, starting at row start.\nIt should return one of: None; an array, a list, or a sparse matrix\nof length D_chunk.shape[0]; or a tuple of such objects.\nReturning None is useful for in-place operations, rather than\nreductions.\nIf None, pairwise_distances_chunked returns a generator of vertical\nchunks of the distance matrix.\n"
                                },
                                {
                                    "param_name": "metric",
                                    "param_type": "str or callable, default=\u2019euclidean\u2019",
                                    "param_desc": "The metric to use when calculating distance between instances in a\nfeature array. If metric is a string, it must be one of the options\nallowed by scipy.spatial.distance.pdist for its metric parameter,\nor a metric listed in pairwise.PAIRWISE_DISTANCE_FUNCTIONS.\nIf metric is \u201cprecomputed\u201d, X is assumed to be a distance matrix.\nAlternatively, if metric is a callable function, it is called on\neach pair of instances (rows) and the resulting value recorded.\nThe callable should take two arrays from X as input and return a\nvalue indicating the distance between them.\n"
                                },
                                {
                                    "param_name": "n_jobs",
                                    "param_type": "int, default=None",
                                    "param_desc": "The number of jobs to use for the computation. This works by\nbreaking down the pairwise matrix into n_jobs even slices and\ncomputing them in parallel.\nNone means 1 unless in a joblib.parallel_backend context.\n-1 means using all processors. See Glossary\nfor more details.\n"
                                },
                                {
                                    "param_name": "working_memory",
                                    "param_type": "float, default=None",
                                    "param_desc": "The sought maximum memory for temporary distance matrix chunks.\nWhen None (default), the value of\nsklearn.get_config()['working_memory'] is used.\n"
                                },
                                {
                                    "param_name": "**kwds",
                                    "param_type": "optional keyword parameters",
                                    "param_desc": "Any further parameters are passed directly to the distance function.\nIf using a scipy.spatial.distance metric, the parameters are still\nmetric dependent. See the scipy docs for usage examples.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "pairwise_distances_chunked",
                            "descriptions": "Generate a distance matrix chunk by chunk with optional reduction. In cases where not all of a pairwise distance matrix needs to be\nstored at once, this is used to calculate pairwise distances in\nworking_memory-sized chunks.  If reduce_func is given, it is\nrun on each chunk and its return values are concatenated into lists,\narrays or sparse matrices.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples_X, n_samples_X) or             (n_samples_X, n_features). Array of pairwise distances between samples, or a feature array.\nThe shape the array should be (n_samples_X, n_samples_X) if\nmetric=\u2019precomputed\u2019 and (n_samples_X, n_features) otherwise.\n"
                                    },
                                    "Y": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples_Y, n_features), default=None. An optional second feature array. Only allowed if\nmetric != \u201cprecomputed\u201d.\n"
                                    },
                                    "reduce_func": {
                                        "type": "object",
                                        "description": "callable, default=None. The function which is applied on each chunk of the distance matrix,\nreducing it to needed values.  reduce_func(D_chunk, start)\nis called repeatedly, where D_chunk is a contiguous vertical\nslice of the pairwise distance matrix, starting at row start.\nIt should return one of: None; an array, a list, or a sparse matrix\nof length D_chunk.shape[0]; or a tuple of such objects.\nReturning None is useful for in-place operations, rather than\nreductions.\nIf None, pairwise_distances_chunked returns a generator of vertical\nchunks of the distance matrix.\n"
                                    },
                                    "metric": {
                                        "type": "string",
                                        "description": "str or callable, default=\u2019euclidean\u2019. The metric to use when calculating distance between instances in a\nfeature array. If metric is a string, it must be one of the options\nallowed by scipy.spatial.distance.pdist for its metric parameter,\nor a metric listed in pairwise.PAIRWISE_DISTANCE_FUNCTIONS.\nIf metric is \u201cprecomputed\u201d, X is assumed to be a distance matrix.\nAlternatively, if metric is a callable function, it is called on\neach pair of instances (rows) and the resulting value recorded.\nThe callable should take two arrays from X as input and return a\nvalue indicating the distance between them.\n"
                                    },
                                    "n_jobs": {
                                        "type": "integer",
                                        "description": "int, default=None. The number of jobs to use for the computation. This works by\nbreaking down the pairwise matrix into n_jobs even slices and\ncomputing them in parallel.\nNone means 1 unless in a joblib.parallel_backend context.\n-1 means using all processors. See Glossary\nfor more details.\n"
                                    },
                                    "working_memory": {
                                        "type": "float",
                                        "description": "float, default=None. The sought maximum memory for temporary distance matrix chunks.\nWhen None (default), the value of\nsklearn.get_config()['working_memory'] is used.\n"
                                    },
                                    "**kwds": {
                                        "type": "optional keyword parameters",
                                        "description": "optional keyword parameters. Any further parameters are passed directly to the distance function.\nIf using a scipy.spatial.distance metric, the parameters are still\nmetric dependent. See the scipy docs for usage examples.\n"
                                    }
                                },
                                "required": [
                                    "X",
                                    "Y=None"
                                ]
                            }
                        }
                    }
                ]
            },
            {
                "Plotting": [
                    {
                        "func_name": "ConfusionMatrixDisplay",
                        "func_desc": "Confusion Matrix visualization.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.ConfusionMatrixDisplay.html#sklearn.metrics.ConfusionMatrixDisplay",
                        "function_definitions": {
                            "function_name": "ConfusionMatrixDisplay",
                            "full_function": "class sklearn.metrics.ConfusionMatrixDisplay(confusion_matrix, *, display_labels=None)",
                            "function_text": "Confusion Matrix visualization. It is recommend to use\nfrom_estimator or\nfrom_predictions to\ncreate a ConfusionMatrixDisplay. All parameters are stored as\nattributes. Read more in the User Guide.",
                            "func_text_user_guide": "#sklearn.metrics.ConfusionMatrixDisplay.from_estimator",
                            "parameter_names_desc": [
                                {
                                    "param_name": "include_values",
                                    "param_type": "bool, default=True",
                                    "param_desc": "Includes values in confusion matrix.\n"
                                },
                                {
                                    "param_name": "cmap",
                                    "param_type": "str or matplotlib Colormap, default=\u2019viridis\u2019",
                                    "param_desc": "Colormap recognized by matplotlib.\n"
                                },
                                {
                                    "param_name": "xticks_rotation",
                                    "param_type": "{\u2018vertical\u2019, \u2018horizontal\u2019} or float,                          default=\u2019horizontal\u2019",
                                    "param_desc": "Rotation of xtick labels.\n"
                                },
                                {
                                    "param_name": "values_format",
                                    "param_type": "str, default=None",
                                    "param_desc": "Format specification for values in confusion matrix. If None,\nthe format specification is \u2018d\u2019 or \u2018.2g\u2019 whichever is shorter.\n"
                                },
                                {
                                    "param_name": "ax",
                                    "param_type": "matplotlib axes, default=None",
                                    "param_desc": "Axes object to plot on. If None, a new figure and axes is\ncreated.\n"
                                },
                                {
                                    "param_name": "colorbar",
                                    "param_type": "bool, default=True",
                                    "param_desc": "Whether or not to add a colorbar to the plot.\n"
                                },
                                {
                                    "param_name": "im_kw",
                                    "param_type": "dict, default=None",
                                    "param_desc": "Dict with keywords passed to matplotlib.pyplot.imshow call.\n"
                                },
                                {
                                    "param_name": "text_kw",
                                    "param_type": "dict, default=None",
                                    "param_desc": "Dict with keywords passed to matplotlib.pyplot.text call.\n\nAdded in version 1.2.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "ConfusionMatrixDisplay",
                            "descriptions": "Confusion Matrix visualization. It is recommend to use\nfrom_estimator or\nfrom_predictions to\ncreate a ConfusionMatrixDisplay. All parameters are stored as\nattributes. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "include_values": {
                                        "type": "boolean",
                                        "description": "bool, default=True. Includes values in confusion matrix.\n"
                                    },
                                    "cmap": {
                                        "type": "string",
                                        "description": "str or matplotlib Colormap, default=\u2019viridis\u2019. Colormap recognized by matplotlib.\n"
                                    },
                                    "xticks_rotation": {
                                        "type": "float",
                                        "description": "{\u2018vertical\u2019, \u2018horizontal\u2019} or float,                          default=\u2019horizontal\u2019. Rotation of xtick labels.\n"
                                    },
                                    "values_format": {
                                        "type": "string",
                                        "description": "str, default=None. Format specification for values in confusion matrix. If None,\nthe format specification is \u2018d\u2019 or \u2018.2g\u2019 whichever is shorter.\n"
                                    },
                                    "ax": {
                                        "type": "matplotlib axes, default=None",
                                        "description": "matplotlib axes, default=None. Axes object to plot on. If None, a new figure and axes is\ncreated.\n"
                                    },
                                    "colorbar": {
                                        "type": "boolean",
                                        "description": "bool, default=True. Whether or not to add a colorbar to the plot.\n"
                                    },
                                    "im_kw": {
                                        "type": "dict, default=None",
                                        "description": "dict, default=None. Dict with keywords passed to matplotlib.pyplot.imshow call.\n"
                                    },
                                    "text_kw": {
                                        "type": "dict, default=None",
                                        "description": "dict, default=None. Dict with keywords passed to matplotlib.pyplot.text call.\n\nAdded in version 1.2.\n\n"
                                    }
                                },
                                "required": [
                                    "confusion_matrix"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "PrecisionRecallDisplay",
                        "func_desc": "Precision Recall visualization.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.PrecisionRecallDisplay.html#sklearn.metrics.PrecisionRecallDisplay",
                        "function_definitions": {
                            "function_name": "PrecisionRecallDisplay",
                            "full_function": "class sklearn.metrics.PrecisionRecallDisplay(precision, recall, *, average_precision=None, estimator_name=None, pos_label=None, prevalence_pos_label=None)",
                            "function_text": "Precision Recall visualization. It is recommend to use\nfrom_estimator or\nfrom_predictions to create\na PrecisionRecallDisplay. All parameters are\nstored as attributes. Read more in the User Guide.",
                            "func_text_user_guide": "#sklearn.metrics.PrecisionRecallDisplay.from_estimator",
                            "parameter_names_desc": [
                                {
                                    "param_name": "ax",
                                    "param_type": "Matplotlib Axes, default=None",
                                    "param_desc": "Axes object to plot on. If None, a new figure and axes is\ncreated.\n"
                                },
                                {
                                    "param_name": "name",
                                    "param_type": "str, default=None",
                                    "param_desc": "Name of precision recall curve for labeling. If None, use\nestimator_name if not None, otherwise no labeling is shown.\n"
                                },
                                {
                                    "param_name": "plot_chance_level",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Whether to plot the chance level. The chance level is the prevalence\nof the positive label computed from the data passed during\nfrom_estimator or from_predictions call.\n\nAdded in version 1.3.\n\n"
                                },
                                {
                                    "param_name": "chance_level_kw",
                                    "param_type": "dict, default=None",
                                    "param_desc": "Keyword arguments to be passed to matplotlib\u2019s plot for rendering\nthe chance level line.\n\nAdded in version 1.3.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "PrecisionRecallDisplay",
                            "descriptions": "Precision Recall visualization. It is recommend to use\nfrom_estimator or\nfrom_predictions to create\na PrecisionRecallDisplay. All parameters are\nstored as attributes. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "ax": {
                                        "type": "Matplotlib Axes, default=None",
                                        "description": "Matplotlib Axes, default=None. Axes object to plot on. If None, a new figure and axes is\ncreated.\n"
                                    },
                                    "name": {
                                        "type": "string",
                                        "description": "str, default=None. Name of precision recall curve for labeling. If None, use\nestimator_name if not None, otherwise no labeling is shown.\n"
                                    },
                                    "plot_chance_level": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Whether to plot the chance level. The chance level is the prevalence\nof the positive label computed from the data passed during\nfrom_estimator or from_predictions call.\n\nAdded in version 1.3.\n\n"
                                    },
                                    "chance_level_kw": {
                                        "type": "dict, default=None",
                                        "description": "dict, default=None. Keyword arguments to be passed to matplotlib\u2019s plot for rendering\nthe chance level line.\n\nAdded in version 1.3.\n\n"
                                    }
                                },
                                "required": [
                                    "precision",
                                    "recall"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "RocCurveDisplay",
                        "func_desc": "ROC Curve visualization.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.RocCurveDisplay.html#sklearn.metrics.RocCurveDisplay",
                        "function_definitions": {
                            "function_name": "RocCurveDisplay",
                            "full_function": "class sklearn.metrics.RocCurveDisplay(*, fpr, tpr, roc_auc=None, estimator_name=None, pos_label=None)",
                            "function_text": "ROC Curve visualization. It is recommend to use\nfrom_estimator or\nfrom_predictions to create\na RocCurveDisplay. All parameters are\nstored as attributes. Read more in the User Guide.",
                            "func_text_user_guide": "#sklearn.metrics.RocCurveDisplay.from_estimator",
                            "parameter_names_desc": [
                                {
                                    "param_name": "ax",
                                    "param_type": "matplotlib axes, default=None",
                                    "param_desc": "Axes object to plot on. If None, a new figure and axes is\ncreated.\n"
                                },
                                {
                                    "param_name": "name",
                                    "param_type": "str, default=None",
                                    "param_desc": "Name of ROC Curve for labeling. If None, use estimator_name if\nnot None, otherwise no labeling is shown.\n"
                                },
                                {
                                    "param_name": "plot_chance_level",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Whether to plot the chance level.\n\nAdded in version 1.3.\n\n"
                                },
                                {
                                    "param_name": "chance_level_kw",
                                    "param_type": "dict, default=None",
                                    "param_desc": "Keyword arguments to be passed to matplotlib\u2019s plot for rendering\nthe chance level line.\n\nAdded in version 1.3.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "RocCurveDisplay",
                            "descriptions": "ROC Curve visualization. It is recommend to use\nfrom_estimator or\nfrom_predictions to create\na RocCurveDisplay. All parameters are\nstored as attributes. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "ax": {
                                        "type": "matplotlib axes, default=None",
                                        "description": "matplotlib axes, default=None. Axes object to plot on. If None, a new figure and axes is\ncreated.\n"
                                    },
                                    "name": {
                                        "type": "string",
                                        "description": "str, default=None. Name of ROC Curve for labeling. If None, use estimator_name if\nnot None, otherwise no labeling is shown.\n"
                                    },
                                    "plot_chance_level": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Whether to plot the chance level.\n\nAdded in version 1.3.\n\n"
                                    },
                                    "chance_level_kw": {
                                        "type": "dict, default=None",
                                        "description": "dict, default=None. Keyword arguments to be passed to matplotlib\u2019s plot for rendering\nthe chance level line.\n\nAdded in version 1.3.\n\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "DetCurveDisplay",
                        "func_desc": "DET curve visualization.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.DetCurveDisplay.html#sklearn.metrics.DetCurveDisplay",
                        "function_definitions": {
                            "function_name": "DetCurveDisplay",
                            "full_function": "class sklearn.metrics.DetCurveDisplay(*, fpr, fnr, estimator_name=None, pos_label=None)",
                            "function_text": "DET curve visualization. It is recommend to use from_estimator\nor from_predictions to create a\nvisualizer. All parameters are stored as attributes. Read more in the User Guide. Added in version 0.24.",
                            "func_text_user_guide": "#sklearn.metrics.DetCurveDisplay.from_estimator",
                            "parameter_names_desc": [
                                {
                                    "param_name": "ax",
                                    "param_type": "matplotlib axes, default=None",
                                    "param_desc": "Axes object to plot on. If None, a new figure and axes is\ncreated.\n"
                                },
                                {
                                    "param_name": "name",
                                    "param_type": "str, default=None",
                                    "param_desc": "Name of DET curve for labeling. If None, use estimator_name if\nit is not None, otherwise no labeling is shown.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "DetCurveDisplay",
                            "descriptions": "DET curve visualization. It is recommend to use from_estimator\nor from_predictions to create a\nvisualizer. All parameters are stored as attributes. Read more in the User Guide. Added in version 0.24.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "ax": {
                                        "type": "matplotlib axes, default=None",
                                        "description": "matplotlib axes, default=None. Axes object to plot on. If None, a new figure and axes is\ncreated.\n"
                                    },
                                    "name": {
                                        "type": "string",
                                        "description": "str, default=None. Name of DET curve for labeling. If None, use estimator_name if\nit is not None, otherwise no labeling is shown.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "PredictionErrorDisplay",
                        "func_desc": "Visualization of the prediction error of a regression model.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.PredictionErrorDisplay.html#sklearn.metrics.PredictionErrorDisplay",
                        "function_definitions": {
                            "function_name": "PredictionErrorDisplay",
                            "full_function": "class sklearn.metrics.PredictionErrorDisplay(*, y_true, y_pred)",
                            "function_text": "Visualization of the prediction error of a regression model. This tool can display \u201cresiduals vs predicted\u201d or \u201cactual vs predicted\u201d\nusing scatter plots to qualitatively assess the behavior of a regressor,\npreferably on held-out data points. See the details in the docstrings of\nfrom_estimator or\nfrom_predictions to\ncreate a visualizer. All parameters are stored as attributes. For general information regarding scikit-learn visualization tools, read\nmore in the Visualization Guide.\nFor details regarding interpreting these plots, refer to the\nModel Evaluation Guide. Added in version 1.2.",
                            "func_text_user_guide": "#sklearn.metrics.PredictionErrorDisplay.from_estimator",
                            "parameter_names_desc": [
                                {
                                    "param_name": "ax",
                                    "param_type": "matplotlib axes, default=None",
                                    "param_desc": "Axes object to plot on. If None, a new figure and axes is\ncreated.\n"
                                },
                                {
                                    "param_name": "kind",
                                    "param_type": "{\u201cactual_vs_predicted\u201d, \u201cresidual_vs_predicted\u201d},                 default=\u201dresidual_vs_predicted\u201d",
                                    "param_desc": "The type of plot to draw:\n\n\u201cactual_vs_predicted\u201d draws the observed values (y-axis) vs.\nthe predicted values (x-axis).\n\u201cresidual_vs_predicted\u201d draws the residuals, i.e. difference\nbetween observed and predicted values, (y-axis) vs. the predicted\nvalues (x-axis).\n\n"
                                },
                                {
                                    "param_name": "scatter_kwargs",
                                    "param_type": "dict, default=None",
                                    "param_desc": "Dictionary with keywords passed to the matplotlib.pyplot.scatter\ncall.\n"
                                },
                                {
                                    "param_name": "line_kwargs",
                                    "param_type": "dict, default=None",
                                    "param_desc": "Dictionary with keyword passed to the matplotlib.pyplot.plot\ncall to draw the optimal line.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "PredictionErrorDisplay",
                            "descriptions": "Visualization of the prediction error of a regression model. This tool can display \u201cresiduals vs predicted\u201d or \u201cactual vs predicted\u201d\nusing scatter plots to qualitatively assess the behavior of a regressor,\npreferably on held-out data points. See the details in the docstrings of\nfrom_estimator or\nfrom_predictions to\ncreate a visualizer. All parameters are stored as attributes. For general information regarding scikit-learn visualization tools, read\nmore in the Visualization Guide.\nFor details regarding interpreting these plots, refer to the\nModel Evaluation Guide. Added in version 1.2.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "ax": {
                                        "type": "matplotlib axes, default=None",
                                        "description": "matplotlib axes, default=None. Axes object to plot on. If None, a new figure and axes is\ncreated.\n"
                                    },
                                    "kind": {
                                        "type": "{\u201cactual_vs_predicted\u201d, \u201cresidual_vs_predicted\u201d},                 default=\u201dresidual_vs_predicted\u201d",
                                        "description": "{\u201cactual_vs_predicted\u201d, \u201cresidual_vs_predicted\u201d},                 default=\u201dresidual_vs_predicted\u201d. The type of plot to draw:\n\n\u201cactual_vs_predicted\u201d draws the observed values (y-axis) vs.\nthe predicted values (x-axis).\n\u201cresidual_vs_predicted\u201d draws the residuals, i.e. difference\nbetween observed and predicted values, (y-axis) vs. the predicted\nvalues (x-axis).\n\n"
                                    },
                                    "scatter_kwargs": {
                                        "type": "dict, default=None",
                                        "description": "dict, default=None. Dictionary with keywords passed to the matplotlib.pyplot.scatter\ncall.\n"
                                    },
                                    "line_kwargs": {
                                        "type": "dict, default=None",
                                        "description": "dict, default=None. Dictionary with keyword passed to the matplotlib.pyplot.plot\ncall to draw the optimal line.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    }
                ]
            }
        ],
        "name": "sklearn.metrics",
        "url": "https://scikit-learn.org/stable/api/sklearn.metrics.html"
    },
    "sklearn.mixture.html": {
        "functions": [
            {
                "defaults": [
                    {
                        "func_name": "BayesianGaussianMixture",
                        "func_desc": "Variational Bayesian estimation of a Gaussian mixture.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.mixture.BayesianGaussianMixture.html#sklearn.mixture.BayesianGaussianMixture",
                        "function_definitions": {
                            "function_name": "BayesianGaussianMixture",
                            "full_function": "class sklearn.mixture.BayesianGaussianMixture(*, n_components=1, covariance_type='full', tol=0.001, reg_covar=1e-06, max_iter=100, n_init=1, init_params='kmeans', weight_concentration_prior_type='dirichlet_process', weight_concentration_prior=None, mean_precision_prior=None, mean_prior=None, degrees_of_freedom_prior=None, covariance_prior=None, random_state=None, warm_start=False, verbose=0, verbose_interval=10)",
                            "function_text": "Variational Bayesian estimation of a Gaussian mixture. This class allows to infer an approximate posterior distribution over the\nparameters of a Gaussian mixture distribution. The effective number of\ncomponents can be inferred from the data. This class implements two types of prior for the weights distribution: a\nfinite mixture model with Dirichlet distribution and an infinite mixture\nmodel with the Dirichlet Process. In practice Dirichlet Process inference\nalgorithm is approximated and uses a truncated distribution with a fixed\nmaximum number of components (called the Stick-breaking representation).\nThe number of components actually used almost always depends on the data. Added in version 0.18. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/mixture.html#bgmm",
                            "parameter_names_desc": [
                                {
                                    "param_name": "**params",
                                    "param_type": "dict",
                                    "param_desc": "Estimator parameters.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "BayesianGaussianMixture",
                            "descriptions": "Variational Bayesian estimation of a Gaussian mixture. This class allows to infer an approximate posterior distribution over the\nparameters of a Gaussian mixture distribution. The effective number of\ncomponents can be inferred from the data. This class implements two types of prior for the weights distribution: a\nfinite mixture model with Dirichlet distribution and an infinite mixture\nmodel with the Dirichlet Process. In practice Dirichlet Process inference\nalgorithm is approximated and uses a truncated distribution with a fixed\nmaximum number of components (called the Stick-breaking representation).\nThe number of components actually used almost always depends on the data. Added in version 0.18. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "**params": {
                                        "type": "dict",
                                        "description": "dict. Estimator parameters.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "GaussianMixture",
                        "func_desc": "Gaussian Mixture.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.mixture.GaussianMixture.html#sklearn.mixture.GaussianMixture",
                        "function_definitions": {
                            "function_name": "GaussianMixture",
                            "full_function": "class sklearn.mixture.GaussianMixture(n_components=1, *, covariance_type='full', tol=0.001, reg_covar=1e-06, max_iter=100, n_init=1, init_params='kmeans', weights_init=None, means_init=None, precisions_init=None, random_state=None, warm_start=False, verbose=0, verbose_interval=10)",
                            "function_text": "Gaussian Mixture. Representation of a Gaussian mixture model probability distribution.\nThis class allows to estimate the parameters of a Gaussian mixture\ndistribution. Read more in the User Guide. Added in version 0.18.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/mixture.html#gmm",
                            "parameter_names_desc": [
                                {
                                    "param_name": "**params",
                                    "param_type": "dict",
                                    "param_desc": "Estimator parameters.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "GaussianMixture",
                            "descriptions": "Gaussian Mixture. Representation of a Gaussian mixture model probability distribution.\nThis class allows to estimate the parameters of a Gaussian mixture\ndistribution. Read more in the User Guide. Added in version 0.18.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "**params": {
                                        "type": "dict",
                                        "description": "dict. Estimator parameters.\n"
                                    }
                                },
                                "required": [
                                    "n_components=1"
                                ]
                            }
                        }
                    }
                ]
            }
        ],
        "name": "sklearn.mixture",
        "url": "https://scikit-learn.org/stable/api/sklearn.mixture.html"
    },
    "sklearn.model_selection.html": {
        "functions": [
            {
                "Splitters": [
                    {
                        "func_name": "GroupKFold",
                        "func_desc": "K-fold iterator variant with non-overlapping groups.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.GroupKFold.html#sklearn.model_selection.GroupKFold",
                        "function_definitions": {
                            "function_name": "GroupKFold",
                            "full_function": "class sklearn.model_selection.GroupKFold(n_splits=5)",
                            "function_text": "K-fold iterator variant with non-overlapping groups. Each group will appear exactly once in the test set across all folds (the\nnumber of distinct groups has to be at least equal to the number of folds). The folds are approximately balanced in the sense that the number of\nsamples is approximately the same in each test fold. Read more in the User Guide. For visualisation of cross-validation behaviour and\ncomparison between common scikit-learn split methods\nrefer to Visualizing cross-validation behavior in scikit-learn",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/cross_validation.html#group-k-fold",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples, n_features)",
                                    "param_desc": "Training data, where n_samples is the number of samples\nand n_features is the number of features.\n"
                                },
                                {
                                    "param_name": "y",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "The target variable for supervised learning problems.\n"
                                },
                                {
                                    "param_name": "groups",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "Group labels for the samples used while splitting the dataset into\ntrain/test set.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "GroupKFold",
                            "descriptions": "K-fold iterator variant with non-overlapping groups. Each group will appear exactly once in the test set across all folds (the\nnumber of distinct groups has to be at least equal to the number of folds). The folds are approximately balanced in the sense that the number of\nsamples is approximately the same in each test fold. Read more in the User Guide. For visualisation of cross-validation behaviour and\ncomparison between common scikit-learn split methods\nrefer to Visualizing cross-validation behavior in scikit-learn",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_features). Training data, where n_samples is the number of samples\nand n_features is the number of features.\n"
                                    },
                                    "y": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. The target variable for supervised learning problems.\n"
                                    },
                                    "groups": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). Group labels for the samples used while splitting the dataset into\ntrain/test set.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "KFold",
                        "func_desc": "K-Fold cross-validator.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.KFold.html#sklearn.model_selection.KFold",
                        "function_definitions": {
                            "function_name": "KFold",
                            "full_function": "class sklearn.model_selection.KFold(n_splits=5, *, shuffle=False, random_state=None)",
                            "function_text": "K-Fold cross-validator. Provides train/test indices to split data in train/test sets. Split\ndataset into k consecutive folds (without shuffling by default). Each fold is then used once as a validation while the k - 1 remaining\nfolds form the training set. Read more in the User Guide. For visualisation of cross-validation behaviour and\ncomparison between common scikit-learn split methods\nrefer to Visualizing cross-validation behavior in scikit-learn",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/cross_validation.html#k-fold",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples, n_features)",
                                    "param_desc": "Training data, where n_samples is the number of samples\nand n_features is the number of features.\n"
                                },
                                {
                                    "param_name": "y",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "The target variable for supervised learning problems.\n"
                                },
                                {
                                    "param_name": "groups",
                                    "param_type": "object",
                                    "param_desc": "Always ignored, exists for compatibility.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "KFold",
                            "descriptions": "K-Fold cross-validator. Provides train/test indices to split data in train/test sets. Split\ndataset into k consecutive folds (without shuffling by default). Each fold is then used once as a validation while the k - 1 remaining\nfolds form the training set. Read more in the User Guide. For visualisation of cross-validation behaviour and\ncomparison between common scikit-learn split methods\nrefer to Visualizing cross-validation behavior in scikit-learn",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_features). Training data, where n_samples is the number of samples\nand n_features is the number of features.\n"
                                    },
                                    "y": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). The target variable for supervised learning problems.\n"
                                    },
                                    "groups": {
                                        "type": "object",
                                        "description": "object. Always ignored, exists for compatibility.\n"
                                    }
                                },
                                "required": [
                                    "n_splits=5"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "LeaveOneOut",
                        "func_desc": "Leave-One-Out cross-validator.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.LeaveOneOut.html#sklearn.model_selection.LeaveOneOut",
                        "function_definitions": {
                            "function_name": "LeaveOneOut",
                            "full_function": "class sklearn.model_selection.LeaveOneOut",
                            "function_text": "Leave-One-Out cross-validator. Provides train/test indices to split data in train/test sets. Each\nsample is used once as a test set (singleton) while the remaining\nsamples form the training set. Note: LeaveOneOut() is equivalent to KFold(n_splits=n) and\nLeavePOut(p=1) where n is the number of samples. Due to the high number of test sets (which is the same as the\nnumber of samples) this cross-validation method can be very costly.\nFor large datasets one should favor KFold, ShuffleSplit\nor StratifiedKFold. Read more in the User Guide. See also For splitting the data according to explicit, domain-specific stratification of the dataset. K-fold iterator variant with non-overlapping groups. Examples Get metadata routing of this object. Please check User Guide on how the routing\nmechanism works.",
                            "func_text_user_guide": "sklearn.model_selection.KFold.html#sklearn.model_selection.KFold",
                            "parameter_names_desc": []
                        },
                        "function_calling": {}
                    },
                    {
                        "func_name": "LeavePOut",
                        "func_desc": "Leave-P-Out cross-validator.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.LeavePOut.html#sklearn.model_selection.LeavePOut",
                        "function_definitions": {
                            "function_name": "LeavePOut",
                            "full_function": "class sklearn.model_selection.LeavePOut(p)",
                            "function_text": "Leave-P-Out cross-validator. Provides train/test indices to split data in train/test sets. This results\nin testing on all distinct samples of size p, while the remaining n - p\nsamples form the training set in each iteration. Note: LeavePOut(p) is NOT equivalent to\nKFold(n_splits=n_samples // p) which creates non-overlapping test sets. Due to the high number of iterations which grows combinatorically with the\nnumber of samples this cross-validation method can be very costly. For\nlarge datasets one should favor KFold, StratifiedKFold\nor ShuffleSplit. Read more in the User Guide.",
                            "func_text_user_guide": "sklearn.model_selection.KFold.html#sklearn.model_selection.KFold",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples, n_features)",
                                    "param_desc": "Training data, where n_samples is the number of samples\nand n_features is the number of features.\n"
                                },
                                {
                                    "param_name": "y",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "The target variable for supervised learning problems.\n"
                                },
                                {
                                    "param_name": "groups",
                                    "param_type": "object",
                                    "param_desc": "Always ignored, exists for compatibility.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "LeavePOut",
                            "descriptions": "Leave-P-Out cross-validator. Provides train/test indices to split data in train/test sets. This results\nin testing on all distinct samples of size p, while the remaining n - p\nsamples form the training set in each iteration. Note: LeavePOut(p) is NOT equivalent to\nKFold(n_splits=n_samples // p) which creates non-overlapping test sets. Due to the high number of iterations which grows combinatorically with the\nnumber of samples this cross-validation method can be very costly. For\nlarge datasets one should favor KFold, StratifiedKFold\nor ShuffleSplit. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_features). Training data, where n_samples is the number of samples\nand n_features is the number of features.\n"
                                    },
                                    "y": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). The target variable for supervised learning problems.\n"
                                    },
                                    "groups": {
                                        "type": "object",
                                        "description": "object. Always ignored, exists for compatibility.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "RepeatedKFold",
                        "func_desc": "Repeated K-Fold cross validator.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.RepeatedKFold.html#sklearn.model_selection.RepeatedKFold",
                        "function_definitions": {
                            "function_name": "RepeatedKFold",
                            "full_function": "class sklearn.model_selection.RepeatedKFold(*, n_splits=5, n_repeats=10, random_state=None)",
                            "function_text": "Repeated K-Fold cross validator. Repeats K-Fold n times with different randomization in each repetition. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/cross_validation.html#repeated-k-fold",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples, n_features)",
                                    "param_desc": "Training data, where n_samples is the number of samples\nand n_features is the number of features.\n"
                                },
                                {
                                    "param_name": "y",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "The target variable for supervised learning problems.\n"
                                },
                                {
                                    "param_name": "groups",
                                    "param_type": "object",
                                    "param_desc": "Always ignored, exists for compatibility.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "RepeatedKFold",
                            "descriptions": "Repeated K-Fold cross validator. Repeats K-Fold n times with different randomization in each repetition. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_features). Training data, where n_samples is the number of samples\nand n_features is the number of features.\n"
                                    },
                                    "y": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). The target variable for supervised learning problems.\n"
                                    },
                                    "groups": {
                                        "type": "object",
                                        "description": "object. Always ignored, exists for compatibility.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "ShuffleSplit",
                        "func_desc": "Random permutation cross-validator.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.ShuffleSplit.html#sklearn.model_selection.ShuffleSplit",
                        "function_definitions": {
                            "function_name": "ShuffleSplit",
                            "full_function": "class sklearn.model_selection.ShuffleSplit(n_splits=10, *, test_size=None, train_size=None, random_state=None)",
                            "function_text": "Random permutation cross-validator. Yields indices to split data into training and test sets. Note: contrary to other cross-validation strategies, random splits\ndo not guarantee that all folds will be different, although this is\nstill very likely for sizeable datasets. Read more in the User Guide. For visualisation of cross-validation behaviour and\ncomparison between common scikit-learn split methods\nrefer to Visualizing cross-validation behavior in scikit-learn",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/cross_validation.html#shufflesplit",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples, n_features)",
                                    "param_desc": "Training data, where n_samples is the number of samples\nand n_features is the number of features.\n"
                                },
                                {
                                    "param_name": "y",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "The target variable for supervised learning problems.\n"
                                },
                                {
                                    "param_name": "groups",
                                    "param_type": "object",
                                    "param_desc": "Always ignored, exists for compatibility.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "ShuffleSplit",
                            "descriptions": "Random permutation cross-validator. Yields indices to split data into training and test sets. Note: contrary to other cross-validation strategies, random splits\ndo not guarantee that all folds will be different, although this is\nstill very likely for sizeable datasets. Read more in the User Guide. For visualisation of cross-validation behaviour and\ncomparison between common scikit-learn split methods\nrefer to Visualizing cross-validation behavior in scikit-learn",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_features). Training data, where n_samples is the number of samples\nand n_features is the number of features.\n"
                                    },
                                    "y": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). The target variable for supervised learning problems.\n"
                                    },
                                    "groups": {
                                        "type": "object",
                                        "description": "object. Always ignored, exists for compatibility.\n"
                                    }
                                },
                                "required": [
                                    "n_splits=10"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "StratifiedKFold",
                        "func_desc": "Stratified K-Fold cross-validator.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.StratifiedKFold.html#sklearn.model_selection.StratifiedKFold",
                        "function_definitions": {
                            "function_name": "StratifiedKFold",
                            "full_function": "class sklearn.model_selection.StratifiedKFold(n_splits=5, *, shuffle=False, random_state=None)",
                            "function_text": "Stratified K-Fold cross-validator. Provides train/test indices to split data in train/test sets. This cross-validation object is a variation of KFold that returns\nstratified folds. The folds are made by preserving the percentage of\nsamples for each class. Read more in the User Guide. For visualisation of cross-validation behaviour and\ncomparison between common scikit-learn split methods\nrefer to Visualizing cross-validation behavior in scikit-learn",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/cross_validation.html#stratified-k-fold",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples, n_features)",
                                    "param_desc": "Training data, where n_samples is the number of samples\nand n_features is the number of features.\nNote that providing y is sufficient to generate the splits and\nhence np.zeros(n_samples) may be used as a placeholder for\nX instead of actual training data.\n"
                                },
                                {
                                    "param_name": "y",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "The target variable for supervised learning problems.\nStratification is done based on the y labels.\n"
                                },
                                {
                                    "param_name": "groups",
                                    "param_type": "object",
                                    "param_desc": "Always ignored, exists for compatibility.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "StratifiedKFold",
                            "descriptions": "Stratified K-Fold cross-validator. Provides train/test indices to split data in train/test sets. This cross-validation object is a variation of KFold that returns\nstratified folds. The folds are made by preserving the percentage of\nsamples for each class. Read more in the User Guide. For visualisation of cross-validation behaviour and\ncomparison between common scikit-learn split methods\nrefer to Visualizing cross-validation behavior in scikit-learn",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_features). Training data, where n_samples is the number of samples\nand n_features is the number of features.\nNote that providing y is sufficient to generate the splits and\nhence np.zeros(n_samples) may be used as a placeholder for\nX instead of actual training data.\n"
                                    },
                                    "y": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). The target variable for supervised learning problems.\nStratification is done based on the y labels.\n"
                                    },
                                    "groups": {
                                        "type": "object",
                                        "description": "object. Always ignored, exists for compatibility.\n"
                                    }
                                },
                                "required": [
                                    "n_splits=5"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "TimeSeriesSplit",
                        "func_desc": "Time Series cross-validator.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.TimeSeriesSplit.html#sklearn.model_selection.TimeSeriesSplit",
                        "function_definitions": {
                            "function_name": "TimeSeriesSplit",
                            "full_function": "class sklearn.model_selection.TimeSeriesSplit(n_splits=5, *, max_train_size=None, test_size=None, gap=0)",
                            "function_text": "Time Series cross-validator. Provides train/test indices to split time series data samples\nthat are observed at fixed time intervals, in train/test sets.\nIn each split, test indices must be higher than before, and thus shuffling\nin cross validator is inappropriate. This cross-validation object is a variation of KFold.\nIn the kth split, it returns first k folds as train set and the\n(k+1)th fold as test set. Note that unlike standard cross-validation methods, successive\ntraining sets are supersets of those that come before them. Read more in the User Guide. For visualisation of cross-validation behaviour and\ncomparison between common scikit-learn split methods\nrefer to Visualizing cross-validation behavior in scikit-learn Added in version 0.18.",
                            "func_text_user_guide": "sklearn.model_selection.KFold.html#sklearn.model_selection.KFold",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples, n_features)",
                                    "param_desc": "Training data, where n_samples is the number of samples\nand n_features is the number of features.\n"
                                },
                                {
                                    "param_name": "y",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "Always ignored, exists for compatibility.\n"
                                },
                                {
                                    "param_name": "groups",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "Always ignored, exists for compatibility.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "TimeSeriesSplit",
                            "descriptions": "Time Series cross-validator. Provides train/test indices to split time series data samples\nthat are observed at fixed time intervals, in train/test sets.\nIn each split, test indices must be higher than before, and thus shuffling\nin cross validator is inappropriate. This cross-validation object is a variation of KFold.\nIn the kth split, it returns first k folds as train set and the\n(k+1)th fold as test set. Note that unlike standard cross-validation methods, successive\ntraining sets are supersets of those that come before them. Read more in the User Guide. For visualisation of cross-validation behaviour and\ncomparison between common scikit-learn split methods\nrefer to Visualizing cross-validation behavior in scikit-learn Added in version 0.18.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_features). Training data, where n_samples is the number of samples\nand n_features is the number of features.\n"
                                    },
                                    "y": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). Always ignored, exists for compatibility.\n"
                                    },
                                    "groups": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). Always ignored, exists for compatibility.\n"
                                    }
                                },
                                "required": [
                                    "n_splits=5"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "train_test_split",
                        "func_desc": "Split arrays or matrices into random train and test subsets.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html#sklearn.model_selection.train_test_split",
                        "function_definitions": {
                            "function_name": "train_test_split",
                            "full_function": "sklearn.model_selection.train_test_split(*arrays, test_size=None, train_size=None, random_state=None, shuffle=True, stratify=None)",
                            "function_text": "Split arrays or matrices into random train and test subsets. Quick utility that wraps input validation,\nnext(ShuffleSplit().split(X, y)), and application to input data\ninto a single call for splitting (and optionally subsampling) data into a\none-liner. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/cross_validation.html#cross-validation",
                            "parameter_names_desc": [
                                {
                                    "param_name": "*arrays",
                                    "param_type": "sequence of indexables with same length / shape[0]",
                                    "param_desc": "Allowed inputs are lists, numpy arrays, scipy-sparse\nmatrices or pandas dataframes.\n"
                                },
                                {
                                    "param_name": "test_size",
                                    "param_type": "float or int, default=None",
                                    "param_desc": "If float, should be between 0.0 and 1.0 and represent the proportion\nof the dataset to include in the test split. If int, represents the\nabsolute number of test samples. If None, the value is set to the\ncomplement of the train size. If train_size is also None, it will\nbe set to 0.25.\n"
                                },
                                {
                                    "param_name": "train_size",
                                    "param_type": "float or int, default=None",
                                    "param_desc": "If float, should be between 0.0 and 1.0 and represent the\nproportion of the dataset to include in the train split. If\nint, represents the absolute number of train samples. If None,\nthe value is automatically set to the complement of the test size.\n"
                                },
                                {
                                    "param_name": "random_state",
                                    "param_type": "int, RandomState instance or None, default=None",
                                    "param_desc": "Controls the shuffling applied to the data before applying the split.\nPass an int for reproducible output across multiple function calls.\nSee Glossary.\n"
                                },
                                {
                                    "param_name": "shuffle",
                                    "param_type": "bool, default=True",
                                    "param_desc": "Whether or not to shuffle the data before splitting. If shuffle=False\nthen stratify must be None.\n"
                                },
                                {
                                    "param_name": "stratify",
                                    "param_type": "array-like, default=None",
                                    "param_desc": "If not None, data is split in a stratified fashion, using this as\nthe class labels.\nRead more in the User Guide.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "train_test_split",
                            "descriptions": "Split arrays or matrices into random train and test subsets. Quick utility that wraps input validation,\nnext(ShuffleSplit().split(X, y)), and application to input data\ninto a single call for splitting (and optionally subsampling) data into a\none-liner. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "*arrays": {
                                        "type": "sequence of indexables with same length / shape[0]",
                                        "description": "sequence of indexables with same length / shape[0]. Allowed inputs are lists, numpy arrays, scipy-sparse\nmatrices or pandas dataframes.\n"
                                    },
                                    "test_size": {
                                        "type": "integer",
                                        "description": "float or int, default=None. If float, should be between 0.0 and 1.0 and represent the proportion\nof the dataset to include in the test split. If int, represents the\nabsolute number of test samples. If None, the value is set to the\ncomplement of the train size. If train_size is also None, it will\nbe set to 0.25.\n"
                                    },
                                    "train_size": {
                                        "type": "integer",
                                        "description": "float or int, default=None. If float, should be between 0.0 and 1.0 and represent the\nproportion of the dataset to include in the train split. If\nint, represents the absolute number of train samples. If None,\nthe value is automatically set to the complement of the test size.\n"
                                    },
                                    "random_state": {
                                        "type": "integer",
                                        "description": "int, RandomState instance or None, default=None. Controls the shuffling applied to the data before applying the split.\nPass an int for reproducible output across multiple function calls.\nSee Glossary.\n"
                                    },
                                    "shuffle": {
                                        "type": "boolean",
                                        "description": "bool, default=True. Whether or not to shuffle the data before splitting. If shuffle=False\nthen stratify must be None.\n"
                                    },
                                    "stratify": {
                                        "type": "array",
                                        "description": "array-like, default=None. If not None, data is split in a stratified fashion, using this as\nthe class labels.\nRead more in the User Guide.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "GroupShuffleSplit",
                        "func_desc": "Shuffle-Group(s)-Out cross-validation iterator.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.GroupShuffleSplit.html#sklearn.model_selection.GroupShuffleSplit",
                        "function_definitions": {
                            "function_name": "GroupShuffleSplit",
                            "full_function": "class sklearn.model_selection.GroupShuffleSplit(n_splits=5, *, test_size=None, train_size=None, random_state=None)",
                            "function_text": "Shuffle-Group(s)-Out cross-validation iterator. Provides randomized train/test indices to split data according to a\nthird-party provided group. This group information can be used to encode\narbitrary domain specific stratifications of the samples as integers. For instance the groups could be the year of collection of the samples\nand thus allow for cross-validation against time-based splits. The difference between LeavePGroupsOut and GroupShuffleSplit is that\nthe former generates splits using all subsets of size p unique groups,\nwhereas GroupShuffleSplit generates a user-determined number of random\ntest splits, each with a user-determined fraction of unique groups. For example, a less computationally intensive alternative to\nLeavePGroupsOut(p=10) would be\nGroupShuffleSplit(test_size=10, n_splits=100). Note: The parameters test_size and train_size refer to groups, and\nnot to samples, as in ShuffleSplit. Read more in the User Guide. For visualisation of cross-validation behaviour and\ncomparison between common scikit-learn split methods\nrefer to Visualizing cross-validation behavior in scikit-learn",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/cross_validation.html#group-shuffle-split",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples, n_features)",
                                    "param_desc": "Training data, where n_samples is the number of samples\nand n_features is the number of features.\n"
                                },
                                {
                                    "param_name": "y",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "The target variable for supervised learning problems.\n"
                                },
                                {
                                    "param_name": "groups",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "Group labels for the samples used while splitting the dataset into\ntrain/test set.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "GroupShuffleSplit",
                            "descriptions": "Shuffle-Group(s)-Out cross-validation iterator. Provides randomized train/test indices to split data according to a\nthird-party provided group. This group information can be used to encode\narbitrary domain specific stratifications of the samples as integers. For instance the groups could be the year of collection of the samples\nand thus allow for cross-validation against time-based splits. The difference between LeavePGroupsOut and GroupShuffleSplit is that\nthe former generates splits using all subsets of size p unique groups,\nwhereas GroupShuffleSplit generates a user-determined number of random\ntest splits, each with a user-determined fraction of unique groups. For example, a less computationally intensive alternative to\nLeavePGroupsOut(p=10) would be\nGroupShuffleSplit(test_size=10, n_splits=100). Note: The parameters test_size and train_size refer to groups, and\nnot to samples, as in ShuffleSplit. Read more in the User Guide. For visualisation of cross-validation behaviour and\ncomparison between common scikit-learn split methods\nrefer to Visualizing cross-validation behavior in scikit-learn",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_features). Training data, where n_samples is the number of samples\nand n_features is the number of features.\n"
                                    },
                                    "y": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. The target variable for supervised learning problems.\n"
                                    },
                                    "groups": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). Group labels for the samples used while splitting the dataset into\ntrain/test set.\n"
                                    }
                                },
                                "required": [
                                    "n_splits=5"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "LeaveOneGroupOut",
                        "func_desc": "Leave One Group Out cross-validator.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.LeaveOneGroupOut.html#sklearn.model_selection.LeaveOneGroupOut",
                        "function_definitions": {
                            "function_name": "LeaveOneGroupOut",
                            "full_function": "class sklearn.model_selection.LeaveOneGroupOut",
                            "function_text": "Leave One Group Out cross-validator. Provides train/test indices to split data such that each training set is\ncomprised of all samples except ones belonging to one specific group.\nArbitrary domain specific group information is provided an array integers\nthat encodes the group of each sample. For instance the groups could be the year of collection of the samples\nand thus allow for cross-validation against time-based splits. Read more in the User Guide. See also K-fold iterator variant with non-overlapping groups. Notes Splits are ordered according to the index of the group left out. The first\nsplit has testing set consisting of the group whose index in groups is\nlowest, and so on. Examples Get metadata routing of this object. Please check User Guide on how the routing\nmechanism works.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/cross_validation.html#leave-one-group-out",
                            "parameter_names_desc": []
                        },
                        "function_calling": {}
                    },
                    {
                        "func_name": "LeavePGroupsOut",
                        "func_desc": "Leave P Group(s) Out cross-validator.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.LeavePGroupsOut.html#sklearn.model_selection.LeavePGroupsOut",
                        "function_definitions": {
                            "function_name": "LeavePGroupsOut",
                            "full_function": "class sklearn.model_selection.LeavePGroupsOut(n_groups)",
                            "function_text": "Leave P Group(s) Out cross-validator. Provides train/test indices to split data according to a third-party\nprovided group. This group information can be used to encode arbitrary\ndomain specific stratifications of the samples as integers. For instance the groups could be the year of collection of the samples\nand thus allow for cross-validation against time-based splits. The difference between LeavePGroupsOut and LeaveOneGroupOut is that\nthe former builds the test sets with all the samples assigned to\np different values of the groups while the latter uses samples\nall assigned the same groups. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/cross_validation.html#leave-p-groups-out",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples, n_features)",
                                    "param_desc": "Training data, where n_samples is the number of samples\nand n_features is the number of features.\n"
                                },
                                {
                                    "param_name": "y",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "The target variable for supervised learning problems.\n"
                                },
                                {
                                    "param_name": "groups",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "Group labels for the samples used while splitting the dataset into\ntrain/test set.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "LeavePGroupsOut",
                            "descriptions": "Leave P Group(s) Out cross-validator. Provides train/test indices to split data according to a third-party\nprovided group. This group information can be used to encode arbitrary\ndomain specific stratifications of the samples as integers. For instance the groups could be the year of collection of the samples\nand thus allow for cross-validation against time-based splits. The difference between LeavePGroupsOut and LeaveOneGroupOut is that\nthe former builds the test sets with all the samples assigned to\np different values of the groups while the latter uses samples\nall assigned the same groups. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_features). Training data, where n_samples is the number of samples\nand n_features is the number of features.\n"
                                    },
                                    "y": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. The target variable for supervised learning problems.\n"
                                    },
                                    "groups": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). Group labels for the samples used while splitting the dataset into\ntrain/test set.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "PredefinedSplit",
                        "func_desc": "Predefined split cross-validator.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.PredefinedSplit.html#sklearn.model_selection.PredefinedSplit",
                        "function_definitions": {
                            "function_name": "PredefinedSplit",
                            "full_function": "class sklearn.model_selection.PredefinedSplit(test_fold)",
                            "function_text": "Predefined split cross-validator. Provides train/test indices to split data into train/test sets using a\npredefined scheme specified by the user with the test_fold parameter. Read more in the User Guide. Added in version 0.16.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/cross_validation.html#predefined-split",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "object",
                                    "param_desc": "Always ignored, exists for compatibility.\n"
                                },
                                {
                                    "param_name": "y",
                                    "param_type": "object",
                                    "param_desc": "Always ignored, exists for compatibility.\n"
                                },
                                {
                                    "param_name": "groups",
                                    "param_type": "object",
                                    "param_desc": "Always ignored, exists for compatibility.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "PredefinedSplit",
                            "descriptions": "Predefined split cross-validator. Provides train/test indices to split data into train/test sets using a\npredefined scheme specified by the user with the test_fold parameter. Read more in the User Guide. Added in version 0.16.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "object",
                                        "description": "object. Always ignored, exists for compatibility.\n"
                                    },
                                    "y": {
                                        "type": "object",
                                        "description": "object. Always ignored, exists for compatibility.\n"
                                    },
                                    "groups": {
                                        "type": "object",
                                        "description": "object. Always ignored, exists for compatibility.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "RepeatedStratifiedKFold",
                        "func_desc": "Repeated Stratified K-Fold cross validator.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.RepeatedStratifiedKFold.html#sklearn.model_selection.RepeatedStratifiedKFold",
                        "function_definitions": {
                            "function_name": "RepeatedStratifiedKFold",
                            "full_function": "class sklearn.model_selection.RepeatedStratifiedKFold(*, n_splits=5, n_repeats=10, random_state=None)",
                            "function_text": "Repeated Stratified K-Fold cross validator. Repeats Stratified K-Fold n times with different randomization in each\nrepetition. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/cross_validation.html#repeated-k-fold",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples, n_features)",
                                    "param_desc": "Training data, where n_samples is the number of samples\nand n_features is the number of features.\n"
                                },
                                {
                                    "param_name": "y",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "The target variable for supervised learning problems.\n"
                                },
                                {
                                    "param_name": "groups",
                                    "param_type": "object",
                                    "param_desc": "Always ignored, exists for compatibility.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "RepeatedStratifiedKFold",
                            "descriptions": "Repeated Stratified K-Fold cross validator. Repeats Stratified K-Fold n times with different randomization in each\nrepetition. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_features). Training data, where n_samples is the number of samples\nand n_features is the number of features.\n"
                                    },
                                    "y": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). The target variable for supervised learning problems.\n"
                                    },
                                    "groups": {
                                        "type": "object",
                                        "description": "object. Always ignored, exists for compatibility.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "StratifiedGroupKFold",
                        "func_desc": "Stratified K-Fold iterator variant with non-overlapping groups.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.StratifiedGroupKFold.html#sklearn.model_selection.StratifiedGroupKFold",
                        "function_definitions": {
                            "function_name": "StratifiedGroupKFold",
                            "full_function": "class sklearn.model_selection.StratifiedGroupKFold(n_splits=5, shuffle=False, random_state=None)",
                            "function_text": "Stratified K-Fold iterator variant with non-overlapping groups. This cross-validation object is a variation of StratifiedKFold attempts to\nreturn stratified folds with non-overlapping groups. The folds are made by\npreserving the percentage of samples for each class. Each group will appear exactly once in the test set across all folds (the\nnumber of distinct groups has to be at least equal to the number of folds). The difference between GroupKFold\nand StratifiedGroupKFold is that\nthe former attempts to create balanced folds such that the number of\ndistinct groups is approximately the same in each fold, whereas\nStratifiedGroupKFold attempts to create folds which preserve the\npercentage of samples for each class as much as possible given the\nconstraint of non-overlapping groups between splits. Read more in the User Guide. For visualisation of cross-validation behaviour and\ncomparison between common scikit-learn split methods\nrefer to Visualizing cross-validation behavior in scikit-learn",
                            "func_text_user_guide": "sklearn.model_selection.GroupKFold.html#sklearn.model_selection.GroupKFold",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples, n_features)",
                                    "param_desc": "Training data, where n_samples is the number of samples\nand n_features is the number of features.\n"
                                },
                                {
                                    "param_name": "y",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "The target variable for supervised learning problems.\n"
                                },
                                {
                                    "param_name": "groups",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Group labels for the samples used while splitting the dataset into\ntrain/test set.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "StratifiedGroupKFold",
                            "descriptions": "Stratified K-Fold iterator variant with non-overlapping groups. This cross-validation object is a variation of StratifiedKFold attempts to\nreturn stratified folds with non-overlapping groups. The folds are made by\npreserving the percentage of samples for each class. Each group will appear exactly once in the test set across all folds (the\nnumber of distinct groups has to be at least equal to the number of folds). The difference between GroupKFold\nand StratifiedGroupKFold is that\nthe former attempts to create balanced folds such that the number of\ndistinct groups is approximately the same in each fold, whereas\nStratifiedGroupKFold attempts to create folds which preserve the\npercentage of samples for each class as much as possible given the\nconstraint of non-overlapping groups between splits. Read more in the User Guide. For visualisation of cross-validation behaviour and\ncomparison between common scikit-learn split methods\nrefer to Visualizing cross-validation behavior in scikit-learn",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_features). Training data, where n_samples is the number of samples\nand n_features is the number of features.\n"
                                    },
                                    "y": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. The target variable for supervised learning problems.\n"
                                    },
                                    "groups": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Group labels for the samples used while splitting the dataset into\ntrain/test set.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "StratifiedShuffleSplit",
                        "func_desc": "Stratified ShuffleSplit cross-validator.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.StratifiedShuffleSplit.html#sklearn.model_selection.StratifiedShuffleSplit",
                        "function_definitions": {
                            "function_name": "StratifiedShuffleSplit",
                            "full_function": "class sklearn.model_selection.StratifiedShuffleSplit(n_splits=10, *, test_size=None, train_size=None, random_state=None)",
                            "function_text": "Stratified ShuffleSplit cross-validator. Provides train/test indices to split data in train/test sets. This cross-validation object is a merge of StratifiedKFold and\nShuffleSplit, which returns stratified randomized folds. The folds\nare made by preserving the percentage of samples for each class. Note: like the ShuffleSplit strategy, stratified random splits\ndo not guarantee that all folds will be different, although this is\nstill very likely for sizeable datasets. Read more in the User Guide. For visualisation of cross-validation behaviour and\ncomparison between common scikit-learn split methods\nrefer to Visualizing cross-validation behavior in scikit-learn",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/cross_validation.html#stratified-shuffle-split",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples, n_features)",
                                    "param_desc": "Training data, where n_samples is the number of samples\nand n_features is the number of features.\nNote that providing y is sufficient to generate the splits and\nhence np.zeros(n_samples) may be used as a placeholder for\nX instead of actual training data.\n"
                                },
                                {
                                    "param_name": "y",
                                    "param_type": "array-like of shape (n_samples,) or (n_samples, n_labels)",
                                    "param_desc": "The target variable for supervised learning problems.\nStratification is done based on the y labels.\n"
                                },
                                {
                                    "param_name": "groups",
                                    "param_type": "object",
                                    "param_desc": "Always ignored, exists for compatibility.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "StratifiedShuffleSplit",
                            "descriptions": "Stratified ShuffleSplit cross-validator. Provides train/test indices to split data in train/test sets. This cross-validation object is a merge of StratifiedKFold and\nShuffleSplit, which returns stratified randomized folds. The folds\nare made by preserving the percentage of samples for each class. Note: like the ShuffleSplit strategy, stratified random splits\ndo not guarantee that all folds will be different, although this is\nstill very likely for sizeable datasets. Read more in the User Guide. For visualisation of cross-validation behaviour and\ncomparison between common scikit-learn split methods\nrefer to Visualizing cross-validation behavior in scikit-learn",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_features). Training data, where n_samples is the number of samples\nand n_features is the number of features.\nNote that providing y is sufficient to generate the splits and\nhence np.zeros(n_samples) may be used as a placeholder for\nX instead of actual training data.\n"
                                    },
                                    "y": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,) or (n_samples, n_labels). The target variable for supervised learning problems.\nStratification is done based on the y labels.\n"
                                    },
                                    "groups": {
                                        "type": "object",
                                        "description": "object. Always ignored, exists for compatibility.\n"
                                    }
                                },
                                "required": [
                                    "n_splits=10"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "check_cv",
                        "func_desc": "Input checker utility for building a cross-validator.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.check_cv.html#sklearn.model_selection.check_cv",
                        "function_definitions": {
                            "function_name": "check_cv",
                            "full_function": "sklearn.model_selection.check_cv(cv=5, y=None, *, classifier=False)",
                            "function_text": "Input checker utility for building a cross-validator.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/glossary.html#term-CV-splitter",
                            "parameter_names_desc": [
                                {
                                    "param_name": "cv",
                                    "param_type": "int, cross-validation generator, iterable or None, default=5",
                                    "param_desc": "Determines the cross-validation splitting strategy.\nPossible inputs for cv are:\n- None, to use the default 5-fold cross validation,\n- integer, to specify the number of folds.\n- CV splitter,\n- An iterable that generates (train, test) splits as arrays of indices.\nFor integer/None inputs, if classifier is True and y is either\nbinary or multiclass, StratifiedKFold is used. In all other\ncases, KFold is used.\nRefer User Guide for the various\ncross-validation strategies that can be used here.\n\nChanged in version 0.22: cv default value changed from 3-fold to 5-fold.\n\n"
                                },
                                {
                                    "param_name": "y",
                                    "param_type": "array-like, default=None",
                                    "param_desc": "The target variable for supervised learning problems.\n"
                                },
                                {
                                    "param_name": "classifier",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Whether the task is a classification task, in which case\nstratified KFold will be used.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "check_cv",
                            "descriptions": "Input checker utility for building a cross-validator.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "cv": {
                                        "type": "integer",
                                        "description": "int, cross-validation generator, iterable or None, default=5. Determines the cross-validation splitting strategy.\nPossible inputs for cv are:\n- None, to use the default 5-fold cross validation,\n- integer, to specify the number of folds.\n- CV splitter,\n- An iterable that generates (train, test) splits as arrays of indices.\nFor integer/None inputs, if classifier is True and y is either\nbinary or multiclass, StratifiedKFold is used. In all other\ncases, KFold is used.\nRefer User Guide for the various\ncross-validation strategies that can be used here.\n\nChanged in version 0.22: cv default value changed from 3-fold to 5-fold.\n\n"
                                    },
                                    "y": {
                                        "type": "array",
                                        "description": "array-like, default=None. The target variable for supervised learning problems.\n"
                                    },
                                    "classifier": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Whether the task is a classification task, in which case\nstratified KFold will be used.\n"
                                    }
                                },
                                "required": [
                                    "cv=5",
                                    "y=None"
                                ]
                            }
                        }
                    }
                ]
            },
            {
                "Hyper-parameter optimizers": [
                    {
                        "func_name": "GridSearchCV",
                        "func_desc": "Exhaustive search over specified parameter values for an estimator.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.GridSearchCV.html#sklearn.model_selection.GridSearchCV",
                        "function_definitions": {
                            "function_name": "GridSearchCV",
                            "full_function": "class sklearn.model_selection.GridSearchCV(estimator, param_grid, *, scoring=None, n_jobs=None, refit=True, cv=None, verbose=0, pre_dispatch='2*n_jobs', error_score=nan, return_train_score=False)",
                            "function_text": "Exhaustive search over specified parameter values for an estimator. Important members are fit, predict. GridSearchCV implements a \u201cfit\u201d and a \u201cscore\u201d method.\nIt also implements \u201cscore_samples\u201d, \u201cpredict\u201d, \u201cpredict_proba\u201d,\n\u201cdecision_function\u201d, \u201ctransform\u201d and \u201cinverse_transform\u201d if they are\nimplemented in the estimator used. The parameters of the estimator used to apply these methods are optimized\nby cross-validated grid-search over a parameter grid. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/grid_search.html#grid-search",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "indexable, length n_samples",
                                    "param_desc": "Must fulfill the input assumptions of the\nunderlying estimator.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "GridSearchCV",
                            "descriptions": "Exhaustive search over specified parameter values for an estimator. Important members are fit, predict. GridSearchCV implements a \u201cfit\u201d and a \u201cscore\u201d method.\nIt also implements \u201cscore_samples\u201d, \u201cpredict\u201d, \u201cpredict_proba\u201d,\n\u201cdecision_function\u201d, \u201ctransform\u201d and \u201cinverse_transform\u201d if they are\nimplemented in the estimator used. The parameters of the estimator used to apply these methods are optimized\nby cross-validated grid-search over a parameter grid. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "indexable, length n_samples",
                                        "description": "indexable, length n_samples. Must fulfill the input assumptions of the\nunderlying estimator.\n"
                                    }
                                },
                                "required": [
                                    "estimator",
                                    "param_grid"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "HalvingRandomSearchCV",
                        "func_desc": "Randomized search on hyper parameters.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.HalvingRandomSearchCV.html#sklearn.model_selection.HalvingRandomSearchCV",
                        "function_definitions": {
                            "function_name": "HalvingRandomSearchCV",
                            "full_function": "class sklearn.model_selection.HalvingRandomSearchCV(estimator, param_distributions, *, n_candidates='exhaust', factor=3, resource='n_samples', max_resources='auto', min_resources='smallest', aggressive_elimination=False, cv=5, scoring=None, refit=True, error_score=nan, return_train_score=True, random_state=None, n_jobs=None, verbose=0)",
                            "function_text": "Randomized search on hyper parameters. The search strategy starts evaluating all the candidates with a small\namount of resources and iteratively selects the best candidates, using more\nand more resources. The candidates are sampled at random from the parameter space and the\nnumber of sampled candidates is determined by n_candidates. Read more in the User guide. Note This estimator is still experimental for now: the predictions\nand the API might change without any deprecation cycle. To use it,\nyou need to explicitly import enable_halving_search_cv:",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/grid_search.html#successive-halving-user-guide",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "indexable, length n_samples",
                                    "param_desc": "Must fulfill the input assumptions of the\nunderlying estimator.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "HalvingRandomSearchCV",
                            "descriptions": "Randomized search on hyper parameters. The search strategy starts evaluating all the candidates with a small\namount of resources and iteratively selects the best candidates, using more\nand more resources. The candidates are sampled at random from the parameter space and the\nnumber of sampled candidates is determined by n_candidates. Read more in the User guide. Note This estimator is still experimental for now: the predictions\nand the API might change without any deprecation cycle. To use it,\nyou need to explicitly import enable_halving_search_cv:",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "indexable, length n_samples",
                                        "description": "indexable, length n_samples. Must fulfill the input assumptions of the\nunderlying estimator.\n"
                                    }
                                },
                                "required": [
                                    "estimator",
                                    "param_distributions"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "ParameterSampler",
                        "func_desc": "Generator on parameters sampled from given distributions.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.ParameterSampler.html#sklearn.model_selection.ParameterSampler",
                        "function_definitions": {
                            "function_name": "ParameterSampler",
                            "full_function": "class sklearn.model_selection.ParameterSampler(param_distributions, n_iter, *, random_state=None)",
                            "function_text": "Generator on parameters sampled from given distributions. Non-deterministic iterable over random candidate combinations for hyper-\nparameter search. If all parameters are presented as a list,\nsampling without replacement is performed. If at least one parameter\nis given as a distribution, sampling with replacement is used.\nIt is highly recommended to use continuous distributions for continuous\nparameters. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/grid_search.html#grid-search",
                            "parameter_names_desc": [
                                {
                                    "param_name": "param_distributions",
                                    "param_type": "dict",
                                    "param_desc": "Dictionary with parameters names (str) as keys and distributions\nor lists of parameters to try. Distributions must provide a rvs\nmethod for sampling (such as those from scipy.stats.distributions).\nIf a list is given, it is sampled uniformly.\nIf a list of dicts is given, first a dict is sampled uniformly, and\nthen a parameter is sampled using that dict as above.\n"
                                },
                                {
                                    "param_name": "n_iter",
                                    "param_type": "int",
                                    "param_desc": "Number of parameter settings that are produced.\n"
                                },
                                {
                                    "param_name": "random_state",
                                    "param_type": "int, RandomState instance or None, default=None",
                                    "param_desc": "Pseudo random number generator state used for random uniform sampling\nfrom lists of possible values instead of scipy.stats distributions.\nPass an int for reproducible output across multiple\nfunction calls.\nSee Glossary.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "ParameterSampler",
                            "descriptions": "Generator on parameters sampled from given distributions. Non-deterministic iterable over random candidate combinations for hyper-\nparameter search. If all parameters are presented as a list,\nsampling without replacement is performed. If at least one parameter\nis given as a distribution, sampling with replacement is used.\nIt is highly recommended to use continuous distributions for continuous\nparameters. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "param_distributions": {
                                        "type": "dict",
                                        "description": "dict. Dictionary with parameters names (str) as keys and distributions\nor lists of parameters to try. Distributions must provide a rvs\nmethod for sampling (such as those from scipy.stats.distributions).\nIf a list is given, it is sampled uniformly.\nIf a list of dicts is given, first a dict is sampled uniformly, and\nthen a parameter is sampled using that dict as above.\n"
                                    },
                                    "n_iter": {
                                        "type": "integer",
                                        "description": "int. Number of parameter settings that are produced.\n"
                                    },
                                    "random_state": {
                                        "type": "integer",
                                        "description": "int, RandomState instance or None, default=None. Pseudo random number generator state used for random uniform sampling\nfrom lists of possible values instead of scipy.stats distributions.\nPass an int for reproducible output across multiple\nfunction calls.\nSee Glossary.\n"
                                    }
                                },
                                "required": [
                                    "param_distributions",
                                    "n_iter"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "HalvingGridSearchCV",
                        "func_desc": "Search over specified parameter values with successive halving.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.HalvingGridSearchCV.html#sklearn.model_selection.HalvingGridSearchCV",
                        "function_definitions": {
                            "function_name": "HalvingGridSearchCV",
                            "full_function": "class sklearn.model_selection.HalvingGridSearchCV(estimator, param_grid, *, factor=3, resource='n_samples', max_resources='auto', min_resources='exhaust', aggressive_elimination=False, cv=5, scoring=None, refit=True, error_score=nan, return_train_score=True, random_state=None, n_jobs=None, verbose=0)",
                            "function_text": "Search over specified parameter values with successive halving. The search strategy starts evaluating all the candidates with a small\namount of resources and iteratively selects the best candidates, using\nmore and more resources. Read more in the User guide. Note This estimator is still experimental for now: the predictions\nand the API might change without any deprecation cycle. To use it,\nyou need to explicitly import enable_halving_search_cv:",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/grid_search.html#successive-halving-user-guide",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "indexable, length n_samples",
                                    "param_desc": "Must fulfill the input assumptions of the\nunderlying estimator.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "HalvingGridSearchCV",
                            "descriptions": "Search over specified parameter values with successive halving. The search strategy starts evaluating all the candidates with a small\namount of resources and iteratively selects the best candidates, using\nmore and more resources. Read more in the User guide. Note This estimator is still experimental for now: the predictions\nand the API might change without any deprecation cycle. To use it,\nyou need to explicitly import enable_halving_search_cv:",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "indexable, length n_samples",
                                        "description": "indexable, length n_samples. Must fulfill the input assumptions of the\nunderlying estimator.\n"
                                    }
                                },
                                "required": [
                                    "estimator",
                                    "param_grid"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "ParameterGrid",
                        "func_desc": "Grid of parameters with a discrete number of values for each.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.ParameterGrid.html#sklearn.model_selection.ParameterGrid",
                        "function_definitions": {
                            "function_name": "ParameterGrid",
                            "full_function": "class sklearn.model_selection.ParameterGrid(param_grid)",
                            "function_text": "Grid of parameters with a discrete number of values for each. Can be used to iterate over parameter value combinations with the\nPython built-in function iter.\nThe order of the generated parameter combinations is deterministic. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/grid_search.html#grid-search",
                            "parameter_names_desc": [
                                {
                                    "param_name": "param_grid",
                                    "param_type": "dict of str to sequence, or sequence of such",
                                    "param_desc": "The parameter grid to explore, as a dictionary mapping estimator\nparameters to sequences of allowed values.\nAn empty dict signifies default parameters.\nA sequence of dicts signifies a sequence of grids to search, and is\nuseful to avoid exploring parameter combinations that make no sense\nor have no effect. See the examples below.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "ParameterGrid",
                            "descriptions": "Grid of parameters with a discrete number of values for each. Can be used to iterate over parameter value combinations with the\nPython built-in function iter.\nThe order of the generated parameter combinations is deterministic. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "param_grid": {
                                        "type": "string",
                                        "description": "dict of str to sequence, or sequence of such. The parameter grid to explore, as a dictionary mapping estimator\nparameters to sequences of allowed values.\nAn empty dict signifies default parameters.\nA sequence of dicts signifies a sequence of grids to search, and is\nuseful to avoid exploring parameter combinations that make no sense\nor have no effect. See the examples below.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "RandomizedSearchCV",
                        "func_desc": "Randomized search on hyper parameters.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.RandomizedSearchCV.html#sklearn.model_selection.RandomizedSearchCV",
                        "function_definitions": {
                            "function_name": "RandomizedSearchCV",
                            "full_function": "class sklearn.model_selection.RandomizedSearchCV(estimator, param_distributions, *, n_iter=10, scoring=None, n_jobs=None, refit=True, cv=None, verbose=0, pre_dispatch='2*n_jobs', random_state=None, error_score=nan, return_train_score=False)",
                            "function_text": "Randomized search on hyper parameters. RandomizedSearchCV implements a \u201cfit\u201d and a \u201cscore\u201d method.\nIt also implements \u201cscore_samples\u201d, \u201cpredict\u201d, \u201cpredict_proba\u201d,\n\u201cdecision_function\u201d, \u201ctransform\u201d and \u201cinverse_transform\u201d if they are\nimplemented in the estimator used. The parameters of the estimator used to apply these methods are optimized\nby cross-validated search over parameter settings. In contrast to GridSearchCV, not all parameter values are tried out, but\nrather a fixed number of parameter settings is sampled from the specified\ndistributions. The number of parameter settings that are tried is\ngiven by n_iter. If all parameters are presented as a list,\nsampling without replacement is performed. If at least one parameter\nis given as a distribution, sampling with replacement is used.\nIt is highly recommended to use continuous distributions for continuous\nparameters. Read more in the User Guide. Added in version 0.14.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/grid_search.html#randomized-parameter-search",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "indexable, length n_samples",
                                    "param_desc": "Must fulfill the input assumptions of the\nunderlying estimator.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "RandomizedSearchCV",
                            "descriptions": "Randomized search on hyper parameters. RandomizedSearchCV implements a \u201cfit\u201d and a \u201cscore\u201d method.\nIt also implements \u201cscore_samples\u201d, \u201cpredict\u201d, \u201cpredict_proba\u201d,\n\u201cdecision_function\u201d, \u201ctransform\u201d and \u201cinverse_transform\u201d if they are\nimplemented in the estimator used. The parameters of the estimator used to apply these methods are optimized\nby cross-validated search over parameter settings. In contrast to GridSearchCV, not all parameter values are tried out, but\nrather a fixed number of parameter settings is sampled from the specified\ndistributions. The number of parameter settings that are tried is\ngiven by n_iter. If all parameters are presented as a list,\nsampling without replacement is performed. If at least one parameter\nis given as a distribution, sampling with replacement is used.\nIt is highly recommended to use continuous distributions for continuous\nparameters. Read more in the User Guide. Added in version 0.14.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "indexable, length n_samples",
                                        "description": "indexable, length n_samples. Must fulfill the input assumptions of the\nunderlying estimator.\n"
                                    }
                                },
                                "required": [
                                    "estimator",
                                    "param_distributions"
                                ]
                            }
                        }
                    }
                ]
            },
            {
                "Post-fit model tuning": [
                    {
                        "func_name": "FixedThresholdClassifier",
                        "func_desc": "Binary classifier that manually sets the decision threshold.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.FixedThresholdClassifier.html#sklearn.model_selection.FixedThresholdClassifier",
                        "function_definitions": {
                            "function_name": "FixedThresholdClassifier",
                            "full_function": "class sklearn.model_selection.FixedThresholdClassifier(estimator, *, threshold='auto', pos_label=None, response_method='auto')",
                            "function_text": "Binary classifier that manually sets the decision threshold. This classifier allows to change the default decision threshold used for\nconverting posterior probability estimates (i.e. output of predict_proba) or\ndecision scores (i.e. output of decision_function) into a class label. Here, the threshold is not optimized and is set to a constant value. Read more in the User Guide. Added in version 1.5.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/classification_threshold.html#fixedthresholdclassifier",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "FixedThresholdClassifier",
                            "descriptions": "Binary classifier that manually sets the decision threshold. This classifier allows to change the default decision threshold used for\nconverting posterior probability estimates (i.e. output of predict_proba) or\ndecision scores (i.e. output of decision_function) into a class label. Here, the threshold is not optimized and is set to a constant value. Read more in the User Guide. Added in version 1.5.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": [
                                    "estimator"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "TunedThresholdClassifierCV",
                        "func_desc": "Classifier that post-tunes the decision threshold using cross-validation.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.TunedThresholdClassifierCV.html#sklearn.model_selection.TunedThresholdClassifierCV",
                        "function_definitions": {
                            "function_name": "TunedThresholdClassifierCV",
                            "full_function": "class sklearn.model_selection.TunedThresholdClassifierCV(estimator, *, scoring='balanced_accuracy', response_method='auto', thresholds=100, cv=None, refit=True, n_jobs=None, random_state=None, store_cv_results=False)",
                            "function_text": "Classifier that post-tunes the decision threshold using cross-validation. This estimator post-tunes the decision threshold (cut-off point) that is\nused for converting posterior probability estimates (i.e. output of\npredict_proba) or decision scores (i.e. output of decision_function)\ninto a class label. The tuning is done by optimizing a binary metric,\npotentially constrained by a another metric. Read more in the User Guide. Added in version 1.5.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/classification_threshold.html#tunedthresholdclassifiercv",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "TunedThresholdClassifierCV",
                            "descriptions": "Classifier that post-tunes the decision threshold using cross-validation. This estimator post-tunes the decision threshold (cut-off point) that is\nused for converting posterior probability estimates (i.e. output of\npredict_proba) or decision scores (i.e. output of decision_function)\ninto a class label. The tuning is done by optimizing a binary metric,\npotentially constrained by a another metric. Read more in the User Guide. Added in version 1.5.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": [
                                    "estimator"
                                ]
                            }
                        }
                    }
                ]
            },
            {
                "Model validation": [
                    {
                        "func_name": "cross_val_predict",
                        "func_desc": "Generate cross-validated estimates for each input data point.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.cross_val_predict.html#sklearn.model_selection.cross_val_predict",
                        "function_definitions": {
                            "function_name": "cross_val_predict",
                            "full_function": "sklearn.model_selection.cross_val_predict(estimator, X, y=None, *, groups=None, cv=None, n_jobs=None, verbose=0, fit_params=None, params=None, pre_dispatch='2*n_jobs', method='predict')",
                            "function_text": "Generate cross-validated estimates for each input data point. The data is split according to the cv parameter. Each sample belongs\nto exactly one test set, and its prediction is computed with an\nestimator fitted on the corresponding training set. Passing these predictions into an evaluation metric may not be a valid\nway to measure generalization performance. Results can differ from\ncross_validate and cross_val_score unless all tests sets\nhave equal size and the metric decomposes over samples. Read more in the User Guide.",
                            "func_text_user_guide": "sklearn.model_selection.cross_validate.html#sklearn.model_selection.cross_validate",
                            "parameter_names_desc": [
                                {
                                    "param_name": "estimator",
                                    "param_type": "estimator",
                                    "param_desc": "The estimator instance to use to fit the data. It must implement a fit\nmethod and the method given by the method parameter.\n"
                                },
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "The data to fit. Can be, for example a list, or an array at least 2d.\n"
                                },
                                {
                                    "param_name": "y",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples,) or (n_samples, n_outputs),             default=None",
                                    "param_desc": "The target variable to try to predict in the case of\nsupervised learning.\n"
                                },
                                {
                                    "param_name": "groups",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Group labels for the samples used while splitting the dataset into\ntrain/test set. Only used in conjunction with a \u201cGroup\u201d cv\ninstance (e.g., GroupKFold).\n\nChanged in version 1.4: groups can only be passed if metadata routing is not enabled\nvia sklearn.set_config(enable_metadata_routing=True). When routing\nis enabled, pass groups alongside other metadata via the params\nargument instead. E.g.:\ncross_val_predict(..., params={'groups': groups}).\n\n"
                                },
                                {
                                    "param_name": "cv",
                                    "param_type": "int, cross-validation generator or an iterable, default=None",
                                    "param_desc": "Determines the cross-validation splitting strategy.\nPossible inputs for cv are:\n\nNone, to use the default 5-fold cross validation,\nint, to specify the number of folds in a (Stratified)KFold,\nCV splitter,\nAn iterable that generates (train, test) splits as arrays of indices.\n\nFor int/None inputs, if the estimator is a classifier and y is\neither binary or multiclass, StratifiedKFold is used. In all\nother cases, KFold is used. These splitters are instantiated\nwith shuffle=False so the splits will be the same across calls.\nRefer User Guide for the various\ncross-validation strategies that can be used here.\n\nChanged in version 0.22: cv default value if None changed from 3-fold to 5-fold.\n\n"
                                },
                                {
                                    "param_name": "n_jobs",
                                    "param_type": "int, default=None",
                                    "param_desc": "Number of jobs to run in parallel. Training the estimator and\npredicting are parallelized over the cross-validation splits.\nNone means 1 unless in a joblib.parallel_backend context.\n-1 means using all processors. See Glossary\nfor more details.\n"
                                },
                                {
                                    "param_name": "verbose",
                                    "param_type": "int, default=0",
                                    "param_desc": "The verbosity level.\n"
                                },
                                {
                                    "param_name": "fit_params",
                                    "param_type": "dict, default=None",
                                    "param_desc": "Parameters to pass to the fit method of the estimator.\n\nDeprecated since version 1.4: This parameter is deprecated and will be removed in version 1.6. Use\nparams instead.\n\n"
                                },
                                {
                                    "param_name": "params",
                                    "param_type": "dict, default=None",
                                    "param_desc": "Parameters to pass to the underlying estimator\u2019s fit and the CV\nsplitter.\n\nAdded in version 1.4.\n\n"
                                },
                                {
                                    "param_name": "pre_dispatch",
                                    "param_type": "int or str, default=\u20192*n_jobs\u2019",
                                    "param_desc": "Controls the number of jobs that get dispatched during parallel\nexecution. Reducing this number can be useful to avoid an\nexplosion of memory consumption when more jobs get dispatched\nthan CPUs can process. This parameter can be:\n\n\nNone, in which case all the jobs are immediately\ncreated and spawned. Use this for lightweight and\nfast-running jobs, to avoid delays due to on-demand\nspawning of the jobs\nAn int, giving the exact number of total jobs that are\nspawned\nA str, giving an expression as a function of n_jobs,\nas in \u20182*n_jobs\u2019\n\n\n"
                                },
                                {
                                    "param_name": "method",
                                    "param_type": "{\u2018predict\u2019, \u2018predict_proba\u2019, \u2018predict_log_proba\u2019,               \u2018decision_function\u2019}, default=\u2019predict\u2019",
                                    "param_desc": "The method to be invoked by estimator.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "cross_val_predict",
                            "descriptions": "Generate cross-validated estimates for each input data point. The data is split according to the cv parameter. Each sample belongs\nto exactly one test set, and its prediction is computed with an\nestimator fitted on the corresponding training set. Passing these predictions into an evaluation metric may not be a valid\nway to measure generalization performance. Results can differ from\ncross_validate and cross_val_score unless all tests sets\nhave equal size and the metric decomposes over samples. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "estimator": {
                                        "type": "estimator",
                                        "description": "estimator. The estimator instance to use to fit the data. It must implement a fit\nmethod and the method given by the method parameter.\n"
                                    },
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). The data to fit. Can be, for example a list, or an array at least 2d.\n"
                                    },
                                    "y": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples,) or (n_samples, n_outputs),             default=None. The target variable to try to predict in the case of\nsupervised learning.\n"
                                    },
                                    "groups": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Group labels for the samples used while splitting the dataset into\ntrain/test set. Only used in conjunction with a \u201cGroup\u201d cv\ninstance (e.g., GroupKFold).\n\nChanged in version 1.4: groups can only be passed if metadata routing is not enabled\nvia sklearn.set_config(enable_metadata_routing=True). When routing\nis enabled, pass groups alongside other metadata via the params\nargument instead. E.g.:\ncross_val_predict(..., params={'groups': groups}).\n\n"
                                    },
                                    "cv": {
                                        "type": "integer",
                                        "description": "int, cross-validation generator or an iterable, default=None. Determines the cross-validation splitting strategy.\nPossible inputs for cv are:\n\nNone, to use the default 5-fold cross validation,\nint, to specify the number of folds in a (Stratified)KFold,\nCV splitter,\nAn iterable that generates (train, test) splits as arrays of indices.\n\nFor int/None inputs, if the estimator is a classifier and y is\neither binary or multiclass, StratifiedKFold is used. In all\nother cases, KFold is used. These splitters are instantiated\nwith shuffle=False so the splits will be the same across calls.\nRefer User Guide for the various\ncross-validation strategies that can be used here.\n\nChanged in version 0.22: cv default value if None changed from 3-fold to 5-fold.\n\n"
                                    },
                                    "n_jobs": {
                                        "type": "integer",
                                        "description": "int, default=None. Number of jobs to run in parallel. Training the estimator and\npredicting are parallelized over the cross-validation splits.\nNone means 1 unless in a joblib.parallel_backend context.\n-1 means using all processors. See Glossary\nfor more details.\n"
                                    },
                                    "verbose": {
                                        "type": "integer",
                                        "description": "int, default=0. The verbosity level.\n"
                                    },
                                    "fit_params": {
                                        "type": "dict, default=None",
                                        "description": "dict, default=None. Parameters to pass to the fit method of the estimator.\n\nDeprecated since version 1.4: This parameter is deprecated and will be removed in version 1.6. Use\nparams instead.\n\n"
                                    },
                                    "params": {
                                        "type": "dict, default=None",
                                        "description": "dict, default=None. Parameters to pass to the underlying estimator\u2019s fit and the CV\nsplitter.\n\nAdded in version 1.4.\n\n"
                                    },
                                    "pre_dispatch": {
                                        "type": "integer",
                                        "description": "int or str, default=\u20192*n_jobs\u2019. Controls the number of jobs that get dispatched during parallel\nexecution. Reducing this number can be useful to avoid an\nexplosion of memory consumption when more jobs get dispatched\nthan CPUs can process. This parameter can be:\n\n\nNone, in which case all the jobs are immediately\ncreated and spawned. Use this for lightweight and\nfast-running jobs, to avoid delays due to on-demand\nspawning of the jobs\nAn int, giving the exact number of total jobs that are\nspawned\nA str, giving an expression as a function of n_jobs,\nas in \u20182*n_jobs\u2019\n\n\n"
                                    },
                                    "method": {
                                        "type": "string",
                                        "enum": [
                                            "predict",
                                            " predict_proba",
                                            " predict_log_proba",
                                            "               decision_function"
                                        ],
                                        "description": "{\u2018predict\u2019, \u2018predict_proba\u2019, \u2018predict_log_proba\u2019,               \u2018decision_function\u2019}, default=\u2019predict\u2019. The method to be invoked by estimator.\n"
                                    }
                                },
                                "required": [
                                    "estimator",
                                    "X",
                                    "y=None"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "cross_validate",
                        "func_desc": "Evaluate metric(s) by cross-validation and also record fit/score times.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.cross_validate.html#sklearn.model_selection.cross_validate",
                        "function_definitions": {
                            "function_name": "cross_validate",
                            "full_function": "sklearn.model_selection.cross_validate(estimator, X, y=None, *, groups=None, scoring=None, cv=None, n_jobs=None, verbose=0, fit_params=None, params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, return_indices=False, error_score=nan)",
                            "function_text": "Evaluate metric(s) by cross-validation and also record fit/score times. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/cross_validation.html#multimetric-cross-validation",
                            "parameter_names_desc": [
                                {
                                    "param_name": "estimator",
                                    "param_type": "estimator object implementing \u2018fit\u2019",
                                    "param_desc": "The object to use to fit the data.\n"
                                },
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "The data to fit. Can be for example a list, or an array.\n"
                                },
                                {
                                    "param_name": "y",
                                    "param_type": "array-like of shape (n_samples,) or (n_samples, n_outputs), default=None",
                                    "param_desc": "The target variable to try to predict in the case of\nsupervised learning.\n"
                                },
                                {
                                    "param_name": "groups",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Group labels for the samples used while splitting the dataset into\ntrain/test set. Only used in conjunction with a \u201cGroup\u201d cv\ninstance (e.g., GroupKFold).\n\nChanged in version 1.4: groups can only be passed if metadata routing is not enabled\nvia sklearn.set_config(enable_metadata_routing=True). When routing\nis enabled, pass groups alongside other metadata via the params\nargument instead. E.g.:\ncross_validate(..., params={'groups': groups}).\n\n"
                                },
                                {
                                    "param_name": "scoring",
                                    "param_type": "str, callable, list, tuple, or dict, default=None",
                                    "param_desc": "Strategy to evaluate the performance of the cross-validated model on\nthe test set.\nIf scoring represents a single score, one can use:\n\na single string (see The scoring parameter: defining model evaluation rules);\na callable (see Defining your scoring strategy from metric functions) that returns a single value.\n\nIf scoring represents multiple scores, one can use:\n\na list or tuple of unique strings;\na callable returning a dictionary where the keys are the metric\nnames and the values are the metric scores;\na dictionary with metric names as keys and callables a values.\n\nSee Specifying multiple metrics for evaluation for an example.\n"
                                },
                                {
                                    "param_name": "cv",
                                    "param_type": "int, cross-validation generator or an iterable, default=None",
                                    "param_desc": "Determines the cross-validation splitting strategy.\nPossible inputs for cv are:\n\nNone, to use the default 5-fold cross validation,\nint, to specify the number of folds in a (Stratified)KFold,\nCV splitter,\nAn iterable yielding (train, test) splits as arrays of indices.\n\nFor int/None inputs, if the estimator is a classifier and y is\neither binary or multiclass, StratifiedKFold is used. In all\nother cases, KFold is used. These splitters are instantiated\nwith shuffle=False so the splits will be the same across calls.\nRefer User Guide for the various\ncross-validation strategies that can be used here.\n\nChanged in version 0.22: cv default value if None changed from 3-fold to 5-fold.\n\n"
                                },
                                {
                                    "param_name": "n_jobs",
                                    "param_type": "int, default=None",
                                    "param_desc": "Number of jobs to run in parallel. Training the estimator and computing\nthe score are parallelized over the cross-validation splits.\nNone means 1 unless in a joblib.parallel_backend context.\n-1 means using all processors. See Glossary\nfor more details.\n"
                                },
                                {
                                    "param_name": "verbose",
                                    "param_type": "int, default=0",
                                    "param_desc": "The verbosity level.\n"
                                },
                                {
                                    "param_name": "fit_params",
                                    "param_type": "dict, default=None",
                                    "param_desc": "Parameters to pass to the fit method of the estimator.\n\nDeprecated since version 1.4: This parameter is deprecated and will be removed in version 1.6. Use\nparams instead.\n\n"
                                },
                                {
                                    "param_name": "params",
                                    "param_type": "dict, default=None",
                                    "param_desc": "Parameters to pass to the underlying estimator\u2019s fit, the scorer,\nand the CV splitter.\n\nAdded in version 1.4.\n\n"
                                },
                                {
                                    "param_name": "pre_dispatch",
                                    "param_type": "int or str, default=\u20192*n_jobs\u2019",
                                    "param_desc": "Controls the number of jobs that get dispatched during parallel\nexecution. Reducing this number can be useful to avoid an\nexplosion of memory consumption when more jobs get dispatched\nthan CPUs can process. This parameter can be:\n\n\nAn int, giving the exact number of total jobs that are\nspawned\nA str, giving an expression as a function of n_jobs,\nas in \u20182*n_jobs\u2019\n\n\n"
                                },
                                {
                                    "param_name": "return_train_score",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Whether to include train scores.\nComputing training scores is used to get insights on how different\nparameter settings impact the overfitting/underfitting trade-off.\nHowever computing the scores on the training set can be computationally\nexpensive and is not strictly required to select the parameters that\nyield the best generalization performance.\n\nAdded in version 0.19.\n\n\nChanged in version 0.21: Default value was changed from True to False\n\n"
                                },
                                {
                                    "param_name": "return_estimator",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Whether to return the estimators fitted on each split.\n\nAdded in version 0.20.\n\n"
                                },
                                {
                                    "param_name": "return_indices",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Whether to return the train-test indices selected for each split.\n\nAdded in version 1.3.\n\n"
                                },
                                {
                                    "param_name": "error_score",
                                    "param_type": "\u2018raise\u2019 or numeric, default=np.nan",
                                    "param_desc": "Value to assign to the score if an error occurs in estimator fitting.\nIf set to \u2018raise\u2019, the error is raised.\nIf a numeric value is given, FitFailedWarning is raised.\n\nAdded in version 0.20.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "cross_validate",
                            "descriptions": "Evaluate metric(s) by cross-validation and also record fit/score times. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "estimator": {
                                        "type": "object",
                                        "description": "estimator object implementing \u2018fit\u2019. The object to use to fit the data.\n"
                                    },
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). The data to fit. Can be for example a list, or an array.\n"
                                    },
                                    "y": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,) or (n_samples, n_outputs), default=None. The target variable to try to predict in the case of\nsupervised learning.\n"
                                    },
                                    "groups": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Group labels for the samples used while splitting the dataset into\ntrain/test set. Only used in conjunction with a \u201cGroup\u201d cv\ninstance (e.g., GroupKFold).\n\nChanged in version 1.4: groups can only be passed if metadata routing is not enabled\nvia sklearn.set_config(enable_metadata_routing=True). When routing\nis enabled, pass groups alongside other metadata via the params\nargument instead. E.g.:\ncross_validate(..., params={'groups': groups}).\n\n"
                                    },
                                    "scoring": {
                                        "type": "string",
                                        "description": "str, callable, list, tuple, or dict, default=None. Strategy to evaluate the performance of the cross-validated model on\nthe test set.\nIf scoring represents a single score, one can use:\n\na single string (see The scoring parameter: defining model evaluation rules);\na callable (see Defining your scoring strategy from metric functions) that returns a single value.\n\nIf scoring represents multiple scores, one can use:\n\na list or tuple of unique strings;\na callable returning a dictionary where the keys are the metric\nnames and the values are the metric scores;\na dictionary with metric names as keys and callables a values.\n\nSee Specifying multiple metrics for evaluation for an example.\n"
                                    },
                                    "cv": {
                                        "type": "integer",
                                        "description": "int, cross-validation generator or an iterable, default=None. Determines the cross-validation splitting strategy.\nPossible inputs for cv are:\n\nNone, to use the default 5-fold cross validation,\nint, to specify the number of folds in a (Stratified)KFold,\nCV splitter,\nAn iterable yielding (train, test) splits as arrays of indices.\n\nFor int/None inputs, if the estimator is a classifier and y is\neither binary or multiclass, StratifiedKFold is used. In all\nother cases, KFold is used. These splitters are instantiated\nwith shuffle=False so the splits will be the same across calls.\nRefer User Guide for the various\ncross-validation strategies that can be used here.\n\nChanged in version 0.22: cv default value if None changed from 3-fold to 5-fold.\n\n"
                                    },
                                    "n_jobs": {
                                        "type": "integer",
                                        "description": "int, default=None. Number of jobs to run in parallel. Training the estimator and computing\nthe score are parallelized over the cross-validation splits.\nNone means 1 unless in a joblib.parallel_backend context.\n-1 means using all processors. See Glossary\nfor more details.\n"
                                    },
                                    "verbose": {
                                        "type": "integer",
                                        "description": "int, default=0. The verbosity level.\n"
                                    },
                                    "fit_params": {
                                        "type": "dict, default=None",
                                        "description": "dict, default=None. Parameters to pass to the fit method of the estimator.\n\nDeprecated since version 1.4: This parameter is deprecated and will be removed in version 1.6. Use\nparams instead.\n\n"
                                    },
                                    "params": {
                                        "type": "dict, default=None",
                                        "description": "dict, default=None. Parameters to pass to the underlying estimator\u2019s fit, the scorer,\nand the CV splitter.\n\nAdded in version 1.4.\n\n"
                                    },
                                    "pre_dispatch": {
                                        "type": "integer",
                                        "description": "int or str, default=\u20192*n_jobs\u2019. Controls the number of jobs that get dispatched during parallel\nexecution. Reducing this number can be useful to avoid an\nexplosion of memory consumption when more jobs get dispatched\nthan CPUs can process. This parameter can be:\n\n\nAn int, giving the exact number of total jobs that are\nspawned\nA str, giving an expression as a function of n_jobs,\nas in \u20182*n_jobs\u2019\n\n\n"
                                    },
                                    "return_train_score": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Whether to include train scores.\nComputing training scores is used to get insights on how different\nparameter settings impact the overfitting/underfitting trade-off.\nHowever computing the scores on the training set can be computationally\nexpensive and is not strictly required to select the parameters that\nyield the best generalization performance.\n\nAdded in version 0.19.\n\n\nChanged in version 0.21: Default value was changed from True to False\n\n"
                                    },
                                    "return_estimator": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Whether to return the estimators fitted on each split.\n\nAdded in version 0.20.\n\n"
                                    },
                                    "return_indices": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Whether to return the train-test indices selected for each split.\n\nAdded in version 1.3.\n\n"
                                    },
                                    "error_score": {
                                        "type": "\u2018raise\u2019 or numeric, default=np.nan",
                                        "description": "\u2018raise\u2019 or numeric, default=np.nan. Value to assign to the score if an error occurs in estimator fitting.\nIf set to \u2018raise\u2019, the error is raised.\nIf a numeric value is given, FitFailedWarning is raised.\n\nAdded in version 0.20.\n\n"
                                    }
                                },
                                "required": [
                                    "estimator",
                                    "X",
                                    "y=None"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "permutation_test_score",
                        "func_desc": "Evaluate the significance of a cross-validated score with permutations.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.permutation_test_score.html#sklearn.model_selection.permutation_test_score",
                        "function_definitions": {
                            "function_name": "permutation_test_score",
                            "full_function": "sklearn.model_selection.permutation_test_score(estimator, X, y, *, groups=None, cv=None, n_permutations=100, n_jobs=None, random_state=0, verbose=0, scoring=None, fit_params=None)",
                            "function_text": "Evaluate the significance of a cross-validated score with permutations. Permutes targets to generate \u2018randomized data\u2019 and compute the empirical\np-value against the null hypothesis that features and targets are\nindependent. The p-value represents the fraction of randomized data sets where the\nestimator performed as well or better than in the original data. A small\np-value suggests that there is a real dependency between features and\ntargets which has been used by the estimator to give good predictions.\nA large p-value may be due to lack of real dependency between features\nand targets or the estimator was not able to use the dependency to\ngive good predictions. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/cross_validation.html#permutation-test-score",
                            "parameter_names_desc": [
                                {
                                    "param_name": "estimator",
                                    "param_type": "estimator object implementing \u2018fit\u2019",
                                    "param_desc": "The object to use to fit the data.\n"
                                },
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape at least 2D",
                                    "param_desc": "The data to fit.\n"
                                },
                                {
                                    "param_name": "y",
                                    "param_type": "array-like of shape (n_samples,) or (n_samples, n_outputs) or None",
                                    "param_desc": "The target variable to try to predict in the case of\nsupervised learning.\n"
                                },
                                {
                                    "param_name": "groups",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Labels to constrain permutation within groups, i.e. y values\nare permuted among samples with the same group identifier.\nWhen not specified, y values are permuted among all samples.\nWhen a grouped cross-validator is used, the group labels are\nalso passed on to the split method of the cross-validator. The\ncross-validator uses them for grouping the samples  while splitting\nthe dataset into train/test set.\n"
                                },
                                {
                                    "param_name": "cv",
                                    "param_type": "int, cross-validation generator or an iterable, default=None",
                                    "param_desc": "Determines the cross-validation splitting strategy.\nPossible inputs for cv are:\n\nNone, to use the default 5-fold cross validation,\nint, to specify the number of folds in a (Stratified)KFold,\nCV splitter,\nAn iterable yielding (train, test) splits as arrays of indices.\n\nFor int/None inputs, if the estimator is a classifier and y is\neither binary or multiclass, StratifiedKFold is used. In all\nother cases, KFold is used. These splitters are instantiated\nwith shuffle=False so the splits will be the same across calls.\nRefer User Guide for the various\ncross-validation strategies that can be used here.\n\nChanged in version 0.22: cv default value if None changed from 3-fold to 5-fold.\n\n"
                                },
                                {
                                    "param_name": "n_permutations",
                                    "param_type": "int, default=100",
                                    "param_desc": "Number of times to permute y.\n"
                                },
                                {
                                    "param_name": "n_jobs",
                                    "param_type": "int, default=None",
                                    "param_desc": "Number of jobs to run in parallel. Training the estimator and computing\nthe cross-validated score are parallelized over the permutations.\nNone means 1 unless in a joblib.parallel_backend context.\n-1 means using all processors. See Glossary\nfor more details.\n"
                                },
                                {
                                    "param_name": "random_state",
                                    "param_type": "int, RandomState instance or None, default=0",
                                    "param_desc": "Pass an int for reproducible output for permutation of\ny values among samples. See Glossary.\n"
                                },
                                {
                                    "param_name": "verbose",
                                    "param_type": "int, default=0",
                                    "param_desc": "The verbosity level.\n"
                                },
                                {
                                    "param_name": "scoring",
                                    "param_type": "str or callable, default=None",
                                    "param_desc": "A single str (see The scoring parameter: defining model evaluation rules) or a callable\n(see Defining your scoring strategy from metric functions) to evaluate the predictions on the test set.\nIf None the estimator\u2019s score method is used.\n"
                                },
                                {
                                    "param_name": "fit_params",
                                    "param_type": "dict, default=None",
                                    "param_desc": "Parameters to pass to the fit method of the estimator.\n\nAdded in version 0.24.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "permutation_test_score",
                            "descriptions": "Evaluate the significance of a cross-validated score with permutations. Permutes targets to generate \u2018randomized data\u2019 and compute the empirical\np-value against the null hypothesis that features and targets are\nindependent. The p-value represents the fraction of randomized data sets where the\nestimator performed as well or better than in the original data. A small\np-value suggests that there is a real dependency between features and\ntargets which has been used by the estimator to give good predictions.\nA large p-value may be due to lack of real dependency between features\nand targets or the estimator was not able to use the dependency to\ngive good predictions. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "estimator": {
                                        "type": "object",
                                        "description": "estimator object implementing \u2018fit\u2019. The object to use to fit the data.\n"
                                    },
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape at least 2D. The data to fit.\n"
                                    },
                                    "y": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,) or (n_samples, n_outputs) or None. The target variable to try to predict in the case of\nsupervised learning.\n"
                                    },
                                    "groups": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Labels to constrain permutation within groups, i.e. y values\nare permuted among samples with the same group identifier.\nWhen not specified, y values are permuted among all samples.\nWhen a grouped cross-validator is used, the group labels are\nalso passed on to the split method of the cross-validator. The\ncross-validator uses them for grouping the samples  while splitting\nthe dataset into train/test set.\n"
                                    },
                                    "cv": {
                                        "type": "integer",
                                        "description": "int, cross-validation generator or an iterable, default=None. Determines the cross-validation splitting strategy.\nPossible inputs for cv are:\n\nNone, to use the default 5-fold cross validation,\nint, to specify the number of folds in a (Stratified)KFold,\nCV splitter,\nAn iterable yielding (train, test) splits as arrays of indices.\n\nFor int/None inputs, if the estimator is a classifier and y is\neither binary or multiclass, StratifiedKFold is used. In all\nother cases, KFold is used. These splitters are instantiated\nwith shuffle=False so the splits will be the same across calls.\nRefer User Guide for the various\ncross-validation strategies that can be used here.\n\nChanged in version 0.22: cv default value if None changed from 3-fold to 5-fold.\n\n"
                                    },
                                    "n_permutations": {
                                        "type": "integer",
                                        "description": "int, default=100. Number of times to permute y.\n"
                                    },
                                    "n_jobs": {
                                        "type": "integer",
                                        "description": "int, default=None. Number of jobs to run in parallel. Training the estimator and computing\nthe cross-validated score are parallelized over the permutations.\nNone means 1 unless in a joblib.parallel_backend context.\n-1 means using all processors. See Glossary\nfor more details.\n"
                                    },
                                    "random_state": {
                                        "type": "integer",
                                        "description": "int, RandomState instance or None, default=0. Pass an int for reproducible output for permutation of\ny values among samples. See Glossary.\n"
                                    },
                                    "verbose": {
                                        "type": "integer",
                                        "description": "int, default=0. The verbosity level.\n"
                                    },
                                    "scoring": {
                                        "type": "string",
                                        "description": "str or callable, default=None. A single str (see The scoring parameter: defining model evaluation rules) or a callable\n(see Defining your scoring strategy from metric functions) to evaluate the predictions on the test set.\nIf None the estimator\u2019s score method is used.\n"
                                    },
                                    "fit_params": {
                                        "type": "dict, default=None",
                                        "description": "dict, default=None. Parameters to pass to the fit method of the estimator.\n\nAdded in version 0.24.\n\n"
                                    }
                                },
                                "required": [
                                    "estimator",
                                    "X",
                                    "y"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "cross_val_score",
                        "func_desc": "Evaluate a score by cross-validation.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.cross_val_score.html#sklearn.model_selection.cross_val_score",
                        "function_definitions": {
                            "function_name": "cross_val_score",
                            "full_function": "sklearn.model_selection.cross_val_score(estimator, X, y=None, *, groups=None, scoring=None, cv=None, n_jobs=None, verbose=0, fit_params=None, params=None, pre_dispatch='2*n_jobs', error_score=nan)",
                            "function_text": "Evaluate a score by cross-validation. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/cross_validation.html#cross-validation",
                            "parameter_names_desc": [
                                {
                                    "param_name": "estimator",
                                    "param_type": "estimator object implementing \u2018fit\u2019",
                                    "param_desc": "The object to use to fit the data.\n"
                                },
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "The data to fit. Can be for example a list, or an array.\n"
                                },
                                {
                                    "param_name": "y",
                                    "param_type": "array-like of shape (n_samples,) or (n_samples, n_outputs),             default=None",
                                    "param_desc": "The target variable to try to predict in the case of\nsupervised learning.\n"
                                },
                                {
                                    "param_name": "groups",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Group labels for the samples used while splitting the dataset into\ntrain/test set. Only used in conjunction with a \u201cGroup\u201d cv\ninstance (e.g., GroupKFold).\n\nChanged in version 1.4: groups can only be passed if metadata routing is not enabled\nvia sklearn.set_config(enable_metadata_routing=True). When routing\nis enabled, pass groups alongside other metadata via the params\nargument instead. E.g.:\ncross_val_score(..., params={'groups': groups}).\n\n"
                                },
                                {
                                    "param_name": "scoring",
                                    "param_type": "str or callable, default=None",
                                    "param_desc": "A str (see model evaluation documentation) or\na scorer callable object / function with signature\nscorer(estimator, X, y) which should return only\na single value.\nSimilar to cross_validate\nbut only a single metric is permitted.\nIf None, the estimator\u2019s default scorer (if available) is used.\n"
                                },
                                {
                                    "param_name": "cv",
                                    "param_type": "int, cross-validation generator or an iterable, default=None",
                                    "param_desc": "Determines the cross-validation splitting strategy.\nPossible inputs for cv are:\n\nNone, to use the default 5-fold cross validation,\nint, to specify the number of folds in a (Stratified)KFold,\nCV splitter,\nAn iterable that generates (train, test) splits as arrays of indices.\n\nFor int/None inputs, if the estimator is a classifier and y is\neither binary or multiclass, StratifiedKFold is used. In all\nother cases, KFold is used. These splitters are instantiated\nwith shuffle=False so the splits will be the same across calls.\nRefer User Guide for the various\ncross-validation strategies that can be used here.\n\nChanged in version 0.22: cv default value if None changed from 3-fold to 5-fold.\n\n"
                                },
                                {
                                    "param_name": "n_jobs",
                                    "param_type": "int, default=None",
                                    "param_desc": "Number of jobs to run in parallel. Training the estimator and computing\nthe score are parallelized over the cross-validation splits.\nNone means 1 unless in a joblib.parallel_backend context.\n-1 means using all processors. See Glossary\nfor more details.\n"
                                },
                                {
                                    "param_name": "verbose",
                                    "param_type": "int, default=0",
                                    "param_desc": "The verbosity level.\n"
                                },
                                {
                                    "param_name": "fit_params",
                                    "param_type": "dict, default=None",
                                    "param_desc": "Parameters to pass to the fit method of the estimator.\n\nDeprecated since version 1.4: This parameter is deprecated and will be removed in version 1.6. Use\nparams instead.\n\n"
                                },
                                {
                                    "param_name": "params",
                                    "param_type": "dict, default=None",
                                    "param_desc": "Parameters to pass to the underlying estimator\u2019s fit, the scorer,\nand the CV splitter.\n\nAdded in version 1.4.\n\n"
                                },
                                {
                                    "param_name": "pre_dispatch",
                                    "param_type": "int or str, default=\u20192*n_jobs\u2019",
                                    "param_desc": "Controls the number of jobs that get dispatched during parallel\nexecution. Reducing this number can be useful to avoid an\nexplosion of memory consumption when more jobs get dispatched\nthan CPUs can process. This parameter can be:\n\n\nNone, in which case all the jobs are immediately\ncreated and spawned. Use this for lightweight and\nfast-running jobs, to avoid delays due to on-demand\nspawning of the jobs\nAn int, giving the exact number of total jobs that are\nspawned\nA str, giving an expression as a function of n_jobs,\nas in \u20182*n_jobs\u2019\n\n\n"
                                },
                                {
                                    "param_name": "error_score",
                                    "param_type": "\u2018raise\u2019 or numeric, default=np.nan",
                                    "param_desc": "Value to assign to the score if an error occurs in estimator fitting.\nIf set to \u2018raise\u2019, the error is raised.\nIf a numeric value is given, FitFailedWarning is raised.\n\nAdded in version 0.20.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "cross_val_score",
                            "descriptions": "Evaluate a score by cross-validation. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "estimator": {
                                        "type": "object",
                                        "description": "estimator object implementing \u2018fit\u2019. The object to use to fit the data.\n"
                                    },
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). The data to fit. Can be for example a list, or an array.\n"
                                    },
                                    "y": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,) or (n_samples, n_outputs),             default=None. The target variable to try to predict in the case of\nsupervised learning.\n"
                                    },
                                    "groups": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Group labels for the samples used while splitting the dataset into\ntrain/test set. Only used in conjunction with a \u201cGroup\u201d cv\ninstance (e.g., GroupKFold).\n\nChanged in version 1.4: groups can only be passed if metadata routing is not enabled\nvia sklearn.set_config(enable_metadata_routing=True). When routing\nis enabled, pass groups alongside other metadata via the params\nargument instead. E.g.:\ncross_val_score(..., params={'groups': groups}).\n\n"
                                    },
                                    "scoring": {
                                        "type": "string",
                                        "description": "str or callable, default=None. A str (see model evaluation documentation) or\na scorer callable object / function with signature\nscorer(estimator, X, y) which should return only\na single value.\nSimilar to cross_validate\nbut only a single metric is permitted.\nIf None, the estimator\u2019s default scorer (if available) is used.\n"
                                    },
                                    "cv": {
                                        "type": "integer",
                                        "description": "int, cross-validation generator or an iterable, default=None. Determines the cross-validation splitting strategy.\nPossible inputs for cv are:\n\nNone, to use the default 5-fold cross validation,\nint, to specify the number of folds in a (Stratified)KFold,\nCV splitter,\nAn iterable that generates (train, test) splits as arrays of indices.\n\nFor int/None inputs, if the estimator is a classifier and y is\neither binary or multiclass, StratifiedKFold is used. In all\nother cases, KFold is used. These splitters are instantiated\nwith shuffle=False so the splits will be the same across calls.\nRefer User Guide for the various\ncross-validation strategies that can be used here.\n\nChanged in version 0.22: cv default value if None changed from 3-fold to 5-fold.\n\n"
                                    },
                                    "n_jobs": {
                                        "type": "integer",
                                        "description": "int, default=None. Number of jobs to run in parallel. Training the estimator and computing\nthe score are parallelized over the cross-validation splits.\nNone means 1 unless in a joblib.parallel_backend context.\n-1 means using all processors. See Glossary\nfor more details.\n"
                                    },
                                    "verbose": {
                                        "type": "integer",
                                        "description": "int, default=0. The verbosity level.\n"
                                    },
                                    "fit_params": {
                                        "type": "dict, default=None",
                                        "description": "dict, default=None. Parameters to pass to the fit method of the estimator.\n\nDeprecated since version 1.4: This parameter is deprecated and will be removed in version 1.6. Use\nparams instead.\n\n"
                                    },
                                    "params": {
                                        "type": "dict, default=None",
                                        "description": "dict, default=None. Parameters to pass to the underlying estimator\u2019s fit, the scorer,\nand the CV splitter.\n\nAdded in version 1.4.\n\n"
                                    },
                                    "pre_dispatch": {
                                        "type": "integer",
                                        "description": "int or str, default=\u20192*n_jobs\u2019. Controls the number of jobs that get dispatched during parallel\nexecution. Reducing this number can be useful to avoid an\nexplosion of memory consumption when more jobs get dispatched\nthan CPUs can process. This parameter can be:\n\n\nNone, in which case all the jobs are immediately\ncreated and spawned. Use this for lightweight and\nfast-running jobs, to avoid delays due to on-demand\nspawning of the jobs\nAn int, giving the exact number of total jobs that are\nspawned\nA str, giving an expression as a function of n_jobs,\nas in \u20182*n_jobs\u2019\n\n\n"
                                    },
                                    "error_score": {
                                        "type": "\u2018raise\u2019 or numeric, default=np.nan",
                                        "description": "\u2018raise\u2019 or numeric, default=np.nan. Value to assign to the score if an error occurs in estimator fitting.\nIf set to \u2018raise\u2019, the error is raised.\nIf a numeric value is given, FitFailedWarning is raised.\n\nAdded in version 0.20.\n\n"
                                    }
                                },
                                "required": [
                                    "estimator",
                                    "X",
                                    "y=None"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "learning_curve",
                        "func_desc": "Learning curve.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.learning_curve.html#sklearn.model_selection.learning_curve",
                        "function_definitions": {
                            "function_name": "learning_curve",
                            "full_function": "sklearn.model_selection.learning_curve(estimator, X, y, *, groups=None, train_sizes=array([0.1, 0.33, 0.55, 0.78, 1.]), cv=None, scoring=None, exploit_incremental_learning=False, n_jobs=None, pre_dispatch='all', verbose=0, shuffle=False, random_state=None, error_score=nan, return_times=False, fit_params=None)",
                            "function_text": "Learning curve. Determines cross-validated training and test scores for different training\nset sizes. A cross-validation generator splits the whole dataset k times in training\nand test data. Subsets of the training set with varying sizes will be used\nto train the estimator and a score for each training subset size and the\ntest set will be computed. Afterwards, the scores will be averaged over\nall k runs for each training subset size. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/learning_curve.html#learning-curve",
                            "parameter_names_desc": [
                                {
                                    "param_name": "estimator",
                                    "param_type": "object type that implements the \u201cfit\u201d method",
                                    "param_desc": "An object of that type which is cloned for each validation. It must\nalso implement \u201cpredict\u201d unless scoring is a callable that doesn\u2019t\nrely on \u201cpredict\u201d to compute a score.\n"
                                },
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "Training vector, where n_samples is the number of samples and\nn_features is the number of features.\n"
                                },
                                {
                                    "param_name": "y",
                                    "param_type": "array-like of shape (n_samples,) or (n_samples, n_outputs) or None",
                                    "param_desc": "Target relative to X for classification or regression;\nNone for unsupervised learning.\n"
                                },
                                {
                                    "param_name": "groups",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Group labels for the samples used while splitting the dataset into\ntrain/test set. Only used in conjunction with a \u201cGroup\u201d cv\ninstance (e.g., GroupKFold).\n"
                                },
                                {
                                    "param_name": "train_sizes",
                                    "param_type": "array-like of shape (n_ticks,),             default=np.linspace(0.1, 1.0, 5)",
                                    "param_desc": "Relative or absolute numbers of training examples that will be used to\ngenerate the learning curve. If the dtype is float, it is regarded as a\nfraction of the maximum size of the training set (that is determined\nby the selected validation method), i.e. it has to be within (0, 1].\nOtherwise it is interpreted as absolute sizes of the training sets.\nNote that for classification the number of samples usually have to\nbe big enough to contain at least one sample from each class.\n"
                                },
                                {
                                    "param_name": "cv",
                                    "param_type": "int, cross-validation generator or an iterable, default=None",
                                    "param_desc": "Determines the cross-validation splitting strategy.\nPossible inputs for cv are:\n\nNone, to use the default 5-fold cross validation,\nint, to specify the number of folds in a (Stratified)KFold,\nCV splitter,\nAn iterable yielding (train, test) splits as arrays of indices.\n\nFor int/None inputs, if the estimator is a classifier and y is\neither binary or multiclass, StratifiedKFold is used. In all\nother cases, KFold is used. These splitters are instantiated\nwith shuffle=False so the splits will be the same across calls.\nRefer User Guide for the various\ncross-validation strategies that can be used here.\n\nChanged in version 0.22: cv default value if None changed from 3-fold to 5-fold.\n\n"
                                },
                                {
                                    "param_name": "scoring",
                                    "param_type": "str or callable, default=None",
                                    "param_desc": "A str (see model evaluation documentation) or\na scorer callable object / function with signature\nscorer(estimator, X, y).\n"
                                },
                                {
                                    "param_name": "exploit_incremental_learning",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If the estimator supports incremental learning, this will be\nused to speed up fitting for different training set sizes.\n"
                                },
                                {
                                    "param_name": "n_jobs",
                                    "param_type": "int, default=None",
                                    "param_desc": "Number of jobs to run in parallel. Training the estimator and computing\nthe score are parallelized over the different training and test sets.\nNone means 1 unless in a joblib.parallel_backend context.\n-1 means using all processors. See Glossary\nfor more details.\n"
                                },
                                {
                                    "param_name": "pre_dispatch",
                                    "param_type": "int or str, default=\u2019all\u2019",
                                    "param_desc": "Number of predispatched jobs for parallel execution (default is\nall). The option can reduce the allocated memory. The str can\nbe an expression like \u20182*n_jobs\u2019.\n"
                                },
                                {
                                    "param_name": "verbose",
                                    "param_type": "int, default=0",
                                    "param_desc": "Controls the verbosity: the higher, the more messages.\n"
                                },
                                {
                                    "param_name": "shuffle",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Whether to shuffle training data before taking prefixes of it\nbased on``train_sizes``.\n"
                                },
                                {
                                    "param_name": "random_state",
                                    "param_type": "int, RandomState instance or None, default=None",
                                    "param_desc": "Used when shuffle is True. Pass an int for reproducible\noutput across multiple function calls.\nSee Glossary.\n"
                                },
                                {
                                    "param_name": "error_score",
                                    "param_type": "\u2018raise\u2019 or numeric, default=np.nan",
                                    "param_desc": "Value to assign to the score if an error occurs in estimator fitting.\nIf set to \u2018raise\u2019, the error is raised.\nIf a numeric value is given, FitFailedWarning is raised.\n\nAdded in version 0.20.\n\n"
                                },
                                {
                                    "param_name": "return_times",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Whether to return the fit and score times.\n"
                                },
                                {
                                    "param_name": "fit_params",
                                    "param_type": "dict, default=None",
                                    "param_desc": "Parameters to pass to the fit method of the estimator.\n\nAdded in version 0.24.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "learning_curve",
                            "descriptions": "Learning curve. Determines cross-validated training and test scores for different training\nset sizes. A cross-validation generator splits the whole dataset k times in training\nand test data. Subsets of the training set with varying sizes will be used\nto train the estimator and a score for each training subset size and the\ntest set will be computed. Afterwards, the scores will be averaged over\nall k runs for each training subset size. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "estimator": {
                                        "type": "object",
                                        "description": "object type that implements the \u201cfit\u201d method. An object of that type which is cloned for each validation. It must\nalso implement \u201cpredict\u201d unless scoring is a callable that doesn\u2019t\nrely on \u201cpredict\u201d to compute a score.\n"
                                    },
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). Training vector, where n_samples is the number of samples and\nn_features is the number of features.\n"
                                    },
                                    "y": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,) or (n_samples, n_outputs) or None. Target relative to X for classification or regression;\nNone for unsupervised learning.\n"
                                    },
                                    "groups": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Group labels for the samples used while splitting the dataset into\ntrain/test set. Only used in conjunction with a \u201cGroup\u201d cv\ninstance (e.g., GroupKFold).\n"
                                    },
                                    "train_sizes": {
                                        "type": "array",
                                        "description": "array-like of shape (n_ticks,),             default=np.linspace(0.1, 1.0, 5). Relative or absolute numbers of training examples that will be used to\ngenerate the learning curve. If the dtype is float, it is regarded as a\nfraction of the maximum size of the training set (that is determined\nby the selected validation method), i.e. it has to be within (0, 1].\nOtherwise it is interpreted as absolute sizes of the training sets.\nNote that for classification the number of samples usually have to\nbe big enough to contain at least one sample from each class.\n"
                                    },
                                    "cv": {
                                        "type": "integer",
                                        "description": "int, cross-validation generator or an iterable, default=None. Determines the cross-validation splitting strategy.\nPossible inputs for cv are:\n\nNone, to use the default 5-fold cross validation,\nint, to specify the number of folds in a (Stratified)KFold,\nCV splitter,\nAn iterable yielding (train, test) splits as arrays of indices.\n\nFor int/None inputs, if the estimator is a classifier and y is\neither binary or multiclass, StratifiedKFold is used. In all\nother cases, KFold is used. These splitters are instantiated\nwith shuffle=False so the splits will be the same across calls.\nRefer User Guide for the various\ncross-validation strategies that can be used here.\n\nChanged in version 0.22: cv default value if None changed from 3-fold to 5-fold.\n\n"
                                    },
                                    "scoring": {
                                        "type": "string",
                                        "description": "str or callable, default=None. A str (see model evaluation documentation) or\na scorer callable object / function with signature\nscorer(estimator, X, y).\n"
                                    },
                                    "exploit_incremental_learning": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If the estimator supports incremental learning, this will be\nused to speed up fitting for different training set sizes.\n"
                                    },
                                    "n_jobs": {
                                        "type": "integer",
                                        "description": "int, default=None. Number of jobs to run in parallel. Training the estimator and computing\nthe score are parallelized over the different training and test sets.\nNone means 1 unless in a joblib.parallel_backend context.\n-1 means using all processors. See Glossary\nfor more details.\n"
                                    },
                                    "pre_dispatch": {
                                        "type": "integer",
                                        "description": "int or str, default=\u2019all\u2019. Number of predispatched jobs for parallel execution (default is\nall). The option can reduce the allocated memory. The str can\nbe an expression like \u20182*n_jobs\u2019.\n"
                                    },
                                    "verbose": {
                                        "type": "integer",
                                        "description": "int, default=0. Controls the verbosity: the higher, the more messages.\n"
                                    },
                                    "shuffle": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Whether to shuffle training data before taking prefixes of it\nbased on``train_sizes``.\n"
                                    },
                                    "random_state": {
                                        "type": "integer",
                                        "description": "int, RandomState instance or None, default=None. Used when shuffle is True. Pass an int for reproducible\noutput across multiple function calls.\nSee Glossary.\n"
                                    },
                                    "error_score": {
                                        "type": "\u2018raise\u2019 or numeric, default=np.nan",
                                        "description": "\u2018raise\u2019 or numeric, default=np.nan. Value to assign to the score if an error occurs in estimator fitting.\nIf set to \u2018raise\u2019, the error is raised.\nIf a numeric value is given, FitFailedWarning is raised.\n\nAdded in version 0.20.\n\n"
                                    },
                                    "return_times": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Whether to return the fit and score times.\n"
                                    },
                                    "fit_params": {
                                        "type": "dict, default=None",
                                        "description": "dict, default=None. Parameters to pass to the fit method of the estimator.\n\nAdded in version 0.24.\n\n"
                                    }
                                },
                                "required": [
                                    "estimator",
                                    "X",
                                    "y"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "validation_curve",
                        "func_desc": "Validation curve.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.validation_curve.html#sklearn.model_selection.validation_curve",
                        "function_definitions": {
                            "function_name": "validation_curve",
                            "full_function": "sklearn.model_selection.validation_curve(estimator, X, y, *, param_name, param_range, groups=None, cv=None, scoring=None, n_jobs=None, pre_dispatch='all', verbose=0, error_score=nan, fit_params=None)",
                            "function_text": "Validation curve. Determine training and test scores for varying parameter values. Compute scores for an estimator with different values of a specified\nparameter. This is similar to grid search with one parameter. However, this\nwill also compute training scores and is merely a utility for plotting the\nresults. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/learning_curve.html#validation-curve",
                            "parameter_names_desc": [
                                {
                                    "param_name": "estimator",
                                    "param_type": "object type that implements the \u201cfit\u201d method",
                                    "param_desc": "An object of that type which is cloned for each validation. It must\nalso implement \u201cpredict\u201d unless scoring is a callable that doesn\u2019t\nrely on \u201cpredict\u201d to compute a score.\n"
                                },
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "Training vector, where n_samples is the number of samples and\nn_features is the number of features.\n"
                                },
                                {
                                    "param_name": "y",
                                    "param_type": "array-like of shape (n_samples,) or (n_samples, n_outputs) or None",
                                    "param_desc": "Target relative to X for classification or regression;\nNone for unsupervised learning.\n"
                                },
                                {
                                    "param_name": "param_name",
                                    "param_type": "str",
                                    "param_desc": "Name of the parameter that will be varied.\n"
                                },
                                {
                                    "param_name": "param_range",
                                    "param_type": "array-like of shape (n_values,)",
                                    "param_desc": "The values of the parameter that will be evaluated.\n"
                                },
                                {
                                    "param_name": "groups",
                                    "param_type": "array-like of shape (n_samples,), default=None",
                                    "param_desc": "Group labels for the samples used while splitting the dataset into\ntrain/test set. Only used in conjunction with a \u201cGroup\u201d cv\ninstance (e.g., GroupKFold).\n"
                                },
                                {
                                    "param_name": "cv",
                                    "param_type": "int, cross-validation generator or an iterable, default=None",
                                    "param_desc": "Determines the cross-validation splitting strategy.\nPossible inputs for cv are:\n\nNone, to use the default 5-fold cross validation,\nint, to specify the number of folds in a (Stratified)KFold,\nCV splitter,\nAn iterable yielding (train, test) splits as arrays of indices.\n\nFor int/None inputs, if the estimator is a classifier and y is\neither binary or multiclass, StratifiedKFold is used. In all\nother cases, KFold is used. These splitters are instantiated\nwith shuffle=False so the splits will be the same across calls.\nRefer User Guide for the various\ncross-validation strategies that can be used here.\n\nChanged in version 0.22: cv default value if None changed from 3-fold to 5-fold.\n\n"
                                },
                                {
                                    "param_name": "scoring",
                                    "param_type": "str or callable, default=None",
                                    "param_desc": "A str (see model evaluation documentation) or\na scorer callable object / function with signature\nscorer(estimator, X, y).\n"
                                },
                                {
                                    "param_name": "n_jobs",
                                    "param_type": "int, default=None",
                                    "param_desc": "Number of jobs to run in parallel. Training the estimator and computing\nthe score are parallelized over the combinations of each parameter\nvalue and each cross-validation split.\nNone means 1 unless in a joblib.parallel_backend context.\n-1 means using all processors. See Glossary\nfor more details.\n"
                                },
                                {
                                    "param_name": "pre_dispatch",
                                    "param_type": "int or str, default=\u2019all\u2019",
                                    "param_desc": "Number of predispatched jobs for parallel execution (default is\nall). The option can reduce the allocated memory. The str can\nbe an expression like \u20182*n_jobs\u2019.\n"
                                },
                                {
                                    "param_name": "verbose",
                                    "param_type": "int, default=0",
                                    "param_desc": "Controls the verbosity: the higher, the more messages.\n"
                                },
                                {
                                    "param_name": "error_score",
                                    "param_type": "\u2018raise\u2019 or numeric, default=np.nan",
                                    "param_desc": "Value to assign to the score if an error occurs in estimator fitting.\nIf set to \u2018raise\u2019, the error is raised.\nIf a numeric value is given, FitFailedWarning is raised.\n\nAdded in version 0.20.\n\n"
                                },
                                {
                                    "param_name": "fit_params",
                                    "param_type": "dict, default=None",
                                    "param_desc": "Parameters to pass to the fit method of the estimator.\n\nAdded in version 0.24.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "validation_curve",
                            "descriptions": "Validation curve. Determine training and test scores for varying parameter values. Compute scores for an estimator with different values of a specified\nparameter. This is similar to grid search with one parameter. However, this\nwill also compute training scores and is merely a utility for plotting the\nresults. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "estimator": {
                                        "type": "object",
                                        "description": "object type that implements the \u201cfit\u201d method. An object of that type which is cloned for each validation. It must\nalso implement \u201cpredict\u201d unless scoring is a callable that doesn\u2019t\nrely on \u201cpredict\u201d to compute a score.\n"
                                    },
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). Training vector, where n_samples is the number of samples and\nn_features is the number of features.\n"
                                    },
                                    "y": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,) or (n_samples, n_outputs) or None. Target relative to X for classification or regression;\nNone for unsupervised learning.\n"
                                    },
                                    "param_name": {
                                        "type": "string",
                                        "description": "str. Name of the parameter that will be varied.\n"
                                    },
                                    "param_range": {
                                        "type": "array",
                                        "description": "array-like of shape (n_values,). The values of the parameter that will be evaluated.\n"
                                    },
                                    "groups": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,), default=None. Group labels for the samples used while splitting the dataset into\ntrain/test set. Only used in conjunction with a \u201cGroup\u201d cv\ninstance (e.g., GroupKFold).\n"
                                    },
                                    "cv": {
                                        "type": "integer",
                                        "description": "int, cross-validation generator or an iterable, default=None. Determines the cross-validation splitting strategy.\nPossible inputs for cv are:\n\nNone, to use the default 5-fold cross validation,\nint, to specify the number of folds in a (Stratified)KFold,\nCV splitter,\nAn iterable yielding (train, test) splits as arrays of indices.\n\nFor int/None inputs, if the estimator is a classifier and y is\neither binary or multiclass, StratifiedKFold is used. In all\nother cases, KFold is used. These splitters are instantiated\nwith shuffle=False so the splits will be the same across calls.\nRefer User Guide for the various\ncross-validation strategies that can be used here.\n\nChanged in version 0.22: cv default value if None changed from 3-fold to 5-fold.\n\n"
                                    },
                                    "scoring": {
                                        "type": "string",
                                        "description": "str or callable, default=None. A str (see model evaluation documentation) or\na scorer callable object / function with signature\nscorer(estimator, X, y).\n"
                                    },
                                    "n_jobs": {
                                        "type": "integer",
                                        "description": "int, default=None. Number of jobs to run in parallel. Training the estimator and computing\nthe score are parallelized over the combinations of each parameter\nvalue and each cross-validation split.\nNone means 1 unless in a joblib.parallel_backend context.\n-1 means using all processors. See Glossary\nfor more details.\n"
                                    },
                                    "pre_dispatch": {
                                        "type": "integer",
                                        "description": "int or str, default=\u2019all\u2019. Number of predispatched jobs for parallel execution (default is\nall). The option can reduce the allocated memory. The str can\nbe an expression like \u20182*n_jobs\u2019.\n"
                                    },
                                    "verbose": {
                                        "type": "integer",
                                        "description": "int, default=0. Controls the verbosity: the higher, the more messages.\n"
                                    },
                                    "error_score": {
                                        "type": "\u2018raise\u2019 or numeric, default=np.nan",
                                        "description": "\u2018raise\u2019 or numeric, default=np.nan. Value to assign to the score if an error occurs in estimator fitting.\nIf set to \u2018raise\u2019, the error is raised.\nIf a numeric value is given, FitFailedWarning is raised.\n\nAdded in version 0.20.\n\n"
                                    },
                                    "fit_params": {
                                        "type": "dict, default=None",
                                        "description": "dict, default=None. Parameters to pass to the fit method of the estimator.\n\nAdded in version 0.24.\n\n"
                                    }
                                },
                                "required": [
                                    "estimator",
                                    "X",
                                    "y"
                                ]
                            }
                        }
                    }
                ]
            },
            {
                "Visualization": [
                    {
                        "func_name": "LearningCurveDisplay",
                        "func_desc": "Learning Curve visualization.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.LearningCurveDisplay.html#sklearn.model_selection.LearningCurveDisplay",
                        "function_definitions": {
                            "function_name": "LearningCurveDisplay",
                            "full_function": "class sklearn.model_selection.LearningCurveDisplay(*, train_sizes, train_scores, test_scores, score_name=None)",
                            "function_text": "Learning Curve visualization. It is recommended to use\nfrom_estimator to\ncreate a LearningCurveDisplay instance.\nAll parameters are stored as attributes. Read more in the User Guide for general information\nabout the visualization API and\ndetailed documentation regarding the learning\ncurve visualization. Added in version 1.2.",
                            "func_text_user_guide": "#sklearn.model_selection.LearningCurveDisplay.from_estimator",
                            "parameter_names_desc": [
                                {
                                    "param_name": "ax",
                                    "param_type": "matplotlib Axes, default=None",
                                    "param_desc": "Axes object to plot on. If None, a new figure and axes is\ncreated.\n"
                                },
                                {
                                    "param_name": "negate_score",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Whether or not to negate the scores obtained through\nlearning_curve. This is\nparticularly useful when using the error denoted by neg_* in\nscikit-learn.\n"
                                },
                                {
                                    "param_name": "score_name",
                                    "param_type": "str, default=None",
                                    "param_desc": "The name of the score used to decorate the y-axis of the plot. It will\noverride the name inferred from the scoring parameter. If score is\nNone, we use \"Score\" if negate_score is False and \"Negative score\"\notherwise. If scoring is a string or a callable, we infer the name. We\nreplace _ by spaces and capitalize the first letter. We remove neg_ and\nreplace it by \"Negative\" if negate_score is\nFalse or just remove it otherwise.\n"
                                },
                                {
                                    "param_name": "score_type",
                                    "param_type": "{\u201ctest\u201d, \u201ctrain\u201d, \u201cboth\u201d}, default=\u201dboth\u201d",
                                    "param_desc": "The type of score to plot. Can be one of \"test\", \"train\", or\n\"both\".\n"
                                },
                                {
                                    "param_name": "std_display_style",
                                    "param_type": "{\u201cerrorbar\u201d, \u201cfill_between\u201d} or None, default=\u201dfill_between\u201d",
                                    "param_desc": "The style used to display the score standard deviation around the\nmean score. If None, no standard deviation representation is\ndisplayed.\n"
                                },
                                {
                                    "param_name": "line_kw",
                                    "param_type": "dict, default=None",
                                    "param_desc": "Additional keyword arguments passed to the plt.plot used to draw\nthe mean score.\n"
                                },
                                {
                                    "param_name": "fill_between_kw",
                                    "param_type": "dict, default=None",
                                    "param_desc": "Additional keyword arguments passed to the plt.fill_between used\nto draw the score standard deviation.\n"
                                },
                                {
                                    "param_name": "errorbar_kw",
                                    "param_type": "dict, default=None",
                                    "param_desc": "Additional keyword arguments passed to the plt.errorbar used to\ndraw mean score and standard deviation score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "LearningCurveDisplay",
                            "descriptions": "Learning Curve visualization. It is recommended to use\nfrom_estimator to\ncreate a LearningCurveDisplay instance.\nAll parameters are stored as attributes. Read more in the User Guide for general information\nabout the visualization API and\ndetailed documentation regarding the learning\ncurve visualization. Added in version 1.2.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "ax": {
                                        "type": "matplotlib Axes, default=None",
                                        "description": "matplotlib Axes, default=None. Axes object to plot on. If None, a new figure and axes is\ncreated.\n"
                                    },
                                    "negate_score": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Whether or not to negate the scores obtained through\nlearning_curve. This is\nparticularly useful when using the error denoted by neg_* in\nscikit-learn.\n"
                                    },
                                    "score_name": {
                                        "type": "string",
                                        "description": "str, default=None. The name of the score used to decorate the y-axis of the plot. It will\noverride the name inferred from the scoring parameter. If score is\nNone, we use \"Score\" if negate_score is False and \"Negative score\"\notherwise. If scoring is a string or a callable, we infer the name. We\nreplace _ by spaces and capitalize the first letter. We remove neg_ and\nreplace it by \"Negative\" if negate_score is\nFalse or just remove it otherwise.\n"
                                    },
                                    "score_type": {
                                        "type": "{\u201ctest\u201d, \u201ctrain\u201d, \u201cboth\u201d}, default=\u201dboth\u201d",
                                        "description": "{\u201ctest\u201d, \u201ctrain\u201d, \u201cboth\u201d}, default=\u201dboth\u201d. The type of score to plot. Can be one of \"test\", \"train\", or\n\"both\".\n"
                                    },
                                    "std_display_style": {
                                        "type": "{\u201cerrorbar\u201d, \u201cfill_between\u201d} or None, default=\u201dfill_between\u201d",
                                        "description": "{\u201cerrorbar\u201d, \u201cfill_between\u201d} or None, default=\u201dfill_between\u201d. The style used to display the score standard deviation around the\nmean score. If None, no standard deviation representation is\ndisplayed.\n"
                                    },
                                    "line_kw": {
                                        "type": "dict, default=None",
                                        "description": "dict, default=None. Additional keyword arguments passed to the plt.plot used to draw\nthe mean score.\n"
                                    },
                                    "fill_between_kw": {
                                        "type": "dict, default=None",
                                        "description": "dict, default=None. Additional keyword arguments passed to the plt.fill_between used\nto draw the score standard deviation.\n"
                                    },
                                    "errorbar_kw": {
                                        "type": "dict, default=None",
                                        "description": "dict, default=None. Additional keyword arguments passed to the plt.errorbar used to\ndraw mean score and standard deviation score.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "ValidationCurveDisplay",
                        "func_desc": "Validation Curve visualization.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.ValidationCurveDisplay.html#sklearn.model_selection.ValidationCurveDisplay",
                        "function_definitions": {
                            "function_name": "ValidationCurveDisplay",
                            "full_function": "class sklearn.model_selection.ValidationCurveDisplay(*, param_name, param_range, train_scores, test_scores, score_name=None)",
                            "function_text": "Validation Curve visualization. It is recommended to use\nfrom_estimator to\ncreate a ValidationCurveDisplay instance.\nAll parameters are stored as attributes. Read more in the User Guide for general information\nabout the visualization API and detailed documentation regarding the validation curve visualization. Added in version 1.3.",
                            "func_text_user_guide": "#sklearn.model_selection.ValidationCurveDisplay.from_estimator",
                            "parameter_names_desc": [
                                {
                                    "param_name": "ax",
                                    "param_type": "matplotlib Axes, default=None",
                                    "param_desc": "Axes object to plot on. If None, a new figure and axes is\ncreated.\n"
                                },
                                {
                                    "param_name": "negate_score",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Whether or not to negate the scores obtained through\nvalidation_curve. This is\nparticularly useful when using the error denoted by neg_* in\nscikit-learn.\n"
                                },
                                {
                                    "param_name": "score_name",
                                    "param_type": "str, default=None",
                                    "param_desc": "The name of the score used to decorate the y-axis of the plot. It will\noverride the name inferred from the scoring parameter. If score is\nNone, we use \"Score\" if negate_score is False and \"Negative score\"\notherwise. If scoring is a string or a callable, we infer the name. We\nreplace _ by spaces and capitalize the first letter. We remove neg_ and\nreplace it by \"Negative\" if negate_score is\nFalse or just remove it otherwise.\n"
                                },
                                {
                                    "param_name": "score_type",
                                    "param_type": "{\u201ctest\u201d, \u201ctrain\u201d, \u201cboth\u201d}, default=\u201dboth\u201d",
                                    "param_desc": "The type of score to plot. Can be one of \"test\", \"train\", or\n\"both\".\n"
                                },
                                {
                                    "param_name": "std_display_style",
                                    "param_type": "{\u201cerrorbar\u201d, \u201cfill_between\u201d} or None, default=\u201dfill_between\u201d",
                                    "param_desc": "The style used to display the score standard deviation around the\nmean score. If None, no standard deviation representation is\ndisplayed.\n"
                                },
                                {
                                    "param_name": "line_kw",
                                    "param_type": "dict, default=None",
                                    "param_desc": "Additional keyword arguments passed to the plt.plot used to draw\nthe mean score.\n"
                                },
                                {
                                    "param_name": "fill_between_kw",
                                    "param_type": "dict, default=None",
                                    "param_desc": "Additional keyword arguments passed to the plt.fill_between used\nto draw the score standard deviation.\n"
                                },
                                {
                                    "param_name": "errorbar_kw",
                                    "param_type": "dict, default=None",
                                    "param_desc": "Additional keyword arguments passed to the plt.errorbar used to\ndraw mean score and standard deviation score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "ValidationCurveDisplay",
                            "descriptions": "Validation Curve visualization. It is recommended to use\nfrom_estimator to\ncreate a ValidationCurveDisplay instance.\nAll parameters are stored as attributes. Read more in the User Guide for general information\nabout the visualization API and detailed documentation regarding the validation curve visualization. Added in version 1.3.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "ax": {
                                        "type": "matplotlib Axes, default=None",
                                        "description": "matplotlib Axes, default=None. Axes object to plot on. If None, a new figure and axes is\ncreated.\n"
                                    },
                                    "negate_score": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Whether or not to negate the scores obtained through\nvalidation_curve. This is\nparticularly useful when using the error denoted by neg_* in\nscikit-learn.\n"
                                    },
                                    "score_name": {
                                        "type": "string",
                                        "description": "str, default=None. The name of the score used to decorate the y-axis of the plot. It will\noverride the name inferred from the scoring parameter. If score is\nNone, we use \"Score\" if negate_score is False and \"Negative score\"\notherwise. If scoring is a string or a callable, we infer the name. We\nreplace _ by spaces and capitalize the first letter. We remove neg_ and\nreplace it by \"Negative\" if negate_score is\nFalse or just remove it otherwise.\n"
                                    },
                                    "score_type": {
                                        "type": "{\u201ctest\u201d, \u201ctrain\u201d, \u201cboth\u201d}, default=\u201dboth\u201d",
                                        "description": "{\u201ctest\u201d, \u201ctrain\u201d, \u201cboth\u201d}, default=\u201dboth\u201d. The type of score to plot. Can be one of \"test\", \"train\", or\n\"both\".\n"
                                    },
                                    "std_display_style": {
                                        "type": "{\u201cerrorbar\u201d, \u201cfill_between\u201d} or None, default=\u201dfill_between\u201d",
                                        "description": "{\u201cerrorbar\u201d, \u201cfill_between\u201d} or None, default=\u201dfill_between\u201d. The style used to display the score standard deviation around the\nmean score. If None, no standard deviation representation is\ndisplayed.\n"
                                    },
                                    "line_kw": {
                                        "type": "dict, default=None",
                                        "description": "dict, default=None. Additional keyword arguments passed to the plt.plot used to draw\nthe mean score.\n"
                                    },
                                    "fill_between_kw": {
                                        "type": "dict, default=None",
                                        "description": "dict, default=None. Additional keyword arguments passed to the plt.fill_between used\nto draw the score standard deviation.\n"
                                    },
                                    "errorbar_kw": {
                                        "type": "dict, default=None",
                                        "description": "dict, default=None. Additional keyword arguments passed to the plt.errorbar used to\ndraw mean score and standard deviation score.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    }
                ]
            }
        ],
        "name": "sklearn.model_selection",
        "url": "https://scikit-learn.org/stable/api/sklearn.model_selection.html"
    },
    "sklearn.multiclass.html": {
        "functions": [
            {
                "defaults": [
                    {
                        "func_name": "OneVsOneClassifier",
                        "func_desc": "One-vs-one multiclass strategy.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.multiclass.OneVsOneClassifier.html#sklearn.multiclass.OneVsOneClassifier",
                        "function_definitions": {
                            "function_name": "OneVsOneClassifier",
                            "full_function": "class sklearn.multiclass.OneVsOneClassifier(estimator, *, n_jobs=None)",
                            "function_text": "One-vs-one multiclass strategy. This strategy consists in fitting one classifier per class pair.\nAt prediction time, the class which received the most votes is selected.\nSince it requires to fit n_classes * (n_classes - 1) / 2 classifiers,\nthis method is usually slower than one-vs-the-rest, due to its\nO(n_classes^2) complexity. However, this method may be advantageous for\nalgorithms such as kernel algorithms which don\u2019t scale well with\nn_samples. This is because each individual learning problem only involves\na small subset of the data whereas, with one-vs-the-rest, the complete\ndataset is used n_classes times. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/multiclass.html#ovo-classification",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "OneVsOneClassifier",
                            "descriptions": "One-vs-one multiclass strategy. This strategy consists in fitting one classifier per class pair.\nAt prediction time, the class which received the most votes is selected.\nSince it requires to fit n_classes * (n_classes - 1) / 2 classifiers,\nthis method is usually slower than one-vs-the-rest, due to its\nO(n_classes^2) complexity. However, this method may be advantageous for\nalgorithms such as kernel algorithms which don\u2019t scale well with\nn_samples. This is because each individual learning problem only involves\na small subset of the data whereas, with one-vs-the-rest, the complete\ndataset is used n_classes times. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": [
                                    "estimator"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "OutputCodeClassifier",
                        "func_desc": "(Error-Correcting) Output-Code multiclass strategy.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.multiclass.OutputCodeClassifier.html#sklearn.multiclass.OutputCodeClassifier",
                        "function_definitions": {
                            "function_name": "OutputCodeClassifier",
                            "full_function": "class sklearn.multiclass.OutputCodeClassifier(estimator, *, code_size=1.5, random_state=None, n_jobs=None)",
                            "function_text": "(Error-Correcting) Output-Code multiclass strategy. Output-code based strategies consist in representing each class with a\nbinary code (an array of 0s and 1s). At fitting time, one binary\nclassifier per bit in the code book is fitted.  At prediction time, the\nclassifiers are used to project new points in the class space and the class\nclosest to the points is chosen. The main advantage of these strategies is\nthat the number of classifiers used can be controlled by the user, either\nfor compressing the model (0 < code_size < 1) or for making the model more\nrobust to errors (code_size > 1). See the documentation for more details. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/multiclass.html#ecoc",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "OutputCodeClassifier",
                            "descriptions": "(Error-Correcting) Output-Code multiclass strategy. Output-code based strategies consist in representing each class with a\nbinary code (an array of 0s and 1s). At fitting time, one binary\nclassifier per bit in the code book is fitted.  At prediction time, the\nclassifiers are used to project new points in the class space and the class\nclosest to the points is chosen. The main advantage of these strategies is\nthat the number of classifiers used can be controlled by the user, either\nfor compressing the model (0 < code_size < 1) or for making the model more\nrobust to errors (code_size > 1). See the documentation for more details. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": [
                                    "estimator"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "OneVsRestClassifier",
                        "func_desc": "One-vs-the-rest (OvR) multiclass strategy.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.multiclass.OneVsRestClassifier.html#sklearn.multiclass.OneVsRestClassifier",
                        "function_definitions": {
                            "function_name": "OneVsRestClassifier",
                            "full_function": "class sklearn.multiclass.OneVsRestClassifier(estimator, *, n_jobs=None, verbose=0)",
                            "function_text": "One-vs-the-rest (OvR) multiclass strategy. Also known as one-vs-all, this strategy consists in fitting one classifier\nper class. For each classifier, the class is fitted against all the other\nclasses. In addition to its computational efficiency (only n_classes\nclassifiers are needed), one advantage of this approach is its\ninterpretability. Since each class is represented by one and one classifier\nonly, it is possible to gain knowledge about the class by inspecting its\ncorresponding classifier. This is the most commonly used strategy for\nmulticlass classification and is a fair default choice. OneVsRestClassifier can also be used for multilabel classification. To use\nthis feature, provide an indicator matrix for the target y when calling\n.fit. In other words, the target labels should be formatted as a 2D\nbinary (0/1) matrix, where [i, j] == 1 indicates the presence of label j\nin sample i. This estimator uses the binary relevance method to perform\nmultilabel classification, which involves training one binary classifier\nindependently for each label. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/multiclass.html#ovr-classification",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "OneVsRestClassifier",
                            "descriptions": "One-vs-the-rest (OvR) multiclass strategy. Also known as one-vs-all, this strategy consists in fitting one classifier\nper class. For each classifier, the class is fitted against all the other\nclasses. In addition to its computational efficiency (only n_classes\nclassifiers are needed), one advantage of this approach is its\ninterpretability. Since each class is represented by one and one classifier\nonly, it is possible to gain knowledge about the class by inspecting its\ncorresponding classifier. This is the most commonly used strategy for\nmulticlass classification and is a fair default choice. OneVsRestClassifier can also be used for multilabel classification. To use\nthis feature, provide an indicator matrix for the target y when calling\n.fit. In other words, the target labels should be formatted as a 2D\nbinary (0/1) matrix, where [i, j] == 1 indicates the presence of label j\nin sample i. This estimator uses the binary relevance method to perform\nmultilabel classification, which involves training one binary classifier\nindependently for each label. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": [
                                    "estimator"
                                ]
                            }
                        }
                    }
                ]
            }
        ],
        "name": "sklearn.multiclass",
        "url": "https://scikit-learn.org/stable/api/sklearn.multiclass.html"
    },
    "sklearn.multioutput.html": {
        "functions": [
            {
                "defaults": [
                    {
                        "func_name": "ClassifierChain",
                        "func_desc": "A multi-label model that arranges binary classifiers into a chain.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.multioutput.ClassifierChain.html#sklearn.multioutput.ClassifierChain",
                        "function_definitions": {
                            "function_name": "ClassifierChain",
                            "full_function": "class sklearn.multioutput.ClassifierChain(base_estimator, *, order=None, cv=None, chain_method='predict', random_state=None, verbose=False)",
                            "function_text": "A multi-label model that arranges binary classifiers into a chain. Each model makes a prediction in the order specified by the chain using\nall of the available features provided to the model plus the predictions\nof models that are earlier in the chain. For an example of how to use ClassifierChain and benefit from its\nensemble, see\nClassifierChain on a yeast dataset example. Read more in the User Guide. Added in version 0.19.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/auto_examples/multioutput/plot_classifier_chain_yeast.html#sphx-glr-auto-examples-multioutput-plot-classifier-chain-yeast-py",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "ClassifierChain",
                            "descriptions": "A multi-label model that arranges binary classifiers into a chain. Each model makes a prediction in the order specified by the chain using\nall of the available features provided to the model plus the predictions\nof models that are earlier in the chain. For an example of how to use ClassifierChain and benefit from its\nensemble, see\nClassifierChain on a yeast dataset example. Read more in the User Guide. Added in version 0.19.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": [
                                    "base_estimator"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "MultiOutputRegressor",
                        "func_desc": "Multi target regression.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.multioutput.MultiOutputRegressor.html#sklearn.multioutput.MultiOutputRegressor",
                        "function_definitions": {
                            "function_name": "MultiOutputRegressor",
                            "full_function": "class sklearn.multioutput.MultiOutputRegressor(estimator, *, n_jobs=None)",
                            "function_text": "Multi target regression. This strategy consists of fitting one regressor per target. This is a\nsimple strategy for extending regressors that do not natively support\nmulti-target regression. Added in version 0.18.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/glossary.html#term-fit",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "MultiOutputRegressor",
                            "descriptions": "Multi target regression. This strategy consists of fitting one regressor per target. This is a\nsimple strategy for extending regressors that do not natively support\nmulti-target regression. Added in version 0.18.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": [
                                    "estimator"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "MultiOutputClassifier",
                        "func_desc": "Multi target classification.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.multioutput.MultiOutputClassifier.html#sklearn.multioutput.MultiOutputClassifier",
                        "function_definitions": {
                            "function_name": "MultiOutputClassifier",
                            "full_function": "class sklearn.multioutput.MultiOutputClassifier(estimator, *, n_jobs=None)",
                            "function_text": "Multi target classification. This strategy consists of fitting one classifier per target. This is a\nsimple strategy for extending classifiers that do not natively support\nmulti-target classification.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/glossary.html#term-fit",
                            "parameter_names_desc": [
                                {
                                    "param_name": "classes",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for classes parameter in partial_fit.\n"
                                },
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in partial_fit.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "MultiOutputClassifier",
                            "descriptions": "Multi target classification. This strategy consists of fitting one classifier per target. This is a\nsimple strategy for extending classifiers that do not natively support\nmulti-target classification.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "classes": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for classes parameter in partial_fit.\n"
                                    },
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in partial_fit.\n"
                                    }
                                },
                                "required": [
                                    "estimator"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "RegressorChain",
                        "func_desc": "A multi-label model that arranges regressions into a chain.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.multioutput.RegressorChain.html#sklearn.multioutput.RegressorChain",
                        "function_definitions": {
                            "function_name": "RegressorChain",
                            "full_function": "class sklearn.multioutput.RegressorChain(base_estimator, *, order=None, cv=None, random_state=None, verbose=False)",
                            "function_text": "A multi-label model that arranges regressions into a chain. Each model makes a prediction in the order specified by the chain using\nall of the available features provided to the model plus the predictions\nof models that are earlier in the chain. Read more in the User Guide. Added in version 0.20.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/multiclass.html#regressorchain",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "RegressorChain",
                            "descriptions": "A multi-label model that arranges regressions into a chain. Each model makes a prediction in the order specified by the chain using\nall of the available features provided to the model plus the predictions\nof models that are earlier in the chain. Read more in the User Guide. Added in version 0.20.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": [
                                    "base_estimator"
                                ]
                            }
                        }
                    }
                ]
            }
        ],
        "name": "sklearn.multioutput",
        "url": "https://scikit-learn.org/stable/api/sklearn.multioutput.html"
    },
    "sklearn.naive_bayes.html": {
        "functions": [
            {
                "defaults": [
                    {
                        "func_name": "BernoulliNB",
                        "func_desc": "Naive Bayes classifier for multivariate Bernoulli models.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.naive_bayes.BernoulliNB.html#sklearn.naive_bayes.BernoulliNB",
                        "function_definitions": {
                            "function_name": "BernoulliNB",
                            "full_function": "class sklearn.naive_bayes.BernoulliNB(*, alpha=1.0, force_alpha=True, binarize=0.0, fit_prior=True, class_prior=None)",
                            "function_text": "Naive Bayes classifier for multivariate Bernoulli models. Like MultinomialNB, this classifier is suitable for discrete data. The\ndifference is that while MultinomialNB works with occurrence counts,\nBernoulliNB is designed for binary/boolean features. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/naive_bayes.html#bernoulli-naive-bayes",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "BernoulliNB",
                            "descriptions": "Naive Bayes classifier for multivariate Bernoulli models. Like MultinomialNB, this classifier is suitable for discrete data. The\ndifference is that while MultinomialNB works with occurrence counts,\nBernoulliNB is designed for binary/boolean features. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "ComplementNB",
                        "func_desc": "The Complement Naive Bayes classifier described in Rennie et al. (2003).",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.naive_bayes.ComplementNB.html#sklearn.naive_bayes.ComplementNB",
                        "function_definitions": {
                            "function_name": "ComplementNB",
                            "full_function": "class sklearn.naive_bayes.ComplementNB(*, alpha=1.0, force_alpha=True, fit_prior=True, class_prior=None, norm=False)",
                            "function_text": "The Complement Naive Bayes classifier described in Rennie et al. (2003). The Complement Naive Bayes classifier was designed to correct the \u201csevere\nassumptions\u201d made by the standard Multinomial Naive Bayes classifier. It is\nparticularly suited for imbalanced data sets. Read more in the User Guide. Added in version 0.20.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/naive_bayes.html#complement-naive-bayes",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "ComplementNB",
                            "descriptions": "The Complement Naive Bayes classifier described in Rennie et al. (2003). The Complement Naive Bayes classifier was designed to correct the \u201csevere\nassumptions\u201d made by the standard Multinomial Naive Bayes classifier. It is\nparticularly suited for imbalanced data sets. Read more in the User Guide. Added in version 0.20.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "MultinomialNB",
                        "func_desc": "Naive Bayes classifier for multinomial models.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.naive_bayes.MultinomialNB.html#sklearn.naive_bayes.MultinomialNB",
                        "function_definitions": {
                            "function_name": "MultinomialNB",
                            "full_function": "class sklearn.naive_bayes.MultinomialNB(*, alpha=1.0, force_alpha=True, fit_prior=True, class_prior=None)",
                            "function_text": "Naive Bayes classifier for multinomial models. The multinomial Naive Bayes classifier is suitable for classification with\ndiscrete features (e.g., word counts for text classification). The\nmultinomial distribution normally requires integer feature counts. However,\nin practice, fractional counts such as tf-idf may also work. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/naive_bayes.html#multinomial-naive-bayes",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "MultinomialNB",
                            "descriptions": "Naive Bayes classifier for multinomial models. The multinomial Naive Bayes classifier is suitable for classification with\ndiscrete features (e.g., word counts for text classification). The\nmultinomial distribution normally requires integer feature counts. However,\nin practice, fractional counts such as tf-idf may also work. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "CategoricalNB",
                        "func_desc": "Naive Bayes classifier for categorical features.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.naive_bayes.CategoricalNB.html#sklearn.naive_bayes.CategoricalNB",
                        "function_definitions": {
                            "function_name": "CategoricalNB",
                            "full_function": "class sklearn.naive_bayes.CategoricalNB(*, alpha=1.0, force_alpha=True, fit_prior=True, class_prior=None, min_categories=None)",
                            "function_text": "Naive Bayes classifier for categorical features. The categorical Naive Bayes classifier is suitable for classification with\ndiscrete features that are categorically distributed. The categories of\neach feature are drawn from a categorical distribution. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/naive_bayes.html#categorical-naive-bayes",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "CategoricalNB",
                            "descriptions": "Naive Bayes classifier for categorical features. The categorical Naive Bayes classifier is suitable for classification with\ndiscrete features that are categorically distributed. The categories of\neach feature are drawn from a categorical distribution. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "GaussianNB",
                        "func_desc": "Gaussian Naive Bayes (GaussianNB).",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.naive_bayes.GaussianNB.html#sklearn.naive_bayes.GaussianNB",
                        "function_definitions": {
                            "function_name": "GaussianNB",
                            "full_function": "class sklearn.naive_bayes.GaussianNB(*, priors=None, var_smoothing=1e-09)",
                            "function_text": "Gaussian Naive Bayes (GaussianNB). Can perform online updates to model parameters via partial_fit.\nFor details on algorithm used to update feature means and variance online,\nsee Stanford CS tech report STAN-CS-79-773 by Chan, Golub, and LeVeque: http://i.stanford.edu/pub/cstr/reports/cs/tr/79/773/CS-TR-79-773.pdf Read more in the User Guide.",
                            "func_text_user_guide": "#sklearn.naive_bayes.GaussianNB.partial_fit",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "GaussianNB",
                            "descriptions": "Gaussian Naive Bayes (GaussianNB). Can perform online updates to model parameters via partial_fit.\nFor details on algorithm used to update feature means and variance online,\nsee Stanford CS tech report STAN-CS-79-773 by Chan, Golub, and LeVeque: http://i.stanford.edu/pub/cstr/reports/cs/tr/79/773/CS-TR-79-773.pdf Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    }
                ]
            }
        ],
        "name": "sklearn.naive_bayes",
        "url": "https://scikit-learn.org/stable/api/sklearn.naive_bayes.html"
    },
    "sklearn.neighbors.html": {
        "functions": [
            {
                "defaults": [
                    {
                        "func_name": "BallTree",
                        "func_desc": "BallTree for fast generalized N-point problems",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.BallTree.html#sklearn.neighbors.BallTree",
                        "function_definitions": {
                            "function_name": "BallTree",
                            "full_function": "class sklearn.neighbors.BallTree#",
                            "function_text": "BallTree for fast generalized N-point problems Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/neighbors.html#unsupervised-neighbors",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples, n_features)",
                                    "param_desc": "An array of points to query.  Last dimension should match dimension\nof training data.\n"
                                },
                                {
                                    "param_name": "r",
                                    "param_type": "array-like",
                                    "param_desc": "A one-dimensional array of distances\n"
                                },
                                {
                                    "param_name": "dualtree",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If True, use a dualtree algorithm.  Otherwise, use a single-tree\nalgorithm.  Dual tree algorithms can have better scaling for\nlarge N.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "BallTree",
                            "descriptions": "BallTree for fast generalized N-point problems Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_features). An array of points to query.  Last dimension should match dimension\nof training data.\n"
                                    },
                                    "r": {
                                        "type": "array",
                                        "description": "array-like. A one-dimensional array of distances\n"
                                    },
                                    "dualtree": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If True, use a dualtree algorithm.  Otherwise, use a single-tree\nalgorithm.  Dual tree algorithms can have better scaling for\nlarge N.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "KNeighborsClassifier",
                        "func_desc": "Classifier implementing the k-nearest neighbors vote.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsClassifier.html#sklearn.neighbors.KNeighborsClassifier",
                        "function_definitions": {
                            "function_name": "KNeighborsClassifier",
                            "full_function": "class sklearn.neighbors.KNeighborsClassifier(n_neighbors=5, *, weights='uniform', algorithm='auto', leaf_size=30, p=2, metric='minkowski', metric_params=None, n_jobs=None)",
                            "function_text": "Classifier implementing the k-nearest neighbors vote. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/neighbors.html#classification",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "KNeighborsClassifier",
                            "descriptions": "Classifier implementing the k-nearest neighbors vote. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": [
                                    "n_neighbors=5"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "KNeighborsTransformer",
                        "func_desc": "Transform X into a (weighted) graph of k nearest neighbors.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsTransformer.html#sklearn.neighbors.KNeighborsTransformer",
                        "function_definitions": {
                            "function_name": "KNeighborsTransformer",
                            "full_function": "class sklearn.neighbors.KNeighborsTransformer(*, mode='distance', n_neighbors=5, algorithm='auto', leaf_size=30, metric='minkowski', p=2, metric_params=None, n_jobs=None)",
                            "function_text": "Transform X into a (weighted) graph of k nearest neighbors. The transformed data is a sparse graph as returned by kneighbors_graph. Read more in the User Guide. Added in version 0.22.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/neighbors.html#neighbors-transformer",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples_transform, n_features)",
                                    "param_desc": "Sample data.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "KNeighborsTransformer",
                            "descriptions": "Transform X into a (weighted) graph of k nearest neighbors. The transformed data is a sparse graph as returned by kneighbors_graph. Read more in the User Guide. Added in version 0.22.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples_transform, n_features). Sample data.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "LocalOutlierFactor",
                        "func_desc": "Unsupervised Outlier Detection using the Local Outlier Factor (LOF).",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.LocalOutlierFactor.html#sklearn.neighbors.LocalOutlierFactor",
                        "function_definitions": {
                            "function_name": "LocalOutlierFactor",
                            "full_function": "class sklearn.neighbors.LocalOutlierFactor(n_neighbors=20, *, algorithm='auto', leaf_size=30, metric='minkowski', p=2, metric_params=None, contamination='auto', novelty=False, n_jobs=None)",
                            "function_text": "Unsupervised Outlier Detection using the Local Outlier Factor (LOF). The anomaly score of each sample is called the Local Outlier Factor.\nIt measures the local deviation of the density of a given sample with respect\nto its neighbors.\nIt is local in that the anomaly score depends on how isolated the object\nis with respect to the surrounding neighborhood.\nMore precisely, locality is given by k-nearest neighbors, whose distance\nis used to estimate the local density.\nBy comparing the local density of a sample to the local densities of its\nneighbors, one can identify samples that have a substantially lower density\nthan their neighbors. These are considered outliers. Added in version 0.19.",
                            "func_text_user_guide": "#sklearn.neighbors.LocalOutlierFactor.kneighbors",
                            "parameter_names_desc": [
                                {
                                    "param_name": "**params",
                                    "param_type": "dict",
                                    "param_desc": "Estimator parameters.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "LocalOutlierFactor",
                            "descriptions": "Unsupervised Outlier Detection using the Local Outlier Factor (LOF). The anomaly score of each sample is called the Local Outlier Factor.\nIt measures the local deviation of the density of a given sample with respect\nto its neighbors.\nIt is local in that the anomaly score depends on how isolated the object\nis with respect to the surrounding neighborhood.\nMore precisely, locality is given by k-nearest neighbors, whose distance\nis used to estimate the local density.\nBy comparing the local density of a sample to the local densities of its\nneighbors, one can identify samples that have a substantially lower density\nthan their neighbors. These are considered outliers. Added in version 0.19.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "**params": {
                                        "type": "dict",
                                        "description": "dict. Estimator parameters.\n"
                                    }
                                },
                                "required": [
                                    "n_neighbors=20"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "NearestNeighbors",
                        "func_desc": "Unsupervised learner for implementing neighbor searches.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.NearestNeighbors.html#sklearn.neighbors.NearestNeighbors",
                        "function_definitions": {
                            "function_name": "NearestNeighbors",
                            "full_function": "class sklearn.neighbors.NearestNeighbors(*, n_neighbors=5, radius=1.0, algorithm='auto', leaf_size=30, metric='minkowski', p=2, metric_params=None, n_jobs=None)",
                            "function_text": "Unsupervised learner for implementing neighbor searches. Read more in the User Guide. Added in version 0.9.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/neighbors.html#unsupervised-neighbors",
                            "parameter_names_desc": [
                                {
                                    "param_name": "**params",
                                    "param_type": "dict",
                                    "param_desc": "Estimator parameters.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "NearestNeighbors",
                            "descriptions": "Unsupervised learner for implementing neighbor searches. Read more in the User Guide. Added in version 0.9.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "**params": {
                                        "type": "dict",
                                        "description": "dict. Estimator parameters.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "RadiusNeighborsClassifier",
                        "func_desc": "Classifier implementing a vote among neighbors within a given radius.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.RadiusNeighborsClassifier.html#sklearn.neighbors.RadiusNeighborsClassifier",
                        "function_definitions": {
                            "function_name": "RadiusNeighborsClassifier",
                            "full_function": "class sklearn.neighbors.RadiusNeighborsClassifier(radius=1.0, *, weights='uniform', algorithm='auto', leaf_size=30, p=2, metric='minkowski', outlier_label=None, metric_params=None, n_jobs=None)",
                            "function_text": "Classifier implementing a vote among neighbors within a given radius. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/neighbors.html#classification",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "RadiusNeighborsClassifier",
                            "descriptions": "Classifier implementing a vote among neighbors within a given radius. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": [
                                    "radius=1.0"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "RadiusNeighborsTransformer",
                        "func_desc": "Transform X into a (weighted) graph of neighbors nearer than a radius.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.RadiusNeighborsTransformer.html#sklearn.neighbors.RadiusNeighborsTransformer",
                        "function_definitions": {
                            "function_name": "RadiusNeighborsTransformer",
                            "full_function": "class sklearn.neighbors.RadiusNeighborsTransformer(*, mode='distance', radius=1.0, algorithm='auto', leaf_size=30, metric='minkowski', p=2, metric_params=None, n_jobs=None)",
                            "function_text": "Transform X into a (weighted) graph of neighbors nearer than a radius. The transformed data is a sparse graph as returned by\nradius_neighbors_graph. Read more in the User Guide. Added in version 0.22.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/neighbors.html#neighbors-transformer",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples_transform, n_features)",
                                    "param_desc": "Sample data.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "RadiusNeighborsTransformer",
                            "descriptions": "Transform X into a (weighted) graph of neighbors nearer than a radius. The transformed data is a sparse graph as returned by\nradius_neighbors_graph. Read more in the User Guide. Added in version 0.22.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples_transform, n_features). Sample data.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "radius_neighbors_graph",
                        "func_desc": "Compute the (weighted) graph of Neighbors for points in X.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.radius_neighbors_graph.html#sklearn.neighbors.radius_neighbors_graph",
                        "function_definitions": {
                            "function_name": "radius_neighbors_graph",
                            "full_function": "sklearn.neighbors.radius_neighbors_graph(X, radius, *, mode='connectivity', metric='minkowski', p=2, metric_params=None, include_self=False, n_jobs=None)",
                            "function_text": "Compute the (weighted) graph of Neighbors for points in X. Neighborhoods are restricted the points at a distance lower than\nradius. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/neighbors.html#unsupervised-neighbors",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "Sample data.\n"
                                },
                                {
                                    "param_name": "radius",
                                    "param_type": "float",
                                    "param_desc": "Radius of neighborhoods.\n"
                                },
                                {
                                    "param_name": "mode",
                                    "param_type": "{\u2018connectivity\u2019, \u2018distance\u2019}, default=\u2019connectivity\u2019",
                                    "param_desc": "Type of returned matrix: \u2018connectivity\u2019 will return the connectivity\nmatrix with ones and zeros, and \u2018distance\u2019 will return the distances\nbetween neighbors according to the given metric.\n"
                                },
                                {
                                    "param_name": "metric",
                                    "param_type": "str, default=\u2019minkowski\u2019",
                                    "param_desc": "Metric to use for distance computation. Default is \u201cminkowski\u201d, which\nresults in the standard Euclidean distance when p = 2. See the\ndocumentation of scipy.spatial.distance and\nthe metrics listed in\ndistance_metrics for valid metric\nvalues.\n"
                                },
                                {
                                    "param_name": "p",
                                    "param_type": "float, default=2",
                                    "param_desc": "Power parameter for the Minkowski metric. When p = 1, this is\nequivalent to using manhattan_distance (l1), and euclidean_distance\n(l2) for p = 2. For arbitrary p, minkowski_distance (l_p) is used.\n"
                                },
                                {
                                    "param_name": "metric_params",
                                    "param_type": "dict, default=None",
                                    "param_desc": "Additional keyword arguments for the metric function.\n"
                                },
                                {
                                    "param_name": "include_self",
                                    "param_type": "bool or \u2018auto\u2019, default=False",
                                    "param_desc": "Whether or not to mark each sample as the first nearest neighbor to\nitself. If \u2018auto\u2019, then True is used for mode=\u2019connectivity\u2019 and False\nfor mode=\u2019distance\u2019.\n"
                                },
                                {
                                    "param_name": "n_jobs",
                                    "param_type": "int, default=None",
                                    "param_desc": "The number of parallel jobs to run for neighbors search.\nNone means 1 unless in a joblib.parallel_backend context.\n-1 means using all processors. See Glossary\nfor more details.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "radius_neighbors_graph",
                            "descriptions": "Compute the (weighted) graph of Neighbors for points in X. Neighborhoods are restricted the points at a distance lower than\nradius. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). Sample data.\n"
                                    },
                                    "radius": {
                                        "type": "float",
                                        "description": "float. Radius of neighborhoods.\n"
                                    },
                                    "mode": {
                                        "type": "string",
                                        "enum": [
                                            "connectivity",
                                            " distance"
                                        ],
                                        "description": "{\u2018connectivity\u2019, \u2018distance\u2019}, default=\u2019connectivity\u2019. Type of returned matrix: \u2018connectivity\u2019 will return the connectivity\nmatrix with ones and zeros, and \u2018distance\u2019 will return the distances\nbetween neighbors according to the given metric.\n"
                                    },
                                    "metric": {
                                        "type": "string",
                                        "description": "str, default=\u2019minkowski\u2019. Metric to use for distance computation. Default is \u201cminkowski\u201d, which\nresults in the standard Euclidean distance when p = 2. See the\ndocumentation of scipy.spatial.distance and\nthe metrics listed in\ndistance_metrics for valid metric\nvalues.\n"
                                    },
                                    "p": {
                                        "type": "float",
                                        "description": "float, default=2. Power parameter for the Minkowski metric. When p = 1, this is\nequivalent to using manhattan_distance (l1), and euclidean_distance\n(l2) for p = 2. For arbitrary p, minkowski_distance (l_p) is used.\n"
                                    },
                                    "metric_params": {
                                        "type": "dict, default=None",
                                        "description": "dict, default=None. Additional keyword arguments for the metric function.\n"
                                    },
                                    "include_self": {
                                        "type": "boolean",
                                        "description": "bool or \u2018auto\u2019, default=False. Whether or not to mark each sample as the first nearest neighbor to\nitself. If \u2018auto\u2019, then True is used for mode=\u2019connectivity\u2019 and False\nfor mode=\u2019distance\u2019.\n"
                                    },
                                    "n_jobs": {
                                        "type": "integer",
                                        "description": "int, default=None. The number of parallel jobs to run for neighbors search.\nNone means 1 unless in a joblib.parallel_backend context.\n-1 means using all processors. See Glossary\nfor more details.\n"
                                    }
                                },
                                "required": [
                                    "X",
                                    "radius"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "KDTree",
                        "func_desc": "KDTree for fast generalized N-point problems",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KDTree.html#sklearn.neighbors.KDTree",
                        "function_definitions": {
                            "function_name": "KDTree",
                            "full_function": "class sklearn.neighbors.KDTree#",
                            "function_text": "KDTree for fast generalized N-point problems Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/neighbors.html#unsupervised-neighbors",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples, n_features)",
                                    "param_desc": "An array of points to query.  Last dimension should match dimension\nof training data.\n"
                                },
                                {
                                    "param_name": "r",
                                    "param_type": "array-like",
                                    "param_desc": "A one-dimensional array of distances\n"
                                },
                                {
                                    "param_name": "dualtree",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If True, use a dualtree algorithm.  Otherwise, use a single-tree\nalgorithm.  Dual tree algorithms can have better scaling for\nlarge N.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "KDTree",
                            "descriptions": "KDTree for fast generalized N-point problems Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_features). An array of points to query.  Last dimension should match dimension\nof training data.\n"
                                    },
                                    "r": {
                                        "type": "array",
                                        "description": "array-like. A one-dimensional array of distances\n"
                                    },
                                    "dualtree": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If True, use a dualtree algorithm.  Otherwise, use a single-tree\nalgorithm.  Dual tree algorithms can have better scaling for\nlarge N.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "KNeighborsRegressor",
                        "func_desc": "Regression based on k-nearest neighbors.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsRegressor.html#sklearn.neighbors.KNeighborsRegressor",
                        "function_definitions": {
                            "function_name": "KNeighborsRegressor",
                            "full_function": "class sklearn.neighbors.KNeighborsRegressor(n_neighbors=5, *, weights='uniform', algorithm='auto', leaf_size=30, p=2, metric='minkowski', metric_params=None, n_jobs=None)",
                            "function_text": "Regression based on k-nearest neighbors. The target is predicted by local interpolation of the targets\nassociated of the nearest neighbors in the training set. Read more in the User Guide. Added in version 0.9.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/neighbors.html#regression",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "KNeighborsRegressor",
                            "descriptions": "Regression based on k-nearest neighbors. The target is predicted by local interpolation of the targets\nassociated of the nearest neighbors in the training set. Read more in the User Guide. Added in version 0.9.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": [
                                    "n_neighbors=5"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "KernelDensity",
                        "func_desc": "Kernel Density Estimation.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KernelDensity.html#sklearn.neighbors.KernelDensity",
                        "function_definitions": {
                            "function_name": "KernelDensity",
                            "full_function": "class sklearn.neighbors.KernelDensity(*, bandwidth=1.0, algorithm='auto', kernel='gaussian', metric='euclidean', atol=0, rtol=0, breadth_first=True, leaf_size=40, metric_params=None)",
                            "function_text": "Kernel Density Estimation. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/density.html#kernel-density",
                            "parameter_names_desc": [
                                {
                                    "param_name": "**params",
                                    "param_type": "dict",
                                    "param_desc": "Estimator parameters.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "KernelDensity",
                            "descriptions": "Kernel Density Estimation. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "**params": {
                                        "type": "dict",
                                        "description": "dict. Estimator parameters.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "NearestCentroid",
                        "func_desc": "Nearest centroid classifier.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.NearestCentroid.html#sklearn.neighbors.NearestCentroid",
                        "function_definitions": {
                            "function_name": "NearestCentroid",
                            "full_function": "class sklearn.neighbors.NearestCentroid(metric='euclidean', *, shrink_threshold=None)",
                            "function_text": "Nearest centroid classifier. Each class is represented by its centroid, with test samples classified to\nthe class with the nearest centroid. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/neighbors.html#nearest-centroid-classifier",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "NearestCentroid",
                            "descriptions": "Nearest centroid classifier. Each class is represented by its centroid, with test samples classified to\nthe class with the nearest centroid. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": [
                                    "metric='euclidean'"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "NeighborhoodComponentsAnalysis",
                        "func_desc": "Neighborhood Components Analysis.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.html#sklearn.neighbors.NeighborhoodComponentsAnalysis",
                        "function_definitions": {
                            "function_name": "NeighborhoodComponentsAnalysis",
                            "full_function": "class sklearn.neighbors.NeighborhoodComponentsAnalysis(n_components=None, *, init='auto', warm_start=False, max_iter=50, tol=1e-05, callback=None, verbose=0, random_state=None)",
                            "function_text": "Neighborhood Components Analysis. Neighborhood Component Analysis (NCA) is a machine learning algorithm for\nmetric learning. It learns a linear transformation in a supervised fashion\nto improve the classification accuracy of a stochastic nearest neighbors\nrule in the transformed space. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/neighbors.html#nca",
                            "parameter_names_desc": []
                        },
                        "function_calling": {}
                    },
                    {
                        "func_name": "RadiusNeighborsRegressor",
                        "func_desc": "Regression based on neighbors within a fixed radius.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.RadiusNeighborsRegressor.html#sklearn.neighbors.RadiusNeighborsRegressor",
                        "function_definitions": {
                            "function_name": "RadiusNeighborsRegressor",
                            "full_function": "class sklearn.neighbors.RadiusNeighborsRegressor(radius=1.0, *, weights='uniform', algorithm='auto', leaf_size=30, p=2, metric='minkowski', metric_params=None, n_jobs=None)",
                            "function_text": "Regression based on neighbors within a fixed radius. The target is predicted by local interpolation of the targets\nassociated of the nearest neighbors in the training set. Read more in the User Guide. Added in version 0.9.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/neighbors.html#regression",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "RadiusNeighborsRegressor",
                            "descriptions": "Regression based on neighbors within a fixed radius. The target is predicted by local interpolation of the targets\nassociated of the nearest neighbors in the training set. Read more in the User Guide. Added in version 0.9.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": [
                                    "radius=1.0"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "kneighbors_graph",
                        "func_desc": "Compute the (weighted) graph of k-Neighbors for points in X.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.kneighbors_graph.html#sklearn.neighbors.kneighbors_graph",
                        "function_definitions": {
                            "function_name": "kneighbors_graph",
                            "full_function": "sklearn.neighbors.kneighbors_graph(X, n_neighbors, *, mode='connectivity', metric='minkowski', p=2, metric_params=None, include_self=False, n_jobs=None)",
                            "function_text": "Compute the (weighted) graph of k-Neighbors for points in X. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/neighbors.html#unsupervised-neighbors",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "Sample data.\n"
                                },
                                {
                                    "param_name": "n_neighbors",
                                    "param_type": "int",
                                    "param_desc": "Number of neighbors for each sample.\n"
                                },
                                {
                                    "param_name": "mode",
                                    "param_type": "{\u2018connectivity\u2019, \u2018distance\u2019}, default=\u2019connectivity\u2019",
                                    "param_desc": "Type of returned matrix: \u2018connectivity\u2019 will return the connectivity\nmatrix with ones and zeros, and \u2018distance\u2019 will return the distances\nbetween neighbors according to the given metric.\n"
                                },
                                {
                                    "param_name": "metric",
                                    "param_type": "str, default=\u2019minkowski\u2019",
                                    "param_desc": "Metric to use for distance computation. Default is \u201cminkowski\u201d, which\nresults in the standard Euclidean distance when p = 2. See the\ndocumentation of scipy.spatial.distance and\nthe metrics listed in\ndistance_metrics for valid metric\nvalues.\n"
                                },
                                {
                                    "param_name": "p",
                                    "param_type": "float, default=2",
                                    "param_desc": "Power parameter for the Minkowski metric. When p = 1, this is equivalent\nto using manhattan_distance (l1), and euclidean_distance (l2) for p = 2.\nFor arbitrary p, minkowski_distance (l_p) is used. This parameter is expected\nto be positive.\n"
                                },
                                {
                                    "param_name": "metric_params",
                                    "param_type": "dict, default=None",
                                    "param_desc": "Additional keyword arguments for the metric function.\n"
                                },
                                {
                                    "param_name": "include_self",
                                    "param_type": "bool or \u2018auto\u2019, default=False",
                                    "param_desc": "Whether or not to mark each sample as the first nearest neighbor to\nitself. If \u2018auto\u2019, then True is used for mode=\u2019connectivity\u2019 and False\nfor mode=\u2019distance\u2019.\n"
                                },
                                {
                                    "param_name": "n_jobs",
                                    "param_type": "int, default=None",
                                    "param_desc": "The number of parallel jobs to run for neighbors search.\nNone means 1 unless in a joblib.parallel_backend context.\n-1 means using all processors. See Glossary\nfor more details.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "kneighbors_graph",
                            "descriptions": "Compute the (weighted) graph of k-Neighbors for points in X. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). Sample data.\n"
                                    },
                                    "n_neighbors": {
                                        "type": "integer",
                                        "description": "int. Number of neighbors for each sample.\n"
                                    },
                                    "mode": {
                                        "type": "string",
                                        "enum": [
                                            "connectivity",
                                            " distance"
                                        ],
                                        "description": "{\u2018connectivity\u2019, \u2018distance\u2019}, default=\u2019connectivity\u2019. Type of returned matrix: \u2018connectivity\u2019 will return the connectivity\nmatrix with ones and zeros, and \u2018distance\u2019 will return the distances\nbetween neighbors according to the given metric.\n"
                                    },
                                    "metric": {
                                        "type": "string",
                                        "description": "str, default=\u2019minkowski\u2019. Metric to use for distance computation. Default is \u201cminkowski\u201d, which\nresults in the standard Euclidean distance when p = 2. See the\ndocumentation of scipy.spatial.distance and\nthe metrics listed in\ndistance_metrics for valid metric\nvalues.\n"
                                    },
                                    "p": {
                                        "type": "float",
                                        "description": "float, default=2. Power parameter for the Minkowski metric. When p = 1, this is equivalent\nto using manhattan_distance (l1), and euclidean_distance (l2) for p = 2.\nFor arbitrary p, minkowski_distance (l_p) is used. This parameter is expected\nto be positive.\n"
                                    },
                                    "metric_params": {
                                        "type": "dict, default=None",
                                        "description": "dict, default=None. Additional keyword arguments for the metric function.\n"
                                    },
                                    "include_self": {
                                        "type": "boolean",
                                        "description": "bool or \u2018auto\u2019, default=False. Whether or not to mark each sample as the first nearest neighbor to\nitself. If \u2018auto\u2019, then True is used for mode=\u2019connectivity\u2019 and False\nfor mode=\u2019distance\u2019.\n"
                                    },
                                    "n_jobs": {
                                        "type": "integer",
                                        "description": "int, default=None. The number of parallel jobs to run for neighbors search.\nNone means 1 unless in a joblib.parallel_backend context.\n-1 means using all processors. See Glossary\nfor more details.\n"
                                    }
                                },
                                "required": [
                                    "X",
                                    "n_neighbors"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "sort_graph_by_row_values",
                        "func_desc": "Sort a sparse graph such that each row is stored with increasing values.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.sort_graph_by_row_values.html#sklearn.neighbors.sort_graph_by_row_values",
                        "function_definitions": {
                            "function_name": "sort_graph_by_row_values",
                            "full_function": "sklearn.neighbors.sort_graph_by_row_values(graph, copy=False, warn_when_not_sorted=True)",
                            "function_text": "Sort a sparse graph such that each row is stored with increasing values. Added in version 1.2.",
                            "func_text_user_guide": "sklearn.exceptions.EfficiencyWarning.html#sklearn.exceptions.EfficiencyWarning",
                            "parameter_names_desc": [
                                {
                                    "param_name": "graph",
                                    "param_type": "sparse matrix of shape (n_samples, n_samples)",
                                    "param_desc": "Distance matrix to other samples, where only non-zero elements are\nconsidered neighbors. Matrix is converted to CSR format if not already.\n"
                                },
                                {
                                    "param_name": "copy",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If True, the graph is copied before sorting. If False, the sorting is\nperformed inplace. If the graph is not of CSR format, copy must be\nTrue to allow the conversion to CSR format, otherwise an error is\nraised.\n"
                                },
                                {
                                    "param_name": "warn_when_not_sorted",
                                    "param_type": "bool, default=True",
                                    "param_desc": "If True, a EfficiencyWarning is raised\nwhen the input graph is not sorted by row values.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "sort_graph_by_row_values",
                            "descriptions": "Sort a sparse graph such that each row is stored with increasing values. Added in version 1.2.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "graph": {
                                        "type": "sparse matrix of shape (n_samples, n_samples)",
                                        "description": "sparse matrix of shape (n_samples, n_samples). Distance matrix to other samples, where only non-zero elements are\nconsidered neighbors. Matrix is converted to CSR format if not already.\n"
                                    },
                                    "copy": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If True, the graph is copied before sorting. If False, the sorting is\nperformed inplace. If the graph is not of CSR format, copy must be\nTrue to allow the conversion to CSR format, otherwise an error is\nraised.\n"
                                    },
                                    "warn_when_not_sorted": {
                                        "type": "boolean",
                                        "description": "bool, default=True. If True, a EfficiencyWarning is raised\nwhen the input graph is not sorted by row values.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    }
                ]
            }
        ],
        "name": "sklearn.neighbors",
        "url": "https://scikit-learn.org/stable/api/sklearn.neighbors.html"
    },
    "sklearn.neural_network.html": {
        "functions": [
            {
                "defaults": [
                    {
                        "func_name": "BernoulliRBM",
                        "func_desc": "Bernoulli Restricted Boltzmann Machine (RBM).",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.neural_network.BernoulliRBM.html#sklearn.neural_network.BernoulliRBM",
                        "function_definitions": {
                            "function_name": "BernoulliRBM",
                            "full_function": "class sklearn.neural_network.BernoulliRBM(n_components=256, *, learning_rate=0.1, batch_size=10, n_iter=10, verbose=0, random_state=None)",
                            "function_text": "Bernoulli Restricted Boltzmann Machine (RBM). A Restricted Boltzmann Machine with binary visible units and\nbinary hidden units. Parameters are estimated using Stochastic Maximum\nLikelihood (SML), also known as Persistent Contrastive Divergence (PCD)\n[2]. The time complexity of this implementation is O(d ** 2) assuming\nd ~ n_features ~ n_components. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/neural_networks_unsupervised.html#rbm",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "The data to be transformed.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "BernoulliRBM",
                            "descriptions": "Bernoulli Restricted Boltzmann Machine (RBM). A Restricted Boltzmann Machine with binary visible units and\nbinary hidden units. Parameters are estimated using Stochastic Maximum\nLikelihood (SML), also known as Persistent Contrastive Divergence (PCD)\n[2]. The time complexity of this implementation is O(d ** 2) assuming\nd ~ n_features ~ n_components. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). The data to be transformed.\n"
                                    }
                                },
                                "required": [
                                    "n_components=256"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "MLPRegressor",
                        "func_desc": "Multi-layer Perceptron regressor.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.neural_network.MLPRegressor.html#sklearn.neural_network.MLPRegressor",
                        "function_definitions": {
                            "function_name": "MLPRegressor",
                            "full_function": "class sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(100,), activation='relu', *, solver='adam', alpha=0.0001, batch_size='auto', learning_rate='constant', learning_rate_init=0.001, power_t=0.5, max_iter=200, shuffle=True, random_state=None, tol=0.0001, verbose=False, warm_start=False, momentum=0.9, nesterovs_momentum=True, early_stopping=False, validation_fraction=0.1, beta_1=0.9, beta_2=0.999, epsilon=1e-08, n_iter_no_change=10, max_fun=15000)",
                            "function_text": "Multi-layer Perceptron regressor. This model optimizes the squared error using LBFGS or stochastic gradient\ndescent. Added in version 0.18.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/auto_examples/neural_networks/plot_mlp_training_curves.html#sphx-glr-auto-examples-neural-networks-plot-mlp-training-curves-py",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "MLPRegressor",
                            "descriptions": "Multi-layer Perceptron regressor. This model optimizes the squared error using LBFGS or stochastic gradient\ndescent. Added in version 0.18.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": [
                                    "hidden_layer_sizes=(100",
                                    ")",
                                    "activation='relu'"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "MLPClassifier",
                        "func_desc": "Multi-layer Perceptron classifier.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.neural_network.MLPClassifier.html#sklearn.neural_network.MLPClassifier",
                        "function_definitions": {
                            "function_name": "MLPClassifier",
                            "full_function": "class sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(100,), activation='relu', *, solver='adam', alpha=0.0001, batch_size='auto', learning_rate='constant', learning_rate_init=0.001, power_t=0.5, max_iter=200, shuffle=True, random_state=None, tol=0.0001, verbose=False, warm_start=False, momentum=0.9, nesterovs_momentum=True, early_stopping=False, validation_fraction=0.1, beta_1=0.9, beta_2=0.999, epsilon=1e-08, n_iter_no_change=10, max_fun=15000)",
                            "function_text": "Multi-layer Perceptron classifier. This model optimizes the log-loss function using LBFGS or stochastic\ngradient descent. Added in version 0.18.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/auto_examples/neural_networks/plot_mlp_training_curves.html#sphx-glr-auto-examples-neural-networks-plot-mlp-training-curves-py",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "MLPClassifier",
                            "descriptions": "Multi-layer Perceptron classifier. This model optimizes the log-loss function using LBFGS or stochastic\ngradient descent. Added in version 0.18.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": [
                                    "hidden_layer_sizes=(100",
                                    ")",
                                    "activation='relu'"
                                ]
                            }
                        }
                    }
                ]
            }
        ],
        "name": "sklearn.neural_network",
        "url": "https://scikit-learn.org/stable/api/sklearn.neural_network.html"
    },
    "sklearn.pipeline.html": {
        "functions": [
            {
                "defaults": [
                    {
                        "func_name": "FeatureUnion",
                        "func_desc": "Concatenates results of multiple transformer objects.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.pipeline.FeatureUnion.html#sklearn.pipeline.FeatureUnion",
                        "function_definitions": {
                            "function_name": "FeatureUnion",
                            "full_function": "class sklearn.pipeline.FeatureUnion(transformer_list, *, n_jobs=None, transformer_weights=None, verbose=False, verbose_feature_names_out=True)",
                            "function_text": "Concatenates results of multiple transformer objects. This estimator applies a list of transformer objects in parallel to the\ninput data, then concatenates the results. This is useful to combine\nseveral feature extraction mechanisms into a single transformer. Parameters of the transformers may be set using its name and the parameter\nname separated by a \u2018__\u2019. A transformer may be replaced entirely by\nsetting the parameter with its name to another transformer, removed by\nsetting to \u2018drop\u2019 or disabled by setting to \u2018passthrough\u2019 (features are\npassed without transformation). Read more in the User Guide. Added in version 0.13.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/compose.html#feature-union",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "iterable or array-like, depending on transformers",
                                    "param_desc": "Input data to be transformed.\n"
                                },
                                {
                                    "param_name": "**params",
                                    "param_type": "dict, default=None",
                                    "param_desc": "Parameters routed to the transform method of the sub-transformers via the\nmetadata routing API. See Metadata Routing User Guide for more details.\n\nAdded in version 1.5.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "FeatureUnion",
                            "descriptions": "Concatenates results of multiple transformer objects. This estimator applies a list of transformer objects in parallel to the\ninput data, then concatenates the results. This is useful to combine\nseveral feature extraction mechanisms into a single transformer. Parameters of the transformers may be set using its name and the parameter\nname separated by a \u2018__\u2019. A transformer may be replaced entirely by\nsetting the parameter with its name to another transformer, removed by\nsetting to \u2018drop\u2019 or disabled by setting to \u2018passthrough\u2019 (features are\npassed without transformation). Read more in the User Guide. Added in version 0.13.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "iterable or array-like, depending on transformers. Input data to be transformed.\n"
                                    },
                                    "**params": {
                                        "type": "dict, default=None",
                                        "description": "dict, default=None. Parameters routed to the transform method of the sub-transformers via the\nmetadata routing API. See Metadata Routing User Guide for more details.\n\nAdded in version 1.5.\n\n"
                                    }
                                },
                                "required": [
                                    "transformer_list"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "make_pipeline",
                        "func_desc": "Construct a Pipeline from the given estimators.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.pipeline.make_pipeline.html#sklearn.pipeline.make_pipeline",
                        "function_definitions": {
                            "function_name": "make_pipeline",
                            "full_function": "sklearn.pipeline.make_pipeline(*steps, memory=None, verbose=False)",
                            "function_text": "Construct a Pipeline from the given estimators. This is a shorthand for the Pipeline constructor; it does not\nrequire, and does not permit, naming the estimators. Instead, their names\nwill be set to the lowercase of their types automatically.",
                            "func_text_user_guide": "sklearn.pipeline.Pipeline.html#sklearn.pipeline.Pipeline",
                            "parameter_names_desc": [
                                {
                                    "param_name": "*steps",
                                    "param_type": "list of Estimator objects",
                                    "param_desc": "List of the scikit-learn estimators that are chained together.\n"
                                },
                                {
                                    "param_name": "memory",
                                    "param_type": "str or object with the joblib.Memory interface, default=None",
                                    "param_desc": "Used to cache the fitted transformers of the pipeline. The last step\nwill never be cached, even if it is a transformer. By default, no\ncaching is performed. If a string is given, it is the path to the\ncaching directory. Enabling caching triggers a clone of the transformers\nbefore fitting. Therefore, the transformer instance given to the\npipeline cannot be inspected directly. Use the attribute named_steps\nor steps to inspect estimators within the pipeline. Caching the\ntransformers is advantageous when fitting is time consuming.\n"
                                },
                                {
                                    "param_name": "verbose",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If True, the time elapsed while fitting each step will be printed as it\nis completed.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "make_pipeline",
                            "descriptions": "Construct a Pipeline from the given estimators. This is a shorthand for the Pipeline constructor; it does not\nrequire, and does not permit, naming the estimators. Instead, their names\nwill be set to the lowercase of their types automatically.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "*steps": {
                                        "type": "object",
                                        "description": "list of Estimator objects. List of the scikit-learn estimators that are chained together.\n"
                                    },
                                    "memory": {
                                        "type": "integer",
                                        "description": "str or object with the joblib.Memory interface, default=None. Used to cache the fitted transformers of the pipeline. The last step\nwill never be cached, even if it is a transformer. By default, no\ncaching is performed. If a string is given, it is the path to the\ncaching directory. Enabling caching triggers a clone of the transformers\nbefore fitting. Therefore, the transformer instance given to the\npipeline cannot be inspected directly. Use the attribute named_steps\nor steps to inspect estimators within the pipeline. Caching the\ntransformers is advantageous when fitting is time consuming.\n"
                                    },
                                    "verbose": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If True, the time elapsed while fitting each step will be printed as it\nis completed.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "Pipeline",
                        "func_desc": "A sequence of data transformers with an optional final predictor.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.pipeline.Pipeline.html#sklearn.pipeline.Pipeline",
                        "function_definitions": {
                            "function_name": "Pipeline",
                            "full_function": "class sklearn.pipeline.Pipeline(steps, *, memory=None, verbose=False)",
                            "function_text": "A sequence of data transformers with an optional final predictor. Pipeline allows you to sequentially apply a list of transformers to\npreprocess the data and, if desired, conclude the sequence with a final\npredictor for predictive modeling. Intermediate steps of the pipeline must be \u2018transforms\u2019, that is, they\nmust implement fit and transform methods.\nThe final estimator only needs to implement fit.\nThe transformers in the pipeline can be cached using memory argument. The purpose of the pipeline is to assemble several steps that can be\ncross-validated together while setting different parameters. For this, it\nenables setting parameters of the various steps using their names and the\nparameter name separated by a '__', as in the example below. A step\u2019s\nestimator may be replaced entirely by setting the parameter with its name\nto another estimator, or a transformer removed by setting it to\n'passthrough' or None. For an example use case of Pipeline combined with\nGridSearchCV, refer to\nSelecting dimensionality reduction with Pipeline and GridSearchCV. The\nexample Pipelining: chaining a PCA and a logistic regression shows how\nto grid search on a pipeline using '__' as a separator in the parameter names. Read more in the User Guide. Added in version 0.5.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/glossary.html#term-predictor",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "iterable",
                                    "param_desc": "Data to transform. Must fulfill input requirements of first step\nof the pipeline.\n"
                                },
                                {
                                    "param_name": "**params",
                                    "param_type": "dict of str -> object",
                                    "param_desc": "Parameters requested and accepted by steps. Each step must have\nrequested certain metadata for these parameters to be forwarded to\nthem.\n\nAdded in version 1.4: Only available if enable_metadata_routing=True. See\nMetadata Routing User Guide for more\ndetails.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "Pipeline",
                            "descriptions": "A sequence of data transformers with an optional final predictor. Pipeline allows you to sequentially apply a list of transformers to\npreprocess the data and, if desired, conclude the sequence with a final\npredictor for predictive modeling. Intermediate steps of the pipeline must be \u2018transforms\u2019, that is, they\nmust implement fit and transform methods.\nThe final estimator only needs to implement fit.\nThe transformers in the pipeline can be cached using memory argument. The purpose of the pipeline is to assemble several steps that can be\ncross-validated together while setting different parameters. For this, it\nenables setting parameters of the various steps using their names and the\nparameter name separated by a '__', as in the example below. A step\u2019s\nestimator may be replaced entirely by setting the parameter with its name\nto another estimator, or a transformer removed by setting it to\n'passthrough' or None. For an example use case of Pipeline combined with\nGridSearchCV, refer to\nSelecting dimensionality reduction with Pipeline and GridSearchCV. The\nexample Pipelining: chaining a PCA and a logistic regression shows how\nto grid search on a pipeline using '__' as a separator in the parameter names. Read more in the User Guide. Added in version 0.5.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "iterable",
                                        "description": "iterable. Data to transform. Must fulfill input requirements of first step\nof the pipeline.\n"
                                    },
                                    "**params": {
                                        "type": "string",
                                        "description": "dict of str -> object. Parameters requested and accepted by steps. Each step must have\nrequested certain metadata for these parameters to be forwarded to\nthem.\n\nAdded in version 1.4: Only available if enable_metadata_routing=True. See\nMetadata Routing User Guide for more\ndetails.\n\n"
                                    }
                                },
                                "required": [
                                    "steps"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "make_union",
                        "func_desc": "Construct a FeatureUnion from the given transformers.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.pipeline.make_union.html#sklearn.pipeline.make_union",
                        "function_definitions": {
                            "function_name": "make_union",
                            "full_function": "sklearn.pipeline.make_union(*transformers, n_jobs=None, verbose=False)",
                            "function_text": "Construct a FeatureUnion from the given transformers. This is a shorthand for the FeatureUnion constructor; it does not\nrequire, and does not permit, naming the transformers. Instead, they will\nbe given names automatically based on their types. It also does not allow\nweighting.",
                            "func_text_user_guide": "sklearn.pipeline.FeatureUnion.html#sklearn.pipeline.FeatureUnion",
                            "parameter_names_desc": [
                                {
                                    "param_name": "*transformers",
                                    "param_type": "list of estimators",
                                    "param_desc": "One or more estimators.\n"
                                },
                                {
                                    "param_name": "n_jobs",
                                    "param_type": "int, default=None",
                                    "param_desc": "Number of jobs to run in parallel.\nNone means 1 unless in a joblib.parallel_backend context.\n-1 means using all processors. See Glossary\nfor more details.\n\nChanged in version v0.20: n_jobs default changed from 1 to None.\n\n"
                                },
                                {
                                    "param_name": "verbose",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If True, the time elapsed while fitting each transformer will be\nprinted as it is completed.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "make_union",
                            "descriptions": "Construct a FeatureUnion from the given transformers. This is a shorthand for the FeatureUnion constructor; it does not\nrequire, and does not permit, naming the transformers. Instead, they will\nbe given names automatically based on their types. It also does not allow\nweighting.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "*transformers": {
                                        "type": "array",
                                        "description": "list of estimators. One or more estimators.\n"
                                    },
                                    "n_jobs": {
                                        "type": "integer",
                                        "description": "int, default=None. Number of jobs to run in parallel.\nNone means 1 unless in a joblib.parallel_backend context.\n-1 means using all processors. See Glossary\nfor more details.\n\nChanged in version v0.20: n_jobs default changed from 1 to None.\n\n"
                                    },
                                    "verbose": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If True, the time elapsed while fitting each transformer will be\nprinted as it is completed.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    }
                ]
            }
        ],
        "name": "sklearn.pipeline",
        "url": "https://scikit-learn.org/stable/api/sklearn.pipeline.html"
    },
    "sklearn.preprocessing.html": {
        "functions": [
            {
                "defaults": [
                    {
                        "func_name": "Binarizer",
                        "func_desc": "Binarize data (set feature values to 0 or 1) according to a threshold.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.Binarizer.html#sklearn.preprocessing.Binarizer",
                        "function_definitions": {
                            "function_name": "Binarizer",
                            "full_function": "class sklearn.preprocessing.Binarizer(*, threshold=0.0, copy=True)",
                            "function_text": "Binarize data (set feature values to 0 or 1) according to a threshold. Values greater than the threshold map to 1, while values less than\nor equal to the threshold map to 0. With the default threshold of 0,\nonly positive values map to 1. Binarization is a common operation on text count data where the\nanalyst can decide to only consider the presence or absence of a\nfeature rather than a quantified number of occurrences for instance. It can also be used as a pre-processing step for estimators that\nconsider boolean random variables (e.g. modelled using the Bernoulli\ndistribution in a Bayesian setting). Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/preprocessing.html#preprocessing-binarization",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "The data to binarize, element by element.\nscipy.sparse matrices should be in CSR format to avoid an\nun-necessary copy.\n"
                                },
                                {
                                    "param_name": "copy",
                                    "param_type": "bool",
                                    "param_desc": "Copy the input X or not.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "Binarizer",
                            "descriptions": "Binarize data (set feature values to 0 or 1) according to a threshold. Values greater than the threshold map to 1, while values less than\nor equal to the threshold map to 0. With the default threshold of 0,\nonly positive values map to 1. Binarization is a common operation on text count data where the\nanalyst can decide to only consider the presence or absence of a\nfeature rather than a quantified number of occurrences for instance. It can also be used as a pre-processing step for estimators that\nconsider boolean random variables (e.g. modelled using the Bernoulli\ndistribution in a Bayesian setting). Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). The data to binarize, element by element.\nscipy.sparse matrices should be in CSR format to avoid an\nun-necessary copy.\n"
                                    },
                                    "copy": {
                                        "type": "boolean",
                                        "description": "bool. Copy the input X or not.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "KBinsDiscretizer",
                        "func_desc": "Bin continuous data into intervals.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.KBinsDiscretizer.html#sklearn.preprocessing.KBinsDiscretizer",
                        "function_definitions": {
                            "function_name": "KBinsDiscretizer",
                            "full_function": "class sklearn.preprocessing.KBinsDiscretizer(n_bins=5, *, encode='onehot', strategy='quantile', dtype=None, subsample=200000, random_state=None)",
                            "function_text": "Bin continuous data into intervals. Read more in the User Guide. Added in version 0.20.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/preprocessing.html#preprocessing-discretization",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples, n_features)",
                                    "param_desc": "Data to be discretized.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "KBinsDiscretizer",
                            "descriptions": "Bin continuous data into intervals. Read more in the User Guide. Added in version 0.20.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_features). Data to be discretized.\n"
                                    }
                                },
                                "required": [
                                    "n_bins=5"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "LabelBinarizer",
                        "func_desc": "Binarize labels in a one-vs-all fashion.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.LabelBinarizer.html#sklearn.preprocessing.LabelBinarizer",
                        "function_definitions": {
                            "function_name": "LabelBinarizer",
                            "full_function": "class sklearn.preprocessing.LabelBinarizer(*, neg_label=0, pos_label=1, sparse_output=False)",
                            "function_text": "Binarize labels in a one-vs-all fashion. Several regression and binary classification algorithms are\navailable in scikit-learn. A simple way to extend these algorithms\nto the multi-class classification case is to use the so-called\none-vs-all scheme. At learning time, this simply consists in learning one regressor\nor binary classifier per class. In doing so, one needs to convert\nmulti-class labels to binary labels (belong or does not belong\nto the class). LabelBinarizer makes this process easy with the\ntransform method. At prediction time, one assigns the class for which the corresponding\nmodel gave the greatest confidence. LabelBinarizer makes this easy\nwith the inverse_transform method. Read more in the User Guide.",
                            "func_text_user_guide": "#sklearn.preprocessing.LabelBinarizer.inverse_transform",
                            "parameter_names_desc": [
                                {
                                    "param_name": "y",
                                    "param_type": "{array, sparse matrix} of shape (n_samples,) or                 (n_samples, n_classes)",
                                    "param_desc": "Target values. The 2-d matrix should only contain 0 and 1,\nrepresents multilabel classification. Sparse matrix can be\nCSR, CSC, COO, DOK, or LIL.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "LabelBinarizer",
                            "descriptions": "Binarize labels in a one-vs-all fashion. Several regression and binary classification algorithms are\navailable in scikit-learn. A simple way to extend these algorithms\nto the multi-class classification case is to use the so-called\none-vs-all scheme. At learning time, this simply consists in learning one regressor\nor binary classifier per class. In doing so, one needs to convert\nmulti-class labels to binary labels (belong or does not belong\nto the class). LabelBinarizer makes this process easy with the\ntransform method. At prediction time, one assigns the class for which the corresponding\nmodel gave the greatest confidence. LabelBinarizer makes this easy\nwith the inverse_transform method. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "y": {
                                        "type": "array",
                                        "description": "{array, sparse matrix} of shape (n_samples,) or                 (n_samples, n_classes). Target values. The 2-d matrix should only contain 0 and 1,\nrepresents multilabel classification. Sparse matrix can be\nCSR, CSC, COO, DOK, or LIL.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "MaxAbsScaler",
                        "func_desc": "Scale each feature by its maximum absolute value.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.MaxAbsScaler.html#sklearn.preprocessing.MaxAbsScaler",
                        "function_definitions": {
                            "function_name": "MaxAbsScaler",
                            "full_function": "class sklearn.preprocessing.MaxAbsScaler(*, copy=True)",
                            "function_text": "Scale each feature by its maximum absolute value. This estimator scales and translates each feature individually such\nthat the maximal absolute value of each feature in the\ntraining set will be 1.0. It does not shift/center the data, and\nthus does not destroy any sparsity. This scaler can also be applied to sparse CSR or CSC matrices. MaxAbsScaler doesn\u2019t reduce the effect of outliers; it only linearly\nscales them down. For an example visualization, refer to Compare\nMaxAbsScaler with other scalers. Added in version 0.17.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/auto_examples/preprocessing/plot_all_scaling.html#plot-all-scaling-max-abs-scaler-section",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "The data that should be scaled.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "MaxAbsScaler",
                            "descriptions": "Scale each feature by its maximum absolute value. This estimator scales and translates each feature individually such\nthat the maximal absolute value of each feature in the\ntraining set will be 1.0. It does not shift/center the data, and\nthus does not destroy any sparsity. This scaler can also be applied to sparse CSR or CSC matrices. MaxAbsScaler doesn\u2019t reduce the effect of outliers; it only linearly\nscales them down. For an example visualization, refer to Compare\nMaxAbsScaler with other scalers. Added in version 0.17.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). The data that should be scaled.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "MultiLabelBinarizer",
                        "func_desc": "Transform between iterable of iterables and a multilabel format.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.MultiLabelBinarizer.html#sklearn.preprocessing.MultiLabelBinarizer",
                        "function_definitions": {
                            "function_name": "MultiLabelBinarizer",
                            "full_function": "class sklearn.preprocessing.MultiLabelBinarizer(*, classes=None, sparse_output=False)",
                            "function_text": "Transform between iterable of iterables and a multilabel format. Although a list of sets or tuples is a very intuitive format for multilabel\ndata, it is unwieldy to process. This transformer converts between this\nintuitive format and the supported multilabel format: a (samples x classes)\nbinary matrix indicating the presence of a class label.",
                            "func_text_user_guide": "sklearn.preprocessing.OneHotEncoder.html#sklearn.preprocessing.OneHotEncoder",
                            "parameter_names_desc": [
                                {
                                    "param_name": "y",
                                    "param_type": "iterable of iterables",
                                    "param_desc": "A set of labels (any orderable and hashable object) for each\nsample. If the classes parameter is set, y will not be\niterated.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "MultiLabelBinarizer",
                            "descriptions": "Transform between iterable of iterables and a multilabel format. Although a list of sets or tuples is a very intuitive format for multilabel\ndata, it is unwieldy to process. This transformer converts between this\nintuitive format and the supported multilabel format: a (samples x classes)\nbinary matrix indicating the presence of a class label.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "y": {
                                        "type": "iterable of iterables",
                                        "description": "iterable of iterables. A set of labels (any orderable and hashable object) for each\nsample. If the classes parameter is set, y will not be\niterated.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "OneHotEncoder",
                        "func_desc": "Encode categorical features as a one-hot numeric array.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.OneHotEncoder.html#sklearn.preprocessing.OneHotEncoder",
                        "function_definitions": {
                            "function_name": "OneHotEncoder",
                            "full_function": "class sklearn.preprocessing.OneHotEncoder(*, categories='auto', drop=None, sparse_output=True, dtype=<class 'numpy.float64'>, handle_unknown='error', min_frequency=None, max_categories=None, feature_name_combiner='concat')",
                            "function_text": "Encode categorical features as a one-hot numeric array. The input to this transformer should be an array-like of integers or\nstrings, denoting the values taken on by categorical (discrete) features.\nThe features are encoded using a one-hot (aka \u2018one-of-K\u2019 or \u2018dummy\u2019)\nencoding scheme. This creates a binary column for each category and\nreturns a sparse matrix or dense array (depending on the sparse_output\nparameter). By default, the encoder derives the categories based on the unique values\nin each feature. Alternatively, you can also specify the categories\nmanually. This encoding is needed for feeding categorical data to many scikit-learn\nestimators, notably linear models and SVMs with the standard kernels. Note: a one-hot encoding of y labels should use a LabelBinarizer\ninstead. Read more in the User Guide.\nFor a comparison of different encoders, refer to:\nComparing Target Encoder with Other Encoders.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/preprocessing.html#preprocessing-categorical-features",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples, n_features)",
                                    "param_desc": "The data to encode.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "OneHotEncoder",
                            "descriptions": "Encode categorical features as a one-hot numeric array. The input to this transformer should be an array-like of integers or\nstrings, denoting the values taken on by categorical (discrete) features.\nThe features are encoded using a one-hot (aka \u2018one-of-K\u2019 or \u2018dummy\u2019)\nencoding scheme. This creates a binary column for each category and\nreturns a sparse matrix or dense array (depending on the sparse_output\nparameter). By default, the encoder derives the categories based on the unique values\nin each feature. Alternatively, you can also specify the categories\nmanually. This encoding is needed for feeding categorical data to many scikit-learn\nestimators, notably linear models and SVMs with the standard kernels. Note: a one-hot encoding of y labels should use a LabelBinarizer\ninstead. Read more in the User Guide.\nFor a comparison of different encoders, refer to:\nComparing Target Encoder with Other Encoders.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_features). The data to encode.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "PolynomialFeatures",
                        "func_desc": "Generate polynomial and interaction features.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.PolynomialFeatures.html#sklearn.preprocessing.PolynomialFeatures",
                        "function_definitions": {
                            "function_name": "PolynomialFeatures",
                            "full_function": "class sklearn.preprocessing.PolynomialFeatures(degree=2, *, interaction_only=False, include_bias=True, order='C')",
                            "function_text": "Generate polynomial and interaction features. Generate a new feature matrix consisting of all polynomial combinations\nof the features with degree less than or equal to the specified degree.\nFor example, if an input sample is two dimensional and of the form\n[a, b], the degree-2 polynomial features are [1, a, b, a^2, ab, b^2]. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/preprocessing.html#polynomial-features",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "The data to transform, row by row.\nPrefer CSR over CSC for sparse input (for speed), but CSC is\nrequired if the degree is 4 or higher. If the degree is less than\n4 and the input format is CSC, it will be converted to CSR, have\nits polynomial features generated, then converted back to CSC.\nIf the degree is 2 or 3, the method described in \u201cLeveraging\nSparsity to Speed Up Polynomial Feature Expansions of CSR Matrices\nUsing K-Simplex Numbers\u201d by Andrew Nystrom and John Hughes is\nused, which is much faster than the method used on CSC input. For\nthis reason, a CSC input will be converted to CSR, and the output\nwill be converted back to CSC prior to being returned, hence the\npreference of CSR.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "PolynomialFeatures",
                            "descriptions": "Generate polynomial and interaction features. Generate a new feature matrix consisting of all polynomial combinations\nof the features with degree less than or equal to the specified degree.\nFor example, if an input sample is two dimensional and of the form\n[a, b], the degree-2 polynomial features are [1, a, b, a^2, ab, b^2]. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). The data to transform, row by row.\nPrefer CSR over CSC for sparse input (for speed), but CSC is\nrequired if the degree is 4 or higher. If the degree is less than\n4 and the input format is CSC, it will be converted to CSR, have\nits polynomial features generated, then converted back to CSC.\nIf the degree is 2 or 3, the method described in \u201cLeveraging\nSparsity to Speed Up Polynomial Feature Expansions of CSR Matrices\nUsing K-Simplex Numbers\u201d by Andrew Nystrom and John Hughes is\nused, which is much faster than the method used on CSC input. For\nthis reason, a CSC input will be converted to CSR, and the output\nwill be converted back to CSC prior to being returned, hence the\npreference of CSR.\n"
                                    }
                                },
                                "required": [
                                    "degree=2"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "QuantileTransformer",
                        "func_desc": "Transform features using quantiles information.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.QuantileTransformer.html#sklearn.preprocessing.QuantileTransformer",
                        "function_definitions": {
                            "function_name": "QuantileTransformer",
                            "full_function": "class sklearn.preprocessing.QuantileTransformer(*, n_quantiles=1000, output_distribution='uniform', ignore_implicit_zeros=False, subsample=10000, random_state=None, copy=True)",
                            "function_text": "Transform features using quantiles information. This method transforms the features to follow a uniform or a normal\ndistribution. Therefore, for a given feature, this transformation tends\nto spread out the most frequent values. It also reduces the impact of\n(marginal) outliers: this is therefore a robust preprocessing scheme. The transformation is applied on each feature independently. First an\nestimate of the cumulative distribution function of a feature is\nused to map the original values to a uniform distribution. The obtained\nvalues are then mapped to the desired output distribution using the\nassociated quantile function. Features values of new/unseen data that fall\nbelow or above the fitted range will be mapped to the bounds of the output\ndistribution. Note that this transform is non-linear. It may distort linear\ncorrelations between variables measured at the same scale but renders\nvariables measured at different scales more directly comparable. For example visualizations, refer to Compare QuantileTransformer with\nother scalers. Read more in the User Guide. Added in version 0.19.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/auto_examples/preprocessing/plot_all_scaling.html#plot-all-scaling-quantile-transformer-section",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "The data used to scale along the features axis. If a sparse\nmatrix is provided, it will be converted into a sparse\ncsc_matrix. Additionally, the sparse matrix needs to be\nnonnegative if ignore_implicit_zeros is False.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "QuantileTransformer",
                            "descriptions": "Transform features using quantiles information. This method transforms the features to follow a uniform or a normal\ndistribution. Therefore, for a given feature, this transformation tends\nto spread out the most frequent values. It also reduces the impact of\n(marginal) outliers: this is therefore a robust preprocessing scheme. The transformation is applied on each feature independently. First an\nestimate of the cumulative distribution function of a feature is\nused to map the original values to a uniform distribution. The obtained\nvalues are then mapped to the desired output distribution using the\nassociated quantile function. Features values of new/unseen data that fall\nbelow or above the fitted range will be mapped to the bounds of the output\ndistribution. Note that this transform is non-linear. It may distort linear\ncorrelations between variables measured at the same scale but renders\nvariables measured at different scales more directly comparable. For example visualizations, refer to Compare QuantileTransformer with\nother scalers. Read more in the User Guide. Added in version 0.19.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). The data used to scale along the features axis. If a sparse\nmatrix is provided, it will be converted into a sparse\ncsc_matrix. Additionally, the sparse matrix needs to be\nnonnegative if ignore_implicit_zeros is False.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "SplineTransformer",
                        "func_desc": "Generate univariate B-spline bases for features.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.SplineTransformer.html#sklearn.preprocessing.SplineTransformer",
                        "function_definitions": {
                            "function_name": "SplineTransformer",
                            "full_function": "class sklearn.preprocessing.SplineTransformer(n_knots=5, degree=3, *, knots='uniform', extrapolation='constant', include_bias=True, order='C', sparse_output=False)",
                            "function_text": "Generate univariate B-spline bases for features. Generate a new feature matrix consisting of\nn_splines=n_knots + degree - 1 (n_knots - 1 for\nextrapolation=\"periodic\") spline basis functions\n(B-splines) of polynomial order=`degree` for each feature. In order to learn more about the SplineTransformer class go to:\nTime-related feature engineering Read more in the User Guide. Added in version 1.0.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/auto_examples/applications/plot_cyclical_feature_engineering.html#sphx-glr-auto-examples-applications-plot-cyclical-feature-engineering-py",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples, n_features)",
                                    "param_desc": "The data to transform.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "SplineTransformer",
                            "descriptions": "Generate univariate B-spline bases for features. Generate a new feature matrix consisting of\nn_splines=n_knots + degree - 1 (n_knots - 1 for\nextrapolation=\"periodic\") spline basis functions\n(B-splines) of polynomial order=`degree` for each feature. In order to learn more about the SplineTransformer class go to:\nTime-related feature engineering Read more in the User Guide. Added in version 1.0.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_features). The data to transform.\n"
                                    }
                                },
                                "required": [
                                    "n_knots=5",
                                    "degree=3"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "TargetEncoder",
                        "func_desc": "Target Encoder for regression and classification targets.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.TargetEncoder.html#sklearn.preprocessing.TargetEncoder",
                        "function_definitions": {
                            "function_name": "TargetEncoder",
                            "full_function": "class sklearn.preprocessing.TargetEncoder(categories='auto', target_type='auto', smooth='auto', cv=5, shuffle=True, random_state=None)",
                            "function_text": "Target Encoder for regression and classification targets. Each category is encoded based on a shrunk estimate of the average target\nvalues for observations belonging to the category. The encoding scheme mixes\nthe global target mean with the target mean conditioned on the value of the\ncategory (see [MIC]). When the target type is \u201cmulticlass\u201d, encodings are based\non the conditional probability estimate for each class. The target is first\nbinarized using the \u201cone-vs-all\u201d scheme via\nLabelBinarizer, then the average target\nvalue for each class and each category is used for encoding, resulting in\nn_features * n_classes encoded output features. TargetEncoder considers missing values, such as np.nan or None,\nas another category and encodes them like any other category. Categories\nthat are not seen during fit are encoded with the target mean, i.e.\ntarget_mean_. For a demo on the importance of the TargetEncoder internal cross-fitting,\nsee\nTarget Encoder\u2019s Internal Cross fitting.\nFor a comparison of different encoders, refer to\nComparing Target Encoder with Other Encoders. Read\nmore in the User Guide. Note fit(X, y).transform(X) does not equal fit_transform(X, y) because a\ncross fitting scheme is used in fit_transform for encoding.\nSee the User Guide for details. Added in version 1.3.",
                            "func_text_user_guide": "#rf862141e5a0c-mic",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples, n_features)",
                                    "param_desc": "The data to determine the categories of each feature.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "TargetEncoder",
                            "descriptions": "Target Encoder for regression and classification targets. Each category is encoded based on a shrunk estimate of the average target\nvalues for observations belonging to the category. The encoding scheme mixes\nthe global target mean with the target mean conditioned on the value of the\ncategory (see [MIC]). When the target type is \u201cmulticlass\u201d, encodings are based\non the conditional probability estimate for each class. The target is first\nbinarized using the \u201cone-vs-all\u201d scheme via\nLabelBinarizer, then the average target\nvalue for each class and each category is used for encoding, resulting in\nn_features * n_classes encoded output features. TargetEncoder considers missing values, such as np.nan or None,\nas another category and encodes them like any other category. Categories\nthat are not seen during fit are encoded with the target mean, i.e.\ntarget_mean_. For a demo on the importance of the TargetEncoder internal cross-fitting,\nsee\nTarget Encoder\u2019s Internal Cross fitting.\nFor a comparison of different encoders, refer to\nComparing Target Encoder with Other Encoders. Read\nmore in the User Guide. Note fit(X, y).transform(X) does not equal fit_transform(X, y) because a\ncross fitting scheme is used in fit_transform for encoding.\nSee the User Guide for details. Added in version 1.3.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_features). The data to determine the categories of each feature.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "binarize",
                        "func_desc": "Boolean thresholding of array-like or scipy.sparse matrix.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.binarize.html#sklearn.preprocessing.binarize",
                        "function_definitions": {
                            "function_name": "binarize",
                            "full_function": "sklearn.preprocessing.binarize(X, *, threshold=0.0, copy=True)",
                            "function_text": "Boolean thresholding of array-like or scipy.sparse matrix. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/preprocessing.html#preprocessing-binarization",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "The data to binarize, element by element.\nscipy.sparse matrices should be in CSR or CSC format to avoid an\nun-necessary copy.\n"
                                },
                                {
                                    "param_name": "threshold",
                                    "param_type": "float, default=0.0",
                                    "param_desc": "Feature values below or equal to this are replaced by 0, above it by 1.\nThreshold may not be less than 0 for operations on sparse matrices.\n"
                                },
                                {
                                    "param_name": "copy",
                                    "param_type": "bool, default=True",
                                    "param_desc": "If False, try to avoid a copy and binarize in place.\nThis is not guaranteed to always work in place; e.g. if the data is\na numpy array with an object dtype, a copy will be returned even with\ncopy=False.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "binarize",
                            "descriptions": "Boolean thresholding of array-like or scipy.sparse matrix. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). The data to binarize, element by element.\nscipy.sparse matrices should be in CSR or CSC format to avoid an\nun-necessary copy.\n"
                                    },
                                    "threshold": {
                                        "type": "float",
                                        "description": "float, default=0.0. Feature values below or equal to this are replaced by 0, above it by 1.\nThreshold may not be less than 0 for operations on sparse matrices.\n"
                                    },
                                    "copy": {
                                        "type": "boolean",
                                        "description": "bool, default=True. If False, try to avoid a copy and binarize in place.\nThis is not guaranteed to always work in place; e.g. if the data is\na numpy array with an object dtype, a copy will be returned even with\ncopy=False.\n"
                                    }
                                },
                                "required": [
                                    "X"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "maxabs_scale",
                        "func_desc": "Scale each feature to the [-1, 1] range without breaking the sparsity.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.maxabs_scale.html#sklearn.preprocessing.maxabs_scale",
                        "function_definitions": {
                            "function_name": "maxabs_scale",
                            "full_function": "sklearn.preprocessing.maxabs_scale(X, *, axis=0, copy=True)",
                            "function_text": "Scale each feature to the [-1, 1] range without breaking the sparsity. This estimator scales each feature individually such\nthat the maximal absolute value of each feature in the\ntraining set will be 1.0. This scaler can also be applied to sparse CSR or CSC matrices.",
                            "func_text_user_guide": "#sklearn.preprocessing.maxabs_scale",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "The data.\n"
                                },
                                {
                                    "param_name": "axis",
                                    "param_type": "{0, 1}, default=0",
                                    "param_desc": "Axis used to scale along. If 0, independently scale each feature,\notherwise (if 1) scale each sample.\n"
                                },
                                {
                                    "param_name": "copy",
                                    "param_type": "bool, default=True",
                                    "param_desc": "If False, try to avoid a copy and scale in place.\nThis is not guaranteed to always work in place; e.g. if the data is\na numpy array with an int dtype, a copy will be returned even with\ncopy=False.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "maxabs_scale",
                            "descriptions": "Scale each feature to the [-1, 1] range without breaking the sparsity. This estimator scales each feature individually such\nthat the maximal absolute value of each feature in the\ntraining set will be 1.0. This scaler can also be applied to sparse CSR or CSC matrices.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). The data.\n"
                                    },
                                    "axis": {
                                        "type": "{0, 1}, default=0",
                                        "description": "{0, 1}, default=0. Axis used to scale along. If 0, independently scale each feature,\notherwise (if 1) scale each sample.\n"
                                    },
                                    "copy": {
                                        "type": "boolean",
                                        "description": "bool, default=True. If False, try to avoid a copy and scale in place.\nThis is not guaranteed to always work in place; e.g. if the data is\na numpy array with an int dtype, a copy will be returned even with\ncopy=False.\n"
                                    }
                                },
                                "required": [
                                    "X"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "normalize",
                        "func_desc": "Scale input vectors individually to unit norm (vector length).",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.normalize.html#sklearn.preprocessing.normalize",
                        "function_definitions": {
                            "function_name": "normalize",
                            "full_function": "sklearn.preprocessing.normalize(X, norm='l2', *, axis=1, copy=True, return_norm=False)",
                            "function_text": "Scale input vectors individually to unit norm (vector length). Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/preprocessing.html#preprocessing-normalization",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "The data to normalize, element by element.\nscipy.sparse matrices should be in CSR format to avoid an\nun-necessary copy.\n"
                                },
                                {
                                    "param_name": "norm",
                                    "param_type": "{\u2018l1\u2019, \u2018l2\u2019, \u2018max\u2019}, default=\u2019l2\u2019",
                                    "param_desc": "The norm to use to normalize each non zero sample (or each non-zero\nfeature if axis is 0).\n"
                                },
                                {
                                    "param_name": "axis",
                                    "param_type": "{0, 1}, default=1",
                                    "param_desc": "Define axis used to normalize the data along. If 1, independently\nnormalize each sample, otherwise (if 0) normalize each feature.\n"
                                },
                                {
                                    "param_name": "copy",
                                    "param_type": "bool, default=True",
                                    "param_desc": "If False, try to avoid a copy and normalize in place.\nThis is not guaranteed to always work in place; e.g. if the data is\na numpy array with an int dtype, a copy will be returned even with\ncopy=False.\n"
                                },
                                {
                                    "param_name": "return_norm",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Whether to return the computed norms.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "normalize",
                            "descriptions": "Scale input vectors individually to unit norm (vector length). Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). The data to normalize, element by element.\nscipy.sparse matrices should be in CSR format to avoid an\nun-necessary copy.\n"
                                    },
                                    "norm": {
                                        "type": "string",
                                        "enum": [
                                            "l1",
                                            " l2",
                                            " max"
                                        ],
                                        "description": "{\u2018l1\u2019, \u2018l2\u2019, \u2018max\u2019}, default=\u2019l2\u2019. The norm to use to normalize each non zero sample (or each non-zero\nfeature if axis is 0).\n"
                                    },
                                    "axis": {
                                        "type": "{0, 1}, default=1",
                                        "description": "{0, 1}, default=1. Define axis used to normalize the data along. If 1, independently\nnormalize each sample, otherwise (if 0) normalize each feature.\n"
                                    },
                                    "copy": {
                                        "type": "boolean",
                                        "description": "bool, default=True. If False, try to avoid a copy and normalize in place.\nThis is not guaranteed to always work in place; e.g. if the data is\na numpy array with an int dtype, a copy will be returned even with\ncopy=False.\n"
                                    },
                                    "return_norm": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Whether to return the computed norms.\n"
                                    }
                                },
                                "required": [
                                    "X",
                                    "norm='l2'"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "quantile_transform",
                        "func_desc": "Transform features using quantiles information.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.quantile_transform.html#sklearn.preprocessing.quantile_transform",
                        "function_definitions": {
                            "function_name": "quantile_transform",
                            "full_function": "sklearn.preprocessing.quantile_transform(X, *, axis=0, n_quantiles=1000, output_distribution='uniform', ignore_implicit_zeros=False, subsample=100000, random_state=None, copy=True)",
                            "function_text": "Transform features using quantiles information. This method transforms the features to follow a uniform or a normal\ndistribution. Therefore, for a given feature, this transformation tends\nto spread out the most frequent values. It also reduces the impact of\n(marginal) outliers: this is therefore a robust preprocessing scheme. The transformation is applied on each feature independently. First an\nestimate of the cumulative distribution function of a feature is\nused to map the original values to a uniform distribution. The obtained\nvalues are then mapped to the desired output distribution using the\nassociated quantile function. Features values of new/unseen data that fall\nbelow or above the fitted range will be mapped to the bounds of the output\ndistribution. Note that this transform is non-linear. It may distort linear\ncorrelations between variables measured at the same scale but renders\nvariables measured at different scales more directly comparable. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/preprocessing.html#preprocessing-transformer",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "The data to transform.\n"
                                },
                                {
                                    "param_name": "axis",
                                    "param_type": "int, default=0",
                                    "param_desc": "Axis used to compute the means and standard deviations along. If 0,\ntransform each feature, otherwise (if 1) transform each sample.\n"
                                },
                                {
                                    "param_name": "n_quantiles",
                                    "param_type": "int, default=1000 or n_samples",
                                    "param_desc": "Number of quantiles to be computed. It corresponds to the number\nof landmarks used to discretize the cumulative distribution function.\nIf n_quantiles is larger than the number of samples, n_quantiles is set\nto the number of samples as a larger number of quantiles does not give\na better approximation of the cumulative distribution function\nestimator.\n"
                                },
                                {
                                    "param_name": "output_distribution",
                                    "param_type": "{\u2018uniform\u2019, \u2018normal\u2019}, default=\u2019uniform\u2019",
                                    "param_desc": "Marginal distribution for the transformed data. The choices are\n\u2018uniform\u2019 (default) or \u2018normal\u2019.\n"
                                },
                                {
                                    "param_name": "ignore_implicit_zeros",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Only applies to sparse matrices. If True, the sparse entries of the\nmatrix are discarded to compute the quantile statistics. If False,\nthese entries are treated as zeros.\n"
                                },
                                {
                                    "param_name": "subsample",
                                    "param_type": "int or None, default=1e5",
                                    "param_desc": "Maximum number of samples used to estimate the quantiles for\ncomputational efficiency. Note that the subsampling procedure may\ndiffer for value-identical sparse and dense matrices.\nDisable subsampling by setting subsample=None.\n\nAdded in version 1.5: The option None to disable subsampling was added.\n\n"
                                },
                                {
                                    "param_name": "random_state",
                                    "param_type": "int, RandomState instance or None, default=None",
                                    "param_desc": "Determines random number generation for subsampling and smoothing\nnoise.\nPlease see subsample for more details.\nPass an int for reproducible results across multiple function calls.\nSee Glossary.\n"
                                },
                                {
                                    "param_name": "copy",
                                    "param_type": "bool, default=True",
                                    "param_desc": "If False, try to avoid a copy and transform in place.\nThis is not guaranteed to always work in place; e.g. if the data is\na numpy array with an int dtype, a copy will be returned even with\ncopy=False.\n\nChanged in version 0.23: The default value of copy changed from False to True in 0.23.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "quantile_transform",
                            "descriptions": "Transform features using quantiles information. This method transforms the features to follow a uniform or a normal\ndistribution. Therefore, for a given feature, this transformation tends\nto spread out the most frequent values. It also reduces the impact of\n(marginal) outliers: this is therefore a robust preprocessing scheme. The transformation is applied on each feature independently. First an\nestimate of the cumulative distribution function of a feature is\nused to map the original values to a uniform distribution. The obtained\nvalues are then mapped to the desired output distribution using the\nassociated quantile function. Features values of new/unseen data that fall\nbelow or above the fitted range will be mapped to the bounds of the output\ndistribution. Note that this transform is non-linear. It may distort linear\ncorrelations between variables measured at the same scale but renders\nvariables measured at different scales more directly comparable. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). The data to transform.\n"
                                    },
                                    "axis": {
                                        "type": "integer",
                                        "description": "int, default=0. Axis used to compute the means and standard deviations along. If 0,\ntransform each feature, otherwise (if 1) transform each sample.\n"
                                    },
                                    "n_quantiles": {
                                        "type": "integer",
                                        "description": "int, default=1000 or n_samples. Number of quantiles to be computed. It corresponds to the number\nof landmarks used to discretize the cumulative distribution function.\nIf n_quantiles is larger than the number of samples, n_quantiles is set\nto the number of samples as a larger number of quantiles does not give\na better approximation of the cumulative distribution function\nestimator.\n"
                                    },
                                    "output_distribution": {
                                        "type": "string",
                                        "enum": [
                                            "uniform",
                                            " normal"
                                        ],
                                        "description": "{\u2018uniform\u2019, \u2018normal\u2019}, default=\u2019uniform\u2019. Marginal distribution for the transformed data. The choices are\n\u2018uniform\u2019 (default) or \u2018normal\u2019.\n"
                                    },
                                    "ignore_implicit_zeros": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Only applies to sparse matrices. If True, the sparse entries of the\nmatrix are discarded to compute the quantile statistics. If False,\nthese entries are treated as zeros.\n"
                                    },
                                    "subsample": {
                                        "type": "integer",
                                        "description": "int or None, default=1e5. Maximum number of samples used to estimate the quantiles for\ncomputational efficiency. Note that the subsampling procedure may\ndiffer for value-identical sparse and dense matrices.\nDisable subsampling by setting subsample=None.\n\nAdded in version 1.5: The option None to disable subsampling was added.\n\n"
                                    },
                                    "random_state": {
                                        "type": "integer",
                                        "description": "int, RandomState instance or None, default=None. Determines random number generation for subsampling and smoothing\nnoise.\nPlease see subsample for more details.\nPass an int for reproducible results across multiple function calls.\nSee Glossary.\n"
                                    },
                                    "copy": {
                                        "type": "boolean",
                                        "description": "bool, default=True. If False, try to avoid a copy and transform in place.\nThis is not guaranteed to always work in place; e.g. if the data is\na numpy array with an int dtype, a copy will be returned even with\ncopy=False.\n\nChanged in version 0.23: The default value of copy changed from False to True in 0.23.\n\n"
                                    }
                                },
                                "required": [
                                    "X"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "scale",
                        "func_desc": "Standardize a dataset along any axis.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.scale.html#sklearn.preprocessing.scale",
                        "function_definitions": {
                            "function_name": "scale",
                            "full_function": "sklearn.preprocessing.scale(X, *, axis=0, with_mean=True, with_std=True, copy=True)",
                            "function_text": "Standardize a dataset along any axis. Center to the mean and component wise scale to unit variance. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/preprocessing.html#preprocessing-scaler",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "The data to center and scale.\n"
                                },
                                {
                                    "param_name": "axis",
                                    "param_type": "{0, 1}, default=0",
                                    "param_desc": "Axis used to compute the means and standard deviations along. If 0,\nindependently standardize each feature, otherwise (if 1) standardize\neach sample.\n"
                                },
                                {
                                    "param_name": "with_mean",
                                    "param_type": "bool, default=True",
                                    "param_desc": "If True, center the data before scaling.\n"
                                },
                                {
                                    "param_name": "with_std",
                                    "param_type": "bool, default=True",
                                    "param_desc": "If True, scale the data to unit variance (or equivalently,\nunit standard deviation).\n"
                                },
                                {
                                    "param_name": "copy",
                                    "param_type": "bool, default=True",
                                    "param_desc": "If False, try to avoid a copy and scale in place.\nThis is not guaranteed to always work in place; e.g. if the data is\na numpy array with an int dtype, a copy will be returned even with\ncopy=False.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "scale",
                            "descriptions": "Standardize a dataset along any axis. Center to the mean and component wise scale to unit variance. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). The data to center and scale.\n"
                                    },
                                    "axis": {
                                        "type": "{0, 1}, default=0",
                                        "description": "{0, 1}, default=0. Axis used to compute the means and standard deviations along. If 0,\nindependently standardize each feature, otherwise (if 1) standardize\neach sample.\n"
                                    },
                                    "with_mean": {
                                        "type": "boolean",
                                        "description": "bool, default=True. If True, center the data before scaling.\n"
                                    },
                                    "with_std": {
                                        "type": "boolean",
                                        "description": "bool, default=True. If True, scale the data to unit variance (or equivalently,\nunit standard deviation).\n"
                                    },
                                    "copy": {
                                        "type": "boolean",
                                        "description": "bool, default=True. If False, try to avoid a copy and scale in place.\nThis is not guaranteed to always work in place; e.g. if the data is\na numpy array with an int dtype, a copy will be returned even with\ncopy=False.\n"
                                    }
                                },
                                "required": [
                                    "X"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "FunctionTransformer",
                        "func_desc": "Constructs a transformer from an arbitrary callable.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.FunctionTransformer.html#sklearn.preprocessing.FunctionTransformer",
                        "function_definitions": {
                            "function_name": "FunctionTransformer",
                            "full_function": "class sklearn.preprocessing.FunctionTransformer(func=None, inverse_func=None, *, validate=False, accept_sparse=False, check_inverse=True, feature_names_out=None, kw_args=None, inv_kw_args=None)",
                            "function_text": "Constructs a transformer from an arbitrary callable. A FunctionTransformer forwards its X (and optionally y) arguments to a\nuser-defined function or function object and returns the result of this\nfunction. This is useful for stateless transformations such as taking the\nlog of frequencies, doing custom scaling, etc. Note: If a lambda is used as the function, then the resulting\ntransformer will not be pickleable. Added in version 0.17. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/preprocessing.html#function-transformer",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse-matrix} of shape (n_samples, n_features)                 if validate=True else any object that func can handle",
                                    "param_desc": "Input array.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "FunctionTransformer",
                            "descriptions": "Constructs a transformer from an arbitrary callable. A FunctionTransformer forwards its X (and optionally y) arguments to a\nuser-defined function or function object and returns the result of this\nfunction. This is useful for stateless transformations such as taking the\nlog of frequencies, doing custom scaling, etc. Note: If a lambda is used as the function, then the resulting\ntransformer will not be pickleable. Added in version 0.17. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "object",
                                        "description": "{array-like, sparse-matrix} of shape (n_samples, n_features)                 if validate=True else any object that func can handle. Input array.\n"
                                    }
                                },
                                "required": [
                                    "func=None",
                                    "inverse_func=None"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "KernelCenterer",
                        "func_desc": "Center an arbitrary kernel matrix \\(K\\).",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.KernelCenterer.html#sklearn.preprocessing.KernelCenterer",
                        "function_definitions": {
                            "function_name": "KernelCenterer",
                            "full_function": "class sklearn.preprocessing.KernelCenterer",
                            "function_text": "Center an arbitrary kernel matrix \\(K\\). Let define a kernel \\(K\\) such that: \\(\\phi(X)\\) is a function mapping of rows of \\(X\\) to a\nHilbert space and \\(K\\) is of shape (n_samples, n_samples). This class allows to compute \\(\\tilde{K}(X, Y)\\) such that: \\(\\tilde{\\phi}(X)\\) is the centered mapped data in the Hilbert\nspace. KernelCenterer centers the features without explicitly computing the\nmapping \\(\\phi(\\cdot)\\). Working with centered kernels is sometime\nexpected when dealing with algebra computation such as eigendecomposition\nfor KernelPCA for instance. Read more in the User Guide.",
                            "func_text_user_guide": "sklearn.decomposition.KernelPCA.html#sklearn.decomposition.KernelPCA",
                            "parameter_names_desc": []
                        },
                        "function_calling": {}
                    },
                    {
                        "func_name": "LabelEncoder",
                        "func_desc": "Encode target labels with value between 0 and n_classes-1.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.LabelEncoder.html#sklearn.preprocessing.LabelEncoder",
                        "function_definitions": {
                            "function_name": "LabelEncoder",
                            "full_function": "class sklearn.preprocessing.LabelEncoder",
                            "function_text": "Encode target labels with value between 0 and n_classes-1. This transformer should be used to encode target values, i.e. y, and\nnot the input X. Read more in the User Guide. Added in version 0.12.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/preprocessing_targets.html#preprocessing-targets",
                            "parameter_names_desc": []
                        },
                        "function_calling": {}
                    },
                    {
                        "func_name": "MinMaxScaler",
                        "func_desc": "Transform features by scaling each feature to a given range.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.MinMaxScaler.html#sklearn.preprocessing.MinMaxScaler",
                        "function_definitions": {
                            "function_name": "MinMaxScaler",
                            "full_function": "class sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1), *, copy=True, clip=False)",
                            "function_text": "Transform features by scaling each feature to a given range. This estimator scales and translates each feature individually such\nthat it is in the given range on the training set, e.g. between\nzero and one. The transformation is given by: where min, max = feature_range. This transformation is often used as an alternative to zero mean,\nunit variance scaling. MinMaxScaler doesn\u2019t reduce the effect of outliers, but it linearly\nscales them down into a fixed range, where the largest occurring data point\ncorresponds to the maximum value and the smallest one corresponds to the\nminimum value. For an example visualization, refer to Compare\nMinMaxScaler with other scalers. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/auto_examples/preprocessing/plot_all_scaling.html#plot-all-scaling-minmax-scaler-section",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples, n_features)",
                                    "param_desc": "Input data that will be transformed.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "MinMaxScaler",
                            "descriptions": "Transform features by scaling each feature to a given range. This estimator scales and translates each feature individually such\nthat it is in the given range on the training set, e.g. between\nzero and one. The transformation is given by: where min, max = feature_range. This transformation is often used as an alternative to zero mean,\nunit variance scaling. MinMaxScaler doesn\u2019t reduce the effect of outliers, but it linearly\nscales them down into a fixed range, where the largest occurring data point\ncorresponds to the maximum value and the smallest one corresponds to the\nminimum value. For an example visualization, refer to Compare\nMinMaxScaler with other scalers. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_features). Input data that will be transformed.\n"
                                    }
                                },
                                "required": [
                                    "feature_range=(0",
                                    "1)"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "Normalizer",
                        "func_desc": "Normalize samples individually to unit norm.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.Normalizer.html#sklearn.preprocessing.Normalizer",
                        "function_definitions": {
                            "function_name": "Normalizer",
                            "full_function": "class sklearn.preprocessing.Normalizer(norm='l2', *, copy=True)",
                            "function_text": "Normalize samples individually to unit norm. Each sample (i.e. each row of the data matrix) with at least one\nnon zero component is rescaled independently of other samples so\nthat its norm (l1, l2 or inf) equals one. This transformer is able to work both with dense numpy arrays and\nscipy.sparse matrix (use CSR format if you want to avoid the burden of\na copy / conversion). Scaling inputs to unit norms is a common operation for text\nclassification or clustering for instance. For instance the dot\nproduct of two l2-normalized TF-IDF vectors is the cosine similarity\nof the vectors and is the base similarity metric for the Vector\nSpace Model commonly used by the Information Retrieval community. For an example visualization, refer to Compare Normalizer with other\nscalers. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/auto_examples/preprocessing/plot_all_scaling.html#plot-all-scaling-normalizer-section",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "The data to normalize, row by row. scipy.sparse matrices should be\nin CSR format to avoid an un-necessary copy.\n"
                                },
                                {
                                    "param_name": "copy",
                                    "param_type": "bool, default=None",
                                    "param_desc": "Copy the input X or not.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "Normalizer",
                            "descriptions": "Normalize samples individually to unit norm. Each sample (i.e. each row of the data matrix) with at least one\nnon zero component is rescaled independently of other samples so\nthat its norm (l1, l2 or inf) equals one. This transformer is able to work both with dense numpy arrays and\nscipy.sparse matrix (use CSR format if you want to avoid the burden of\na copy / conversion). Scaling inputs to unit norms is a common operation for text\nclassification or clustering for instance. For instance the dot\nproduct of two l2-normalized TF-IDF vectors is the cosine similarity\nof the vectors and is the base similarity metric for the Vector\nSpace Model commonly used by the Information Retrieval community. For an example visualization, refer to Compare Normalizer with other\nscalers. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). The data to normalize, row by row. scipy.sparse matrices should be\nin CSR format to avoid an un-necessary copy.\n"
                                    },
                                    "copy": {
                                        "type": "boolean",
                                        "description": "bool, default=None. Copy the input X or not.\n"
                                    }
                                },
                                "required": [
                                    "norm='l2'"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "OrdinalEncoder",
                        "func_desc": "Encode categorical features as an integer array.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.OrdinalEncoder.html#sklearn.preprocessing.OrdinalEncoder",
                        "function_definitions": {
                            "function_name": "OrdinalEncoder",
                            "full_function": "class sklearn.preprocessing.OrdinalEncoder(*, categories='auto', dtype=<class 'numpy.float64'>, handle_unknown='error', unknown_value=None, encoded_missing_value=nan, min_frequency=None, max_categories=None)",
                            "function_text": "Encode categorical features as an integer array. The input to this transformer should be an array-like of integers or\nstrings, denoting the values taken on by categorical (discrete) features.\nThe features are converted to ordinal integers. This results in\na single column of integers (0 to n_categories - 1) per feature. Read more in the User Guide.\nFor a comparison of different encoders, refer to:\nComparing Target Encoder with Other Encoders. Added in version 0.20.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/preprocessing.html#preprocessing-categorical-features",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples, n_features)",
                                    "param_desc": "The data to encode.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "OrdinalEncoder",
                            "descriptions": "Encode categorical features as an integer array. The input to this transformer should be an array-like of integers or\nstrings, denoting the values taken on by categorical (discrete) features.\nThe features are converted to ordinal integers. This results in\na single column of integers (0 to n_categories - 1) per feature. Read more in the User Guide.\nFor a comparison of different encoders, refer to:\nComparing Target Encoder with Other Encoders. Added in version 0.20.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_features). The data to encode.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "PowerTransformer",
                        "func_desc": "Apply a power transform featurewise to make data more Gaussian-like.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.PowerTransformer.html#sklearn.preprocessing.PowerTransformer",
                        "function_definitions": {
                            "function_name": "PowerTransformer",
                            "full_function": "class sklearn.preprocessing.PowerTransformer(method='yeo-johnson', *, standardize=True, copy=True)",
                            "function_text": "Apply a power transform featurewise to make data more Gaussian-like. Power transforms are a family of parametric, monotonic transformations\nthat are applied to make data more Gaussian-like. This is useful for\nmodeling issues related to heteroscedasticity (non-constant variance),\nor other situations where normality is desired. Currently, PowerTransformer supports the Box-Cox transform and the\nYeo-Johnson transform. The optimal parameter for stabilizing variance and\nminimizing skewness is estimated through maximum likelihood. Box-Cox requires input data to be strictly positive, while Yeo-Johnson\nsupports both positive or negative data. By default, zero-mean, unit-variance normalization is applied to the\ntransformed data. For an example visualization, refer to Compare PowerTransformer with\nother scalers. To see the\neffect of Box-Cox and Yeo-Johnson transformations on different\ndistributions, see:\nMap data to a normal distribution. Read more in the User Guide. Added in version 0.20.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/auto_examples/preprocessing/plot_all_scaling.html#plot-all-scaling-power-transformer-section",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples, n_features)",
                                    "param_desc": "The data to be transformed using a power transformation.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "PowerTransformer",
                            "descriptions": "Apply a power transform featurewise to make data more Gaussian-like. Power transforms are a family of parametric, monotonic transformations\nthat are applied to make data more Gaussian-like. This is useful for\nmodeling issues related to heteroscedasticity (non-constant variance),\nor other situations where normality is desired. Currently, PowerTransformer supports the Box-Cox transform and the\nYeo-Johnson transform. The optimal parameter for stabilizing variance and\nminimizing skewness is estimated through maximum likelihood. Box-Cox requires input data to be strictly positive, while Yeo-Johnson\nsupports both positive or negative data. By default, zero-mean, unit-variance normalization is applied to the\ntransformed data. For an example visualization, refer to Compare PowerTransformer with\nother scalers. To see the\neffect of Box-Cox and Yeo-Johnson transformations on different\ndistributions, see:\nMap data to a normal distribution. Read more in the User Guide. Added in version 0.20.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_features). The data to be transformed using a power transformation.\n"
                                    }
                                },
                                "required": [
                                    "method='yeo-johnson'"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "RobustScaler",
                        "func_desc": "Scale features using statistics that are robust to outliers.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.RobustScaler.html#sklearn.preprocessing.RobustScaler",
                        "function_definitions": {
                            "function_name": "RobustScaler",
                            "full_function": "class sklearn.preprocessing.RobustScaler(*, with_centering=True, with_scaling=True, quantile_range=(25.0, 75.0), copy=True, unit_variance=False)",
                            "function_text": "Scale features using statistics that are robust to outliers. This Scaler removes the median and scales the data according to\nthe quantile range (defaults to IQR: Interquartile Range).\nThe IQR is the range between the 1st quartile (25th quantile)\nand the 3rd quartile (75th quantile). Centering and scaling happen independently on each feature by\ncomputing the relevant statistics on the samples in the training\nset. Median and interquartile range are then stored to be used on\nlater data using the transform method. Standardization of a dataset is a common preprocessing for many machine\nlearning estimators. Typically this is done by removing the mean and\nscaling to unit variance. However, outliers can often influence the sample\nmean / variance in a negative way. In such cases, using the median and the\ninterquartile range often give better results. For an example visualization\nand comparison to other scalers, refer to Compare RobustScaler with\nother scalers. Added in version 0.17. Read more in the User Guide.",
                            "func_text_user_guide": "#sklearn.preprocessing.RobustScaler.transform",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "The data used to scale along the specified axis.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "RobustScaler",
                            "descriptions": "Scale features using statistics that are robust to outliers. This Scaler removes the median and scales the data according to\nthe quantile range (defaults to IQR: Interquartile Range).\nThe IQR is the range between the 1st quartile (25th quantile)\nand the 3rd quartile (75th quantile). Centering and scaling happen independently on each feature by\ncomputing the relevant statistics on the samples in the training\nset. Median and interquartile range are then stored to be used on\nlater data using the transform method. Standardization of a dataset is a common preprocessing for many machine\nlearning estimators. Typically this is done by removing the mean and\nscaling to unit variance. However, outliers can often influence the sample\nmean / variance in a negative way. In such cases, using the median and the\ninterquartile range often give better results. For an example visualization\nand comparison to other scalers, refer to Compare RobustScaler with\nother scalers. Added in version 0.17. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). The data used to scale along the specified axis.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "StandardScaler",
                        "func_desc": "Standardize features by removing the mean and scaling to unit variance.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.StandardScaler.html#sklearn.preprocessing.StandardScaler",
                        "function_definitions": {
                            "function_name": "StandardScaler",
                            "full_function": "class sklearn.preprocessing.StandardScaler(*, copy=True, with_mean=True, with_std=True)",
                            "function_text": "Standardize features by removing the mean and scaling to unit variance. The standard score of a sample x is calculated as: z = (x - u) / s where u is the mean of the training samples or zero if with_mean=False,\nand s is the standard deviation of the training samples or one if\nwith_std=False. Centering and scaling happen independently on each feature by computing\nthe relevant statistics on the samples in the training set. Mean and\nstandard deviation are then stored to be used on later data using\ntransform. Standardization of a dataset is a common requirement for many\nmachine learning estimators: they might behave badly if the\nindividual features do not more or less look like standard normally\ndistributed data (e.g. Gaussian with 0 mean and unit variance). For instance many elements used in the objective function of\na learning algorithm (such as the RBF kernel of Support Vector\nMachines or the L1 and L2 regularizers of linear models) assume that\nall features are centered around 0 and have variance in the same\norder. If a feature has a variance that is orders of magnitude larger\nthan others, it might dominate the objective function and make the\nestimator unable to learn from other features correctly as expected. StandardScaler is sensitive to outliers, and the features may scale\ndifferently from each other in the presence of outliers. For an example\nvisualization, refer to Compare StandardScaler with other scalers. This scaler can also be applied to sparse CSR or CSC matrices by passing\nwith_mean=False to avoid breaking the sparsity structure of the data. Read more in the User Guide.",
                            "func_text_user_guide": "#sklearn.preprocessing.StandardScaler.transform",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix of shape (n_samples, n_features)",
                                    "param_desc": "The data used to scale along the features axis.\n"
                                },
                                {
                                    "param_name": "copy",
                                    "param_type": "bool, default=None",
                                    "param_desc": "Copy the input X or not.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "StandardScaler",
                            "descriptions": "Standardize features by removing the mean and scaling to unit variance. The standard score of a sample x is calculated as: z = (x - u) / s where u is the mean of the training samples or zero if with_mean=False,\nand s is the standard deviation of the training samples or one if\nwith_std=False. Centering and scaling happen independently on each feature by computing\nthe relevant statistics on the samples in the training set. Mean and\nstandard deviation are then stored to be used on later data using\ntransform. Standardization of a dataset is a common requirement for many\nmachine learning estimators: they might behave badly if the\nindividual features do not more or less look like standard normally\ndistributed data (e.g. Gaussian with 0 mean and unit variance). For instance many elements used in the objective function of\na learning algorithm (such as the RBF kernel of Support Vector\nMachines or the L1 and L2 regularizers of linear models) assume that\nall features are centered around 0 and have variance in the same\norder. If a feature has a variance that is orders of magnitude larger\nthan others, it might dominate the objective function and make the\nestimator unable to learn from other features correctly as expected. StandardScaler is sensitive to outliers, and the features may scale\ndifferently from each other in the presence of outliers. For an example\nvisualization, refer to Compare StandardScaler with other scalers. This scaler can also be applied to sparse CSR or CSC matrices by passing\nwith_mean=False to avoid breaking the sparsity structure of the data. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix of shape (n_samples, n_features). The data used to scale along the features axis.\n"
                                    },
                                    "copy": {
                                        "type": "boolean",
                                        "description": "bool, default=None. Copy the input X or not.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "add_dummy_feature",
                        "func_desc": "Augment dataset with an additional dummy feature.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.add_dummy_feature.html#sklearn.preprocessing.add_dummy_feature",
                        "function_definitions": {
                            "function_name": "add_dummy_feature",
                            "full_function": "sklearn.preprocessing.add_dummy_feature(X, value=1.0)",
                            "function_text": "Augment dataset with an additional dummy feature. This is useful for fitting an intercept term with implementations which\ncannot otherwise fit it directly.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "Data.\n"
                                },
                                {
                                    "param_name": "value",
                                    "param_type": "float",
                                    "param_desc": "Value to use for the dummy feature.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "add_dummy_feature",
                            "descriptions": "Augment dataset with an additional dummy feature. This is useful for fitting an intercept term with implementations which\ncannot otherwise fit it directly.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). Data.\n"
                                    },
                                    "value": {
                                        "type": "float",
                                        "description": "float. Value to use for the dummy feature.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "label_binarize",
                        "func_desc": "Binarize labels in a one-vs-all fashion.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.label_binarize.html#sklearn.preprocessing.label_binarize",
                        "function_definitions": {
                            "function_name": "label_binarize",
                            "full_function": "sklearn.preprocessing.label_binarize(y, *, classes, neg_label=0, pos_label=1, sparse_output=False)",
                            "function_text": "Binarize labels in a one-vs-all fashion. Several regression and binary classification algorithms are\navailable in scikit-learn. A simple way to extend these algorithms\nto the multi-class classification case is to use the so-called\none-vs-all scheme. This function makes it possible to compute this transformation for a\nfixed set of class labels known ahead of time.",
                            "func_text_user_guide": "sklearn.preprocessing.LabelBinarizer.html#sklearn.preprocessing.LabelBinarizer",
                            "parameter_names_desc": [
                                {
                                    "param_name": "y",
                                    "param_type": "array-like or sparse matrix",
                                    "param_desc": "Sequence of integer labels or multilabel data to encode.\n"
                                },
                                {
                                    "param_name": "classes",
                                    "param_type": "array-like of shape (n_classes,)",
                                    "param_desc": "Uniquely holds the label for each class.\n"
                                },
                                {
                                    "param_name": "neg_label",
                                    "param_type": "int, default=0",
                                    "param_desc": "Value with which negative labels must be encoded.\n"
                                },
                                {
                                    "param_name": "pos_label",
                                    "param_type": "int, default=1",
                                    "param_desc": "Value with which positive labels must be encoded.\n"
                                },
                                {
                                    "param_name": "sparse_output",
                                    "param_type": "bool, default=False,",
                                    "param_desc": "Set to true if output binary array is desired in CSR sparse format.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "label_binarize",
                            "descriptions": "Binarize labels in a one-vs-all fashion. Several regression and binary classification algorithms are\navailable in scikit-learn. A simple way to extend these algorithms\nto the multi-class classification case is to use the so-called\none-vs-all scheme. This function makes it possible to compute this transformation for a\nfixed set of class labels known ahead of time.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "y": {
                                        "type": "array",
                                        "description": "array-like or sparse matrix. Sequence of integer labels or multilabel data to encode.\n"
                                    },
                                    "classes": {
                                        "type": "array",
                                        "description": "array-like of shape (n_classes,). Uniquely holds the label for each class.\n"
                                    },
                                    "neg_label": {
                                        "type": "integer",
                                        "description": "int, default=0. Value with which negative labels must be encoded.\n"
                                    },
                                    "pos_label": {
                                        "type": "integer",
                                        "description": "int, default=1. Value with which positive labels must be encoded.\n"
                                    },
                                    "sparse_output": {
                                        "type": "boolean",
                                        "description": "bool, default=False,. Set to true if output binary array is desired in CSR sparse format.\n"
                                    }
                                },
                                "required": [
                                    "y"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "minmax_scale",
                        "func_desc": "Transform features by scaling each feature to a given range.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.minmax_scale.html#sklearn.preprocessing.minmax_scale",
                        "function_definitions": {
                            "function_name": "minmax_scale",
                            "full_function": "sklearn.preprocessing.minmax_scale(X, feature_range=(0, 1), *, axis=0, copy=True)",
                            "function_text": "Transform features by scaling each feature to a given range. This estimator scales and translates each feature individually such\nthat it is in the given range on the training set, i.e. between\nzero and one. The transformation is given by (when axis=0): where min, max = feature_range. The transformation is calculated as (when axis=0): This transformation is often used as an alternative to zero mean,\nunit variance scaling. Read more in the User Guide. Added in version 0.17: minmax_scale function interface\nto MinMaxScaler.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/preprocessing.html#preprocessing-scaler",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples, n_features)",
                                    "param_desc": "The data.\n"
                                },
                                {
                                    "param_name": "feature_range",
                                    "param_type": "tuple (min, max), default=(0, 1)",
                                    "param_desc": "Desired range of transformed data.\n"
                                },
                                {
                                    "param_name": "axis",
                                    "param_type": "{0, 1}, default=0",
                                    "param_desc": "Axis used to scale along. If 0, independently scale each feature,\notherwise (if 1) scale each sample.\n"
                                },
                                {
                                    "param_name": "copy",
                                    "param_type": "bool, default=True",
                                    "param_desc": "If False, try to avoid a copy and scale in place.\nThis is not guaranteed to always work in place; e.g. if the data is\na numpy array with an int dtype, a copy will be returned even with\ncopy=False.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "minmax_scale",
                            "descriptions": "Transform features by scaling each feature to a given range. This estimator scales and translates each feature individually such\nthat it is in the given range on the training set, i.e. between\nzero and one. The transformation is given by (when axis=0): where min, max = feature_range. The transformation is calculated as (when axis=0): This transformation is often used as an alternative to zero mean,\nunit variance scaling. Read more in the User Guide. Added in version 0.17: minmax_scale function interface\nto MinMaxScaler.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_features). The data.\n"
                                    },
                                    "feature_range": {
                                        "type": "tuple (min, max), default=(0, 1)",
                                        "description": "tuple (min, max), default=(0, 1). Desired range of transformed data.\n"
                                    },
                                    "axis": {
                                        "type": "{0, 1}, default=0",
                                        "description": "{0, 1}, default=0. Axis used to scale along. If 0, independently scale each feature,\notherwise (if 1) scale each sample.\n"
                                    },
                                    "copy": {
                                        "type": "boolean",
                                        "description": "bool, default=True. If False, try to avoid a copy and scale in place.\nThis is not guaranteed to always work in place; e.g. if the data is\na numpy array with an int dtype, a copy will be returned even with\ncopy=False.\n"
                                    }
                                },
                                "required": [
                                    "X",
                                    "feature_range=(0",
                                    "1)"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "power_transform",
                        "func_desc": "Parametric, monotonic transformation to make data more Gaussian-like.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.power_transform.html#sklearn.preprocessing.power_transform",
                        "function_definitions": {
                            "function_name": "power_transform",
                            "full_function": "sklearn.preprocessing.power_transform(X, method='yeo-johnson', *, standardize=True, copy=True)",
                            "function_text": "Parametric, monotonic transformation to make data more Gaussian-like. Power transforms are a family of parametric, monotonic transformations\nthat are applied to make data more Gaussian-like. This is useful for\nmodeling issues related to heteroscedasticity (non-constant variance),\nor other situations where normality is desired. Currently, power_transform supports the Box-Cox transform and the\nYeo-Johnson transform. The optimal parameter for stabilizing variance and\nminimizing skewness is estimated through maximum likelihood. Box-Cox requires input data to be strictly positive, while Yeo-Johnson\nsupports both positive or negative data. By default, zero-mean, unit-variance normalization is applied to the\ntransformed data. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/preprocessing.html#preprocessing-transformer",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like of shape (n_samples, n_features)",
                                    "param_desc": "The data to be transformed using a power transformation.\n"
                                },
                                {
                                    "param_name": "method",
                                    "param_type": "{\u2018yeo-johnson\u2019, \u2018box-cox\u2019}, default=\u2019yeo-johnson\u2019",
                                    "param_desc": "The power transform method. Available methods are:\n\n\u2018yeo-johnson\u2019 [1], works with positive and negative values\n\u2018box-cox\u2019 [2], only works with strictly positive values\n\n\nChanged in version 0.23: The default value of the method parameter changed from\n\u2018box-cox\u2019 to \u2018yeo-johnson\u2019 in 0.23.\n\n"
                                },
                                {
                                    "param_name": "standardize",
                                    "param_type": "bool, default=True",
                                    "param_desc": "Set to True to apply zero-mean, unit-variance normalization to the\ntransformed output.\n"
                                },
                                {
                                    "param_name": "copy",
                                    "param_type": "bool, default=True",
                                    "param_desc": "If False, try to avoid a copy and transform in place.\nThis is not guaranteed to always work in place; e.g. if the data is\na numpy array with an int dtype, a copy will be returned even with\ncopy=False.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "power_transform",
                            "descriptions": "Parametric, monotonic transformation to make data more Gaussian-like. Power transforms are a family of parametric, monotonic transformations\nthat are applied to make data more Gaussian-like. This is useful for\nmodeling issues related to heteroscedasticity (non-constant variance),\nor other situations where normality is desired. Currently, power_transform supports the Box-Cox transform and the\nYeo-Johnson transform. The optimal parameter for stabilizing variance and\nminimizing skewness is estimated through maximum likelihood. Box-Cox requires input data to be strictly positive, while Yeo-Johnson\nsupports both positive or negative data. By default, zero-mean, unit-variance normalization is applied to the\ntransformed data. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples, n_features). The data to be transformed using a power transformation.\n"
                                    },
                                    "method": {
                                        "type": "string",
                                        "enum": [
                                            "yeo-johnson",
                                            " box-cox"
                                        ],
                                        "description": "{\u2018yeo-johnson\u2019, \u2018box-cox\u2019}, default=\u2019yeo-johnson\u2019. The power transform method. Available methods are:\n\n\u2018yeo-johnson\u2019 [1], works with positive and negative values\n\u2018box-cox\u2019 [2], only works with strictly positive values\n\n\nChanged in version 0.23: The default value of the method parameter changed from\n\u2018box-cox\u2019 to \u2018yeo-johnson\u2019 in 0.23.\n\n"
                                    },
                                    "standardize": {
                                        "type": "boolean",
                                        "description": "bool, default=True. Set to True to apply zero-mean, unit-variance normalization to the\ntransformed output.\n"
                                    },
                                    "copy": {
                                        "type": "boolean",
                                        "description": "bool, default=True. If False, try to avoid a copy and transform in place.\nThis is not guaranteed to always work in place; e.g. if the data is\na numpy array with an int dtype, a copy will be returned even with\ncopy=False.\n"
                                    }
                                },
                                "required": [
                                    "X",
                                    "method='yeo-johnson'"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "robust_scale",
                        "func_desc": "Standardize a dataset along any axis.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.robust_scale.html#sklearn.preprocessing.robust_scale",
                        "function_definitions": {
                            "function_name": "robust_scale",
                            "full_function": "sklearn.preprocessing.robust_scale(X, *, axis=0, with_centering=True, with_scaling=True, quantile_range=(25.0, 75.0), copy=True, unit_variance=False)",
                            "function_text": "Standardize a dataset along any axis. Center to the median and component wise scale\naccording to the interquartile range. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/preprocessing.html#preprocessing-scaler",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_sample, n_features)",
                                    "param_desc": "The data to center and scale.\n"
                                },
                                {
                                    "param_name": "axis",
                                    "param_type": "int, default=0",
                                    "param_desc": "Axis used to compute the medians and IQR along. If 0,\nindependently scale each feature, otherwise (if 1) scale\neach sample.\n"
                                },
                                {
                                    "param_name": "with_centering",
                                    "param_type": "bool, default=True",
                                    "param_desc": "If True, center the data before scaling.\n"
                                },
                                {
                                    "param_name": "with_scaling",
                                    "param_type": "bool, default=True",
                                    "param_desc": "If True, scale the data to unit variance (or equivalently,\nunit standard deviation).\n"
                                },
                                {
                                    "param_name": "quantile_range",
                                    "param_type": "tuple (q_min, q_max), 0.0 < q_min < q_max < 100.0,        default=(25.0, 75.0)",
                                    "param_desc": "Quantile range used to calculate scale_. By default this is equal to\nthe IQR, i.e., q_min is the first quantile and q_max is the third\nquantile.\n\nAdded in version 0.18.\n\n"
                                },
                                {
                                    "param_name": "copy",
                                    "param_type": "bool, default=True",
                                    "param_desc": "If False, try to avoid a copy and scale in place.\nThis is not guaranteed to always work in place; e.g. if the data is\na numpy array with an int dtype, a copy will be returned even with\ncopy=False.\n"
                                },
                                {
                                    "param_name": "unit_variance",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If True, scale data so that normally distributed features have a\nvariance of 1. In general, if the difference between the x-values of\nq_max and q_min for a standard normal distribution is greater\nthan 1, the dataset will be scaled down. If less than 1, the dataset\nwill be scaled up.\n\nAdded in version 0.24.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "robust_scale",
                            "descriptions": "Standardize a dataset along any axis. Center to the median and component wise scale\naccording to the interquartile range. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_sample, n_features). The data to center and scale.\n"
                                    },
                                    "axis": {
                                        "type": "integer",
                                        "description": "int, default=0. Axis used to compute the medians and IQR along. If 0,\nindependently scale each feature, otherwise (if 1) scale\neach sample.\n"
                                    },
                                    "with_centering": {
                                        "type": "boolean",
                                        "description": "bool, default=True. If True, center the data before scaling.\n"
                                    },
                                    "with_scaling": {
                                        "type": "boolean",
                                        "description": "bool, default=True. If True, scale the data to unit variance (or equivalently,\nunit standard deviation).\n"
                                    },
                                    "quantile_range": {
                                        "type": "tuple (q_min, q_max), 0.0 < q_min < q_max < 100.0,        default=(25.0, 75.0)",
                                        "description": "tuple (q_min, q_max), 0.0 < q_min < q_max < 100.0,        default=(25.0, 75.0). Quantile range used to calculate scale_. By default this is equal to\nthe IQR, i.e., q_min is the first quantile and q_max is the third\nquantile.\n\nAdded in version 0.18.\n\n"
                                    },
                                    "copy": {
                                        "type": "boolean",
                                        "description": "bool, default=True. If False, try to avoid a copy and scale in place.\nThis is not guaranteed to always work in place; e.g. if the data is\na numpy array with an int dtype, a copy will be returned even with\ncopy=False.\n"
                                    },
                                    "unit_variance": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If True, scale data so that normally distributed features have a\nvariance of 1. In general, if the difference between the x-values of\nq_max and q_min for a standard normal distribution is greater\nthan 1, the dataset will be scaled down. If less than 1, the dataset\nwill be scaled up.\n\nAdded in version 0.24.\n\n"
                                    }
                                },
                                "required": [
                                    "X"
                                ]
                            }
                        }
                    }
                ]
            }
        ],
        "name": "sklearn.preprocessing",
        "url": "https://scikit-learn.org/stable/api/sklearn.preprocessing.html"
    },
    "sklearn.random_projection.html": {
        "functions": [
            {
                "defaults": [
                    {
                        "func_name": "GaussianRandomProjection",
                        "func_desc": "Reduce dimensionality through Gaussian random projection.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.random_projection.GaussianRandomProjection.html#sklearn.random_projection.GaussianRandomProjection",
                        "function_definitions": {
                            "function_name": "GaussianRandomProjection",
                            "full_function": "class sklearn.random_projection.GaussianRandomProjection(n_components='auto', *, eps=0.1, compute_inverse_components=False, random_state=None)",
                            "function_text": "Reduce dimensionality through Gaussian random projection. The components of the random matrix are drawn from N(0, 1 / n_components). Read more in the User Guide. Added in version 0.13.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/random_projection.html#gaussian-random-matrix",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{ndarray, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "The input data to project into a smaller dimensional space.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "GaussianRandomProjection",
                            "descriptions": "Reduce dimensionality through Gaussian random projection. The components of the random matrix are drawn from N(0, 1 / n_components). Read more in the User Guide. Added in version 0.13.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{ndarray, sparse matrix} of shape (n_samples, n_features). The input data to project into a smaller dimensional space.\n"
                                    }
                                },
                                "required": [
                                    "n_components='auto'"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "johnson_lindenstrauss_min_dim",
                        "func_desc": "Find a 'safe' number of components to randomly project to.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim.html#sklearn.random_projection.johnson_lindenstrauss_min_dim",
                        "function_definitions": {
                            "function_name": "johnson_lindenstrauss_min_dim",
                            "full_function": "sklearn.random_projection.johnson_lindenstrauss_min_dim(n_samples, *, eps=0.1)",
                            "function_text": "Find a \u2018safe\u2019 number of components to randomly project to. The distortion introduced by a random projection p only changes the\ndistance between two points by a factor (1 +- eps) in a euclidean space\nwith good probability. The projection p is an eps-embedding as defined\nby: (1 - eps) ||u - v||^2 < ||p(u) - p(v)||^2 < (1 + eps) ||u - v||^2 Where u and v are any rows taken from a dataset of shape (n_samples,\nn_features), eps is in ]0, 1[ and p is a projection by a random Gaussian\nN(0, 1) matrix of shape (n_components, n_features) (or a sparse\nAchlioptas matrix). The minimum number of components to guarantee the eps-embedding is\ngiven by: n_components >= 4 log(n_samples) / (eps^2 / 2 - eps^3 / 3) Note that the number of dimensions is independent of the original\nnumber of features but instead depends on the size of the dataset:\nthe larger the dataset, the higher is the minimal dimensionality of\nan eps-embedding. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/random_projection.html#johnson-lindenstrauss",
                            "parameter_names_desc": [
                                {
                                    "param_name": "n_samples",
                                    "param_type": "int or array-like of int",
                                    "param_desc": "Number of samples that should be an integer greater than 0. If an array\nis given, it will compute a safe number of components array-wise.\n"
                                },
                                {
                                    "param_name": "eps",
                                    "param_type": "float or array-like of shape (n_components,), dtype=float,             default=0.1",
                                    "param_desc": "Maximum distortion rate in the range (0, 1) as defined by the\nJohnson-Lindenstrauss lemma. If an array is given, it will compute a\nsafe number of components array-wise.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "johnson_lindenstrauss_min_dim",
                            "descriptions": "Find a \u2018safe\u2019 number of components to randomly project to. The distortion introduced by a random projection p only changes the\ndistance between two points by a factor (1 +- eps) in a euclidean space\nwith good probability. The projection p is an eps-embedding as defined\nby: (1 - eps) ||u - v||^2 < ||p(u) - p(v)||^2 < (1 + eps) ||u - v||^2 Where u and v are any rows taken from a dataset of shape (n_samples,\nn_features), eps is in ]0, 1[ and p is a projection by a random Gaussian\nN(0, 1) matrix of shape (n_components, n_features) (or a sparse\nAchlioptas matrix). The minimum number of components to guarantee the eps-embedding is\ngiven by: n_components >= 4 log(n_samples) / (eps^2 / 2 - eps^3 / 3) Note that the number of dimensions is independent of the original\nnumber of features but instead depends on the size of the dataset:\nthe larger the dataset, the higher is the minimal dimensionality of\nan eps-embedding. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "n_samples": {
                                        "type": "integer",
                                        "description": "int or array-like of int. Number of samples that should be an integer greater than 0. If an array\nis given, it will compute a safe number of components array-wise.\n"
                                    },
                                    "eps": {
                                        "type": "float",
                                        "description": "float or array-like of shape (n_components,), dtype=float,             default=0.1. Maximum distortion rate in the range (0, 1) as defined by the\nJohnson-Lindenstrauss lemma. If an array is given, it will compute a\nsafe number of components array-wise.\n"
                                    }
                                },
                                "required": [
                                    "n_samples"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "SparseRandomProjection",
                        "func_desc": "Reduce dimensionality through sparse random projection.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.random_projection.SparseRandomProjection.html#sklearn.random_projection.SparseRandomProjection",
                        "function_definitions": {
                            "function_name": "SparseRandomProjection",
                            "full_function": "class sklearn.random_projection.SparseRandomProjection(n_components='auto', *, density='auto', eps=0.1, dense_output=False, compute_inverse_components=False, random_state=None)",
                            "function_text": "Reduce dimensionality through sparse random projection. Sparse random matrix is an alternative to dense random\nprojection matrix that guarantees similar embedding quality while being\nmuch more memory efficient and allowing faster computation of the\nprojected data. If we note s = 1 / density the components of the random matrix are\ndrawn from: -sqrt(s) / sqrt(n_components)   with probability 1 / 2s 0                              with probability 1 - 1 / s +sqrt(s) / sqrt(n_components)   with probability 1 / 2s Read more in the User Guide. Added in version 0.13.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/random_projection.html#sparse-random-matrix",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{ndarray, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "The input data to project into a smaller dimensional space.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "SparseRandomProjection",
                            "descriptions": "Reduce dimensionality through sparse random projection. Sparse random matrix is an alternative to dense random\nprojection matrix that guarantees similar embedding quality while being\nmuch more memory efficient and allowing faster computation of the\nprojected data. If we note s = 1 / density the components of the random matrix are\ndrawn from: -sqrt(s) / sqrt(n_components)   with probability 1 / 2s 0                              with probability 1 - 1 / s +sqrt(s) / sqrt(n_components)   with probability 1 / 2s Read more in the User Guide. Added in version 0.13.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{ndarray, sparse matrix} of shape (n_samples, n_features). The input data to project into a smaller dimensional space.\n"
                                    }
                                },
                                "required": [
                                    "n_components='auto'"
                                ]
                            }
                        }
                    }
                ]
            }
        ],
        "name": "sklearn.random_projection",
        "url": "https://scikit-learn.org/stable/api/sklearn.random_projection.html"
    },
    "sklearn.semi_supervised.html": {
        "functions": [
            {
                "defaults": [
                    {
                        "func_name": "LabelPropagation",
                        "func_desc": "Label Propagation classifier.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.semi_supervised.LabelPropagation.html#sklearn.semi_supervised.LabelPropagation",
                        "function_definitions": {
                            "function_name": "LabelPropagation",
                            "full_function": "class sklearn.semi_supervised.LabelPropagation(kernel='rbf', *, gamma=20, n_neighbors=7, max_iter=1000, tol=0.001, n_jobs=None)",
                            "function_text": "Label Propagation classifier. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/semi_supervised.html#label-propagation",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "LabelPropagation",
                            "descriptions": "Label Propagation classifier. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": [
                                    "kernel='rbf'"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "SelfTrainingClassifier",
                        "func_desc": "Self-training classifier.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.semi_supervised.SelfTrainingClassifier.html#sklearn.semi_supervised.SelfTrainingClassifier",
                        "function_definitions": {
                            "function_name": "SelfTrainingClassifier",
                            "full_function": "class sklearn.semi_supervised.SelfTrainingClassifier(base_estimator, threshold=0.75, criterion='threshold', k_best=10, max_iter=10, verbose=False)",
                            "function_text": "Self-training classifier. This metaestimator allows a given supervised classifier to function as a\nsemi-supervised classifier, allowing it to learn from unlabeled data. It\ndoes this by iteratively predicting pseudo-labels for the unlabeled data\nand adding them to the training set. The classifier will continue iterating until either max_iter is reached, or\nno pseudo-labels were added to the training set in the previous iteration. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/glossary.html#term-metaestimator",
                            "parameter_names_desc": [
                                {
                                    "param_name": "**params",
                                    "param_type": "dict",
                                    "param_desc": "Estimator parameters.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "SelfTrainingClassifier",
                            "descriptions": "Self-training classifier. This metaestimator allows a given supervised classifier to function as a\nsemi-supervised classifier, allowing it to learn from unlabeled data. It\ndoes this by iteratively predicting pseudo-labels for the unlabeled data\nand adding them to the training set. The classifier will continue iterating until either max_iter is reached, or\nno pseudo-labels were added to the training set in the previous iteration. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "**params": {
                                        "type": "dict",
                                        "description": "dict. Estimator parameters.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "LabelSpreading",
                        "func_desc": "LabelSpreading model for semi-supervised learning.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.semi_supervised.LabelSpreading.html#sklearn.semi_supervised.LabelSpreading",
                        "function_definitions": {
                            "function_name": "LabelSpreading",
                            "full_function": "class sklearn.semi_supervised.LabelSpreading(kernel='rbf', *, gamma=20, n_neighbors=7, alpha=0.2, max_iter=30, tol=0.001, n_jobs=None)",
                            "function_text": "LabelSpreading model for semi-supervised learning. This model is similar to the basic Label Propagation algorithm,\nbut uses affinity matrix based on the normalized graph Laplacian\nand soft clamping across the labels. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/semi_supervised.html#label-propagation",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "LabelSpreading",
                            "descriptions": "LabelSpreading model for semi-supervised learning. This model is similar to the basic Label Propagation algorithm,\nbut uses affinity matrix based on the normalized graph Laplacian\nand soft clamping across the labels. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": [
                                    "kernel='rbf'"
                                ]
                            }
                        }
                    }
                ]
            }
        ],
        "name": "sklearn.semi_supervised",
        "url": "https://scikit-learn.org/stable/api/sklearn.semi_supervised.html"
    },
    "sklearn.svm.html": {
        "functions": [
            {
                "defaults": [
                    {
                        "func_name": "LinearSVC",
                        "func_desc": "Linear Support Vector Classification.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.svm.LinearSVC.html#sklearn.svm.LinearSVC",
                        "function_definitions": {
                            "function_name": "LinearSVC",
                            "full_function": "class sklearn.svm.LinearSVC(penalty='l2', loss='squared_hinge', *, dual='auto', tol=0.0001, C=1.0, multi_class='ovr', fit_intercept=True, intercept_scaling=1, class_weight=None, verbose=0, random_state=None, max_iter=1000)",
                            "function_text": "Linear Support Vector Classification. Similar to SVC with parameter kernel=\u2019linear\u2019, but implemented in terms of\nliblinear rather than libsvm, so it has more flexibility in the choice of\npenalties and loss functions and should scale better to large numbers of\nsamples. The main differences between LinearSVC and\nSVC lie in the loss function used by default, and in\nthe handling of intercept regularization between those two implementations. This class supports both dense and sparse input and the multiclass support\nis handled according to a one-vs-the-rest scheme. Read more in the User Guide.",
                            "func_text_user_guide": "#sklearn.svm.LinearSVC",
                            "parameter_names_desc": []
                        },
                        "function_calling": {}
                    },
                    {
                        "func_name": "NuSVC",
                        "func_desc": "Nu-Support Vector Classification.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.svm.NuSVC.html#sklearn.svm.NuSVC",
                        "function_definitions": {
                            "function_name": "NuSVC",
                            "full_function": "class sklearn.svm.NuSVC(*, nu=0.5, kernel='rbf', degree=3, gamma='scale', coef0=0.0, shrinking=True, probability=False, tol=0.001, cache_size=200, class_weight=None, verbose=False, max_iter=-1, decision_function_shape='ovr', break_ties=False, random_state=None)",
                            "function_text": "Nu-Support Vector Classification. Similar to SVC but uses a parameter to control the number of support\nvectors. The implementation is based on libsvm. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/svm.html#svm-classification",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "NuSVC",
                            "descriptions": "Nu-Support Vector Classification. Similar to SVC but uses a parameter to control the number of support\nvectors. The implementation is based on libsvm. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "OneClassSVM",
                        "func_desc": "Unsupervised Outlier Detection.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.svm.OneClassSVM.html#sklearn.svm.OneClassSVM",
                        "function_definitions": {
                            "function_name": "OneClassSVM",
                            "full_function": "class sklearn.svm.OneClassSVM(*, kernel='rbf', degree=3, gamma='scale', coef0=0.0, tol=0.001, nu=0.5, shrinking=True, cache_size=200, verbose=False, max_iter=-1)",
                            "function_text": "Unsupervised Outlier Detection. Estimate the support of a high-dimensional distribution. The implementation is based on libsvm. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/outlier_detection.html#outlier-detection",
                            "parameter_names_desc": [
                                {
                                    "param_name": "**params",
                                    "param_type": "dict",
                                    "param_desc": "Estimator parameters.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "OneClassSVM",
                            "descriptions": "Unsupervised Outlier Detection. Estimate the support of a high-dimensional distribution. The implementation is based on libsvm. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "**params": {
                                        "type": "dict",
                                        "description": "dict. Estimator parameters.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "SVR",
                        "func_desc": "Epsilon-Support Vector Regression.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.svm.SVR.html#sklearn.svm.SVR",
                        "function_definitions": {
                            "function_name": "SVR",
                            "full_function": "class sklearn.svm.SVR(*, kernel='rbf', degree=3, gamma='scale', coef0=0.0, tol=0.001, C=1.0, epsilon=0.1, shrinking=True, cache_size=200, verbose=False, max_iter=-1)",
                            "function_text": "Epsilon-Support Vector Regression. The free parameters in the model are C and epsilon. The implementation is based on libsvm. The fit time complexity\nis more than quadratic with the number of samples which makes it hard\nto scale to datasets with more than a couple of 10000 samples. For large\ndatasets consider using LinearSVR or\nSGDRegressor instead, possibly after a\nNystroem transformer or\nother Kernel Approximation. Read more in the User Guide.",
                            "func_text_user_guide": "sklearn.svm.LinearSVR.html#sklearn.svm.LinearSVR",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "SVR",
                            "descriptions": "Epsilon-Support Vector Regression. The free parameters in the model are C and epsilon. The implementation is based on libsvm. The fit time complexity\nis more than quadratic with the number of samples which makes it hard\nto scale to datasets with more than a couple of 10000 samples. For large\ndatasets consider using LinearSVR or\nSGDRegressor instead, possibly after a\nNystroem transformer or\nother Kernel Approximation. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "LinearSVR",
                        "func_desc": "Linear Support Vector Regression.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.svm.LinearSVR.html#sklearn.svm.LinearSVR",
                        "function_definitions": {
                            "function_name": "LinearSVR",
                            "full_function": "class sklearn.svm.LinearSVR(*, epsilon=0.0, tol=0.0001, C=1.0, loss='epsilon_insensitive', fit_intercept=True, intercept_scaling=1.0, dual='auto', verbose=0, random_state=None, max_iter=1000)",
                            "function_text": "Linear Support Vector Regression. Similar to SVR with parameter kernel=\u2019linear\u2019, but implemented in terms of\nliblinear rather than libsvm, so it has more flexibility in the choice of\npenalties and loss functions and should scale better to large numbers of\nsamples. The main differences between LinearSVR and\nSVR lie in the loss function used by default, and in\nthe handling of intercept regularization between those two implementations. This class supports both dense and sparse input. Read more in the User Guide. Added in version 0.16.",
                            "func_text_user_guide": "#sklearn.svm.LinearSVR",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "LinearSVR",
                            "descriptions": "Linear Support Vector Regression. Similar to SVR with parameter kernel=\u2019linear\u2019, but implemented in terms of\nliblinear rather than libsvm, so it has more flexibility in the choice of\npenalties and loss functions and should scale better to large numbers of\nsamples. The main differences between LinearSVR and\nSVR lie in the loss function used by default, and in\nthe handling of intercept regularization between those two implementations. This class supports both dense and sparse input. Read more in the User Guide. Added in version 0.16.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "NuSVR",
                        "func_desc": "Nu Support Vector Regression.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.svm.NuSVR.html#sklearn.svm.NuSVR",
                        "function_definitions": {
                            "function_name": "NuSVR",
                            "full_function": "class sklearn.svm.NuSVR(*, nu=0.5, C=1.0, kernel='rbf', degree=3, gamma='scale', coef0=0.0, shrinking=True, tol=0.001, cache_size=200, verbose=False, max_iter=-1)",
                            "function_text": "Nu Support Vector Regression. Similar to NuSVC, for regression, uses a parameter nu to control\nthe number of support vectors. However, unlike NuSVC, where nu\nreplaces C, here nu replaces the parameter epsilon of epsilon-SVR. The implementation is based on libsvm. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/svm.html#svm-regression",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "NuSVR",
                            "descriptions": "Nu Support Vector Regression. Similar to NuSVC, for regression, uses a parameter nu to control\nthe number of support vectors. However, unlike NuSVC, where nu\nreplaces C, here nu replaces the parameter epsilon of epsilon-SVR. The implementation is based on libsvm. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "SVC",
                        "func_desc": "C-Support Vector Classification.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.svm.SVC.html#sklearn.svm.SVC",
                        "function_definitions": {
                            "function_name": "SVC",
                            "full_function": "class sklearn.svm.SVC(*, C=1.0, kernel='rbf', degree=3, gamma='scale', coef0=0.0, shrinking=True, probability=False, tol=0.001, cache_size=200, class_weight=None, verbose=False, max_iter=-1, decision_function_shape='ovr', break_ties=False, random_state=None)",
                            "function_text": "C-Support Vector Classification. The implementation is based on libsvm. The fit time scales at least\nquadratically with the number of samples and may be impractical\nbeyond tens of thousands of samples. For large datasets\nconsider using LinearSVC or\nSGDClassifier instead, possibly after a\nNystroem transformer or\nother Kernel Approximation. The multiclass support is handled according to a one-vs-one scheme. For details on the precise mathematical formulation of the provided\nkernel functions and how gamma, coef0 and degree affect each\nother, see the corresponding section in the narrative documentation:\nKernel functions. To learn how to tune SVC\u2019s hyperparameters, see the following example:\nNested versus non-nested cross-validation Read more in the User Guide.",
                            "func_text_user_guide": "sklearn.svm.LinearSVC.html#sklearn.svm.LinearSVC",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "SVC",
                            "descriptions": "C-Support Vector Classification. The implementation is based on libsvm. The fit time scales at least\nquadratically with the number of samples and may be impractical\nbeyond tens of thousands of samples. For large datasets\nconsider using LinearSVC or\nSGDClassifier instead, possibly after a\nNystroem transformer or\nother Kernel Approximation. The multiclass support is handled according to a one-vs-one scheme. For details on the precise mathematical formulation of the provided\nkernel functions and how gamma, coef0 and degree affect each\nother, see the corresponding section in the narrative documentation:\nKernel functions. To learn how to tune SVC\u2019s hyperparameters, see the following example:\nNested versus non-nested cross-validation Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "l1_min_c",
                        "func_desc": "Return the lowest bound for C.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.svm.l1_min_c.html#sklearn.svm.l1_min_c",
                        "function_definitions": {
                            "function_name": "l1_min_c",
                            "full_function": "sklearn.svm.l1_min_c(X, y, *, loss='squared_hinge', fit_intercept=True, intercept_scaling=1.0)",
                            "function_text": "Return the lowest bound for C. The lower bound for C is computed such that for C in (l1_min_C, infinity)\nthe model is guaranteed not to be empty. This applies to l1 penalized\nclassifiers, such as LinearSVC with penalty=\u2019l1\u2019 and\nlinear_model.LogisticRegression with penalty=\u2019l1\u2019. This value is valid if class_weight parameter in fit() is not set.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                                    "param_desc": "Training vector, where n_samples is the number of samples and\nn_features is the number of features.\n"
                                },
                                {
                                    "param_name": "y",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "Target vector relative to X.\n"
                                },
                                {
                                    "param_name": "loss",
                                    "param_type": "{\u2018squared_hinge\u2019, \u2018log\u2019}, default=\u2019squared_hinge\u2019",
                                    "param_desc": "Specifies the loss function.\nWith \u2018squared_hinge\u2019 it is the squared hinge loss (a.k.a. L2 loss).\nWith \u2018log\u2019 it is the loss of logistic regression models.\n"
                                },
                                {
                                    "param_name": "fit_intercept",
                                    "param_type": "bool, default=True",
                                    "param_desc": "Specifies if the intercept should be fitted by the model.\nIt must match the fit() method parameter.\n"
                                },
                                {
                                    "param_name": "intercept_scaling",
                                    "param_type": "float, default=1.0",
                                    "param_desc": "When fit_intercept is True, instance vector x becomes\n[x, intercept_scaling],\ni.e. a \u201csynthetic\u201d feature with constant value equals to\nintercept_scaling is appended to the instance vector.\nIt must match the fit() method parameter.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "l1_min_c",
                            "descriptions": "Return the lowest bound for C. The lower bound for C is computed such that for C in (l1_min_C, infinity)\nthe model is guaranteed not to be empty. This applies to l1 penalized\nclassifiers, such as LinearSVC with penalty=\u2019l1\u2019 and\nlinear_model.LogisticRegression with penalty=\u2019l1\u2019. This value is valid if class_weight parameter in fit() is not set.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples, n_features). Training vector, where n_samples is the number of samples and\nn_features is the number of features.\n"
                                    },
                                    "y": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). Target vector relative to X.\n"
                                    },
                                    "loss": {
                                        "type": "string",
                                        "enum": [
                                            "squared_hinge",
                                            " log"
                                        ],
                                        "description": "{\u2018squared_hinge\u2019, \u2018log\u2019}, default=\u2019squared_hinge\u2019. Specifies the loss function.\nWith \u2018squared_hinge\u2019 it is the squared hinge loss (a.k.a. L2 loss).\nWith \u2018log\u2019 it is the loss of logistic regression models.\n"
                                    },
                                    "fit_intercept": {
                                        "type": "boolean",
                                        "description": "bool, default=True. Specifies if the intercept should be fitted by the model.\nIt must match the fit() method parameter.\n"
                                    },
                                    "intercept_scaling": {
                                        "type": "float",
                                        "description": "float, default=1.0. When fit_intercept is True, instance vector x becomes\n[x, intercept_scaling],\ni.e. a \u201csynthetic\u201d feature with constant value equals to\nintercept_scaling is appended to the instance vector.\nIt must match the fit() method parameter.\n"
                                    }
                                },
                                "required": [
                                    "X",
                                    "y"
                                ]
                            }
                        }
                    }
                ]
            }
        ],
        "name": "sklearn.svm",
        "url": "https://scikit-learn.org/stable/api/sklearn.svm.html"
    },
    "sklearn.tree.html": {
        "functions": [
            {
                "defaults": [
                    {
                        "func_name": "DecisionTreeClassifier",
                        "func_desc": "A decision tree classifier.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.tree.DecisionTreeClassifier.html#sklearn.tree.DecisionTreeClassifier",
                        "function_definitions": {
                            "function_name": "DecisionTreeClassifier",
                            "full_function": "class sklearn.tree.DecisionTreeClassifier(*, criterion='gini', splitter='best', max_depth=None, min_samples_split=2, min_samples_leaf=1, min_weight_fraction_leaf=0.0, max_features=None, random_state=None, max_leaf_nodes=None, min_impurity_decrease=0.0, class_weight=None, ccp_alpha=0.0, monotonic_cst=None)",
                            "function_text": "A decision tree classifier. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/tree.html#tree",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "DecisionTreeClassifier",
                            "descriptions": "A decision tree classifier. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "ExtraTreeClassifier",
                        "func_desc": "An extremely randomized tree classifier.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.tree.ExtraTreeClassifier.html#sklearn.tree.ExtraTreeClassifier",
                        "function_definitions": {
                            "function_name": "ExtraTreeClassifier",
                            "full_function": "class sklearn.tree.ExtraTreeClassifier(*, criterion='gini', splitter='random', max_depth=None, min_samples_split=2, min_samples_leaf=1, min_weight_fraction_leaf=0.0, max_features='sqrt', random_state=None, max_leaf_nodes=None, min_impurity_decrease=0.0, class_weight=None, ccp_alpha=0.0, monotonic_cst=None)",
                            "function_text": "An extremely randomized tree classifier. Extra-trees differ from classic decision trees in the way they are built.\nWhen looking for the best split to separate the samples of a node into two\ngroups, random splits are drawn for each of the max_features randomly\nselected features and the best split among those is chosen. When\nmax_features is set 1, this amounts to building a totally random\ndecision tree. Warning: Extra-trees should only be used within ensemble methods. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/tree.html#tree",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "ExtraTreeClassifier",
                            "descriptions": "An extremely randomized tree classifier. Extra-trees differ from classic decision trees in the way they are built.\nWhen looking for the best split to separate the samples of a node into two\ngroups, random splits are drawn for each of the max_features randomly\nselected features and the best split among those is chosen. When\nmax_features is set 1, this amounts to building a totally random\ndecision tree. Warning: Extra-trees should only be used within ensemble methods. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "DecisionTreeRegressor",
                        "func_desc": "A decision tree regressor.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.tree.DecisionTreeRegressor.html#sklearn.tree.DecisionTreeRegressor",
                        "function_definitions": {
                            "function_name": "DecisionTreeRegressor",
                            "full_function": "class sklearn.tree.DecisionTreeRegressor(*, criterion='squared_error', splitter='best', max_depth=None, min_samples_split=2, min_samples_leaf=1, min_weight_fraction_leaf=0.0, max_features=None, random_state=None, max_leaf_nodes=None, min_impurity_decrease=0.0, ccp_alpha=0.0, monotonic_cst=None)",
                            "function_text": "A decision tree regressor. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/tree.html#tree",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "DecisionTreeRegressor",
                            "descriptions": "A decision tree regressor. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "ExtraTreeRegressor",
                        "func_desc": "An extremely randomized tree regressor.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.tree.ExtraTreeRegressor.html#sklearn.tree.ExtraTreeRegressor",
                        "function_definitions": {
                            "function_name": "ExtraTreeRegressor",
                            "full_function": "class sklearn.tree.ExtraTreeRegressor(*, criterion='squared_error', splitter='random', max_depth=None, min_samples_split=2, min_samples_leaf=1, min_weight_fraction_leaf=0.0, max_features=1.0, random_state=None, min_impurity_decrease=0.0, max_leaf_nodes=None, ccp_alpha=0.0, monotonic_cst=None)",
                            "function_text": "An extremely randomized tree regressor. Extra-trees differ from classic decision trees in the way they are built.\nWhen looking for the best split to separate the samples of a node into two\ngroups, random splits are drawn for each of the max_features randomly\nselected features and the best split among those is chosen. When\nmax_features is set 1, this amounts to building a totally random\ndecision tree. Warning: Extra-trees should only be used within ensemble methods. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/tree.html#tree",
                            "parameter_names_desc": [
                                {
                                    "param_name": "sample_weight",
                                    "param_type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                                    "param_desc": "Metadata routing for sample_weight parameter in score.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "ExtraTreeRegressor",
                            "descriptions": "An extremely randomized tree regressor. Extra-trees differ from classic decision trees in the way they are built.\nWhen looking for the best split to separate the samples of a node into two\ngroups, random splits are drawn for each of the max_features randomly\nselected features and the best split among those is chosen. When\nmax_features is set 1, this amounts to building a totally random\ndecision tree. Warning: Extra-trees should only be used within ensemble methods. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "sample_weight": {
                                        "type": "string",
                                        "description": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED. Metadata routing for sample_weight parameter in score.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    }
                ]
            },
            {
                "Exporting": [
                    {
                        "func_name": "export_graphviz",
                        "func_desc": "Export a decision tree in DOT format.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.tree.export_graphviz.html#sklearn.tree.export_graphviz",
                        "function_definitions": {
                            "function_name": "export_graphviz",
                            "full_function": "sklearn.tree.export_graphviz(decision_tree, out_file=None, *, max_depth=None, feature_names=None, class_names=None, label='all', filled=False, leaves_parallel=False, impurity=True, node_ids=False, proportion=False, rotate=False, rounded=False, special_characters=False, precision=3, fontname='helvetica')",
                            "function_text": "Export a decision tree in DOT format. This function generates a GraphViz representation of the decision tree,\nwhich is then written into out_file. Once exported, graphical renderings\ncan be generated using, for example: The sample counts that are shown are weighted with any sample_weights that\nmight be present. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/tree.html#tree",
                            "parameter_names_desc": [
                                {
                                    "param_name": "decision_tree",
                                    "param_type": "object",
                                    "param_desc": "The decision tree estimator to be exported to GraphViz.\n"
                                },
                                {
                                    "param_name": "out_file",
                                    "param_type": "object or str, default=None",
                                    "param_desc": "Handle or name of the output file. If None, the result is\nreturned as a string.\n\nChanged in version 0.20: Default of out_file changed from \u201ctree.dot\u201d to None.\n\n"
                                },
                                {
                                    "param_name": "max_depth",
                                    "param_type": "int, default=None",
                                    "param_desc": "The maximum depth of the representation. If None, the tree is fully\ngenerated.\n"
                                },
                                {
                                    "param_name": "feature_names",
                                    "param_type": "array-like of shape (n_features,), default=None",
                                    "param_desc": "An array containing the feature names.\nIf None, generic names will be used (\u201cx[0]\u201d, \u201cx[1]\u201d, \u2026).\n"
                                },
                                {
                                    "param_name": "class_names",
                                    "param_type": "array-like of shape (n_classes,) or bool, default=None",
                                    "param_desc": "Names of each of the target classes in ascending numerical order.\nOnly relevant for classification and not supported for multi-output.\nIf True, shows a symbolic representation of the class name.\n"
                                },
                                {
                                    "param_name": "label",
                                    "param_type": "{\u2018all\u2019, \u2018root\u2019, \u2018none\u2019}, default=\u2019all\u2019",
                                    "param_desc": "Whether to show informative labels for impurity, etc.\nOptions include \u2018all\u2019 to show at every node, \u2018root\u2019 to show only at\nthe top root node, or \u2018none\u2019 to not show at any node.\n"
                                },
                                {
                                    "param_name": "filled",
                                    "param_type": "bool, default=False",
                                    "param_desc": "When set to True, paint nodes to indicate majority class for\nclassification, extremity of values for regression, or purity of node\nfor multi-output.\n"
                                },
                                {
                                    "param_name": "leaves_parallel",
                                    "param_type": "bool, default=False",
                                    "param_desc": "When set to True, draw all leaf nodes at the bottom of the tree.\n"
                                },
                                {
                                    "param_name": "impurity",
                                    "param_type": "bool, default=True",
                                    "param_desc": "When set to True, show the impurity at each node.\n"
                                },
                                {
                                    "param_name": "node_ids",
                                    "param_type": "bool, default=False",
                                    "param_desc": "When set to True, show the ID number on each node.\n"
                                },
                                {
                                    "param_name": "proportion",
                                    "param_type": "bool, default=False",
                                    "param_desc": "When set to True, change the display of \u2018values\u2019 and/or \u2018samples\u2019\nto be proportions and percentages respectively.\n"
                                },
                                {
                                    "param_name": "rotate",
                                    "param_type": "bool, default=False",
                                    "param_desc": "When set to True, orient tree left to right rather than top-down.\n"
                                },
                                {
                                    "param_name": "rounded",
                                    "param_type": "bool, default=False",
                                    "param_desc": "When set to True, draw node boxes with rounded corners.\n"
                                },
                                {
                                    "param_name": "special_characters",
                                    "param_type": "bool, default=False",
                                    "param_desc": "When set to False, ignore special characters for PostScript\ncompatibility.\n"
                                },
                                {
                                    "param_name": "precision",
                                    "param_type": "int, default=3",
                                    "param_desc": "Number of digits of precision for floating point in the values of\nimpurity, threshold and value attributes of each node.\n"
                                },
                                {
                                    "param_name": "fontname",
                                    "param_type": "str, default=\u2019helvetica\u2019",
                                    "param_desc": "Name of font used to render text.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "export_graphviz",
                            "descriptions": "Export a decision tree in DOT format. This function generates a GraphViz representation of the decision tree,\nwhich is then written into out_file. Once exported, graphical renderings\ncan be generated using, for example: The sample counts that are shown are weighted with any sample_weights that\nmight be present. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "decision_tree": {
                                        "type": "object",
                                        "description": "object. The decision tree estimator to be exported to GraphViz.\n"
                                    },
                                    "out_file": {
                                        "type": "string",
                                        "description": "object or str, default=None. Handle or name of the output file. If None, the result is\nreturned as a string.\n\nChanged in version 0.20: Default of out_file changed from \u201ctree.dot\u201d to None.\n\n"
                                    },
                                    "max_depth": {
                                        "type": "integer",
                                        "description": "int, default=None. The maximum depth of the representation. If None, the tree is fully\ngenerated.\n"
                                    },
                                    "feature_names": {
                                        "type": "array",
                                        "description": "array-like of shape (n_features,), default=None. An array containing the feature names.\nIf None, generic names will be used (\u201cx[0]\u201d, \u201cx[1]\u201d, \u2026).\n"
                                    },
                                    "class_names": {
                                        "type": "boolean",
                                        "description": "array-like of shape (n_classes,) or bool, default=None. Names of each of the target classes in ascending numerical order.\nOnly relevant for classification and not supported for multi-output.\nIf True, shows a symbolic representation of the class name.\n"
                                    },
                                    "label": {
                                        "type": "string",
                                        "enum": [
                                            "all",
                                            " root",
                                            " none"
                                        ],
                                        "description": "{\u2018all\u2019, \u2018root\u2019, \u2018none\u2019}, default=\u2019all\u2019. Whether to show informative labels for impurity, etc.\nOptions include \u2018all\u2019 to show at every node, \u2018root\u2019 to show only at\nthe top root node, or \u2018none\u2019 to not show at any node.\n"
                                    },
                                    "filled": {
                                        "type": "boolean",
                                        "description": "bool, default=False. When set to True, paint nodes to indicate majority class for\nclassification, extremity of values for regression, or purity of node\nfor multi-output.\n"
                                    },
                                    "leaves_parallel": {
                                        "type": "boolean",
                                        "description": "bool, default=False. When set to True, draw all leaf nodes at the bottom of the tree.\n"
                                    },
                                    "impurity": {
                                        "type": "boolean",
                                        "description": "bool, default=True. When set to True, show the impurity at each node.\n"
                                    },
                                    "node_ids": {
                                        "type": "boolean",
                                        "description": "bool, default=False. When set to True, show the ID number on each node.\n"
                                    },
                                    "proportion": {
                                        "type": "boolean",
                                        "description": "bool, default=False. When set to True, change the display of \u2018values\u2019 and/or \u2018samples\u2019\nto be proportions and percentages respectively.\n"
                                    },
                                    "rotate": {
                                        "type": "boolean",
                                        "description": "bool, default=False. When set to True, orient tree left to right rather than top-down.\n"
                                    },
                                    "rounded": {
                                        "type": "boolean",
                                        "description": "bool, default=False. When set to True, draw node boxes with rounded corners.\n"
                                    },
                                    "special_characters": {
                                        "type": "boolean",
                                        "description": "bool, default=False. When set to False, ignore special characters for PostScript\ncompatibility.\n"
                                    },
                                    "precision": {
                                        "type": "integer",
                                        "description": "int, default=3. Number of digits of precision for floating point in the values of\nimpurity, threshold and value attributes of each node.\n"
                                    },
                                    "fontname": {
                                        "type": "string",
                                        "description": "str, default=\u2019helvetica\u2019. Name of font used to render text.\n"
                                    }
                                },
                                "required": [
                                    "decision_tree",
                                    "out_file=None"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "export_text",
                        "func_desc": "Build a text report showing the rules of a decision tree.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.tree.export_text.html#sklearn.tree.export_text",
                        "function_definitions": {
                            "function_name": "export_text",
                            "full_function": "sklearn.tree.export_text(decision_tree, *, feature_names=None, class_names=None, max_depth=10, spacing=3, decimals=2, show_weights=False)",
                            "function_text": "Build a text report showing the rules of a decision tree. Note that backwards compatibility may not be supported.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "decision_tree",
                                    "param_type": "object",
                                    "param_desc": "The decision tree estimator to be exported.\nIt can be an instance of\nDecisionTreeClassifier or DecisionTreeRegressor.\n"
                                },
                                {
                                    "param_name": "feature_names",
                                    "param_type": "array-like of shape (n_features,), default=None",
                                    "param_desc": "An array containing the feature names.\nIf None generic names will be used (\u201cfeature_0\u201d, \u201cfeature_1\u201d, \u2026).\n"
                                },
                                {
                                    "param_name": "class_names",
                                    "param_type": "array-like of shape (n_classes,), default=None",
                                    "param_desc": "Names of each of the target classes in ascending numerical order.\nOnly relevant for classification and not supported for multi-output.\n\nif None, the class names are delegated to decision_tree.classes_;\notherwise, class_names will be used as class names instead of\ndecision_tree.classes_. The length of class_names must match\nthe length of decision_tree.classes_.\n\n\nAdded in version 1.3.\n\n"
                                },
                                {
                                    "param_name": "max_depth",
                                    "param_type": "int, default=10",
                                    "param_desc": "Only the first max_depth levels of the tree are exported.\nTruncated branches will be marked with \u201c\u2026\u201d.\n"
                                },
                                {
                                    "param_name": "spacing",
                                    "param_type": "int, default=3",
                                    "param_desc": "Number of spaces between edges. The higher it is, the wider the result.\n"
                                },
                                {
                                    "param_name": "decimals",
                                    "param_type": "int, default=2",
                                    "param_desc": "Number of decimal digits to display.\n"
                                },
                                {
                                    "param_name": "show_weights",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If true the classification weights will be exported on each leaf.\nThe classification weights are the number of samples each class.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "export_text",
                            "descriptions": "Build a text report showing the rules of a decision tree. Note that backwards compatibility may not be supported.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "decision_tree": {
                                        "type": "object",
                                        "description": "object. The decision tree estimator to be exported.\nIt can be an instance of\nDecisionTreeClassifier or DecisionTreeRegressor.\n"
                                    },
                                    "feature_names": {
                                        "type": "array",
                                        "description": "array-like of shape (n_features,), default=None. An array containing the feature names.\nIf None generic names will be used (\u201cfeature_0\u201d, \u201cfeature_1\u201d, \u2026).\n"
                                    },
                                    "class_names": {
                                        "type": "array",
                                        "description": "array-like of shape (n_classes,), default=None. Names of each of the target classes in ascending numerical order.\nOnly relevant for classification and not supported for multi-output.\n\nif None, the class names are delegated to decision_tree.classes_;\notherwise, class_names will be used as class names instead of\ndecision_tree.classes_. The length of class_names must match\nthe length of decision_tree.classes_.\n\n\nAdded in version 1.3.\n\n"
                                    },
                                    "max_depth": {
                                        "type": "integer",
                                        "description": "int, default=10. Only the first max_depth levels of the tree are exported.\nTruncated branches will be marked with \u201c\u2026\u201d.\n"
                                    },
                                    "spacing": {
                                        "type": "integer",
                                        "description": "int, default=3. Number of spaces between edges. The higher it is, the wider the result.\n"
                                    },
                                    "decimals": {
                                        "type": "integer",
                                        "description": "int, default=2. Number of decimal digits to display.\n"
                                    },
                                    "show_weights": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If true the classification weights will be exported on each leaf.\nThe classification weights are the number of samples each class.\n"
                                    }
                                },
                                "required": [
                                    "decision_tree"
                                ]
                            }
                        }
                    }
                ]
            },
            {
                "Plotting": [
                    {
                        "func_name": "plot_tree",
                        "func_desc": "Plot a decision tree.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.tree.plot_tree.html#sklearn.tree.plot_tree",
                        "function_definitions": {
                            "function_name": "plot_tree",
                            "full_function": "sklearn.tree.plot_tree(decision_tree, *, max_depth=None, feature_names=None, class_names=None, label='all', filled=False, impurity=True, node_ids=False, proportion=False, rounded=False, precision=3, ax=None, fontsize=None)",
                            "function_text": "Plot a decision tree. The sample counts that are shown are weighted with any sample_weights that\nmight be present. The visualization is fit automatically to the size of the axis.\nUse the figsize or dpi arguments of plt.figure  to control\nthe size of the rendering. Read more in the User Guide. Added in version 0.21.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/tree.html#tree",
                            "parameter_names_desc": [
                                {
                                    "param_name": "decision_tree",
                                    "param_type": "decision tree regressor or classifier",
                                    "param_desc": "The decision tree to be plotted.\n"
                                },
                                {
                                    "param_name": "max_depth",
                                    "param_type": "int, default=None",
                                    "param_desc": "The maximum depth of the representation. If None, the tree is fully\ngenerated.\n"
                                },
                                {
                                    "param_name": "feature_names",
                                    "param_type": "array-like of str, default=None",
                                    "param_desc": "Names of each of the features.\nIf None, generic names will be used (\u201cx[0]\u201d, \u201cx[1]\u201d, \u2026).\n"
                                },
                                {
                                    "param_name": "class_names",
                                    "param_type": "array-like of str or True, default=None",
                                    "param_desc": "Names of each of the target classes in ascending numerical order.\nOnly relevant for classification and not supported for multi-output.\nIf True, shows a symbolic representation of the class name.\n"
                                },
                                {
                                    "param_name": "label",
                                    "param_type": "{\u2018all\u2019, \u2018root\u2019, \u2018none\u2019}, default=\u2019all\u2019",
                                    "param_desc": "Whether to show informative labels for impurity, etc.\nOptions include \u2018all\u2019 to show at every node, \u2018root\u2019 to show only at\nthe top root node, or \u2018none\u2019 to not show at any node.\n"
                                },
                                {
                                    "param_name": "filled",
                                    "param_type": "bool, default=False",
                                    "param_desc": "When set to True, paint nodes to indicate majority class for\nclassification, extremity of values for regression, or purity of node\nfor multi-output.\n"
                                },
                                {
                                    "param_name": "impurity",
                                    "param_type": "bool, default=True",
                                    "param_desc": "When set to True, show the impurity at each node.\n"
                                },
                                {
                                    "param_name": "node_ids",
                                    "param_type": "bool, default=False",
                                    "param_desc": "When set to True, show the ID number on each node.\n"
                                },
                                {
                                    "param_name": "proportion",
                                    "param_type": "bool, default=False",
                                    "param_desc": "When set to True, change the display of \u2018values\u2019 and/or \u2018samples\u2019\nto be proportions and percentages respectively.\n"
                                },
                                {
                                    "param_name": "rounded",
                                    "param_type": "bool, default=False",
                                    "param_desc": "When set to True, draw node boxes with rounded corners and use\nHelvetica fonts instead of Times-Roman.\n"
                                },
                                {
                                    "param_name": "precision",
                                    "param_type": "int, default=3",
                                    "param_desc": "Number of digits of precision for floating point in the values of\nimpurity, threshold and value attributes of each node.\n"
                                },
                                {
                                    "param_name": "ax",
                                    "param_type": "matplotlib axis, default=None",
                                    "param_desc": "Axes to plot to. If None, use current axis. Any previous content\nis cleared.\n"
                                },
                                {
                                    "param_name": "fontsize",
                                    "param_type": "int, default=None",
                                    "param_desc": "Size of text font. If None, determined automatically to fit figure.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "plot_tree",
                            "descriptions": "Plot a decision tree. The sample counts that are shown are weighted with any sample_weights that\nmight be present. The visualization is fit automatically to the size of the axis.\nUse the figsize or dpi arguments of plt.figure  to control\nthe size of the rendering. Read more in the User Guide. Added in version 0.21.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "decision_tree": {
                                        "type": "decision tree regressor or classifier",
                                        "description": "decision tree regressor or classifier. The decision tree to be plotted.\n"
                                    },
                                    "max_depth": {
                                        "type": "integer",
                                        "description": "int, default=None. The maximum depth of the representation. If None, the tree is fully\ngenerated.\n"
                                    },
                                    "feature_names": {
                                        "type": "string",
                                        "description": "array-like of str, default=None. Names of each of the features.\nIf None, generic names will be used (\u201cx[0]\u201d, \u201cx[1]\u201d, \u2026).\n"
                                    },
                                    "class_names": {
                                        "type": "string",
                                        "description": "array-like of str or True, default=None. Names of each of the target classes in ascending numerical order.\nOnly relevant for classification and not supported for multi-output.\nIf True, shows a symbolic representation of the class name.\n"
                                    },
                                    "label": {
                                        "type": "string",
                                        "enum": [
                                            "all",
                                            " root",
                                            " none"
                                        ],
                                        "description": "{\u2018all\u2019, \u2018root\u2019, \u2018none\u2019}, default=\u2019all\u2019. Whether to show informative labels for impurity, etc.\nOptions include \u2018all\u2019 to show at every node, \u2018root\u2019 to show only at\nthe top root node, or \u2018none\u2019 to not show at any node.\n"
                                    },
                                    "filled": {
                                        "type": "boolean",
                                        "description": "bool, default=False. When set to True, paint nodes to indicate majority class for\nclassification, extremity of values for regression, or purity of node\nfor multi-output.\n"
                                    },
                                    "impurity": {
                                        "type": "boolean",
                                        "description": "bool, default=True. When set to True, show the impurity at each node.\n"
                                    },
                                    "node_ids": {
                                        "type": "boolean",
                                        "description": "bool, default=False. When set to True, show the ID number on each node.\n"
                                    },
                                    "proportion": {
                                        "type": "boolean",
                                        "description": "bool, default=False. When set to True, change the display of \u2018values\u2019 and/or \u2018samples\u2019\nto be proportions and percentages respectively.\n"
                                    },
                                    "rounded": {
                                        "type": "boolean",
                                        "description": "bool, default=False. When set to True, draw node boxes with rounded corners and use\nHelvetica fonts instead of Times-Roman.\n"
                                    },
                                    "precision": {
                                        "type": "integer",
                                        "description": "int, default=3. Number of digits of precision for floating point in the values of\nimpurity, threshold and value attributes of each node.\n"
                                    },
                                    "ax": {
                                        "type": "matplotlib axis, default=None",
                                        "description": "matplotlib axis, default=None. Axes to plot to. If None, use current axis. Any previous content\nis cleared.\n"
                                    },
                                    "fontsize": {
                                        "type": "integer",
                                        "description": "int, default=None. Size of text font. If None, determined automatically to fit figure.\n"
                                    }
                                },
                                "required": [
                                    "decision_tree"
                                ]
                            }
                        }
                    }
                ]
            }
        ],
        "name": "sklearn.tree",
        "url": "https://scikit-learn.org/stable/api/sklearn.tree.html"
    },
    "sklearn.utils.html": {
        "functions": [
            {
                "defaults": [
                    {
                        "func_name": "Bunch",
                        "func_desc": "Container object exposing keys as attributes.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.Bunch.html#sklearn.utils.Bunch",
                        "function_definitions": {
                            "function_name": "Bunch",
                            "full_function": "class sklearn.utils.Bunch(**kwargs)",
                            "function_text": "Container object exposing keys as attributes. Bunch objects are sometimes used as an output for functions and methods.\nThey extend dictionaries by enabling values to be accessed by key,\nbunch[\"value_key\"], or by an attribute, bunch.value_key. Examples Create a new dictionary with keys from iterable and values set to value. Return the value for key if key is in the dictionary, else default. If key is not found, default is returned if given, otherwise KeyError is raised Remove and return a (key, value) pair as a 2-tuple. Pairs are returned in LIFO (last-in, first-out) order.\nRaises KeyError if the dict is empty. Insert key with a value of default if key is not in the dictionary. Return the value for key if key is in the dictionary, else default. If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k]\nIf E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v\nIn either case, this is followed by: for k in F:  D[k] = F[k]",
                            "func_text_user_guide": "",
                            "parameter_names_desc": []
                        },
                        "function_calling": {}
                    },
                    {
                        "func_name": "as_float_array",
                        "func_desc": "Convert an array-like to an array of floats.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.as_float_array.html#sklearn.utils.as_float_array",
                        "function_definitions": {
                            "function_name": "as_float_array",
                            "full_function": "sklearn.utils.as_float_array(X, *, copy=True, force_all_finite=True)",
                            "function_text": "Convert an array-like to an array of floats. The new dtype will be np.float32 or np.float64, depending on the original\ntype. The function can create a copy or modify the argument depending\non the argument copy.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix}",
                                    "param_desc": "The input data.\n"
                                },
                                {
                                    "param_name": "copy",
                                    "param_type": "bool, default=True",
                                    "param_desc": "If True, a copy of X will be created. If False, a copy may still be\nreturned if X\u2019s dtype is not a floating point type.\n"
                                },
                                {
                                    "param_name": "force_all_finite",
                                    "param_type": "bool or \u2018allow-nan\u2019, default=True",
                                    "param_desc": "Whether to raise an error on np.inf, np.nan, pd.NA in X. The\npossibilities are:\n\nTrue: Force all values of X to be finite.\nFalse: accepts np.inf, np.nan, pd.NA in X.\n\u2018allow-nan\u2019: accepts only np.nan and pd.NA values in X. Values cannot\nbe infinite.\n\n\nAdded in version 0.20: force_all_finite accepts the string 'allow-nan'.\n\n\nChanged in version 0.23: Accepts pd.NA and converts it into np.nan\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "as_float_array",
                            "descriptions": "Convert an array-like to an array of floats. The new dtype will be np.float32 or np.float64, depending on the original\ntype. The function can create a copy or modify the argument depending\non the argument copy.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix}. The input data.\n"
                                    },
                                    "copy": {
                                        "type": "boolean",
                                        "description": "bool, default=True. If True, a copy of X will be created. If False, a copy may still be\nreturned if X\u2019s dtype is not a floating point type.\n"
                                    },
                                    "force_all_finite": {
                                        "type": "boolean",
                                        "description": "bool or \u2018allow-nan\u2019, default=True. Whether to raise an error on np.inf, np.nan, pd.NA in X. The\npossibilities are:\n\nTrue: Force all values of X to be finite.\nFalse: accepts np.inf, np.nan, pd.NA in X.\n\u2018allow-nan\u2019: accepts only np.nan and pd.NA values in X. Values cannot\nbe infinite.\n\n\nAdded in version 0.20: force_all_finite accepts the string 'allow-nan'.\n\n\nChanged in version 0.23: Accepts pd.NA and converts it into np.nan\n\n"
                                    }
                                },
                                "required": [
                                    "X"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "deprecated",
                        "func_desc": "Decorator to mark a function or class as deprecated.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.deprecated.html#sklearn.utils.deprecated",
                        "function_definitions": {
                            "function_name": "deprecated",
                            "full_function": "class sklearn.utils.deprecated(extra='')",
                            "function_text": "Decorator to mark a function or class as deprecated. Issue a warning when the function is called/the class is instantiated and\nadds a warning to the docstring. The optional extra argument will be appended to the deprecation message\nand the docstring. Note: to use this with the default value for extra, put\nin an empty of parentheses:",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "obj",
                                    "param_type": "object",
                                    "param_desc": ""
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "deprecated",
                            "descriptions": "Decorator to mark a function or class as deprecated. Issue a warning when the function is called/the class is instantiated and\nadds a warning to the docstring. The optional extra argument will be appended to the deprecation message\nand the docstring. Note: to use this with the default value for extra, put\nin an empty of parentheses:",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "obj": {
                                        "type": "object",
                                        "description": "object. "
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "gen_batches",
                        "func_desc": "Generator to create slices containing batch_size elements from 0 to n.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.gen_batches.html#sklearn.utils.gen_batches",
                        "function_definitions": {
                            "function_name": "gen_batches",
                            "full_function": "sklearn.utils.gen_batches(n, batch_size, *, min_batch_size=0)",
                            "function_text": "Generator to create slices containing batch_size elements from 0 to n. The last slice may contain less than batch_size elements, when\nbatch_size does not divide n.",
                            "func_text_user_guide": "sklearn.utils.gen_even_slices.html#sklearn.utils.gen_even_slices",
                            "parameter_names_desc": [
                                {
                                    "param_name": "n",
                                    "param_type": "int",
                                    "param_desc": "Size of the sequence.\n"
                                },
                                {
                                    "param_name": "batch_size",
                                    "param_type": "int",
                                    "param_desc": "Number of elements in each batch.\n"
                                },
                                {
                                    "param_name": "min_batch_size",
                                    "param_type": "int, default=0",
                                    "param_desc": "Minimum number of elements in each batch.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "gen_batches",
                            "descriptions": "Generator to create slices containing batch_size elements from 0 to n. The last slice may contain less than batch_size elements, when\nbatch_size does not divide n.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "n": {
                                        "type": "integer",
                                        "description": "int. Size of the sequence.\n"
                                    },
                                    "batch_size": {
                                        "type": "integer",
                                        "description": "int. Number of elements in each batch.\n"
                                    },
                                    "min_batch_size": {
                                        "type": "integer",
                                        "description": "int, default=0. Minimum number of elements in each batch.\n"
                                    }
                                },
                                "required": [
                                    "n",
                                    "batch_size"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "indexable",
                        "func_desc": "Make arrays indexable for cross-validation.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.indexable.html#sklearn.utils.indexable",
                        "function_definitions": {
                            "function_name": "indexable",
                            "full_function": "sklearn.utils.indexable(*iterables)",
                            "function_text": "Make arrays indexable for cross-validation. Checks consistent length, passes through None, and ensures that everything\ncan be indexed by converting sparse matrices to csr and converting\nnon-interable objects to arrays.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "*iterables",
                                    "param_type": "{lists, dataframes, ndarrays, sparse matrices}",
                                    "param_desc": "List of objects to ensure sliceability.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "indexable",
                            "descriptions": "Make arrays indexable for cross-validation. Checks consistent length, passes through None, and ensures that everything\ncan be indexed by converting sparse matrices to csr and converting\nnon-interable objects to arrays.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "*iterables": {
                                        "type": "array",
                                        "description": "{lists, dataframes, ndarrays, sparse matrices}. List of objects to ensure sliceability.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "resample",
                        "func_desc": "Resample arrays or sparse matrices in a consistent way.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.resample.html#sklearn.utils.resample",
                        "function_definitions": {
                            "function_name": "resample",
                            "full_function": "sklearn.utils.resample(*arrays, replace=True, n_samples=None, random_state=None, stratify=None)",
                            "function_text": "Resample arrays or sparse matrices in a consistent way. The default strategy implements one step of the bootstrapping\nprocedure.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/glossary.html#term-random_state",
                            "parameter_names_desc": [
                                {
                                    "param_name": "*arrays",
                                    "param_type": "sequence of array-like of shape (n_samples,) or             (n_samples, n_outputs)",
                                    "param_desc": "Indexable data-structures can be arrays, lists, dataframes or scipy\nsparse matrices with consistent first dimension.\n"
                                },
                                {
                                    "param_name": "replace",
                                    "param_type": "bool, default=True",
                                    "param_desc": "Implements resampling with replacement. If False, this will implement\n(sliced) random permutations.\n"
                                },
                                {
                                    "param_name": "n_samples",
                                    "param_type": "int, default=None",
                                    "param_desc": "Number of samples to generate. If left to None this is\nautomatically set to the first dimension of the arrays.\nIf replace is False it should not be larger than the length of\narrays.\n"
                                },
                                {
                                    "param_name": "random_state",
                                    "param_type": "int, RandomState instance or None, default=None",
                                    "param_desc": "Determines random number generation for shuffling\nthe data.\nPass an int for reproducible results across multiple function calls.\nSee Glossary.\n"
                                },
                                {
                                    "param_name": "stratify",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples,) or             (n_samples, n_outputs), default=None",
                                    "param_desc": "If not None, data is split in a stratified fashion, using this as\nthe class labels.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "resample",
                            "descriptions": "Resample arrays or sparse matrices in a consistent way. The default strategy implements one step of the bootstrapping\nprocedure.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "*arrays": {
                                        "type": "array",
                                        "description": "sequence of array-like of shape (n_samples,) or             (n_samples, n_outputs). Indexable data-structures can be arrays, lists, dataframes or scipy\nsparse matrices with consistent first dimension.\n"
                                    },
                                    "replace": {
                                        "type": "boolean",
                                        "description": "bool, default=True. Implements resampling with replacement. If False, this will implement\n(sliced) random permutations.\n"
                                    },
                                    "n_samples": {
                                        "type": "integer",
                                        "description": "int, default=None. Number of samples to generate. If left to None this is\nautomatically set to the first dimension of the arrays.\nIf replace is False it should not be larger than the length of\narrays.\n"
                                    },
                                    "random_state": {
                                        "type": "integer",
                                        "description": "int, RandomState instance or None, default=None. Determines random number generation for shuffling\nthe data.\nPass an int for reproducible results across multiple function calls.\nSee Glossary.\n"
                                    },
                                    "stratify": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples,) or             (n_samples, n_outputs), default=None. If not None, data is split in a stratified fashion, using this as\nthe class labels.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "safe_sqr",
                        "func_desc": "Element wise squaring of array-likes and sparse matrices.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.safe_sqr.html#sklearn.utils.safe_sqr",
                        "function_definitions": {
                            "function_name": "safe_sqr",
                            "full_function": "sklearn.utils.safe_sqr(X, *, copy=True)",
                            "function_text": "Element wise squaring of array-likes and sparse matrices.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, ndarray, sparse matrix}",
                                    "param_desc": ""
                                },
                                {
                                    "param_name": "copy",
                                    "param_type": "bool, default=True",
                                    "param_desc": "Whether to create a copy of X and operate on it or to perform\ninplace computation (default behaviour).\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "safe_sqr",
                            "descriptions": "Element wise squaring of array-likes and sparse matrices.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, ndarray, sparse matrix}. "
                                    },
                                    "copy": {
                                        "type": "boolean",
                                        "description": "bool, default=True. Whether to create a copy of X and operate on it or to perform\ninplace computation (default behaviour).\n"
                                    }
                                },
                                "required": [
                                    "X"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "_safe_indexing",
                        "func_desc": "Return rows, items or columns of X using indices.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils._safe_indexing.html#sklearn.utils._safe_indexing",
                        "function_definitions": {
                            "function_name": "_safe_indexing",
                            "full_function": "sklearn.utils._safe_indexing(X, indices, *, axis=0)",
                            "function_text": "Return rows, items or columns of X using indices. Warning This utility is documented, but private. This means that\nbackward compatibility might be broken without any deprecation\ncycle.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "array-like, sparse-matrix, list, pandas.DataFrame, pandas.Series",
                                    "param_desc": "Data from which to sample rows, items or columns. list are only\nsupported when axis=0.\n"
                                },
                                {
                                    "param_name": "indices",
                                    "param_type": "bool, int, str, slice, array-like",
                                    "param_desc": "\nIf axis=0, boolean and integer array-like, integer slice,\nand scalar integer are supported.\n\nIf axis=1:\nto select a single column, indices can be of int type for\nall X types and str only for dataframe. The selected subset\nwill be 1D, unless X is a sparse matrix in which case it will\nbe 2D.\nto select multiples columns, indices can be one of the\nfollowing: list, array, slice. The type used in\nthese containers can be one of the following: int, \u2018bool\u2019 and\nstr. However, str is only supported when X is a dataframe.\nThe selected subset will be 2D.\n\n\n\n\n\n"
                                },
                                {
                                    "param_name": "axis",
                                    "param_type": "int, default=0",
                                    "param_desc": "The axis along which X will be subsampled. axis=0 will select\nrows while axis=1 will select columns.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "_safe_indexing",
                            "descriptions": "Return rows, items or columns of X using indices. Warning This utility is documented, but private. This means that\nbackward compatibility might be broken without any deprecation\ncycle.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "array-like, sparse-matrix, list, pandas.DataFrame, pandas.Series. Data from which to sample rows, items or columns. list are only\nsupported when axis=0.\n"
                                    },
                                    "indices": {
                                        "type": "integer",
                                        "description": "bool, int, str, slice, array-like. \nIf axis=0, boolean and integer array-like, integer slice,\nand scalar integer are supported.\n\nIf axis=1:\nto select a single column, indices can be of int type for\nall X types and str only for dataframe. The selected subset\nwill be 1D, unless X is a sparse matrix in which case it will\nbe 2D.\nto select multiples columns, indices can be one of the\nfollowing: list, array, slice. The type used in\nthese containers can be one of the following: int, \u2018bool\u2019 and\nstr. However, str is only supported when X is a dataframe.\nThe selected subset will be 2D.\n\n\n\n\n\n"
                                    },
                                    "axis": {
                                        "type": "integer",
                                        "description": "int, default=0. The axis along which X will be subsampled. axis=0 will select\nrows while axis=1 will select columns.\n"
                                    }
                                },
                                "required": [
                                    "X",
                                    "indices"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "assert_all_finite",
                        "func_desc": "Throw a ValueError if X contains NaN or infinity.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.assert_all_finite.html#sklearn.utils.assert_all_finite",
                        "function_definitions": {
                            "function_name": "assert_all_finite",
                            "full_function": "sklearn.utils.assert_all_finite(X, *, allow_nan=False, estimator_name=None, input_name='')",
                            "function_text": "Throw a ValueError if X contains NaN or infinity.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{ndarray, sparse matrix}",
                                    "param_desc": "The input data.\n"
                                },
                                {
                                    "param_name": "allow_nan",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If True, do not throw error when X contains NaN.\n"
                                },
                                {
                                    "param_name": "estimator_name",
                                    "param_type": "str, default=None",
                                    "param_desc": "The estimator name, used to construct the error message.\n"
                                },
                                {
                                    "param_name": "input_name",
                                    "param_type": "str, default=\u201d\u201d",
                                    "param_desc": "The data name used to construct the error message. In particular\nif input_name is \u201cX\u201d and the data has NaN values and\nallow_nan is False, the error message will link to the imputer\ndocumentation.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "assert_all_finite",
                            "descriptions": "Throw a ValueError if X contains NaN or infinity.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{ndarray, sparse matrix}. The input data.\n"
                                    },
                                    "allow_nan": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If True, do not throw error when X contains NaN.\n"
                                    },
                                    "estimator_name": {
                                        "type": "string",
                                        "description": "str, default=None. The estimator name, used to construct the error message.\n"
                                    },
                                    "input_name": {
                                        "type": "string",
                                        "description": "str, default=\u201d\u201d. The data name used to construct the error message. In particular\nif input_name is \u201cX\u201d and the data has NaN values and\nallow_nan is False, the error message will link to the imputer\ndocumentation.\n"
                                    }
                                },
                                "required": [
                                    "X"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "estimator_html_repr",
                        "func_desc": "Build a HTML representation of an estimator.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.estimator_html_repr.html#sklearn.utils.estimator_html_repr",
                        "function_definitions": {
                            "function_name": "estimator_html_repr",
                            "full_function": "sklearn.utils.estimator_html_repr(estimator)",
                            "function_text": "Build a HTML representation of an estimator. Read more in the User Guide.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/modules/compose.html#visualizing-composite-estimators",
                            "parameter_names_desc": [
                                {
                                    "param_name": "estimator",
                                    "param_type": "estimator object",
                                    "param_desc": "The estimator to visualize.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "estimator_html_repr",
                            "descriptions": "Build a HTML representation of an estimator. Read more in the User Guide.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "estimator": {
                                        "type": "object",
                                        "description": "estimator object. The estimator to visualize.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "gen_even_slices",
                        "func_desc": "Generator to create n_packs evenly spaced slices going up to n.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.gen_even_slices.html#sklearn.utils.gen_even_slices",
                        "function_definitions": {
                            "function_name": "gen_even_slices",
                            "full_function": "sklearn.utils.gen_even_slices(n, n_packs, *, n_samples=None)",
                            "function_text": "Generator to create n_packs evenly spaced slices going up to n. If n_packs does not divide n, except for the first n % n_packs\nslices, remaining slices may contain fewer elements.",
                            "func_text_user_guide": "sklearn.utils.gen_batches.html#sklearn.utils.gen_batches",
                            "parameter_names_desc": [
                                {
                                    "param_name": "n",
                                    "param_type": "int",
                                    "param_desc": "Size of the sequence.\n"
                                },
                                {
                                    "param_name": "n_packs",
                                    "param_type": "int",
                                    "param_desc": "Number of slices to generate.\n"
                                },
                                {
                                    "param_name": "n_samples",
                                    "param_type": "int, default=None",
                                    "param_desc": "Number of samples. Pass n_samples when the slices are to be used for\nsparse matrix indexing; slicing off-the-end raises an exception, while\nit works for NumPy arrays.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "gen_even_slices",
                            "descriptions": "Generator to create n_packs evenly spaced slices going up to n. If n_packs does not divide n, except for the first n % n_packs\nslices, remaining slices may contain fewer elements.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "n": {
                                        "type": "integer",
                                        "description": "int. Size of the sequence.\n"
                                    },
                                    "n_packs": {
                                        "type": "integer",
                                        "description": "int. Number of slices to generate.\n"
                                    },
                                    "n_samples": {
                                        "type": "integer",
                                        "description": "int, default=None. Number of samples. Pass n_samples when the slices are to be used for\nsparse matrix indexing; slicing off-the-end raises an exception, while\nit works for NumPy arrays.\n"
                                    }
                                },
                                "required": [
                                    "n",
                                    "n_packs"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "murmurhash3_32",
                        "func_desc": "Compute the 32bit murmurhash3 of key at seed.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.murmurhash3_32.html#sklearn.utils.murmurhash3_32",
                        "function_definitions": {
                            "function_name": "murmurhash3_32",
                            "full_function": "sklearn.utils.murmurhash3_32(key, seed=0, positive=False)#",
                            "function_text": "Compute the 32bit murmurhash3 of key at seed. The underlying implementation is MurmurHash3_x86_32 generating low\nlatency 32bits hash suitable for implementing lookup tables, Bloom\nfilters, count min sketch or feature hashing.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "key",
                                    "param_type": "np.int32, bytes, unicode or ndarray of dtype=np.int32",
                                    "param_desc": "The physical object to hash.\n"
                                },
                                {
                                    "param_name": "seed",
                                    "param_type": "int, default=0",
                                    "param_desc": "Integer seed for the hashing algorithm.\n"
                                },
                                {
                                    "param_name": "positive",
                                    "param_type": "bool, default=False",
                                    "param_desc": "\nTrue: the results is casted to an unsigned intfrom 0 to 2 ** 32 - 1\n\nFalse: the results is casted to a signed intfrom -(2 ** 31) to 2 ** 31 - 1\n\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "murmurhash3_32",
                            "descriptions": "Compute the 32bit murmurhash3 of key at seed. The underlying implementation is MurmurHash3_x86_32 generating low\nlatency 32bits hash suitable for implementing lookup tables, Bloom\nfilters, count min sketch or feature hashing.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "key": {
                                        "type": "integer",
                                        "description": "np.int32, bytes, unicode or ndarray of dtype=np.int32. The physical object to hash.\n"
                                    },
                                    "seed": {
                                        "type": "integer",
                                        "description": "int, default=0. Integer seed for the hashing algorithm.\n"
                                    },
                                    "positive": {
                                        "type": "boolean",
                                        "description": "bool, default=False. \nTrue: the results is casted to an unsigned intfrom 0 to 2 ** 32 - 1\n\nFalse: the results is casted to a signed intfrom -(2 ** 31) to 2 ** 31 - 1\n\n\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "safe_mask",
                        "func_desc": "Return a mask which is safe to use on X.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.safe_mask.html#sklearn.utils.safe_mask",
                        "function_definitions": {
                            "function_name": "safe_mask",
                            "full_function": "sklearn.utils.safe_mask(X, mask)",
                            "function_text": "Return a mask which is safe to use on X.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{array-like, sparse matrix}",
                                    "param_desc": "Data on which to apply mask.\n"
                                },
                                {
                                    "param_name": "mask",
                                    "param_type": "array-like",
                                    "param_desc": "Mask to be used on X.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "safe_mask",
                            "descriptions": "Return a mask which is safe to use on X.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix}. Data on which to apply mask.\n"
                                    },
                                    "mask": {
                                        "type": "array",
                                        "description": "array-like. Mask to be used on X.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "shuffle",
                        "func_desc": "Shuffle arrays or sparse matrices in a consistent way.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.shuffle.html#sklearn.utils.shuffle",
                        "function_definitions": {
                            "function_name": "shuffle",
                            "full_function": "sklearn.utils.shuffle(*arrays, random_state=None, n_samples=None)",
                            "function_text": "Shuffle arrays or sparse matrices in a consistent way. This is a convenience alias to resample(*arrays, replace=False) to do\nrandom permutations of the collections.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/glossary.html#term-random_state",
                            "parameter_names_desc": [
                                {
                                    "param_name": "*arrays",
                                    "param_type": "sequence of indexable data-structures",
                                    "param_desc": "Indexable data-structures can be arrays, lists, dataframes or scipy\nsparse matrices with consistent first dimension.\n"
                                },
                                {
                                    "param_name": "random_state",
                                    "param_type": "int, RandomState instance or None, default=None",
                                    "param_desc": "Determines random number generation for shuffling\nthe data.\nPass an int for reproducible results across multiple function calls.\nSee Glossary.\n"
                                },
                                {
                                    "param_name": "n_samples",
                                    "param_type": "int, default=None",
                                    "param_desc": "Number of samples to generate. If left to None this is\nautomatically set to the first dimension of the arrays.  It should\nnot be larger than the length of arrays.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "shuffle",
                            "descriptions": "Shuffle arrays or sparse matrices in a consistent way. This is a convenience alias to resample(*arrays, replace=False) to do\nrandom permutations of the collections.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "*arrays": {
                                        "type": "string",
                                        "description": "sequence of indexable data-structures. Indexable data-structures can be arrays, lists, dataframes or scipy\nsparse matrices with consistent first dimension.\n"
                                    },
                                    "random_state": {
                                        "type": "integer",
                                        "description": "int, RandomState instance or None, default=None. Determines random number generation for shuffling\nthe data.\nPass an int for reproducible results across multiple function calls.\nSee Glossary.\n"
                                    },
                                    "n_samples": {
                                        "type": "integer",
                                        "description": "int, default=None. Number of samples to generate. If left to None this is\nautomatically set to the first dimension of the arrays.  It should\nnot be larger than the length of arrays.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    }
                ]
            },
            {
                "Input and parameter validation": [
                    {
                        "func_name": "check_X_y",
                        "func_desc": "Input validation for standard estimators.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.check_X_y.html#sklearn.utils.check_X_y",
                        "function_definitions": {
                            "function_name": "check_X_y",
                            "full_function": "sklearn.utils.check_X_y(X, y, accept_sparse=False, *, accept_large_sparse=True, dtype='numeric', order=None, copy=False, force_all_finite=True, ensure_2d=True, allow_nd=False, multi_output=False, ensure_min_samples=1, ensure_min_features=1, y_numeric=False, estimator=None)",
                            "function_text": "Input validation for standard estimators. Checks X and y for consistent length, enforces X to be 2D and y 1D. By\ndefault, X is checked to be non-empty and containing only finite values.\nStandard input checks are also applied to y, such as checking that y\ndoes not have np.nan or np.inf targets. For multi-label y, set\nmulti_output=True to allow 2D and sparse y. If the dtype of X is\nobject, attempt converting to float, raising on failure.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "{ndarray, list, sparse matrix}",
                                    "param_desc": "Input data.\n"
                                },
                                {
                                    "param_name": "y",
                                    "param_type": "{ndarray, list, sparse matrix}",
                                    "param_desc": "Labels.\n"
                                },
                                {
                                    "param_name": "accept_sparse",
                                    "param_type": "str, bool or list of str, default=False",
                                    "param_desc": "String[s] representing allowed sparse matrix formats, such as \u2018csc\u2019,\n\u2018csr\u2019, etc. If the input is sparse but not in the allowed format,\nit will be converted to the first listed format. True allows the input\nto be any format. False means that a sparse matrix input will\nraise an error.\n"
                                },
                                {
                                    "param_name": "accept_large_sparse",
                                    "param_type": "bool, default=True",
                                    "param_desc": "If a CSR, CSC, COO or BSR sparse matrix is supplied and accepted by\naccept_sparse, accept_large_sparse will cause it to be accepted only\nif its indices are stored with a 32-bit dtype.\n\nAdded in version 0.20.\n\n"
                                },
                                {
                                    "param_name": "dtype",
                                    "param_type": "\u2018numeric\u2019, type, list of type or None, default=\u2019numeric\u2019",
                                    "param_desc": "Data type of result. If None, the dtype of the input is preserved.\nIf \u201cnumeric\u201d, dtype is preserved unless array.dtype is object.\nIf dtype is a list of types, conversion on the first type is only\nperformed if the dtype of the input is not in the list.\n"
                                },
                                {
                                    "param_name": "order",
                                    "param_type": "{\u2018F\u2019, \u2018C\u2019}, default=None",
                                    "param_desc": "Whether an array will be forced to be fortran or c-style. If\nNone, then the input data\u2019s order is preserved when possible.\n"
                                },
                                {
                                    "param_name": "copy",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Whether a forced copy will be triggered. If copy=False, a copy might\nbe triggered by a conversion.\n"
                                },
                                {
                                    "param_name": "force_all_finite",
                                    "param_type": "bool or \u2018allow-nan\u2019, default=True",
                                    "param_desc": "Whether to raise an error on np.inf, np.nan, pd.NA in X. This parameter\ndoes not influence whether y can have np.inf, np.nan, pd.NA values.\nThe possibilities are:\n\nTrue: Force all values of X to be finite.\nFalse: accepts np.inf, np.nan, pd.NA in X.\n\u2018allow-nan\u2019: accepts only np.nan or pd.NA values in X. Values cannot\nbe infinite.\n\n\nAdded in version 0.20: force_all_finite accepts the string 'allow-nan'.\n\n\nChanged in version 0.23: Accepts pd.NA and converts it into np.nan\n\n"
                                },
                                {
                                    "param_name": "ensure_2d",
                                    "param_type": "bool, default=True",
                                    "param_desc": "Whether to raise a value error if X is not 2D.\n"
                                },
                                {
                                    "param_name": "allow_nd",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Whether to allow X.ndim > 2.\n"
                                },
                                {
                                    "param_name": "multi_output",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Whether to allow 2D y (array or sparse matrix). If false, y will be\nvalidated as a vector. y cannot have np.nan or np.inf values if\nmulti_output=True.\n"
                                },
                                {
                                    "param_name": "ensure_min_samples",
                                    "param_type": "int, default=1",
                                    "param_desc": "Make sure that X has a minimum number of samples in its first\naxis (rows for a 2D array).\n"
                                },
                                {
                                    "param_name": "ensure_min_features",
                                    "param_type": "int, default=1",
                                    "param_desc": "Make sure that the 2D array has some minimum number of features\n(columns). The default value of 1 rejects empty datasets.\nThis check is only enforced when X has effectively 2 dimensions or\nis originally 1D and ensure_2d is True. Setting to 0 disables\nthis check.\n"
                                },
                                {
                                    "param_name": "y_numeric",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Whether to ensure that y has a numeric type. If dtype of y is object,\nit is converted to float64. Should only be used for regression\nalgorithms.\n"
                                },
                                {
                                    "param_name": "estimator",
                                    "param_type": "str or estimator instance, default=None",
                                    "param_desc": "If passed, include the name of the estimator in warning messages.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "check_X_y",
                            "descriptions": "Input validation for standard estimators. Checks X and y for consistent length, enforces X to be 2D and y 1D. By\ndefault, X is checked to be non-empty and containing only finite values.\nStandard input checks are also applied to y, such as checking that y\ndoes not have np.nan or np.inf targets. For multi-label y, set\nmulti_output=True to allow 2D and sparse y. If the dtype of X is\nobject, attempt converting to float, raising on failure.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "{ndarray, list, sparse matrix}. Input data.\n"
                                    },
                                    "y": {
                                        "type": "array",
                                        "description": "{ndarray, list, sparse matrix}. Labels.\n"
                                    },
                                    "accept_sparse": {
                                        "type": "string",
                                        "description": "str, bool or list of str, default=False. String[s] representing allowed sparse matrix formats, such as \u2018csc\u2019,\n\u2018csr\u2019, etc. If the input is sparse but not in the allowed format,\nit will be converted to the first listed format. True allows the input\nto be any format. False means that a sparse matrix input will\nraise an error.\n"
                                    },
                                    "accept_large_sparse": {
                                        "type": "boolean",
                                        "description": "bool, default=True. If a CSR, CSC, COO or BSR sparse matrix is supplied and accepted by\naccept_sparse, accept_large_sparse will cause it to be accepted only\nif its indices are stored with a 32-bit dtype.\n\nAdded in version 0.20.\n\n"
                                    },
                                    "dtype": {
                                        "type": "array",
                                        "description": "\u2018numeric\u2019, type, list of type or None, default=\u2019numeric\u2019. Data type of result. If None, the dtype of the input is preserved.\nIf \u201cnumeric\u201d, dtype is preserved unless array.dtype is object.\nIf dtype is a list of types, conversion on the first type is only\nperformed if the dtype of the input is not in the list.\n"
                                    },
                                    "order": {
                                        "type": "string",
                                        "enum": [
                                            "F",
                                            " C"
                                        ],
                                        "description": "{\u2018F\u2019, \u2018C\u2019}, default=None. Whether an array will be forced to be fortran or c-style. If\nNone, then the input data\u2019s order is preserved when possible.\n"
                                    },
                                    "copy": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Whether a forced copy will be triggered. If copy=False, a copy might\nbe triggered by a conversion.\n"
                                    },
                                    "force_all_finite": {
                                        "type": "boolean",
                                        "description": "bool or \u2018allow-nan\u2019, default=True. Whether to raise an error on np.inf, np.nan, pd.NA in X. This parameter\ndoes not influence whether y can have np.inf, np.nan, pd.NA values.\nThe possibilities are:\n\nTrue: Force all values of X to be finite.\nFalse: accepts np.inf, np.nan, pd.NA in X.\n\u2018allow-nan\u2019: accepts only np.nan or pd.NA values in X. Values cannot\nbe infinite.\n\n\nAdded in version 0.20: force_all_finite accepts the string 'allow-nan'.\n\n\nChanged in version 0.23: Accepts pd.NA and converts it into np.nan\n\n"
                                    },
                                    "ensure_2d": {
                                        "type": "boolean",
                                        "description": "bool, default=True. Whether to raise a value error if X is not 2D.\n"
                                    },
                                    "allow_nd": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Whether to allow X.ndim > 2.\n"
                                    },
                                    "multi_output": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Whether to allow 2D y (array or sparse matrix). If false, y will be\nvalidated as a vector. y cannot have np.nan or np.inf values if\nmulti_output=True.\n"
                                    },
                                    "ensure_min_samples": {
                                        "type": "integer",
                                        "description": "int, default=1. Make sure that X has a minimum number of samples in its first\naxis (rows for a 2D array).\n"
                                    },
                                    "ensure_min_features": {
                                        "type": "integer",
                                        "description": "int, default=1. Make sure that the 2D array has some minimum number of features\n(columns). The default value of 1 rejects empty datasets.\nThis check is only enforced when X has effectively 2 dimensions or\nis originally 1D and ensure_2d is True. Setting to 0 disables\nthis check.\n"
                                    },
                                    "y_numeric": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Whether to ensure that y has a numeric type. If dtype of y is object,\nit is converted to float64. Should only be used for regression\nalgorithms.\n"
                                    },
                                    "estimator": {
                                        "type": "string",
                                        "description": "str or estimator instance, default=None. If passed, include the name of the estimator in warning messages.\n"
                                    }
                                },
                                "required": [
                                    "X",
                                    "y",
                                    "accept_sparse=False"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "check_consistent_length",
                        "func_desc": "Check that all arrays have consistent first dimensions.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.check_consistent_length.html#sklearn.utils.check_consistent_length",
                        "function_definitions": {
                            "function_name": "check_consistent_length",
                            "full_function": "sklearn.utils.check_consistent_length(*arrays)",
                            "function_text": "Check that all arrays have consistent first dimensions. Checks whether all objects in arrays have the same shape or length.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "*arrays",
                                    "param_type": "list or tuple of input objects.",
                                    "param_desc": "Objects that will be checked for consistent length.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "check_consistent_length",
                            "descriptions": "Check that all arrays have consistent first dimensions. Checks whether all objects in arrays have the same shape or length.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "*arrays": {
                                        "type": "object",
                                        "description": "list or tuple of input objects.. Objects that will be checked for consistent length.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "check_scalar",
                        "func_desc": "Validate scalar parameters type and value.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.check_scalar.html#sklearn.utils.check_scalar",
                        "function_definitions": {
                            "function_name": "check_scalar",
                            "full_function": "sklearn.utils.check_scalar(x, name, target_type, *, min_val=None, max_val=None, include_boundaries='both')",
                            "function_text": "Validate scalar parameters type and value.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": []
                        },
                        "function_calling": {}
                    },
                    {
                        "func_name": "validation.check_memory",
                        "func_desc": "Check that memory is joblib.Memory-like.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.validation.check_memory.html#sklearn.utils.validation.check_memory",
                        "function_definitions": {
                            "function_name": "check_memory",
                            "full_function": "sklearn.utils.validation.check_memory(memory)",
                            "function_text": "Check that memory is joblib.Memory-like. joblib.Memory-like means that memory can be converted into a\njoblib.Memory instance (typically a str denoting the location)\nor has the same interface (has a cache method).",
                            "func_text_user_guide": "",
                            "parameter_names_desc": []
                        },
                        "function_calling": {}
                    },
                    {
                        "func_name": "validation.column_or_1d",
                        "func_desc": "Ravel column or 1d numpy array, else raises an error.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.validation.column_or_1d.html#sklearn.utils.validation.column_or_1d",
                        "function_definitions": {
                            "function_name": "column_or_1d",
                            "full_function": "sklearn.utils.validation.column_or_1d(y, *, dtype=None, warn=False)",
                            "function_text": "Ravel column or 1d numpy array, else raises an error.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": []
                        },
                        "function_calling": {}
                    },
                    {
                        "func_name": "check_array",
                        "func_desc": "Input validation on an array, list, sparse matrix or similar.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.check_array.html#sklearn.utils.check_array",
                        "function_definitions": {
                            "function_name": "check_array",
                            "full_function": "sklearn.utils.check_array(array, accept_sparse=False, *, accept_large_sparse=True, dtype='numeric', order=None, copy=False, force_all_finite=True, ensure_2d=True, allow_nd=False, ensure_min_samples=1, ensure_min_features=1, estimator=None, input_name='')",
                            "function_text": "Input validation on an array, list, sparse matrix or similar. By default, the input is checked to be a non-empty 2D array containing\nonly finite values. If the dtype of the array is object, attempt\nconverting to float, raising on failure.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "array",
                                    "param_type": "object",
                                    "param_desc": "Input object to check / convert.\n"
                                },
                                {
                                    "param_name": "accept_sparse",
                                    "param_type": "str, bool or list/tuple of str, default=False",
                                    "param_desc": "String[s] representing allowed sparse matrix formats, such as \u2018csc\u2019,\n\u2018csr\u2019, etc. If the input is sparse but not in the allowed format,\nit will be converted to the first listed format. True allows the input\nto be any format. False means that a sparse matrix input will\nraise an error.\n"
                                },
                                {
                                    "param_name": "accept_large_sparse",
                                    "param_type": "bool, default=True",
                                    "param_desc": "If a CSR, CSC, COO or BSR sparse matrix is supplied and accepted by\naccept_sparse, accept_large_sparse=False will cause it to be accepted\nonly if its indices are stored with a 32-bit dtype.\n\nAdded in version 0.20.\n\n"
                                },
                                {
                                    "param_name": "dtype",
                                    "param_type": "\u2018numeric\u2019, type, list of type or None, default=\u2019numeric\u2019",
                                    "param_desc": "Data type of result. If None, the dtype of the input is preserved.\nIf \u201cnumeric\u201d, dtype is preserved unless array.dtype is object.\nIf dtype is a list of types, conversion on the first type is only\nperformed if the dtype of the input is not in the list.\n"
                                },
                                {
                                    "param_name": "order",
                                    "param_type": "{\u2018F\u2019, \u2018C\u2019} or None, default=None",
                                    "param_desc": "Whether an array will be forced to be fortran or c-style.\nWhen order is None (default), then if copy=False, nothing is ensured\nabout the memory layout of the output array; otherwise (copy=True)\nthe memory layout of the returned array is kept as close as possible\nto the original array.\n"
                                },
                                {
                                    "param_name": "copy",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Whether a forced copy will be triggered. If copy=False, a copy might\nbe triggered by a conversion.\n"
                                },
                                {
                                    "param_name": "force_all_finite",
                                    "param_type": "bool or \u2018allow-nan\u2019, default=True",
                                    "param_desc": "Whether to raise an error on np.inf, np.nan, pd.NA in array. The\npossibilities are:\n\nTrue: Force all values of array to be finite.\nFalse: accepts np.inf, np.nan, pd.NA in array.\n\u2018allow-nan\u2019: accepts only np.nan and pd.NA values in array. Values\ncannot be infinite.\n\n\nAdded in version 0.20: force_all_finite accepts the string 'allow-nan'.\n\n\nChanged in version 0.23: Accepts pd.NA and converts it into np.nan\n\n"
                                },
                                {
                                    "param_name": "ensure_2d",
                                    "param_type": "bool, default=True",
                                    "param_desc": "Whether to raise a value error if array is not 2D.\n"
                                },
                                {
                                    "param_name": "allow_nd",
                                    "param_type": "bool, default=False",
                                    "param_desc": "Whether to allow array.ndim > 2.\n"
                                },
                                {
                                    "param_name": "ensure_min_samples",
                                    "param_type": "int, default=1",
                                    "param_desc": "Make sure that the array has a minimum number of samples in its first\naxis (rows for a 2D array). Setting to 0 disables this check.\n"
                                },
                                {
                                    "param_name": "ensure_min_features",
                                    "param_type": "int, default=1",
                                    "param_desc": "Make sure that the 2D array has some minimum number of features\n(columns). The default value of 1 rejects empty datasets.\nThis check is only enforced when the input data has effectively 2\ndimensions or is originally 1D and ensure_2d is True. Setting to 0\ndisables this check.\n"
                                },
                                {
                                    "param_name": "estimator",
                                    "param_type": "str or estimator instance, default=None",
                                    "param_desc": "If passed, include the name of the estimator in warning messages.\n"
                                },
                                {
                                    "param_name": "input_name",
                                    "param_type": "str, default=\u201d\u201d",
                                    "param_desc": "The data name used to construct the error message. In particular\nif input_name is \u201cX\u201d and the data has NaN values and\nallow_nan is False, the error message will link to the imputer\ndocumentation.\n\nAdded in version 1.1.0.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "check_array",
                            "descriptions": "Input validation on an array, list, sparse matrix or similar. By default, the input is checked to be a non-empty 2D array containing\nonly finite values. If the dtype of the array is object, attempt\nconverting to float, raising on failure.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "array": {
                                        "type": "object",
                                        "description": "object. Input object to check / convert.\n"
                                    },
                                    "accept_sparse": {
                                        "type": "string",
                                        "description": "str, bool or list/tuple of str, default=False. String[s] representing allowed sparse matrix formats, such as \u2018csc\u2019,\n\u2018csr\u2019, etc. If the input is sparse but not in the allowed format,\nit will be converted to the first listed format. True allows the input\nto be any format. False means that a sparse matrix input will\nraise an error.\n"
                                    },
                                    "accept_large_sparse": {
                                        "type": "boolean",
                                        "description": "bool, default=True. If a CSR, CSC, COO or BSR sparse matrix is supplied and accepted by\naccept_sparse, accept_large_sparse=False will cause it to be accepted\nonly if its indices are stored with a 32-bit dtype.\n\nAdded in version 0.20.\n\n"
                                    },
                                    "dtype": {
                                        "type": "array",
                                        "description": "\u2018numeric\u2019, type, list of type or None, default=\u2019numeric\u2019. Data type of result. If None, the dtype of the input is preserved.\nIf \u201cnumeric\u201d, dtype is preserved unless array.dtype is object.\nIf dtype is a list of types, conversion on the first type is only\nperformed if the dtype of the input is not in the list.\n"
                                    },
                                    "order": {
                                        "type": "string",
                                        "enum": [
                                            "F",
                                            " C"
                                        ],
                                        "description": "{\u2018F\u2019, \u2018C\u2019} or None, default=None. Whether an array will be forced to be fortran or c-style.\nWhen order is None (default), then if copy=False, nothing is ensured\nabout the memory layout of the output array; otherwise (copy=True)\nthe memory layout of the returned array is kept as close as possible\nto the original array.\n"
                                    },
                                    "copy": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Whether a forced copy will be triggered. If copy=False, a copy might\nbe triggered by a conversion.\n"
                                    },
                                    "force_all_finite": {
                                        "type": "boolean",
                                        "description": "bool or \u2018allow-nan\u2019, default=True. Whether to raise an error on np.inf, np.nan, pd.NA in array. The\npossibilities are:\n\nTrue: Force all values of array to be finite.\nFalse: accepts np.inf, np.nan, pd.NA in array.\n\u2018allow-nan\u2019: accepts only np.nan and pd.NA values in array. Values\ncannot be infinite.\n\n\nAdded in version 0.20: force_all_finite accepts the string 'allow-nan'.\n\n\nChanged in version 0.23: Accepts pd.NA and converts it into np.nan\n\n"
                                    },
                                    "ensure_2d": {
                                        "type": "boolean",
                                        "description": "bool, default=True. Whether to raise a value error if array is not 2D.\n"
                                    },
                                    "allow_nd": {
                                        "type": "boolean",
                                        "description": "bool, default=False. Whether to allow array.ndim > 2.\n"
                                    },
                                    "ensure_min_samples": {
                                        "type": "integer",
                                        "description": "int, default=1. Make sure that the array has a minimum number of samples in its first\naxis (rows for a 2D array). Setting to 0 disables this check.\n"
                                    },
                                    "ensure_min_features": {
                                        "type": "integer",
                                        "description": "int, default=1. Make sure that the 2D array has some minimum number of features\n(columns). The default value of 1 rejects empty datasets.\nThis check is only enforced when the input data has effectively 2\ndimensions or is originally 1D and ensure_2d is True. Setting to 0\ndisables this check.\n"
                                    },
                                    "estimator": {
                                        "type": "string",
                                        "description": "str or estimator instance, default=None. If passed, include the name of the estimator in warning messages.\n"
                                    },
                                    "input_name": {
                                        "type": "string",
                                        "description": "str, default=\u201d\u201d. The data name used to construct the error message. In particular\nif input_name is \u201cX\u201d and the data has NaN values and\nallow_nan is False, the error message will link to the imputer\ndocumentation.\n\nAdded in version 1.1.0.\n\n"
                                    }
                                },
                                "required": [
                                    "array",
                                    "accept_sparse=False"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "check_random_state",
                        "func_desc": "Turn seed into a np.random.RandomState instance.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.check_random_state.html#sklearn.utils.check_random_state",
                        "function_definitions": {
                            "function_name": "check_random_state",
                            "full_function": "sklearn.utils.check_random_state(seed)",
                            "function_text": "Turn seed into a np.random.RandomState instance.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "seed",
                                    "param_type": "None, int or instance of RandomState",
                                    "param_desc": "If seed is None, return the RandomState singleton used by np.random.\nIf seed is an int, return a new RandomState instance seeded with seed.\nIf seed is already a RandomState instance, return it.\nOtherwise raise ValueError.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "check_random_state",
                            "descriptions": "Turn seed into a np.random.RandomState instance.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "seed": {
                                        "type": "integer",
                                        "description": "None, int or instance of RandomState. If seed is None, return the RandomState singleton used by np.random.\nIf seed is an int, return a new RandomState instance seeded with seed.\nIf seed is already a RandomState instance, return it.\nOtherwise raise ValueError.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "validation.check_is_fitted",
                        "func_desc": "Perform is_fitted validation for estimator.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.validation.check_is_fitted.html#sklearn.utils.validation.check_is_fitted",
                        "function_definitions": {
                            "function_name": "check_is_fitted",
                            "full_function": "sklearn.utils.validation.check_is_fitted(estimator, attributes=None, *, msg=None, all_or_any=<built-in function all>)",
                            "function_text": "Perform is_fitted validation for estimator. Checks if the estimator is fitted by verifying the presence of\nfitted attributes (ending with a trailing underscore) and otherwise\nraises a NotFittedError with the given message. If an estimator does not set any attributes with a trailing underscore, it\ncan define a __sklearn_is_fitted__ method returning a boolean to\nspecify if the estimator is fitted or not. See\n__sklearn_is_fitted__ as Developer API\nfor an example on how to use the API.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/auto_examples/developing_estimators/sklearn_is_fitted.html#sphx-glr-auto-examples-developing-estimators-sklearn-is-fitted-py",
                            "parameter_names_desc": [
                                {
                                    "param_name": "estimator",
                                    "param_type": "estimator instance",
                                    "param_desc": "Estimator instance for which the check is performed.\n"
                                },
                                {
                                    "param_name": "attributes",
                                    "param_type": "str, list or tuple of str, default=None",
                                    "param_desc": "Attribute name(s) given as string or a list/tuple of strings\nEg.: [\"coef_\", \"estimator_\", ...], \"coef_\"\nIf None, estimator is considered fitted if there exist an\nattribute that ends with a underscore and does not start with double\nunderscore.\n"
                                },
                                {
                                    "param_name": "msg",
                                    "param_type": "str, default=None",
                                    "param_desc": "The default error message is, \u201cThis %(name)s instance is not fitted\nyet. Call \u2018fit\u2019 with appropriate arguments before using this\nestimator.\u201d\nFor custom messages if \u201c%(name)s\u201d is present in the message string,\nit is substituted for the estimator name.\nEg. : \u201cEstimator, %(name)s, must be fitted before sparsifying\u201d.\n"
                                },
                                {
                                    "param_name": "all_or_any",
                                    "param_type": "callable, {all, any}, default=all",
                                    "param_desc": "Specify whether all or any of the given attributes must exist.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "check_is_fitted",
                            "descriptions": "Perform is_fitted validation for estimator. Checks if the estimator is fitted by verifying the presence of\nfitted attributes (ending with a trailing underscore) and otherwise\nraises a NotFittedError with the given message. If an estimator does not set any attributes with a trailing underscore, it\ncan define a __sklearn_is_fitted__ method returning a boolean to\nspecify if the estimator is fitted or not. See\n__sklearn_is_fitted__ as Developer API\nfor an example on how to use the API.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "estimator": {
                                        "type": "estimator instance",
                                        "description": "estimator instance. Estimator instance for which the check is performed.\n"
                                    },
                                    "attributes": {
                                        "type": "string",
                                        "description": "str, list or tuple of str, default=None. Attribute name(s) given as string or a list/tuple of strings\nEg.: [\"coef_\", \"estimator_\", ...], \"coef_\"\nIf None, estimator is considered fitted if there exist an\nattribute that ends with a underscore and does not start with double\nunderscore.\n"
                                    },
                                    "msg": {
                                        "type": "string",
                                        "description": "str, default=None. The default error message is, \u201cThis %(name)s instance is not fitted\nyet. Call \u2018fit\u2019 with appropriate arguments before using this\nestimator.\u201d\nFor custom messages if \u201c%(name)s\u201d is present in the message string,\nit is substituted for the estimator name.\nEg. : \u201cEstimator, %(name)s, must be fitted before sparsifying\u201d.\n"
                                    },
                                    "all_or_any": {
                                        "type": "object",
                                        "description": "callable, {all, any}, default=all. Specify whether all or any of the given attributes must exist.\n"
                                    }
                                },
                                "required": [
                                    "estimator",
                                    "attributes=None"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "validation.check_symmetric",
                        "func_desc": "Make sure that array is 2D, square and symmetric.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.validation.check_symmetric.html#sklearn.utils.validation.check_symmetric",
                        "function_definitions": {
                            "function_name": "check_symmetric",
                            "full_function": "sklearn.utils.validation.check_symmetric(array, *, tol=1e-10, raise_warning=True, raise_exception=False)",
                            "function_text": "Make sure that array is 2D, square and symmetric. If the array is not symmetric, then a symmetrized version is returned.\nOptionally, a warning or exception is raised if the matrix is not\nsymmetric.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "array",
                                    "param_type": "{ndarray, sparse matrix}",
                                    "param_desc": "Input object to check / convert. Must be two-dimensional and square,\notherwise a ValueError will be raised.\n"
                                },
                                {
                                    "param_name": "tol",
                                    "param_type": "float, default=1e-10",
                                    "param_desc": "Absolute tolerance for equivalence of arrays. Default = 1E-10.\n"
                                },
                                {
                                    "param_name": "raise_warning",
                                    "param_type": "bool, default=True",
                                    "param_desc": "If True then raise a warning if conversion is required.\n"
                                },
                                {
                                    "param_name": "raise_exception",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If True then raise an exception if array is not symmetric.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "check_symmetric",
                            "descriptions": "Make sure that array is 2D, square and symmetric. If the array is not symmetric, then a symmetrized version is returned.\nOptionally, a warning or exception is raised if the matrix is not\nsymmetric.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "array": {
                                        "type": "array",
                                        "description": "{ndarray, sparse matrix}. Input object to check / convert. Must be two-dimensional and square,\notherwise a ValueError will be raised.\n"
                                    },
                                    "tol": {
                                        "type": "float",
                                        "description": "float, default=1e-10. Absolute tolerance for equivalence of arrays. Default = 1E-10.\n"
                                    },
                                    "raise_warning": {
                                        "type": "boolean",
                                        "description": "bool, default=True. If True then raise a warning if conversion is required.\n"
                                    },
                                    "raise_exception": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If True then raise an exception if array is not symmetric.\n"
                                    }
                                },
                                "required": [
                                    "array"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "validation.has_fit_parameter",
                        "func_desc": "Check whether the estimator's fit method supports the given parameter.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.validation.has_fit_parameter.html#sklearn.utils.validation.has_fit_parameter",
                        "function_definitions": {
                            "function_name": "has_fit_parameter",
                            "full_function": "sklearn.utils.validation.has_fit_parameter(estimator, parameter)",
                            "function_text": "Check whether the estimator\u2019s fit method supports the given parameter.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "estimator",
                                    "param_type": "object",
                                    "param_desc": "An estimator to inspect.\n"
                                },
                                {
                                    "param_name": "parameter",
                                    "param_type": "str",
                                    "param_desc": "The searched parameter.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "has_fit_parameter",
                            "descriptions": "Check whether the estimator\u2019s fit method supports the given parameter.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "estimator": {
                                        "type": "object",
                                        "description": "object. An estimator to inspect.\n"
                                    },
                                    "parameter": {
                                        "type": "string",
                                        "description": "str. The searched parameter.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    }
                ]
            },
            {
                "Meta-estimators": [
                    {
                        "func_name": "metaestimators.available_if",
                        "func_desc": "An attribute that is available only if check returns a truthy value.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.metaestimators.available_if.html#sklearn.utils.metaestimators.available_if",
                        "function_definitions": {
                            "function_name": "available_if",
                            "full_function": "sklearn.utils.metaestimators.available_if(check)",
                            "function_text": "An attribute that is available only if check returns a truthy value.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "check",
                                    "param_type": "callable",
                                    "param_desc": "When passed the object with the decorated method, this should return\na truthy value if the attribute is available, and either return False\nor raise an AttributeError if not available.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "available_if",
                            "descriptions": "An attribute that is available only if check returns a truthy value.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "check": {
                                        "type": "object",
                                        "description": "callable. When passed the object with the decorated method, this should return\na truthy value if the attribute is available, and either return False\nor raise an AttributeError if not available.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    }
                ]
            },
            {
                "Weight handling based on class labels": [
                    {
                        "func_name": "class_weight.compute_class_weight",
                        "func_desc": "Estimate class weights for unbalanced datasets.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.class_weight.compute_class_weight.html#sklearn.utils.class_weight.compute_class_weight",
                        "function_definitions": {
                            "function_name": "compute_class_weight",
                            "full_function": "sklearn.utils.class_weight.compute_class_weight(class_weight, *, classes, y)",
                            "function_text": "Estimate class weights for unbalanced datasets.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "class_weight",
                                    "param_type": "dict, \u201cbalanced\u201d or None",
                                    "param_desc": "If \u201cbalanced\u201d, class weights will be given by\nn_samples / (n_classes * np.bincount(y)).\nIf a dictionary is given, keys are classes and values are corresponding class\nweights.\nIf None is given, the class weights will be uniform.\n"
                                },
                                {
                                    "param_name": "classes",
                                    "param_type": "ndarray",
                                    "param_desc": "Array of the classes occurring in the data, as given by\nnp.unique(y_org) with y_org the original class labels.\n"
                                },
                                {
                                    "param_name": "y",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "Array of original class labels per sample.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "compute_class_weight",
                            "descriptions": "Estimate class weights for unbalanced datasets.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "class_weight": {
                                        "type": "dict, \u201cbalanced\u201d or None",
                                        "description": "dict, \u201cbalanced\u201d or None. If \u201cbalanced\u201d, class weights will be given by\nn_samples / (n_classes * np.bincount(y)).\nIf a dictionary is given, keys are classes and values are corresponding class\nweights.\nIf None is given, the class weights will be uniform.\n"
                                    },
                                    "classes": {
                                        "type": "array",
                                        "description": "ndarray. Array of the classes occurring in the data, as given by\nnp.unique(y_org) with y_org the original class labels.\n"
                                    },
                                    "y": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). Array of original class labels per sample.\n"
                                    }
                                },
                                "required": [
                                    "class_weight"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "class_weight.compute_sample_weight",
                        "func_desc": "Estimate sample weights by class for unbalanced datasets.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.class_weight.compute_sample_weight.html#sklearn.utils.class_weight.compute_sample_weight",
                        "function_definitions": {
                            "function_name": "compute_sample_weight",
                            "full_function": "sklearn.utils.class_weight.compute_sample_weight(class_weight, y, *, indices=None)",
                            "function_text": "Estimate sample weights by class for unbalanced datasets.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "class_weight",
                                    "param_type": "dict, list of dicts, \u201cbalanced\u201d, or None",
                                    "param_desc": "Weights associated with classes in the form {class_label: weight}.\nIf not given, all classes are supposed to have weight one. For\nmulti-output problems, a list of dicts can be provided in the same\norder as the columns of y.\nNote that for multioutput (including multilabel) weights should be\ndefined for each class of every column in its own dict. For example,\nfor four-class multilabel classification weights should be\n[{0: 1, 1: 1}, {0: 1, 1: 5}, {0: 1, 1: 1}, {0: 1, 1: 1}] instead of\n[{1:1}, {2:5}, {3:1}, {4:1}].\nThe \"balanced\" mode uses the values of y to automatically adjust\nweights inversely proportional to class frequencies in the input data:\nn_samples / (n_classes * np.bincount(y)).\nFor multi-output, the weights of each column of y will be multiplied.\n"
                                },
                                {
                                    "param_name": "y",
                                    "param_type": "{array-like, sparse matrix} of shape (n_samples,) or (n_samples, n_outputs)",
                                    "param_desc": "Array of original class labels per sample.\n"
                                },
                                {
                                    "param_name": "indices",
                                    "param_type": "array-like of shape (n_subsample,), default=None",
                                    "param_desc": "Array of indices to be used in a subsample. Can be of length less than\nn_samples in the case of a subsample, or equal to n_samples in the\ncase of a bootstrap subsample with repeated indices. If None, the\nsample weight will be calculated over the full sample. Only \"balanced\"\nis supported for class_weight if this is provided.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "compute_sample_weight",
                            "descriptions": "Estimate sample weights by class for unbalanced datasets.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "class_weight": {
                                        "type": "array",
                                        "description": "dict, list of dicts, \u201cbalanced\u201d, or None. Weights associated with classes in the form {class_label: weight}.\nIf not given, all classes are supposed to have weight one. For\nmulti-output problems, a list of dicts can be provided in the same\norder as the columns of y.\nNote that for multioutput (including multilabel) weights should be\ndefined for each class of every column in its own dict. For example,\nfor four-class multilabel classification weights should be\n[{0: 1, 1: 1}, {0: 1, 1: 5}, {0: 1, 1: 1}, {0: 1, 1: 1}] instead of\n[{1:1}, {2:5}, {3:1}, {4:1}].\nThe \"balanced\" mode uses the values of y to automatically adjust\nweights inversely proportional to class frequencies in the input data:\nn_samples / (n_classes * np.bincount(y)).\nFor multi-output, the weights of each column of y will be multiplied.\n"
                                    },
                                    "y": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_samples,) or (n_samples, n_outputs). Array of original class labels per sample.\n"
                                    },
                                    "indices": {
                                        "type": "array",
                                        "description": "array-like of shape (n_subsample,), default=None. Array of indices to be used in a subsample. Can be of length less than\nn_samples in the case of a subsample, or equal to n_samples in the\ncase of a bootstrap subsample with repeated indices. If None, the\nsample weight will be calculated over the full sample. Only \"balanced\"\nis supported for class_weight if this is provided.\n"
                                    }
                                },
                                "required": [
                                    "class_weight",
                                    "y"
                                ]
                            }
                        }
                    }
                ]
            },
            {
                "Dealing with multiclass target in classifiers": [
                    {
                        "func_name": "multiclass.is_multilabel",
                        "func_desc": "Check if y is in a multilabel format.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.multiclass.is_multilabel.html#sklearn.utils.multiclass.is_multilabel",
                        "function_definitions": {
                            "function_name": "is_multilabel",
                            "full_function": "sklearn.utils.multiclass.is_multilabel(y)",
                            "function_text": "Check if y is in a multilabel format.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "y",
                                    "param_type": "ndarray of shape (n_samples,)",
                                    "param_desc": "Target values.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "is_multilabel",
                            "descriptions": "Check if y is in a multilabel format.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "y": {
                                        "type": "array",
                                        "description": "ndarray of shape (n_samples,). Target values.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "multiclass.unique_labels",
                        "func_desc": "Extract an ordered array of unique labels.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.multiclass.unique_labels.html#sklearn.utils.multiclass.unique_labels",
                        "function_definitions": {
                            "function_name": "unique_labels",
                            "full_function": "sklearn.utils.multiclass.unique_labels(*ys)",
                            "function_text": "Extract an ordered array of unique labels. mix of multilabel and multiclass (single label) targets mix of label indicator matrix and anything else,\nbecause there are no explicit labels) mix of label indicator matrices of different sizes mix of string and integer labels At the moment, we also don\u2019t allow \u201cmulticlass-multioutput\u201d input type.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "*ys",
                                    "param_type": "array-likes",
                                    "param_desc": "Label values.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "unique_labels",
                            "descriptions": "Extract an ordered array of unique labels. mix of multilabel and multiclass (single label) targets mix of label indicator matrix and anything else,\nbecause there are no explicit labels) mix of label indicator matrices of different sizes mix of string and integer labels At the moment, we also don\u2019t allow \u201cmulticlass-multioutput\u201d input type.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "*ys": {
                                        "type": "array",
                                        "description": "array-likes. Label values.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "multiclass.type_of_target",
                        "func_desc": "Determine the type of data indicated by the target.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.multiclass.type_of_target.html#sklearn.utils.multiclass.type_of_target",
                        "function_definitions": {
                            "function_name": "type_of_target",
                            "full_function": "sklearn.utils.multiclass.type_of_target(y, input_name='')",
                            "function_text": "Determine the type of data indicated by the target. Note that this type is the most specific type that can be inferred.\nFor example: binary is more specific but compatible with multiclass. multiclass of integers is more specific but compatible with\ncontinuous. multilabel-indicator is more specific but compatible with\nmulticlass-multioutput.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "y",
                                    "param_type": "{array-like, sparse matrix}",
                                    "param_desc": "Target values. If a sparse matrix, y is expected to be a\nCSR/CSC matrix.\n"
                                },
                                {
                                    "param_name": "input_name",
                                    "param_type": "str, default=\u201d\u201d",
                                    "param_desc": "The data name used to construct the error message.\n\nAdded in version 1.1.0.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "type_of_target",
                            "descriptions": "Determine the type of data indicated by the target. Note that this type is the most specific type that can be inferred.\nFor example: binary is more specific but compatible with multiclass. multiclass of integers is more specific but compatible with\ncontinuous. multilabel-indicator is more specific but compatible with\nmulticlass-multioutput.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "y": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix}. Target values. If a sparse matrix, y is expected to be a\nCSR/CSC matrix.\n"
                                    },
                                    "input_name": {
                                        "type": "string",
                                        "description": "str, default=\u201d\u201d. The data name used to construct the error message.\n\nAdded in version 1.1.0.\n\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    }
                ]
            },
            {
                "Optimal mathematical operations": [
                    {
                        "func_name": "extmath.density",
                        "func_desc": "Compute density of a sparse vector.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.extmath.density.html#sklearn.utils.extmath.density",
                        "function_definitions": {
                            "function_name": "density",
                            "full_function": "sklearn.utils.extmath.density(w)",
                            "function_text": "Compute density of a sparse vector.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "w",
                                    "param_type": "{ndarray, sparse matrix}",
                                    "param_desc": "The input data can be numpy ndarray or a sparse matrix.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "density",
                            "descriptions": "Compute density of a sparse vector.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "w": {
                                        "type": "array",
                                        "description": "{ndarray, sparse matrix}. The input data can be numpy ndarray or a sparse matrix.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "extmath.randomized_range_finder",
                        "func_desc": "Compute an orthonormal matrix whose range approximates the range of A.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.extmath.randomized_range_finder.html#sklearn.utils.extmath.randomized_range_finder",
                        "function_definitions": {
                            "function_name": "randomized_range_finder",
                            "full_function": "sklearn.utils.extmath.randomized_range_finder(A, *, size, n_iter, power_iteration_normalizer='auto', random_state=None)",
                            "function_text": "Compute an orthonormal matrix whose range approximates the range of A.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/glossary.html#term-random_state",
                            "parameter_names_desc": [
                                {
                                    "param_name": "A",
                                    "param_type": "2D array",
                                    "param_desc": "The input data matrix.\n"
                                },
                                {
                                    "param_name": "size",
                                    "param_type": "int",
                                    "param_desc": "Size of the return array.\n"
                                },
                                {
                                    "param_name": "n_iter",
                                    "param_type": "int",
                                    "param_desc": "Number of power iterations used to stabilize the result.\n"
                                },
                                {
                                    "param_name": "power_iteration_normalizer",
                                    "param_type": "{\u2018auto\u2019, \u2018QR\u2019, \u2018LU\u2019, \u2018none\u2019}, default=\u2019auto\u2019",
                                    "param_desc": "Whether the power iterations are normalized with step-by-step\nQR factorization (the slowest but most accurate), \u2018none\u2019\n(the fastest but numerically unstable when n_iter is large, e.g.\ntypically 5 or larger), or \u2018LU\u2019 factorization (numerically stable\nbut can lose slightly in accuracy). The \u2018auto\u2019 mode applies no\nnormalization if n_iter <= 2 and switches to LU otherwise.\n\nAdded in version 0.18.\n\n"
                                },
                                {
                                    "param_name": "random_state",
                                    "param_type": "int, RandomState instance or None, default=None",
                                    "param_desc": "The seed of the pseudo random number generator to use when shuffling\nthe data, i.e. getting the random vectors to initialize the algorithm.\nPass an int for reproducible results across multiple function calls.\nSee Glossary.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "randomized_range_finder",
                            "descriptions": "Compute an orthonormal matrix whose range approximates the range of A.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "A": {
                                        "type": "array",
                                        "description": "2D array. The input data matrix.\n"
                                    },
                                    "size": {
                                        "type": "integer",
                                        "description": "int. Size of the return array.\n"
                                    },
                                    "n_iter": {
                                        "type": "integer",
                                        "description": "int. Number of power iterations used to stabilize the result.\n"
                                    },
                                    "power_iteration_normalizer": {
                                        "type": "string",
                                        "enum": [
                                            "auto",
                                            " QR",
                                            " LU",
                                            " none"
                                        ],
                                        "description": "{\u2018auto\u2019, \u2018QR\u2019, \u2018LU\u2019, \u2018none\u2019}, default=\u2019auto\u2019. Whether the power iterations are normalized with step-by-step\nQR factorization (the slowest but most accurate), \u2018none\u2019\n(the fastest but numerically unstable when n_iter is large, e.g.\ntypically 5 or larger), or \u2018LU\u2019 factorization (numerically stable\nbut can lose slightly in accuracy). The \u2018auto\u2019 mode applies no\nnormalization if n_iter <= 2 and switches to LU otherwise.\n\nAdded in version 0.18.\n\n"
                                    },
                                    "random_state": {
                                        "type": "integer",
                                        "description": "int, RandomState instance or None, default=None. The seed of the pseudo random number generator to use when shuffling\nthe data, i.e. getting the random vectors to initialize the algorithm.\nPass an int for reproducible results across multiple function calls.\nSee Glossary.\n"
                                    }
                                },
                                "required": [
                                    "A"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "extmath.safe_sparse_dot",
                        "func_desc": "Dot product that handle the sparse matrix case correctly.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.extmath.safe_sparse_dot.html#sklearn.utils.extmath.safe_sparse_dot",
                        "function_definitions": {
                            "function_name": "safe_sparse_dot",
                            "full_function": "sklearn.utils.extmath.safe_sparse_dot(a, b, *, dense_output=False)",
                            "function_text": "Dot product that handle the sparse matrix case correctly.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "a",
                                    "param_type": "{ndarray, sparse matrix}",
                                    "param_desc": ""
                                },
                                {
                                    "param_name": "b",
                                    "param_type": "{ndarray, sparse matrix}",
                                    "param_desc": ""
                                },
                                {
                                    "param_name": "dense_output",
                                    "param_type": "bool, default=False",
                                    "param_desc": "When False, a and b both being sparse will yield sparse output.\nWhen True, output will always be a dense array.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "safe_sparse_dot",
                            "descriptions": "Dot product that handle the sparse matrix case correctly.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "a": {
                                        "type": "array",
                                        "description": "{ndarray, sparse matrix}. "
                                    },
                                    "b": {
                                        "type": "array",
                                        "description": "{ndarray, sparse matrix}. "
                                    },
                                    "dense_output": {
                                        "type": "boolean",
                                        "description": "bool, default=False. When False, a and b both being sparse will yield sparse output.\nWhen True, output will always be a dense array.\n"
                                    }
                                },
                                "required": [
                                    "a",
                                    "b"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "extmath.fast_logdet",
                        "func_desc": "Compute logarithm of determinant of a square matrix.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.extmath.fast_logdet.html#sklearn.utils.extmath.fast_logdet",
                        "function_definitions": {
                            "function_name": "fast_logdet",
                            "full_function": "sklearn.utils.extmath.fast_logdet(A)",
                            "function_text": "Compute logarithm of determinant of a square matrix. The (natural) logarithm of the determinant of a square matrix\nis returned if det(A) is non-negative and well defined.\nIf the determinant is zero or negative returns -Inf. Equivalent to : np.log(np.det(A)) but more robust.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "A",
                                    "param_type": "array_like of shape (n, n)",
                                    "param_desc": "The square matrix.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "fast_logdet",
                            "descriptions": "Compute logarithm of determinant of a square matrix. The (natural) logarithm of the determinant of a square matrix\nis returned if det(A) is non-negative and well defined.\nIf the determinant is zero or negative returns -Inf. Equivalent to : np.log(np.det(A)) but more robust.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "A": {
                                        "type": "array",
                                        "description": "array_like of shape (n, n). The square matrix.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "extmath.randomized_svd",
                        "func_desc": "Compute a truncated randomized SVD.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.extmath.randomized_svd.html#sklearn.utils.extmath.randomized_svd",
                        "function_definitions": {
                            "function_name": "randomized_svd",
                            "full_function": "sklearn.utils.extmath.randomized_svd(M, n_components, *, n_oversamples=10, n_iter='auto', power_iteration_normalizer='auto', transpose='auto', flip_sign=True, random_state=None, svd_lapack_driver='gesdd')",
                            "function_text": "Compute a truncated randomized SVD. This method solves the fixed-rank approximation problem described in [1]\n(problem (1.5), p5).",
                            "func_text_user_guide": "#rf38c2b656ebc-1",
                            "parameter_names_desc": [
                                {
                                    "param_name": "M",
                                    "param_type": "{ndarray, sparse matrix}",
                                    "param_desc": "Matrix to decompose.\n"
                                },
                                {
                                    "param_name": "n_components",
                                    "param_type": "int",
                                    "param_desc": "Number of singular values and vectors to extract.\n"
                                },
                                {
                                    "param_name": "n_oversamples",
                                    "param_type": "int, default=10",
                                    "param_desc": "Additional number of random vectors to sample the range of M so as\nto ensure proper conditioning. The total number of random vectors\nused to find the range of M is n_components + n_oversamples. Smaller\nnumber can improve speed but can negatively impact the quality of\napproximation of singular vectors and singular values. Users might wish\nto increase this parameter up to 2*k - n_components where k is the\neffective rank, for large matrices, noisy problems, matrices with\nslowly decaying spectrums, or to increase precision accuracy. See [1]\n(pages 5, 23 and 26).\n"
                                },
                                {
                                    "param_name": "n_iter",
                                    "param_type": "int or \u2018auto\u2019, default=\u2019auto\u2019",
                                    "param_desc": "Number of power iterations. It can be used to deal with very noisy\nproblems. When \u2018auto\u2019, it is set to 4, unless n_components is small\n(< .1 * min(X.shape)) in which case n_iter is set to 7.\nThis improves precision with few components. Note that in general\nusers should rather increase n_oversamples before increasing n_iter\nas the principle of the randomized method is to avoid usage of these\nmore costly power iterations steps. When n_components is equal\nor greater to the effective matrix rank and the spectrum does not\npresent a slow decay, n_iter=0 or 1 should even work fine in theory\n(see [1] page 9).\n\nChanged in version 0.18.\n\n"
                                },
                                {
                                    "param_name": "power_iteration_normalizer",
                                    "param_type": "{\u2018auto\u2019, \u2018QR\u2019, \u2018LU\u2019, \u2018none\u2019}, default=\u2019auto\u2019",
                                    "param_desc": "Whether the power iterations are normalized with step-by-step\nQR factorization (the slowest but most accurate), \u2018none\u2019\n(the fastest but numerically unstable when n_iter is large, e.g.\ntypically 5 or larger), or \u2018LU\u2019 factorization (numerically stable\nbut can lose slightly in accuracy). The \u2018auto\u2019 mode applies no\nnormalization if n_iter <= 2 and switches to LU otherwise.\n\nAdded in version 0.18.\n\n"
                                },
                                {
                                    "param_name": "transpose",
                                    "param_type": "bool or \u2018auto\u2019, default=\u2019auto\u2019",
                                    "param_desc": "Whether the algorithm should be applied to M.T instead of M. The\nresult should approximately be the same. The \u2018auto\u2019 mode will\ntrigger the transposition if M.shape[1] > M.shape[0] since this\nimplementation of randomized SVD tend to be a little faster in that\ncase.\n\nChanged in version 0.18.\n\n"
                                },
                                {
                                    "param_name": "flip_sign",
                                    "param_type": "bool, default=True",
                                    "param_desc": "The output of a singular value decomposition is only unique up to a\npermutation of the signs of the singular vectors. If flip_sign is\nset to True, the sign ambiguity is resolved by making the largest\nloadings for each component in the left singular vectors positive.\n"
                                },
                                {
                                    "param_name": "random_state",
                                    "param_type": "int, RandomState instance or None, default=\u2019warn\u2019",
                                    "param_desc": "The seed of the pseudo random number generator to use when\nshuffling the data, i.e. getting the random vectors to initialize\nthe algorithm. Pass an int for reproducible results across multiple\nfunction calls. See Glossary.\n\nChanged in version 1.2: The default value changed from 0 to None.\n\n"
                                },
                                {
                                    "param_name": "svd_lapack_driver",
                                    "param_type": "{\u201cgesdd\u201d, \u201cgesvd\u201d}, default=\u201dgesdd\u201d",
                                    "param_desc": "Whether to use the more efficient divide-and-conquer approach\n(\"gesdd\") or more general rectangular approach (\"gesvd\") to compute\nthe SVD of the matrix B, which is the projection of M into a low\ndimensional subspace, as described in [1].\n\nAdded in version 1.2.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "randomized_svd",
                            "descriptions": "Compute a truncated randomized SVD. This method solves the fixed-rank approximation problem described in [1]\n(problem (1.5), p5).",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "M": {
                                        "type": "array",
                                        "description": "{ndarray, sparse matrix}. Matrix to decompose.\n"
                                    },
                                    "n_components": {
                                        "type": "integer",
                                        "description": "int. Number of singular values and vectors to extract.\n"
                                    },
                                    "n_oversamples": {
                                        "type": "integer",
                                        "description": "int, default=10. Additional number of random vectors to sample the range of M so as\nto ensure proper conditioning. The total number of random vectors\nused to find the range of M is n_components + n_oversamples. Smaller\nnumber can improve speed but can negatively impact the quality of\napproximation of singular vectors and singular values. Users might wish\nto increase this parameter up to 2*k - n_components where k is the\neffective rank, for large matrices, noisy problems, matrices with\nslowly decaying spectrums, or to increase precision accuracy. See [1]\n(pages 5, 23 and 26).\n"
                                    },
                                    "n_iter": {
                                        "type": "integer",
                                        "description": "int or \u2018auto\u2019, default=\u2019auto\u2019. Number of power iterations. It can be used to deal with very noisy\nproblems. When \u2018auto\u2019, it is set to 4, unless n_components is small\n(< .1 * min(X.shape)) in which case n_iter is set to 7.\nThis improves precision with few components. Note that in general\nusers should rather increase n_oversamples before increasing n_iter\nas the principle of the randomized method is to avoid usage of these\nmore costly power iterations steps. When n_components is equal\nor greater to the effective matrix rank and the spectrum does not\npresent a slow decay, n_iter=0 or 1 should even work fine in theory\n(see [1] page 9).\n\nChanged in version 0.18.\n\n"
                                    },
                                    "power_iteration_normalizer": {
                                        "type": "string",
                                        "enum": [
                                            "auto",
                                            " QR",
                                            " LU",
                                            " none"
                                        ],
                                        "description": "{\u2018auto\u2019, \u2018QR\u2019, \u2018LU\u2019, \u2018none\u2019}, default=\u2019auto\u2019. Whether the power iterations are normalized with step-by-step\nQR factorization (the slowest but most accurate), \u2018none\u2019\n(the fastest but numerically unstable when n_iter is large, e.g.\ntypically 5 or larger), or \u2018LU\u2019 factorization (numerically stable\nbut can lose slightly in accuracy). The \u2018auto\u2019 mode applies no\nnormalization if n_iter <= 2 and switches to LU otherwise.\n\nAdded in version 0.18.\n\n"
                                    },
                                    "transpose": {
                                        "type": "boolean",
                                        "description": "bool or \u2018auto\u2019, default=\u2019auto\u2019. Whether the algorithm should be applied to M.T instead of M. The\nresult should approximately be the same. The \u2018auto\u2019 mode will\ntrigger the transposition if M.shape[1] > M.shape[0] since this\nimplementation of randomized SVD tend to be a little faster in that\ncase.\n\nChanged in version 0.18.\n\n"
                                    },
                                    "flip_sign": {
                                        "type": "boolean",
                                        "description": "bool, default=True. The output of a singular value decomposition is only unique up to a\npermutation of the signs of the singular vectors. If flip_sign is\nset to True, the sign ambiguity is resolved by making the largest\nloadings for each component in the left singular vectors positive.\n"
                                    },
                                    "random_state": {
                                        "type": "integer",
                                        "description": "int, RandomState instance or None, default=\u2019warn\u2019. The seed of the pseudo random number generator to use when\nshuffling the data, i.e. getting the random vectors to initialize\nthe algorithm. Pass an int for reproducible results across multiple\nfunction calls. See Glossary.\n\nChanged in version 1.2: The default value changed from 0 to None.\n\n"
                                    },
                                    "svd_lapack_driver": {
                                        "type": "{\u201cgesdd\u201d, \u201cgesvd\u201d}, default=\u201dgesdd\u201d",
                                        "description": "{\u201cgesdd\u201d, \u201cgesvd\u201d}, default=\u201dgesdd\u201d. Whether to use the more efficient divide-and-conquer approach\n(\"gesdd\") or more general rectangular approach (\"gesvd\") to compute\nthe SVD of the matrix B, which is the projection of M into a low\ndimensional subspace, as described in [1].\n\nAdded in version 1.2.\n\n"
                                    }
                                },
                                "required": [
                                    "M",
                                    "n_components"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "extmath.weighted_mode",
                        "func_desc": "Return an array of the weighted modal (most common) value in the passed array.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.extmath.weighted_mode.html#sklearn.utils.extmath.weighted_mode",
                        "function_definitions": {
                            "function_name": "weighted_mode",
                            "full_function": "sklearn.utils.extmath.weighted_mode(a, w, *, axis=0)",
                            "function_text": "Return an array of the weighted modal (most common) value in the passed array. If there is more than one such value, only the first is returned.\nThe bin-count for the modal bins is also returned. This is an extension of the algorithm in scipy.stats.mode.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "a",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "Array of which values to find mode(s).\n"
                                },
                                {
                                    "param_name": "w",
                                    "param_type": "array-like of shape (n_samples,)",
                                    "param_desc": "Array of weights for each value.\n"
                                },
                                {
                                    "param_name": "axis",
                                    "param_type": "int, default=0",
                                    "param_desc": "Axis along which to operate. Default is 0, i.e. the first axis.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "weighted_mode",
                            "descriptions": "Return an array of the weighted modal (most common) value in the passed array. If there is more than one such value, only the first is returned.\nThe bin-count for the modal bins is also returned. This is an extension of the algorithm in scipy.stats.mode.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "a": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). Array of which values to find mode(s).\n"
                                    },
                                    "w": {
                                        "type": "array",
                                        "description": "array-like of shape (n_samples,). Array of weights for each value.\n"
                                    },
                                    "axis": {
                                        "type": "integer",
                                        "description": "int, default=0. Axis along which to operate. Default is 0, i.e. the first axis.\n"
                                    }
                                },
                                "required": [
                                    "a",
                                    "w"
                                ]
                            }
                        }
                    }
                ]
            },
            {
                "Working with sparse matrices and arrays": [
                    {
                        "func_name": "sparsefuncs.incr_mean_variance_axis",
                        "func_desc": "Compute incremental mean and variance along an axis on a CSR or CSC matrix.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis.html#sklearn.utils.sparsefuncs.incr_mean_variance_axis",
                        "function_definitions": {
                            "function_name": "incr_mean_variance_axis",
                            "full_function": "sklearn.utils.sparsefuncs.incr_mean_variance_axis(X, *, axis, last_mean, last_var, last_n, weights=None)",
                            "function_text": "Compute incremental mean and variance along an axis on a CSR or CSC matrix. last_mean, last_var are the statistics computed at the last step by this\nfunction. Both must be initialized to 0-arrays of the proper size, i.e.\nthe number of features in X. last_n is the number of samples encountered\nuntil now.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "CSR or CSC sparse matrix of shape (n_samples, n_features)",
                                    "param_desc": "Input data.\n"
                                },
                                {
                                    "param_name": "axis",
                                    "param_type": "{0, 1}",
                                    "param_desc": "Axis along which the axis should be computed.\n"
                                },
                                {
                                    "param_name": "last_mean",
                                    "param_type": "ndarray of shape (n_features,) or (n_samples,), dtype=floating",
                                    "param_desc": "Array of means to update with the new data X.\nShould be of shape (n_features,) if axis=0 or (n_samples,) if axis=1.\n"
                                },
                                {
                                    "param_name": "last_var",
                                    "param_type": "ndarray of shape (n_features,) or (n_samples,), dtype=floating",
                                    "param_desc": "Array of variances to update with the new data X.\nShould be of shape (n_features,) if axis=0 or (n_samples,) if axis=1.\n"
                                },
                                {
                                    "param_name": "last_n",
                                    "param_type": "float or ndarray of shape (n_features,) or (n_samples,),             dtype=floating",
                                    "param_desc": "Sum of the weights seen so far, excluding the current weights\nIf not float, it should be of shape (n_features,) if\naxis=0 or (n_samples,) if axis=1. If float it corresponds to\nhaving same weights for all samples (or features).\n"
                                },
                                {
                                    "param_name": "weights",
                                    "param_type": "ndarray of shape (n_samples,) or (n_features,), default=None",
                                    "param_desc": "If axis is set to 0 shape is (n_samples,) or\nif axis is set to 1 shape is (n_features,).\nIf it is set to None, then samples are equally weighted.\n\nAdded in version 0.24.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "incr_mean_variance_axis",
                            "descriptions": "Compute incremental mean and variance along an axis on a CSR or CSC matrix. last_mean, last_var are the statistics computed at the last step by this\nfunction. Both must be initialized to 0-arrays of the proper size, i.e.\nthe number of features in X. last_n is the number of samples encountered\nuntil now.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "CSR or CSC sparse matrix of shape (n_samples, n_features)",
                                        "description": "CSR or CSC sparse matrix of shape (n_samples, n_features). Input data.\n"
                                    },
                                    "axis": {
                                        "type": "{0, 1}",
                                        "description": "{0, 1}. Axis along which the axis should be computed.\n"
                                    },
                                    "last_mean": {
                                        "type": "float",
                                        "description": "ndarray of shape (n_features,) or (n_samples,), dtype=floating. Array of means to update with the new data X.\nShould be of shape (n_features,) if axis=0 or (n_samples,) if axis=1.\n"
                                    },
                                    "last_var": {
                                        "type": "float",
                                        "description": "ndarray of shape (n_features,) or (n_samples,), dtype=floating. Array of variances to update with the new data X.\nShould be of shape (n_features,) if axis=0 or (n_samples,) if axis=1.\n"
                                    },
                                    "last_n": {
                                        "type": "float",
                                        "description": "float or ndarray of shape (n_features,) or (n_samples,),             dtype=floating. Sum of the weights seen so far, excluding the current weights\nIf not float, it should be of shape (n_features,) if\naxis=0 or (n_samples,) if axis=1. If float it corresponds to\nhaving same weights for all samples (or features).\n"
                                    },
                                    "weights": {
                                        "type": "array",
                                        "description": "ndarray of shape (n_samples,) or (n_features,), default=None. If axis is set to 0 shape is (n_samples,) or\nif axis is set to 1 shape is (n_features,).\nIf it is set to None, then samples are equally weighted.\n\nAdded in version 0.24.\n\n"
                                    }
                                },
                                "required": [
                                    "X"
                                ]
                            }
                        }
                    },
                    {
                        "func_name": "sparsefuncs.inplace_csr_column_scale",
                        "func_desc": "Inplace column scaling of a CSR matrix.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale.html#sklearn.utils.sparsefuncs.inplace_csr_column_scale",
                        "function_definitions": {
                            "function_name": "inplace_csr_column_scale",
                            "full_function": "sklearn.utils.sparsefuncs.inplace_csr_column_scale(X, scale)",
                            "function_text": "Inplace column scaling of a CSR matrix. Scale each feature of the data matrix by multiplying with specific scale\nprovided by the caller assuming a (n_samples, n_features) shape.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "sparse matrix of shape (n_samples, n_features)",
                                    "param_desc": "Matrix to normalize using the variance of the features.\nIt should be of CSR format.\n"
                                },
                                {
                                    "param_name": "scale",
                                    "param_type": "ndarray of shape (n_features,), dtype={np.float32, np.float64}",
                                    "param_desc": "Array of precomputed feature-wise values to use for scaling.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "inplace_csr_column_scale",
                            "descriptions": "Inplace column scaling of a CSR matrix. Scale each feature of the data matrix by multiplying with specific scale\nprovided by the caller assuming a (n_samples, n_features) shape.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "sparse matrix of shape (n_samples, n_features)",
                                        "description": "sparse matrix of shape (n_samples, n_features). Matrix to normalize using the variance of the features.\nIt should be of CSR format.\n"
                                    },
                                    "scale": {
                                        "type": "float",
                                        "description": "ndarray of shape (n_features,), dtype={np.float32, np.float64}. Array of precomputed feature-wise values to use for scaling.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "sparsefuncs.inplace_swap_column",
                        "func_desc": "Swap two columns of a CSC/CSR matrix in-place.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column.html#sklearn.utils.sparsefuncs.inplace_swap_column",
                        "function_definitions": {
                            "function_name": "inplace_swap_column",
                            "full_function": "sklearn.utils.sparsefuncs.inplace_swap_column(X, m, n)",
                            "function_text": "Swap two columns of a CSC/CSR matrix in-place.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "sparse matrix of shape (n_samples, n_features)",
                                    "param_desc": "Matrix whose two columns are to be swapped. It should be of\nCSR or CSC format.\n"
                                },
                                {
                                    "param_name": "m",
                                    "param_type": "int",
                                    "param_desc": "Index of the column of X to be swapped.\n"
                                },
                                {
                                    "param_name": "n",
                                    "param_type": "int",
                                    "param_desc": "Index of the column of X to be swapped.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "inplace_swap_column",
                            "descriptions": "Swap two columns of a CSC/CSR matrix in-place.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "sparse matrix of shape (n_samples, n_features)",
                                        "description": "sparse matrix of shape (n_samples, n_features). Matrix whose two columns are to be swapped. It should be of\nCSR or CSC format.\n"
                                    },
                                    "m": {
                                        "type": "integer",
                                        "description": "int. Index of the column of X to be swapped.\n"
                                    },
                                    "n": {
                                        "type": "integer",
                                        "description": "int. Index of the column of X to be swapped.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "sparsefuncs.mean_variance_axis",
                        "func_desc": "Compute mean and variance along an axis on a CSR or CSC matrix.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis.html#sklearn.utils.sparsefuncs.mean_variance_axis",
                        "function_definitions": {
                            "function_name": "mean_variance_axis",
                            "full_function": "sklearn.utils.sparsefuncs.mean_variance_axis(X, axis, weights=None, return_sum_weights=False)",
                            "function_text": "Compute mean and variance along an axis on a CSR or CSC matrix.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "sparse matrix of shape (n_samples, n_features)",
                                    "param_desc": "Input data. It can be of CSR or CSC format.\n"
                                },
                                {
                                    "param_name": "axis",
                                    "param_type": "{0, 1}",
                                    "param_desc": "Axis along which the axis should be computed.\n"
                                },
                                {
                                    "param_name": "weights",
                                    "param_type": "ndarray of shape (n_samples,) or (n_features,), default=None",
                                    "param_desc": "If axis is set to 0 shape is (n_samples,) or\nif axis is set to 1 shape is (n_features,).\nIf it is set to None, then samples are equally weighted.\n\nAdded in version 0.24.\n\n"
                                },
                                {
                                    "param_name": "return_sum_weights",
                                    "param_type": "bool, default=False",
                                    "param_desc": "If True, returns the sum of weights seen for each feature\nif axis=0 or each sample if axis=1.\n\nAdded in version 0.24.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "mean_variance_axis",
                            "descriptions": "Compute mean and variance along an axis on a CSR or CSC matrix.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "sparse matrix of shape (n_samples, n_features)",
                                        "description": "sparse matrix of shape (n_samples, n_features). Input data. It can be of CSR or CSC format.\n"
                                    },
                                    "axis": {
                                        "type": "{0, 1}",
                                        "description": "{0, 1}. Axis along which the axis should be computed.\n"
                                    },
                                    "weights": {
                                        "type": "array",
                                        "description": "ndarray of shape (n_samples,) or (n_features,), default=None. If axis is set to 0 shape is (n_samples,) or\nif axis is set to 1 shape is (n_features,).\nIf it is set to None, then samples are equally weighted.\n\nAdded in version 0.24.\n\n"
                                    },
                                    "return_sum_weights": {
                                        "type": "boolean",
                                        "description": "bool, default=False. If True, returns the sum of weights seen for each feature\nif axis=0 or each sample if axis=1.\n\nAdded in version 0.24.\n\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "sparsefuncs_fast.inplace_csr_row_normalize_l1",
                        "func_desc": "Normalize inplace the rows of a CSR matrix or array by their L1 norm.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1.html#sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1",
                        "function_definitions": {
                            "function_name": "inplace_csr_row_normalize_l1",
                            "full_function": "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1(X)#",
                            "function_text": "Normalize inplace the rows of a CSR matrix or array by their L1 norm.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "scipy.sparse.csr_matrix and scipy.sparse.csr_array,             shape=(n_samples, n_features)",
                                    "param_desc": "The input matrix or array to be modified inplace.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "inplace_csr_row_normalize_l1",
                            "descriptions": "Normalize inplace the rows of a CSR matrix or array by their L1 norm.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "scipy.sparse.csr_matrix and scipy.sparse.csr_array,             shape=(n_samples, n_features). The input matrix or array to be modified inplace.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "sparsefuncs.inplace_column_scale",
                        "func_desc": "Inplace column scaling of a CSC/CSR matrix.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale.html#sklearn.utils.sparsefuncs.inplace_column_scale",
                        "function_definitions": {
                            "function_name": "inplace_column_scale",
                            "full_function": "sklearn.utils.sparsefuncs.inplace_column_scale(X, scale)",
                            "function_text": "Inplace column scaling of a CSC/CSR matrix. Scale each feature of the data matrix by multiplying with specific scale\nprovided by the caller assuming a (n_samples, n_features) shape.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "sparse matrix of shape (n_samples, n_features)",
                                    "param_desc": "Matrix to normalize using the variance of the features. It should be\nof CSC or CSR format.\n"
                                },
                                {
                                    "param_name": "scale",
                                    "param_type": "ndarray of shape (n_features,), dtype={np.float32, np.float64}",
                                    "param_desc": "Array of precomputed feature-wise values to use for scaling.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "inplace_column_scale",
                            "descriptions": "Inplace column scaling of a CSC/CSR matrix. Scale each feature of the data matrix by multiplying with specific scale\nprovided by the caller assuming a (n_samples, n_features) shape.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "sparse matrix of shape (n_samples, n_features)",
                                        "description": "sparse matrix of shape (n_samples, n_features). Matrix to normalize using the variance of the features. It should be\nof CSC or CSR format.\n"
                                    },
                                    "scale": {
                                        "type": "float",
                                        "description": "ndarray of shape (n_features,), dtype={np.float32, np.float64}. Array of precomputed feature-wise values to use for scaling.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "sparsefuncs.inplace_row_scale",
                        "func_desc": "Inplace row scaling of a CSR or CSC matrix.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale.html#sklearn.utils.sparsefuncs.inplace_row_scale",
                        "function_definitions": {
                            "function_name": "inplace_row_scale",
                            "full_function": "sklearn.utils.sparsefuncs.inplace_row_scale(X, scale)",
                            "function_text": "Inplace row scaling of a CSR or CSC matrix. Scale each row of the data matrix by multiplying with specific scale\nprovided by the caller assuming a (n_samples, n_features) shape.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "sparse matrix of shape (n_samples, n_features)",
                                    "param_desc": "Matrix to be scaled. It should be of CSR or CSC format.\n"
                                },
                                {
                                    "param_name": "scale",
                                    "param_type": "ndarray of shape (n_features,), dtype={np.float32, np.float64}",
                                    "param_desc": "Array of precomputed sample-wise values to use for scaling.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "inplace_row_scale",
                            "descriptions": "Inplace row scaling of a CSR or CSC matrix. Scale each row of the data matrix by multiplying with specific scale\nprovided by the caller assuming a (n_samples, n_features) shape.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "sparse matrix of shape (n_samples, n_features)",
                                        "description": "sparse matrix of shape (n_samples, n_features). Matrix to be scaled. It should be of CSR or CSC format.\n"
                                    },
                                    "scale": {
                                        "type": "float",
                                        "description": "ndarray of shape (n_features,), dtype={np.float32, np.float64}. Array of precomputed sample-wise values to use for scaling.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "sparsefuncs.inplace_swap_row",
                        "func_desc": "Swap two rows of a CSC/CSR matrix in-place.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row.html#sklearn.utils.sparsefuncs.inplace_swap_row",
                        "function_definitions": {
                            "function_name": "inplace_swap_row",
                            "full_function": "sklearn.utils.sparsefuncs.inplace_swap_row(X, m, n)",
                            "function_text": "Swap two rows of a CSC/CSR matrix in-place.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "sparse matrix of shape (n_samples, n_features)",
                                    "param_desc": "Matrix whose two rows are to be swapped. It should be of CSR or\nCSC format.\n"
                                },
                                {
                                    "param_name": "m",
                                    "param_type": "int",
                                    "param_desc": "Index of the row of X to be swapped.\n"
                                },
                                {
                                    "param_name": "n",
                                    "param_type": "int",
                                    "param_desc": "Index of the row of X to be swapped.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "inplace_swap_row",
                            "descriptions": "Swap two rows of a CSC/CSR matrix in-place.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "sparse matrix of shape (n_samples, n_features)",
                                        "description": "sparse matrix of shape (n_samples, n_features). Matrix whose two rows are to be swapped. It should be of CSR or\nCSC format.\n"
                                    },
                                    "m": {
                                        "type": "integer",
                                        "description": "int. Index of the row of X to be swapped.\n"
                                    },
                                    "n": {
                                        "type": "integer",
                                        "description": "int. Index of the row of X to be swapped.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "sparsefuncs_fast.inplace_csr_row_normalize_l2",
                        "func_desc": "Normalize inplace the rows of a CSR matrix or array by their L2 norm.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2.html#sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2",
                        "function_definitions": {
                            "function_name": "inplace_csr_row_normalize_l2",
                            "full_function": "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2(X)#",
                            "function_text": "Normalize inplace the rows of a CSR matrix or array by their L2 norm.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "scipy.sparse.csr_matrix, shape=(n_samples, n_features)",
                                    "param_desc": "The input matrix or array to be modified inplace.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "inplace_csr_row_normalize_l2",
                            "descriptions": "Normalize inplace the rows of a CSR matrix or array by their L2 norm.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "scipy.sparse.csr_matrix, shape=(n_samples, n_features)",
                                        "description": "scipy.sparse.csr_matrix, shape=(n_samples, n_features). The input matrix or array to be modified inplace.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    }
                ]
            },
            {
                "Working with graphs": [
                    {
                        "func_name": "graph.single_source_shortest_path_length",
                        "func_desc": "Return the length of the shortest path from source to all reachable nodes.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.graph.single_source_shortest_path_length.html#sklearn.utils.graph.single_source_shortest_path_length",
                        "function_definitions": {
                            "function_name": "single_source_shortest_path_length",
                            "full_function": "sklearn.utils.graph.single_source_shortest_path_length(graph, source, *, cutoff=None)",
                            "function_text": "Return the length of the shortest path from source to all reachable nodes.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "graph",
                                    "param_type": "{array-like, sparse matrix} of shape (n_nodes, n_nodes)",
                                    "param_desc": "Adjacency matrix of the graph. Sparse matrix of format LIL is\npreferred.\n"
                                },
                                {
                                    "param_name": "source",
                                    "param_type": "int",
                                    "param_desc": "Start node for path.\n"
                                },
                                {
                                    "param_name": "cutoff",
                                    "param_type": "int, default=None",
                                    "param_desc": "Depth to stop the search - only paths of length <= cutoff are returned.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "single_source_shortest_path_length",
                            "descriptions": "Return the length of the shortest path from source to all reachable nodes.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "graph": {
                                        "type": "array",
                                        "description": "{array-like, sparse matrix} of shape (n_nodes, n_nodes). Adjacency matrix of the graph. Sparse matrix of format LIL is\npreferred.\n"
                                    },
                                    "source": {
                                        "type": "integer",
                                        "description": "int. Start node for path.\n"
                                    },
                                    "cutoff": {
                                        "type": "integer",
                                        "description": "int, default=None. Depth to stop the search - only paths of length <= cutoff are returned.\n"
                                    }
                                },
                                "required": [
                                    "graph",
                                    "source"
                                ]
                            }
                        }
                    }
                ]
            },
            {
                "Random sampling": [
                    {
                        "func_name": "random.sample_without_replacement",
                        "func_desc": "Sample integers without replacement.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.random.sample_without_replacement.html#sklearn.utils.random.sample_without_replacement",
                        "function_definitions": {
                            "function_name": "sample_without_replacement",
                            "full_function": "sklearn.utils.random.sample_without_replacement(n_population, n_samples, method='auto', random_state=None)#",
                            "function_text": "Sample integers without replacement. Select n_samples integers from the set [0, n_population) without\nreplacement.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "n_population",
                                    "param_type": "int",
                                    "param_desc": "The size of the set to sample from.\n"
                                },
                                {
                                    "param_name": "n_samples",
                                    "param_type": "int",
                                    "param_desc": "The number of integer to sample.\n"
                                },
                                {
                                    "param_name": "random_state",
                                    "param_type": "int, RandomState instance or None, default=None",
                                    "param_desc": "If int, random_state is the seed used by the random number generator;\nIf RandomState instance, random_state is the random number generator;\nIf None, the random number generator is the RandomState instance used\nby np.random.\n"
                                },
                                {
                                    "param_name": "method",
                                    "param_type": "{\u201cauto\u201d, \u201ctracking_selection\u201d, \u201creservoir_sampling\u201d, \u201cpool\u201d},             default=\u2019auto\u2019",
                                    "param_desc": "If method == \u201cauto\u201d, the ratio of n_samples / n_population is used\nto determine which algorithm to use:\nIf ratio is between 0 and 0.01, tracking selection is used.\nIf ratio is between 0.01 and 0.99, numpy.random.permutation is used.\nIf ratio is greater than 0.99, reservoir sampling is used.\nThe order of the selected integers is undefined. If a random order is\ndesired, the selected subset should be shuffled.\nIf method ==\u201dtracking_selection\u201d, a set based implementation is used\nwhich is suitable for n_samples <<< n_population.\nIf method == \u201creservoir_sampling\u201d, a reservoir sampling algorithm is\nused which is suitable for high memory constraint or when\nO(n_samples) ~ O(n_population).\nThe order of the selected integers is undefined. If a random order is\ndesired, the selected subset should be shuffled.\nIf method == \u201cpool\u201d, a pool based algorithm is particularly fast, even\nfaster than the tracking selection method. However, a vector containing\nthe entire population has to be initialized.\nIf n_samples ~ n_population, the reservoir sampling method is faster.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "sample_without_replacement",
                            "descriptions": "Sample integers without replacement. Select n_samples integers from the set [0, n_population) without\nreplacement.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "n_population": {
                                        "type": "integer",
                                        "description": "int. The size of the set to sample from.\n"
                                    },
                                    "n_samples": {
                                        "type": "integer",
                                        "description": "int. The number of integer to sample.\n"
                                    },
                                    "random_state": {
                                        "type": "integer",
                                        "description": "int, RandomState instance or None, default=None. If int, random_state is the seed used by the random number generator;\nIf RandomState instance, random_state is the random number generator;\nIf None, the random number generator is the RandomState instance used\nby np.random.\n"
                                    },
                                    "method": {
                                        "type": "{\u201cauto\u201d, \u201ctracking_selection\u201d, \u201creservoir_sampling\u201d, \u201cpool\u201d},             default=\u2019auto\u2019",
                                        "description": "{\u201cauto\u201d, \u201ctracking_selection\u201d, \u201creservoir_sampling\u201d, \u201cpool\u201d},             default=\u2019auto\u2019. If method == \u201cauto\u201d, the ratio of n_samples / n_population is used\nto determine which algorithm to use:\nIf ratio is between 0 and 0.01, tracking selection is used.\nIf ratio is between 0.01 and 0.99, numpy.random.permutation is used.\nIf ratio is greater than 0.99, reservoir sampling is used.\nThe order of the selected integers is undefined. If a random order is\ndesired, the selected subset should be shuffled.\nIf method ==\u201dtracking_selection\u201d, a set based implementation is used\nwhich is suitable for n_samples <<< n_population.\nIf method == \u201creservoir_sampling\u201d, a reservoir sampling algorithm is\nused which is suitable for high memory constraint or when\nO(n_samples) ~ O(n_population).\nThe order of the selected integers is undefined. If a random order is\ndesired, the selected subset should be shuffled.\nIf method == \u201cpool\u201d, a pool based algorithm is particularly fast, even\nfaster than the tracking selection method. However, a vector containing\nthe entire population has to be initialized.\nIf n_samples ~ n_population, the reservoir sampling method is faster.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    }
                ]
            },
            {
                "Auxiliary functions that operate on arrays": [
                    {
                        "func_name": "arrayfuncs.min_pos",
                        "func_desc": "Find the minimum value of an array over positive values.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.arrayfuncs.min_pos.html#sklearn.utils.arrayfuncs.min_pos",
                        "function_definitions": {
                            "function_name": "min_pos",
                            "full_function": "sklearn.utils.arrayfuncs.min_pos(X)#",
                            "function_text": "Find the minimum value of an array over positive values. Returns the maximum representable value of the input dtype if none of the\nvalues are positive.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "X",
                                    "param_type": "ndarray of shape (n,)",
                                    "param_desc": "Input array.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "min_pos",
                            "descriptions": "Find the minimum value of an array over positive values. Returns the maximum representable value of the input dtype if none of the\nvalues are positive.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "X": {
                                        "type": "array",
                                        "description": "ndarray of shape (n,). Input array.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    }
                ]
            },
            {
                "Metadata routing": [
                    {
                        "func_name": "metadata_routing.MetadataRequest",
                        "func_desc": "Contains the metadata request info of a consumer.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.metadata_routing.MetadataRequest.html#sklearn.utils.metadata_routing.MetadataRequest",
                        "function_definitions": {
                            "function_name": "MetadataRequest",
                            "full_function": "class sklearn.utils.metadata_routing.MetadataRequest(owner)",
                            "function_text": "Contains the metadata request info of a consumer. Instances of MethodMetadataRequest are used in this class for each\navailable method under metadatarequest.{method}. Consumer-only classes such as simple estimators return a serialized\nversion of this class as the output of get_metadata_routing(). Added in version 1.3.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "method",
                                    "param_type": "str",
                                    "param_desc": "The name of the method to check.\n"
                                },
                                {
                                    "param_name": "params",
                                    "param_type": "iterable of str",
                                    "param_desc": "An iterable of parameters to check.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "MetadataRequest",
                            "descriptions": "Contains the metadata request info of a consumer. Instances of MethodMetadataRequest are used in this class for each\navailable method under metadatarequest.{method}. Consumer-only classes such as simple estimators return a serialized\nversion of this class as the output of get_metadata_routing(). Added in version 1.3.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "method": {
                                        "type": "string",
                                        "description": "str. The name of the method to check.\n"
                                    },
                                    "params": {
                                        "type": "string",
                                        "description": "iterable of str. An iterable of parameters to check.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "metadata_routing.MethodMapping",
                        "func_desc": "Stores the mapping between caller and callee methods for a router.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.metadata_routing.MethodMapping.html#sklearn.utils.metadata_routing.MethodMapping",
                        "function_definitions": {
                            "function_name": "MethodMapping",
                            "full_function": "class sklearn.utils.metadata_routing.MethodMapping",
                            "function_text": "Stores the mapping between caller and callee methods for a router. This class is primarily used in a get_metadata_routing() of a router\nobject when defining the mapping between a sub-object (a sub-estimator or a\nscorer) to the router\u2019s methods. It stores a collection of namedtuples. Iterating through an instance of this class will yield named\nMethodPair(caller, callee) tuples. Added in version 1.3. Add a method mapping.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "caller",
                                    "param_type": "str",
                                    "param_desc": "Parent estimator\u2019s method name in which the callee is called.\n"
                                },
                                {
                                    "param_name": "callee",
                                    "param_type": "str",
                                    "param_desc": "Child object\u2019s method name. This method is called in caller.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "MethodMapping",
                            "descriptions": "Stores the mapping between caller and callee methods for a router. This class is primarily used in a get_metadata_routing() of a router\nobject when defining the mapping between a sub-object (a sub-estimator or a\nscorer) to the router\u2019s methods. It stores a collection of namedtuples. Iterating through an instance of this class will yield named\nMethodPair(caller, callee) tuples. Added in version 1.3. Add a method mapping.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "caller": {
                                        "type": "string",
                                        "description": "str. Parent estimator\u2019s method name in which the callee is called.\n"
                                    },
                                    "callee": {
                                        "type": "string",
                                        "description": "str. Child object\u2019s method name. This method is called in caller.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "metadata_routing.process_routing",
                        "func_desc": "Validate and route input parameters.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.metadata_routing.process_routing.html#sklearn.utils.metadata_routing.process_routing",
                        "function_definitions": {
                            "function_name": "process_routing",
                            "full_function": "sklearn.utils.metadata_routing.process_routing(_obj, _method, /, **kwargs)",
                            "function_text": "Validate and route input parameters. This function is used inside a router\u2019s method, e.g. fit,\nto validate the metadata and handle the routing. Assuming this signature of a router\u2019s fit method:\nfit(self, X, y, sample_weight=None, **fit_params),\na call to this function would be:\nprocess_routing(self, \"fit\", sample_weight=sample_weight, **fit_params). Note that if routing is not enabled and kwargs is empty, then it\nreturns an empty routing where process_routing(...).ANYTHING.ANY_METHOD\nis always an empty dictionary. Added in version 1.3.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/glossary.html#term-fit",
                            "parameter_names_desc": [
                                {
                                    "param_name": "_obj",
                                    "param_type": "object",
                                    "param_desc": "An object implementing get_metadata_routing. Typically a\nmeta-estimator.\n"
                                },
                                {
                                    "param_name": "_method",
                                    "param_type": "str",
                                    "param_desc": "The name of the router\u2019s method in which this function is called.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "process_routing",
                            "descriptions": "Validate and route input parameters. This function is used inside a router\u2019s method, e.g. fit,\nto validate the metadata and handle the routing. Assuming this signature of a router\u2019s fit method:\nfit(self, X, y, sample_weight=None, **fit_params),\na call to this function would be:\nprocess_routing(self, \"fit\", sample_weight=sample_weight, **fit_params). Note that if routing is not enabled and kwargs is empty, then it\nreturns an empty routing where process_routing(...).ANYTHING.ANY_METHOD\nis always an empty dictionary. Added in version 1.3.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "_obj": {
                                        "type": "object",
                                        "description": "object. An object implementing get_metadata_routing. Typically a\nmeta-estimator.\n"
                                    },
                                    "_method": {
                                        "type": "string",
                                        "description": "str. The name of the router\u2019s method in which this function is called.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "metadata_routing.MetadataRouter",
                        "func_desc": "Stores and handles metadata routing for a router object.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.metadata_routing.MetadataRouter.html#sklearn.utils.metadata_routing.MetadataRouter",
                        "function_definitions": {
                            "function_name": "MetadataRouter",
                            "full_function": "class sklearn.utils.metadata_routing.MetadataRouter(owner)",
                            "function_text": "Stores and handles metadata routing for a router object. This class is used by router objects to store and handle metadata routing.\nRouting information is stored as a dictionary of the form {\"object_name\":\nRouteMappingPair(method_mapping, routing_info)}, where method_mapping\nis an instance of MethodMapping and\nrouting_info is either a\nMetadataRequest or a\nMetadataRouter instance. Added in version 1.3.",
                            "func_text_user_guide": "sklearn.utils.metadata_routing.MethodMapping.html#sklearn.utils.metadata_routing.MethodMapping",
                            "parameter_names_desc": [
                                {
                                    "param_name": "method",
                                    "param_type": "str",
                                    "param_desc": "The name of the method for which the parameters are requested and\nrouted. If called inside the fit method of a router, it\nwould be \"fit\".\n"
                                },
                                {
                                    "param_name": "params",
                                    "param_type": "dict",
                                    "param_desc": "A dictionary of provided metadata.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "MetadataRouter",
                            "descriptions": "Stores and handles metadata routing for a router object. This class is used by router objects to store and handle metadata routing.\nRouting information is stored as a dictionary of the form {\"object_name\":\nRouteMappingPair(method_mapping, routing_info)}, where method_mapping\nis an instance of MethodMapping and\nrouting_info is either a\nMetadataRequest or a\nMetadataRouter instance. Added in version 1.3.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "method": {
                                        "type": "string",
                                        "description": "str. The name of the method for which the parameters are requested and\nrouted. If called inside the fit method of a router, it\nwould be \"fit\".\n"
                                    },
                                    "params": {
                                        "type": "dict",
                                        "description": "dict. A dictionary of provided metadata.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "metadata_routing.get_routing_for_object",
                        "func_desc": "Get a Metadata{Router, Request} instance from the given object.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.metadata_routing.get_routing_for_object.html#sklearn.utils.metadata_routing.get_routing_for_object",
                        "function_definitions": {
                            "function_name": "get_routing_for_object",
                            "full_function": "sklearn.utils.metadata_routing.get_routing_for_object(obj=None)",
                            "function_text": "Get a Metadata{Router, Request} instance from the given object. This function returns a\nMetadataRouter or a\nMetadataRequest from the given input. This function always returns a copy or an instance constructed from the\ninput, such that changing the output of this function will not change the\noriginal object. Added in version 1.3.",
                            "func_text_user_guide": "sklearn.utils.metadata_routing.MetadataRouter.html#sklearn.utils.metadata_routing.MetadataRouter",
                            "parameter_names_desc": [
                                {
                                    "param_name": "obj",
                                    "param_type": "object",
                                    "param_desc": "\n\nIf the object provides a get_metadata_routing method, return a copyof the output of that method.\n\n\n\n\nIf the object is already aMetadataRequest or a\nMetadataRouter, return a copy\nof that.\n\n\n\n\nReturns an empty MetadataRequestotherwise.\n\n\n\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "get_routing_for_object",
                            "descriptions": "Get a Metadata{Router, Request} instance from the given object. This function returns a\nMetadataRouter or a\nMetadataRequest from the given input. This function always returns a copy or an instance constructed from the\ninput, such that changing the output of this function will not change the\noriginal object. Added in version 1.3.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "obj": {
                                        "type": "object",
                                        "description": "object. \n\nIf the object provides a get_metadata_routing method, return a copyof the output of that method.\n\n\n\n\nIf the object is already aMetadataRequest or a\nMetadataRouter, return a copy\nof that.\n\n\n\n\nReturns an empty MetadataRequestotherwise.\n\n\n\n\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    }
                ]
            },
            {
                "Discovering scikit-learn objects": [
                    {
                        "func_name": "discovery.all_displays",
                        "func_desc": "Get a list of all displays from sklearn.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.discovery.all_displays.html#sklearn.utils.discovery.all_displays",
                        "function_definitions": {
                            "function_name": "all_displays",
                            "full_function": "sklearn.utils.discovery.all_displays()",
                            "function_text": "Get a list of all displays from sklearn.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": []
                        },
                        "function_calling": {}
                    }
                ]
            },
            {
                "API compatibility checkers": [
                    {
                        "func_name": "estimator_checks.check_estimator",
                        "func_desc": "Check if estimator adheres to scikit-learn conventions.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.estimator_checks.check_estimator.html#sklearn.utils.estimator_checks.check_estimator",
                        "function_definitions": {
                            "function_name": "check_estimator",
                            "full_function": "sklearn.utils.estimator_checks.check_estimator(estimator=None, generate_only=False)",
                            "function_text": "Check if estimator adheres to scikit-learn conventions. This function will run an extensive test-suite for input validation,\nshapes, etc, making sure that the estimator complies with scikit-learn\nconventions as detailed in Rolling your own estimator.\nAdditional tests for classifiers, regressors, clustering or transformers\nwill be run if the Estimator class inherits from the corresponding mixin\nfrom sklearn.base. Setting generate_only=True returns a generator that yields (estimator,\ncheck) tuples where the check can be called independently from each\nother, i.e. check(estimator). This allows all checks to be run\nindependently and report the checks that are failing. scikit-learn provides a pytest specific decorator,\nparametrize_with_checks, making it\neasier to test multiple estimators.",
                            "func_text_user_guide": "https://scikit-learn.org/stable/developers/developers/develop.html#rolling-your-own-estimator",
                            "parameter_names_desc": [
                                {
                                    "param_name": "estimator",
                                    "param_type": "estimator object",
                                    "param_desc": "Estimator instance to check.\n\nAdded in version 1.1: Passing a class was deprecated in version 0.23, and support for\nclasses was removed in 0.24.\n\n"
                                },
                                {
                                    "param_name": "generate_only",
                                    "param_type": "bool, default=False",
                                    "param_desc": "When False, checks are evaluated when check_estimator is called.\nWhen True, check_estimator returns a generator that yields\n(estimator, check) tuples. The check is run by calling\ncheck(estimator).\n\nAdded in version 0.22.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "check_estimator",
                            "descriptions": "Check if estimator adheres to scikit-learn conventions. This function will run an extensive test-suite for input validation,\nshapes, etc, making sure that the estimator complies with scikit-learn\nconventions as detailed in Rolling your own estimator.\nAdditional tests for classifiers, regressors, clustering or transformers\nwill be run if the Estimator class inherits from the corresponding mixin\nfrom sklearn.base. Setting generate_only=True returns a generator that yields (estimator,\ncheck) tuples where the check can be called independently from each\nother, i.e. check(estimator). This allows all checks to be run\nindependently and report the checks that are failing. scikit-learn provides a pytest specific decorator,\nparametrize_with_checks, making it\neasier to test multiple estimators.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "estimator": {
                                        "type": "object",
                                        "description": "estimator object. Estimator instance to check.\n\nAdded in version 1.1: Passing a class was deprecated in version 0.23, and support for\nclasses was removed in 0.24.\n\n"
                                    },
                                    "generate_only": {
                                        "type": "boolean",
                                        "description": "bool, default=False. When False, checks are evaluated when check_estimator is called.\nWhen True, check_estimator returns a generator that yields\n(estimator, check) tuples. The check is run by calling\ncheck(estimator).\n\nAdded in version 0.22.\n\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "estimator_checks.parametrize_with_checks",
                        "func_desc": "Pytest specific decorator for parametrizing estimator checks.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks.html#sklearn.utils.estimator_checks.parametrize_with_checks",
                        "function_definitions": {
                            "function_name": "parametrize_with_checks",
                            "full_function": "sklearn.utils.estimator_checks.parametrize_with_checks(estimators)",
                            "function_text": "Pytest specific decorator for parametrizing estimator checks. The id of each check is set to be a pprint version of the estimator\nand the name of the check with its keyword arguments.\nThis allows to use pytest -k to specify which tests to run:",
                            "func_text_user_guide": "sklearn.utils.estimator_checks.check_estimator.html#sklearn.utils.estimator_checks.check_estimator",
                            "parameter_names_desc": [
                                {
                                    "param_name": "estimators",
                                    "param_type": "list of estimators instances",
                                    "param_desc": "Estimators to generated checks for.\n\nChanged in version 0.24: Passing a class was deprecated in version 0.23, and support for\nclasses was removed in 0.24. Pass an instance instead.\n\n\nAdded in version 0.24.\n\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "parametrize_with_checks",
                            "descriptions": "Pytest specific decorator for parametrizing estimator checks. The id of each check is set to be a pprint version of the estimator\nand the name of the check with its keyword arguments.\nThis allows to use pytest -k to specify which tests to run:",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "estimators": {
                                        "type": "array",
                                        "description": "list of estimators instances. Estimators to generated checks for.\n\nChanged in version 0.24: Passing a class was deprecated in version 0.23, and support for\nclasses was removed in 0.24. Pass an instance instead.\n\n\nAdded in version 0.24.\n\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    }
                ]
            },
            {
                "Parallel computing": [
                    {
                        "func_name": "parallel.Parallel",
                        "func_desc": "Tweak of joblib.Parallel that propagates the scikit-learn configuration.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.parallel.Parallel.html#sklearn.utils.parallel.Parallel",
                        "function_definitions": {
                            "function_name": "Parallel",
                            "full_function": "class sklearn.utils.parallel.Parallel(n_jobs=default(None), backend=default(None), return_as='list', verbose=default(0), timeout=None, pre_dispatch='2 * n_jobs', batch_size='auto', temp_folder=default(None), max_nbytes=default('1M'), mmap_mode=default('r'), prefer=default(None), require=default(None))",
                            "function_text": "Tweak of joblib.Parallel that propagates the scikit-learn configuration. This subclass of joblib.Parallel ensures that the active configuration\n(thread-local) of scikit-learn is propagated to the parallel workers for the\nduration of the execution of the parallel tasks. The API does not change and you can refer to joblib.Parallel\ndocumentation for more details. Added in version 1.3. Dispatch the tasks and return the results.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "iterable",
                                    "param_type": "iterable",
                                    "param_desc": "Iterable containing tuples of (delayed_function, args, kwargs) that should\nbe consumed.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "Parallel",
                            "descriptions": "Tweak of joblib.Parallel that propagates the scikit-learn configuration. This subclass of joblib.Parallel ensures that the active configuration\n(thread-local) of scikit-learn is propagated to the parallel workers for the\nduration of the execution of the parallel tasks. The API does not change and you can refer to joblib.Parallel\ndocumentation for more details. Added in version 1.3. Dispatch the tasks and return the results.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "iterable": {
                                        "type": "iterable",
                                        "description": "iterable. Iterable containing tuples of (delayed_function, args, kwargs) that should\nbe consumed.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "parallel.delayed",
                        "func_desc": "Decorator used to capture the arguments of a function.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.parallel.delayed.html#sklearn.utils.parallel.delayed",
                        "function_definitions": {
                            "function_name": "delayed",
                            "full_function": "sklearn.utils.parallel.delayed(function)",
                            "function_text": "Decorator used to capture the arguments of a function. This alternative to joblib.delayed is meant to be used in conjunction\nwith sklearn.utils.parallel.Parallel. The latter captures the scikit-\nlearn configuration by calling sklearn.get_config() in the current\nthread, prior to dispatching the first task. The captured configuration is\nthen propagated and enabled for the duration of the execution of the\ndelayed function in the joblib workers. Changed in version 1.3: delayed was moved from sklearn.utils.fixes to sklearn.utils.parallel\nin scikit-learn 1.3.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "function",
                                    "param_type": "callable",
                                    "param_desc": "The function to be delayed.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "delayed",
                            "descriptions": "Decorator used to capture the arguments of a function. This alternative to joblib.delayed is meant to be used in conjunction\nwith sklearn.utils.parallel.Parallel. The latter captures the scikit-\nlearn configuration by calling sklearn.get_config() in the current\nthread, prior to dispatching the first task. The captured configuration is\nthen propagated and enabled for the duration of the execution of the\ndelayed function in the joblib workers. Changed in version 1.3: delayed was moved from sklearn.utils.fixes to sklearn.utils.parallel\nin scikit-learn 1.3.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "function": {
                                        "type": "object",
                                        "description": "callable. The function to be delayed.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    }
                ]
            }
        ],
        "name": "sklearn.utils",
        "url": "https://scikit-learn.org/stable/api/sklearn.utils.html"
    },
    "deprecated.html": {
        "functions": [
            {
                "defaults": [
                    {
                        "func_name": "utils.discovery.all_estimators",
                        "func_desc": "Get a list of all estimators from sklearn.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.discovery.all_estimators.html#sklearn.utils.discovery.all_estimators",
                        "function_definitions": {
                            "function_name": "all_estimators",
                            "full_function": "sklearn.utils.discovery.all_estimators(type_filter=None)",
                            "function_text": "Get a list of all estimators from sklearn. This function crawls the module and gets all classes that inherit\nfrom BaseEstimator. Classes that are defined in test-modules are not\nincluded.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": [
                                {
                                    "param_name": "type_filter",
                                    "param_type": "{\u201cclassifier\u201d, \u201cregressor\u201d, \u201ccluster\u201d, \u201ctransformer\u201d}             or list of such str, default=None",
                                    "param_desc": "Which kind of estimators should be returned. If None, no filter is\napplied and all estimators are returned.  Possible values are\n\u2018classifier\u2019, \u2018regressor\u2019, \u2018cluster\u2019 and \u2018transformer\u2019 to get\nestimators only of these specific types, or a list of these to\nget the estimators that fit at least one of the types.\n"
                                }
                            ]
                        },
                        "function_calling": {
                            "name": "all_estimators",
                            "descriptions": "Get a list of all estimators from sklearn. This function crawls the module and gets all classes that inherit\nfrom BaseEstimator. Classes that are defined in test-modules are not\nincluded.",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "type_filter": {
                                        "type": "string",
                                        "description": "{\u201cclassifier\u201d, \u201cregressor\u201d, \u201ccluster\u201d, \u201ctransformer\u201d}             or list of such str, default=None. Which kind of estimators should be returned. If None, no filter is\napplied and all estimators are returned.  Possible values are\n\u2018classifier\u2019, \u2018regressor\u2019, \u2018cluster\u2019 and \u2018transformer\u2019 to get\nestimators only of these specific types, or a list of these to\nget the estimators that fit at least one of the types.\n"
                                    }
                                },
                                "required": []
                            }
                        }
                    },
                    {
                        "func_name": "utils.discovery.all_functions",
                        "func_desc": "Get a list of all functions from sklearn.",
                        "func_url": "https://scikit-learn.org/stable/modules/generated/sklearn.utils.discovery.all_functions.html#sklearn.utils.discovery.all_functions",
                        "function_definitions": {
                            "function_name": "all_functions",
                            "full_function": "sklearn.utils.discovery.all_functions()",
                            "function_text": "Get a list of all functions from sklearn.",
                            "func_text_user_guide": "",
                            "parameter_names_desc": []
                        },
                        "function_calling": {}
                    }
                ]
            }
        ],
        "name": "Recently Deprecated",
        "url": "https://scikit-learn.org/stable/api/deprecated.html"
    }
}